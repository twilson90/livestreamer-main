var core = (function (exports) {
  'use strict';

  var commonjsGlobal$2 = typeof globalThis !== 'undefined' ? globalThis : typeof window !== 'undefined' ? window : typeof global !== 'undefined' ? global : typeof self !== 'undefined' ? self : {};

  var lib$1 = {exports: {}};

  (function (module, exports) {
  	!function(r,n){module.exports=n();}("undefined"!=typeof self?self:commonjsGlobal$2,(function(){return function(r){var n={};function e(t){if(n[t])return n[t].exports;var o=n[t]={i:t,l:!1,exports:{}};return r[t].call(o.exports,o,o.exports,e),o.l=!0,o.exports}return e.m=r,e.c=n,e.d=function(r,n,t){e.o(r,n)||Object.defineProperty(r,n,{enumerable:!0,get:t});},e.r=function(r){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(r,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(r,"__esModule",{value:!0});},e.t=function(r,n){if(1&n&&(r=e(r)),8&n)return r;if(4&n&&"object"==typeof r&&r&&r.__esModule)return r;var t=Object.create(null);if(e.r(t),Object.defineProperty(t,"default",{enumerable:!0,value:r}),2&n&&"string"!=typeof r)for(var o in r)e.d(t,o,function(n){return r[n]}.bind(null,o));return t},e.n=function(r){var n=r&&r.__esModule?function(){return r.default}:function(){return r};return e.d(n,"a",n),n},e.o=function(r,n){return Object.prototype.hasOwnProperty.call(r,n)},e.p="",e(e.s=0)}([function(r,n,e){e.r(n),e.d(n,"md5",(function(){return p}));var t="0123456789abcdef".split("");var o=function(r){for(var n="",e=0;e<4;e++)n+=t[r>>8*e+4&15]+t[r>>8*e&15];return n};var u=function(r){for(var n=r.length,e=0;e<n;e++)r[e]=o(r[e]);return r.join("")};var f=function(r,n){return r+n&4294967295};var i=function(r,n,e,t,o,u,i){return function(r,n,e){return f(r<<n|r>>>32-n,e)}(n=function(r,n,e,t){return n=f(f(n,r),f(e,t))}(r,n,t,u),o,e)};var a=function(r,n,e,t,o,u,f,a){return i(e&t|~e&o,n,e,u,f,a)};var c=function(r,n,e,t,o,u,f,a){return i(e&o|t&~o,n,e,u,f,a)};var l=function(r,n,e,t,o,u,f,a){return i(e^t^o,n,e,u,f,a)};var d=function(r,n,e,t,o,u,f,a){return i(t^(e|~o),n,e,u,f,a)};var v=function(r,n,e){void 0===e&&(e=f);var t=r[0],o=r[1],u=r[2],i=r[3],v=a.bind(null,e);t=v(t,o,u,i,n[0],7,-680876936),i=v(i,t,o,u,n[1],12,-389564586),u=v(u,i,t,o,n[2],17,606105819),o=v(o,u,i,t,n[3],22,-1044525330),t=v(t,o,u,i,n[4],7,-176418897),i=v(i,t,o,u,n[5],12,1200080426),u=v(u,i,t,o,n[6],17,-1473231341),o=v(o,u,i,t,n[7],22,-45705983),t=v(t,o,u,i,n[8],7,1770035416),i=v(i,t,o,u,n[9],12,-1958414417),u=v(u,i,t,o,n[10],17,-42063),o=v(o,u,i,t,n[11],22,-1990404162),t=v(t,o,u,i,n[12],7,1804603682),i=v(i,t,o,u,n[13],12,-40341101),u=v(u,i,t,o,n[14],17,-1502002290),o=v(o,u,i,t,n[15],22,1236535329);var s=c.bind(null,e);t=s(t,o,u,i,n[1],5,-165796510),i=s(i,t,o,u,n[6],9,-1069501632),u=s(u,i,t,o,n[11],14,643717713),o=s(o,u,i,t,n[0],20,-373897302),t=s(t,o,u,i,n[5],5,-701558691),i=s(i,t,o,u,n[10],9,38016083),u=s(u,i,t,o,n[15],14,-660478335),o=s(o,u,i,t,n[4],20,-405537848),t=s(t,o,u,i,n[9],5,568446438),i=s(i,t,o,u,n[14],9,-1019803690),u=s(u,i,t,o,n[3],14,-187363961),o=s(o,u,i,t,n[8],20,1163531501),t=s(t,o,u,i,n[13],5,-1444681467),i=s(i,t,o,u,n[2],9,-51403784),u=s(u,i,t,o,n[7],14,1735328473),o=s(o,u,i,t,n[12],20,-1926607734);var b=l.bind(null,e);t=b(t,o,u,i,n[5],4,-378558),i=b(i,t,o,u,n[8],11,-2022574463),u=b(u,i,t,o,n[11],16,1839030562),o=b(o,u,i,t,n[14],23,-35309556),t=b(t,o,u,i,n[1],4,-1530992060),i=b(i,t,o,u,n[4],11,1272893353),u=b(u,i,t,o,n[7],16,-155497632),o=b(o,u,i,t,n[10],23,-1094730640),t=b(t,o,u,i,n[13],4,681279174),i=b(i,t,o,u,n[0],11,-358537222),u=b(u,i,t,o,n[3],16,-722521979),o=b(o,u,i,t,n[6],23,76029189),t=b(t,o,u,i,n[9],4,-640364487),i=b(i,t,o,u,n[12],11,-421815835),u=b(u,i,t,o,n[15],16,530742520),o=b(o,u,i,t,n[2],23,-995338651);var p=d.bind(null,e);t=p(t,o,u,i,n[0],6,-198630844),i=p(i,t,o,u,n[7],10,1126891415),u=p(u,i,t,o,n[14],15,-1416354905),o=p(o,u,i,t,n[5],21,-57434055),t=p(t,o,u,i,n[12],6,1700485571),i=p(i,t,o,u,n[3],10,-1894986606),u=p(u,i,t,o,n[10],15,-1051523),o=p(o,u,i,t,n[1],21,-2054922799),t=p(t,o,u,i,n[8],6,1873313359),i=p(i,t,o,u,n[15],10,-30611744),u=p(u,i,t,o,n[6],15,-1560198380),o=p(o,u,i,t,n[13],21,1309151649),t=p(t,o,u,i,n[4],6,-145523070),i=p(i,t,o,u,n[11],10,-1120210379),u=p(u,i,t,o,n[2],15,718787259),o=p(o,u,i,t,n[9],21,-343485551),r[0]=e(t,r[0]),r[1]=e(o,r[1]),r[2]=e(u,r[2]),r[3]=e(i,r[3]);};var s=function(r){for(var n=[],e=0;e<64;e+=4)n[e>>2]=r.charCodeAt(e)+(r.charCodeAt(e+1)<<8)+(r.charCodeAt(e+2)<<16)+(r.charCodeAt(e+3)<<24);return n};var b=function(r,n){var e,t=r.length,o=[1732584193,-271733879,-1732584194,271733878];for(e=64;e<=t;e+=64)v(o,s(r.substring(e-64,e)),n);var u=[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],f=(r=r.substring(e-64)).length;for(e=0;e<f;e++)u[e>>2]|=r.charCodeAt(e)<<(e%4<<3);if(u[e>>2]|=128<<(e%4<<3),e>55)for(v(o,u,n),e=16;e--;)u[e]=0;return u[14]=8*t,v(o,u,n),o};function p(r){var n;return "5d41402abc4b2a76b9719d911017c592"!==u(b("hello"))&&(n=function(r,n){var e=(65535&r)+(65535&n);return (r>>16)+(n>>16)+(e>>16)<<16|65535&e}),u(b(r,n))}}])}));
  	
  } (lib$1));

  var libExports = lib$1.exports;

  var _marked$1 = /*#__PURE__*/_regeneratorRuntime$1().mark(iterate_unique);
  function asyncGeneratorStep$1(n, t, e, r, o, a, c) { try { var i = n[a](c), u = i.value; } catch (n) { return void e(n); } i.done ? t(u) : Promise.resolve(u).then(r, o); }
  function _asyncToGenerator$1(n) { return function () { var t = this, e = arguments; return new Promise(function (r, o) { var a = n.apply(t, e); function _next(n) { asyncGeneratorStep$1(a, r, o, _next, _throw, "next", n); } function _throw(n) { asyncGeneratorStep$1(a, r, o, _next, _throw, "throw", n); } _next(void 0); }); }; }
  function _classPrivateFieldInitSpec$1(e, t, a) { _checkPrivateRedeclaration$1(e, t), t.set(e, a); }
  function _checkPrivateRedeclaration$1(e, t) { if (t.has(e)) throw new TypeError("Cannot initialize the same private elements twice on an object"); }
  function _classPrivateFieldSet$1(s, a, r) { return s.set(_assertClassBrand$1(s, a), r), r; }
  function _classPrivateFieldGet$1(s, a) { return s.get(_assertClassBrand$1(s, a)); }
  function _assertClassBrand$1(e, t, n) { if ("function" == typeof e ? e === t : e.has(t)) return arguments.length < 3 ? t : n; throw new TypeError("Private element is not present on this object"); }
  function _regeneratorRuntime$1() { /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */ _regeneratorRuntime$1 = function _regeneratorRuntime() { return e; }; var t, e = {}, r = Object.prototype, n = r.hasOwnProperty, o = Object.defineProperty || function (t, e, r) { t[e] = r.value; }, i = "function" == typeof Symbol ? Symbol : {}, a = i.iterator || "@@iterator", c = i.asyncIterator || "@@asyncIterator", u = i.toStringTag || "@@toStringTag"; function define(t, e, r) { return Object.defineProperty(t, e, { value: r, enumerable: !0, configurable: !0, writable: !0 }), t[e]; } try { define({}, ""); } catch (t) { define = function define(t, e, r) { return t[e] = r; }; } function wrap(t, e, r, n) { var i = e && e.prototype instanceof Generator ? e : Generator, a = Object.create(i.prototype), c = new Context(n || []); return o(a, "_invoke", { value: makeInvokeMethod(t, r, c) }), a; } function tryCatch(t, e, r) { try { return { type: "normal", arg: t.call(e, r) }; } catch (t) { return { type: "throw", arg: t }; } } e.wrap = wrap; var h = "suspendedStart", l = "suspendedYield", f = "executing", s = "completed", y = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var p = {}; define(p, a, function () { return this; }); var d = Object.getPrototypeOf, v = d && d(d(values([]))); v && v !== r && n.call(v, a) && (p = v); var g = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(p); function defineIteratorMethods(t) { ["next", "throw", "return"].forEach(function (e) { define(t, e, function (t) { return this._invoke(e, t); }); }); } function AsyncIterator(t, e) { function invoke(r, o, i, a) { var c = tryCatch(t[r], t, o); if ("throw" !== c.type) { var u = c.arg, h = u.value; return h && "object" == _typeof$3(h) && n.call(h, "__await") ? e.resolve(h.__await).then(function (t) { invoke("next", t, i, a); }, function (t) { invoke("throw", t, i, a); }) : e.resolve(h).then(function (t) { u.value = t, i(u); }, function (t) { return invoke("throw", t, i, a); }); } a(c.arg); } var r; o(this, "_invoke", { value: function value(t, n) { function callInvokeWithMethodAndArg() { return new e(function (e, r) { invoke(t, n, e, r); }); } return r = r ? r.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg(); } }); } function makeInvokeMethod(e, r, n) { var o = h; return function (i, a) { if (o === f) throw Error("Generator is already running"); if (o === s) { if ("throw" === i) throw a; return { value: t, done: !0 }; } for (n.method = i, n.arg = a;;) { var c = n.delegate; if (c) { var u = maybeInvokeDelegate(c, n); if (u) { if (u === y) continue; return u; } } if ("next" === n.method) n.sent = n._sent = n.arg;else if ("throw" === n.method) { if (o === h) throw o = s, n.arg; n.dispatchException(n.arg); } else "return" === n.method && n.abrupt("return", n.arg); o = f; var p = tryCatch(e, r, n); if ("normal" === p.type) { if (o = n.done ? s : l, p.arg === y) continue; return { value: p.arg, done: n.done }; } "throw" === p.type && (o = s, n.method = "throw", n.arg = p.arg); } }; } function maybeInvokeDelegate(e, r) { var n = r.method, o = e.iterator[n]; if (o === t) return r.delegate = null, "throw" === n && e.iterator["return"] && (r.method = "return", r.arg = t, maybeInvokeDelegate(e, r), "throw" === r.method) || "return" !== n && (r.method = "throw", r.arg = new TypeError("The iterator does not provide a '" + n + "' method")), y; var i = tryCatch(o, e.iterator, r.arg); if ("throw" === i.type) return r.method = "throw", r.arg = i.arg, r.delegate = null, y; var a = i.arg; return a ? a.done ? (r[e.resultName] = a.value, r.next = e.nextLoc, "return" !== r.method && (r.method = "next", r.arg = t), r.delegate = null, y) : a : (r.method = "throw", r.arg = new TypeError("iterator result is not an object"), r.delegate = null, y); } function pushTryEntry(t) { var e = { tryLoc: t[0] }; 1 in t && (e.catchLoc = t[1]), 2 in t && (e.finallyLoc = t[2], e.afterLoc = t[3]), this.tryEntries.push(e); } function resetTryEntry(t) { var e = t.completion || {}; e.type = "normal", delete e.arg, t.completion = e; } function Context(t) { this.tryEntries = [{ tryLoc: "root" }], t.forEach(pushTryEntry, this), this.reset(!0); } function values(e) { if (e || "" === e) { var r = e[a]; if (r) return r.call(e); if ("function" == typeof e.next) return e; if (!isNaN(e.length)) { var o = -1, i = function next() { for (; ++o < e.length;) if (n.call(e, o)) return next.value = e[o], next.done = !1, next; return next.value = t, next.done = !0, next; }; return i.next = i; } } throw new TypeError(_typeof$3(e) + " is not iterable"); } return GeneratorFunction.prototype = GeneratorFunctionPrototype, o(g, "constructor", { value: GeneratorFunctionPrototype, configurable: !0 }), o(GeneratorFunctionPrototype, "constructor", { value: GeneratorFunction, configurable: !0 }), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, u, "GeneratorFunction"), e.isGeneratorFunction = function (t) { var e = "function" == typeof t && t.constructor; return !!e && (e === GeneratorFunction || "GeneratorFunction" === (e.displayName || e.name)); }, e.mark = function (t) { return Object.setPrototypeOf ? Object.setPrototypeOf(t, GeneratorFunctionPrototype) : (t.__proto__ = GeneratorFunctionPrototype, define(t, u, "GeneratorFunction")), t.prototype = Object.create(g), t; }, e.awrap = function (t) { return { __await: t }; }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, c, function () { return this; }), e.AsyncIterator = AsyncIterator, e.async = function (t, r, n, o, i) { void 0 === i && (i = Promise); var a = new AsyncIterator(wrap(t, r, n, o), i); return e.isGeneratorFunction(r) ? a : a.next().then(function (t) { return t.done ? t.value : a.next(); }); }, defineIteratorMethods(g), define(g, u, "Generator"), define(g, a, function () { return this; }), define(g, "toString", function () { return "[object Generator]"; }), e.keys = function (t) { var e = Object(t), r = []; for (var n in e) r.push(n); return r.reverse(), function next() { for (; r.length;) { var t = r.pop(); if (t in e) return next.value = t, next.done = !1, next; } return next.done = !0, next; }; }, e.values = values, Context.prototype = { constructor: Context, reset: function reset(e) { if (this.prev = 0, this.next = 0, this.sent = this._sent = t, this.done = !1, this.delegate = null, this.method = "next", this.arg = t, this.tryEntries.forEach(resetTryEntry), !e) for (var r in this) "t" === r.charAt(0) && n.call(this, r) && !isNaN(+r.slice(1)) && (this[r] = t); }, stop: function stop() { this.done = !0; var t = this.tryEntries[0].completion; if ("throw" === t.type) throw t.arg; return this.rval; }, dispatchException: function dispatchException(e) { if (this.done) throw e; var r = this; function handle(n, o) { return a.type = "throw", a.arg = e, r.next = n, o && (r.method = "next", r.arg = t), !!o; } for (var o = this.tryEntries.length - 1; o >= 0; --o) { var i = this.tryEntries[o], a = i.completion; if ("root" === i.tryLoc) return handle("end"); if (i.tryLoc <= this.prev) { var c = n.call(i, "catchLoc"), u = n.call(i, "finallyLoc"); if (c && u) { if (this.prev < i.catchLoc) return handle(i.catchLoc, !0); if (this.prev < i.finallyLoc) return handle(i.finallyLoc); } else if (c) { if (this.prev < i.catchLoc) return handle(i.catchLoc, !0); } else { if (!u) throw Error("try statement without catch or finally"); if (this.prev < i.finallyLoc) return handle(i.finallyLoc); } } } }, abrupt: function abrupt(t, e) { for (var r = this.tryEntries.length - 1; r >= 0; --r) { var o = this.tryEntries[r]; if (o.tryLoc <= this.prev && n.call(o, "finallyLoc") && this.prev < o.finallyLoc) { var i = o; break; } } i && ("break" === t || "continue" === t) && i.tryLoc <= e && e <= i.finallyLoc && (i = null); var a = i ? i.completion : {}; return a.type = t, a.arg = e, i ? (this.method = "next", this.next = i.finallyLoc, y) : this.complete(a); }, complete: function complete(t, e) { if ("throw" === t.type) throw t.arg; return "break" === t.type || "continue" === t.type ? this.next = t.arg : "return" === t.type ? (this.rval = this.arg = t.arg, this.method = "return", this.next = "end") : "normal" === t.type && e && (this.next = e), y; }, finish: function finish(t) { for (var e = this.tryEntries.length - 1; e >= 0; --e) { var r = this.tryEntries[e]; if (r.finallyLoc === t) return this.complete(r.completion, r.afterLoc), resetTryEntry(r), y; } }, "catch": function _catch(t) { for (var e = this.tryEntries.length - 1; e >= 0; --e) { var r = this.tryEntries[e]; if (r.tryLoc === t) { var n = r.completion; if ("throw" === n.type) { var o = n.arg; resetTryEntry(r); } return o; } } throw Error("illegal catch attempt"); }, delegateYield: function delegateYield(e, r, n) { return this.delegate = { iterator: values(e), resultName: r, nextLoc: n }, "next" === this.method && (this.arg = t), y; } }, e; }
  function _createForOfIteratorHelper$2(r, e) { var t = "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"]; if (!t) { if (Array.isArray(r) || (t = _unsupportedIterableToArray$3(r)) || e) { t && (r = t); var _n2 = 0, F = function F() {}; return { s: F, n: function n() { return _n2 >= r.length ? { done: !0 } : { done: !1, value: r[_n2++] }; }, e: function e(r) { throw r; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var o, a = !0, u = !1; return { s: function s() { t = t.call(r); }, n: function n() { var r = t.next(); return a = r.done, r; }, e: function e(r) { u = !0, o = r; }, f: function f() { try { a || null == t["return"] || t["return"](); } finally { if (u) throw o; } } }; }
  function _toConsumableArray$3(r) { return _arrayWithoutHoles$3(r) || _iterableToArray$3(r) || _unsupportedIterableToArray$3(r) || _nonIterableSpread$3(); }
  function _nonIterableSpread$3() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
  function _iterableToArray$3(r) { if ("undefined" != typeof Symbol && null != r[Symbol.iterator] || null != r["@@iterator"]) return Array.from(r); }
  function _arrayWithoutHoles$3(r) { if (Array.isArray(r)) return _arrayLikeToArray$3(r); }
  function _typeof$3(o) { "@babel/helpers - typeof"; return _typeof$3 = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof$3(o); }
  function _defineProperty$3(e, r, t) { return (r = _toPropertyKey$2(r)) in e ? Object.defineProperty(e, r, { value: t, enumerable: !0, configurable: !0, writable: !0 }) : e[r] = t, e; }
  function _slicedToArray$1(r, e) { return _arrayWithHoles$1(r) || _iterableToArrayLimit$1(r, e) || _unsupportedIterableToArray$3(r, e) || _nonIterableRest$1(); }
  function _nonIterableRest$1() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
  function _unsupportedIterableToArray$3(r, a) { if (r) { if ("string" == typeof r) return _arrayLikeToArray$3(r, a); var t = {}.toString.call(r).slice(8, -1); return "Object" === t && r.constructor && (t = r.constructor.name), "Map" === t || "Set" === t ? Array.from(r) : "Arguments" === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t) ? _arrayLikeToArray$3(r, a) : void 0; } }
  function _arrayLikeToArray$3(r, a) { (null == a || a > r.length) && (a = r.length); for (var e = 0, n = Array(a); e < a; e++) n[e] = r[e]; return n; }
  function _iterableToArrayLimit$1(r, l) { var t = null == r ? null : "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"]; if (null != t) { var e, n, i, u, a = [], f = !0, o = !1; try { if (i = (t = t.call(r)).next, 0 === l) ; else for (; !(f = (e = i.call(t)).done) && (a.push(e.value), a.length !== l); f = !0); } catch (r) { o = !0, n = r; } finally { try { if (!f && null != t["return"] && (u = t["return"](), Object(u) !== u)) return; } finally { if (o) throw n; } } return a; } }
  function _arrayWithHoles$1(r) { if (Array.isArray(r)) return r; }
  function _defineProperties$2(e, r) { for (var t = 0; t < r.length; t++) { var o = r[t]; o.enumerable = o.enumerable || !1, o.configurable = !0, "value" in o && (o.writable = !0), Object.defineProperty(e, _toPropertyKey$2(o.key), o); } }
  function _createClass$2(e, r, t) { return r && _defineProperties$2(e.prototype, r), Object.defineProperty(e, "prototype", { writable: !1 }), e; }
  function _toPropertyKey$2(t) { var i = _toPrimitive$2(t, "string"); return "symbol" == _typeof$3(i) ? i : i + ""; }
  function _toPrimitive$2(t, r) { if ("object" != _typeof$3(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r); if ("object" != _typeof$3(i)) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return (String )(t); }
  function _classCallCheck$2(a, n) { if (!(a instanceof n)) throw new TypeError("Cannot call a class as a function"); }
  function _callSuper$2(t, o, e) { return o = _getPrototypeOf$2(o), _possibleConstructorReturn$2(t, _isNativeReflectConstruct$2() ? Reflect.construct(o, e || [], _getPrototypeOf$2(t).constructor) : o.apply(t, e)); }
  function _possibleConstructorReturn$2(t, e) { if (e && ("object" == _typeof$3(e) || "function" == typeof e)) return e; if (void 0 !== e) throw new TypeError("Derived constructors may only return object or undefined"); return _assertThisInitialized$2(t); }
  function _assertThisInitialized$2(e) { if (void 0 === e) throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); return e; }
  function _inherits$2(t, e) { if ("function" != typeof e && null !== e) throw new TypeError("Super expression must either be null or a function"); t.prototype = Object.create(e && e.prototype, { constructor: { value: t, writable: !0, configurable: !0 } }), Object.defineProperty(t, "prototype", { writable: !1 }), e && _setPrototypeOf$2(t, e); }
  function _wrapNativeSuper$1(t) { var r = "function" == typeof Map ? new Map() : void 0; return _wrapNativeSuper$1 = function _wrapNativeSuper(t) { if (null === t || !_isNativeFunction$1(t)) return t; if ("function" != typeof t) throw new TypeError("Super expression must either be null or a function"); if (void 0 !== r) { if (r.has(t)) return r.get(t); r.set(t, Wrapper); } function Wrapper() { return _construct$1(t, arguments, _getPrototypeOf$2(this).constructor); } return Wrapper.prototype = Object.create(t.prototype, { constructor: { value: Wrapper, enumerable: !1, writable: !0, configurable: !0 } }), _setPrototypeOf$2(Wrapper, t); }, _wrapNativeSuper$1(t); }
  function _construct$1(t, e, r) { if (_isNativeReflectConstruct$2()) return Reflect.construct.apply(null, arguments); var o = [null]; o.push.apply(o, e); var p = new (t.bind.apply(t, o))(); return r && _setPrototypeOf$2(p, r.prototype), p; }
  function _isNativeReflectConstruct$2() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct$2 = function _isNativeReflectConstruct() { return !!t; })(); }
  function _isNativeFunction$1(t) { try { return -1 !== Function.toString.call(t).indexOf("[native code]"); } catch (n) { return "function" == typeof t; } }
  function _setPrototypeOf$2(t, e) { return _setPrototypeOf$2 = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function (t, e) { return t.__proto__ = e, t; }, _setPrototypeOf$2(t, e); }
  function _getPrototypeOf$2(t) { return _getPrototypeOf$2 = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function (t) { return t.__proto__ || Object.getPrototypeOf(t); }, _getPrototypeOf$2(t); }
  var FLT_EPSILON = 1.19209290e-7;
  var path_separator_regex = /[\\\/]+/g;
  var emoji_regex = /(?:[\u2700-\u27bf]|(?:\ud83c[\udde6-\uddff]){2}|[\ud800-\udbff][\udc00-\udfff]|[\u0023-\u0039]\ufe0f?\u20e3|\u3299|\u3297|\u303d|\u3030|\u24c2|\ud83c[\udd70-\udd71]|\ud83c[\udd7e-\udd7f]|\ud83c\udd8e|\ud83c[\udd91-\udd9a]|\ud83c[\udde6-\uddff]|\ud83c[\ude01-\ude02]|\ud83c\ude1a|\ud83c\ude2f|\ud83c[\ude32-\ude3a]|\ud83c[\ude50-\ude51]|\u203c|\u2049|[\u25aa-\u25ab]|\u25b6|\u25c0|[\u25fb-\u25fe]|\u00a9|\u00ae|\u2122|\u2139|\ud83c\udc04|[\u2600-\u26FF]|\u2b05|\u2b06|\u2b07|\u2b1b|\u2b1c|\u2b50|\u2b55|\u231a|\u231b|\u2328|\u23cf|[\u23e9-\u23f3]|[\u23f8-\u23fa]|\ud83c\udccf|\u2934|\u2935|[\u2190-\u21ff])/g;
  var DIVIDERS = {
    d: 24 * 60 * 60 * 1000,
    h: 60 * 60 * 1000,
    m: 60 * 1000,
    s: 1000
  };
  var RefException$1 = /*#__PURE__*/function (_Error) {
    function RefException(str) {
      _classCallCheck$2(this, RefException);
      return _callSuper$2(this, RefException, ["Invalid reference : ".concat(str)]);
    }
    _inherits$2(RefException, _Error);
    return _createClass$2(RefException);
  }(/*#__PURE__*/_wrapNativeSuper$1(Error));
  var PromisePool = /*#__PURE__*/function () {
    function PromisePool() {
      var limit = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : Infinity;
      _classCallCheck$2(this, PromisePool);
      this.executing = new Set();
      this.queue = [];
      this.limit = limit;
    }
    return _createClass$2(PromisePool, [{
      key: "full",
      get: function get() {
        return this.executing.size >= this.limit;
      }
    }, {
      key: "_next",
      value: function _next() {
        var _this2 = this;
        if (this.queue.length == 0 || this.executing.size >= this.limit) return;
        var _this$queue$shift = this.queue.shift(),
          _this$queue$shift2 = _slicedToArray$1(_this$queue$shift, 2),
          cb = _this$queue$shift2[0],
          resolve = _this$queue$shift2[1];
        var p = Promise.resolve(cb());
        this.executing.add(p);
        p.then(resolve);
        p["finally"](function () {
          _this2.executing["delete"](p);
          _this2._next();
        });
      }
    }, {
      key: "enqueue",
      value: function enqueue(cb) {
        var _this3 = this;
        return new Promise(function (resolve) {
          _this3.queue.push([cb, resolve]);
          _this3._next();
        });
      }
    }]);
  }();
  var EventEmitter$1 = /*#__PURE__*/function () {
    function EventEmitter() {
      _classCallCheck$2(this, EventEmitter);
      _defineProperty$3(this, "_events", {});
      this.addEventListener = this.on;
      this.addListener = this.on;
      this.removeEventListener = this.off;
      this.removeListener = this.off;
    }
    return _createClass$2(EventEmitter, [{
      key: "on",
      value: function on(event, listener) {
        if (_typeof$3(this._events[event]) !== 'object') this._events[event] = [];
        this._events[event].push(listener);
      }
    }, {
      key: "removeAllListeners",
      value: function removeAllListeners() {
        clear$1(this._events);
      }
    }, {
      key: "off",
      value: function off(event, listener) {
        if (!event) {
          this.removeAllListeners();
          return;
        }
        if (_typeof$3(this._events[event]) !== 'object') return;
        if (listener) array_remove$1(this._events[event], listener);else clear$1(this._events[event]);
      }
    }, {
      key: "emit",
      value: function emit(event) {
        if (_typeof$3(this._events[event]) !== 'object') return;
        for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
          args[_key - 1] = arguments[_key];
        }
        for (var _i = 0, _arr = _toConsumableArray$3(this._events[event]); _i < _arr.length; _i++) {
          var l = _arr[_i];
          l.apply(this, args);
        }
      }
    }, {
      key: "once",
      value: function once(event, listener) {
        var _this4 = this;
        var _listener_wrapped = function listener_wrapped() {
          _this4.removeListener(event, _listener_wrapped);
          for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
            args[_key2] = arguments[_key2];
          }
          listener.apply(_this4, args);
        };
        this.on(event, _listener_wrapped);
      }
    }]);
  }();
  var Timer$1 = /*#__PURE__*/function (_EventEmitter2) {
    function Timer() {
      var _this5;
      var time = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;
      var autostart = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
      _classCallCheck$2(this, Timer);
      _this5 = _callSuper$2(this, Timer);
      _this5._total_time = time;
      _this5._interval_id;
      _this5._last_seconds_left;
      _this5._stopwatch = new StopWatch$1();
      _this5._stopwatch.on("pause", function () {
        clearInterval(_this5._interval_id);
        _this5.emit("pause");
      });
      _this5._stopwatch.on("start", function () {
        _this5._interval_id = setInterval(function () {
          return _this5.tick();
        }, Timer.TICK_INTERVAL);
        _this5.emit("start");
      });
      _this5._stopwatch.on("reset", function () {
        _this5._last_seconds_left = _this5.seconds_left;
        _this5.emit("reset");
        _this5.emit("second", _this5._last_seconds_left);
      });
      if (autostart) _this5.restart();
      return _this5;
    }
    _inherits$2(Timer, _EventEmitter2);
    return _createClass$2(Timer, [{
      key: "time_left",
      get: function get() {
        return Math.max(0, this._total_time - this._stopwatch.time);
      }
    }, {
      key: "seconds_left",
      get: function get() {
        return Math.ceil(this.time_left / 1000);
      }
    }, {
      key: "finished",
      get: function get() {
        return this.time_left <= 0;
      }
    }, {
      key: "paused",
      get: function get() {
        return this._stopwatch.paused;
      }
    }, {
      key: "restart",
      value: function restart(time) {
        if (time !== undefined) this._total_time = time;
        this._stopwatch.reset();
        this.resume();
      }
    }, {
      key: "tick",
      value: function tick() {
        var seconds_left = this.seconds_left;
        for (var i = this._last_seconds_left - 1; i >= seconds_left; i--) {
          this.emit("second", i);
        }
        this._last_seconds_left = seconds_left;
        this.emit("tick");
        if (this.finished) {
          this.pause();
          this.emit("finish");
        }
      }
    }, {
      key: "pause",
      value: function pause() {
        this._stopwatch.pause();
      }
    }, {
      key: "resume",
      value: function resume() {
        this._stopwatch.resume();
      }
    }, {
      key: "reset",
      value: function reset() {
        this._stopwatch.reset();
      }
    }, {
      key: "destroy",
      value: function destroy() {
        this._stopwatch.destroy();
        this.removeAllListeners();
      }
    }]);
  }(EventEmitter$1);
  Timer$1.TICK_INTERVAL = 1000 / 60;
  var StopWatch$1 = /*#__PURE__*/function (_EventEmitter3) {
    function StopWatch() {
      var _this6;
      _classCallCheck$2(this, StopWatch);
      _this6 = _callSuper$2(this, StopWatch);
      _this6._start_time = 0;
      _this6._pause_time = 0;
      _this6._paused = true;
      return _this6;
    }
    _inherits$2(StopWatch, _EventEmitter3);
    return _createClass$2(StopWatch, [{
      key: "time",
      get: function get() {
        return (this._paused ? this._pause_time : Date.now()) - this._start_time;
      }
    }, {
      key: "paused",
      get: function get() {
        return this._paused;
      }
    }, {
      key: "start",
      value: function start() {
        var now = Date.now();
        if (!this._start_time) this._start_time = now;
        if (this._paused) {
          this._paused = false;
          this._start_time += now - this._pause_time;
          this._pause_time = 0;
          this.emit("start");
        }
      }
    }, {
      key: "resume",
      value: function resume() {
        this.start();
      }
    }, {
      key: "pause",
      value: function pause() {
        if (this._paused) return;
        this._paused = true;
        this._pause_time = Date.now();
        this.emit("pause");
      }
    }, {
      key: "reset",
      value: function reset() {
        this._start_time = Date.now();
        if (this._paused) this._pause_time = this._start_time;
        this.emit("reset");
      }
    }, {
      key: "destroy",
      value: function destroy() {
        this.removeAllListeners();
      }
    }]);
  }(EventEmitter$1);
  var Diff$1 = /*#__PURE__*/_createClass$2(function Diff(old_value, new_value) {
    _classCallCheck$2(this, Diff);
    if (old_value === new_value) this.type = 0;
    if (old_value === undefined) this.type = Diff.CREATED;else if (new_value === undefined) this.type = Diff.DELETED;else this.type = Diff.CHANGED;
    this.old_value = old_value;
    this.new_value = new_value;
    Object.freeze(this);
  });
  Diff$1.CREATED = 1;
  Diff$1.DELETED = 2;
  Diff$1.CHANGED = 3;

  /* class History {
  	get current() { return this.get(this.i); }
  	get prev() { return this.get(this.i-1); }
  	get next() { return this.get(this.i+1); }
  	get can_go_back() { return this.has(this.i-1); }
  	get can_go_forward() { return this.has(this.i+1); }
  	constructor(length=512, json_encode=false, compress=false) {
  		this.length = length;
  		this.reset();
  		if (compress && !!window.LZUTF8) this.compress = true;
  		this.json_encode = json_encode;
  	}
  	push(state) {
  		this.i++;
  		var s = typeof state === "string";
  		if (this.json_encode) state = JSON.stringify(state);
  		if (this.compress) state = LZUTF8.compress(state);
  		this.states[this.i%this.length] = {states:state,i:this.i};
  		for (var i = this.i; i < this.i + this.length; i++) {
  			var o = this.states[i%this.length];
  			if (!o || o.i <= this.i) break;
  			this.states[i%this.length] = null;
  		}
  	}
  	has(i) {
  		var s = this.states[i%this.length];
  		return (s && s.i == i);
  	}
  	get(i) {
  		if (!this.has(i)) return;
  		var state = s.state;
  		if (this.compress) state = LZUTF8.decompress(state);
  		if (this.json_encode) state = JSON.parse(state);
  		else return state;
  	}
  	goto(i) {
  		if (!this.has(i)) return;
  		this.i = i;
  		return this.current;
  	}
  	go_back() { return this.goto(this.i-1); }
  	go_forward() { return this.goto(this.i+1); }
  	reset() {
  		this.i = -1;
  		this.states = new Array(this.length);
  	}
  } */
  var URLParams = /*#__PURE__*/function () {
    function URLParams(params_str) {
      _classCallCheck$2(this, URLParams);
      this._params = [];
      if (!params_str) return;
      if (params_str.substr(0, 1) == "?") params_str = params_str.slice(1);
      var _iterator = _createForOfIteratorHelper$2(params_str.split("&")),
        _step;
      try {
        for (_iterator.s(); !(_step = _iterator.n()).done;) {
          var p = _step.value;
          this.append.apply(this, _toConsumableArray$3(p.split("=")));
        }
      } catch (err) {
        _iterator.e(err);
      } finally {
        _iterator.f();
      }
    }
    return _createClass$2(URLParams, [{
      key: "append",
      value: function append(param) {
        var value = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : undefined;
        var p = {
          name: param
        };
        if (value !== undefined) p.value = String(value);
        Object.freeze(p);
        this._params.push(p);
      }
    }, {
      key: "remove",
      value: function remove(param) {
        if (_typeof$3(param) === "object") {
          this._params.filter(function (p) {
            return p !== param;
          });
        } else {
          this._params = this._params.filter(function (p) {
            return p.name != param;
          });
        }
      }
    }, {
      key: Symbol.iterator,
      value: /*#__PURE__*/_regeneratorRuntime$1().mark(function value() {
        var _iterator2, _step2, p;
        return _regeneratorRuntime$1().wrap(function value$(_context) {
          while (1) switch (_context.prev = _context.next) {
            case 0:
              _iterator2 = _createForOfIteratorHelper$2(this._params);
              _context.prev = 1;
              _iterator2.s();
            case 3:
              if ((_step2 = _iterator2.n()).done) {
                _context.next = 9;
                break;
              }
              p = _step2.value;
              _context.next = 7;
              return p;
            case 7:
              _context.next = 3;
              break;
            case 9:
              _context.next = 14;
              break;
            case 11:
              _context.prev = 11;
              _context.t0 = _context["catch"](1);
              _iterator2.e(_context.t0);
            case 14:
              _context.prev = 14;
              _iterator2.f();
              return _context.finish(14);
            case 17:
            case "end":
              return _context.stop();
          }
        }, value, this, [[1, 11, 14, 17]]);
      })
    }, {
      key: "toString",
      value: function toString() {
        return this._params.map(function (p) {
          if (p.value === undefined) return p.name;
          return "".concat(p.name, "=").concat(p.value);
        }).join("&");
      }
    }]);
  }();
  var Point$1 = /*#__PURE__*/_createClass$2(function Point(x, y) {
    _classCallCheck$2(this, Point);
    this.x = x;
    this.y = y;
  });
  Point$1.distance = function (x1, y1, x2, y2) {
    return Math.sqrt(Math.pow(x2 - x1, 2), Math.pow(y2 - y1, 2));
  };
  var Rectangle$1 = /*#__PURE__*/function () {
    function Rectangle() {
      for (var _len3 = arguments.length, args = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {
        args[_key3] = arguments[_key3];
      }
      _classCallCheck$2(this, Rectangle);
      args = function () {
        if (args.length == 4) return args;
        if (args.length == 2) return [0, 0].concat(_toConsumableArray$3(args));
        if (args.length == 1) {
          if (Array.isArray(args[0])) return args[0];
          if (_typeof$3(args[0]) === "object") {
            var _args$ = args[0],
              x = _args$.x,
              y = _args$.y,
              width = _args$.width,
              height = _args$.height,
              left = _args$.left,
              right = _args$.right,
              bottom = _args$.bottom,
              top = _args$.top;
            if (x == undefined) x = left;
            if (y == undefined) y = top;
            if (width == undefined) width = right - left;
            if (height == undefined) height = bottom - top;
            return [x, y, width, height];
          }
        }
        if (args.length == 0) return [0, 0, 0, 0];
      }();
      this.x = +args[0] || 0;
      this.y = +args[1] || 0;
      this.width = +args[2] || 0;
      this.height = +args[3] || 0;
    }
    return _createClass$2(Rectangle, [{
      key: "left",
      get: function get() {
        return this.x;
      },
      set: function set(value) {
        var d = value - this.x;
        this.x += d;
        this.width -= d;
      }
    }, {
      key: "top",
      get: function get() {
        return this.y;
      },
      set: function set(value) {
        var d = value - this.y;
        this.y += d;
        this.height -= d;
      }
    }, {
      key: "right",
      get: function get() {
        return this.x + this.width;
      },
      set: function set(value) {
        this.width += value - this.right;
      }
    }, {
      key: "bottom",
      get: function get() {
        return this.y + this.height;
      },
      set: function set(value) {
        this.height += value - this.bottom;
      }
    }, {
      key: "center",
      get: function get() {
        return {
          x: this.x + this.width / 2,
          y: this.y + this.height / 2
        };
      }
    }, {
      key: "contains",
      value: function contains(obj) {
        if (!obj.width && !obj.height) return obj.x > this.left && obj.x < this.right && obj.y > this.top && obj.y < this.bottom;
        return obj.x > this.left && obj.x + obj.width < this.right && obj.y > this.top && obj.y + obj.height < this.bottom;
      }
    }, {
      key: "intersects",
      value: function intersects(obj) {
        return obj.x + obj.width > this.left && obj.x < this.right && obj.y + obj.height > this.top && obj.y < this.bottom;
      }
    }, {
      key: "union",
      value: function union(obj) {
        var x = Math.min(obj.x, this.x);
        var y = Math.min(obj.y, this.y);
        var right = Math.max(obj.x + (obj.width || 0), this.right);
        var bottom = Math.max(obj.y + (obj.height || 0), this.bottom);
        return new Rectangle(x, y, right - x, bottom - y);
      }
    }, {
      key: "intersection",
      value: function intersection(obj) {
        var x = Math.max(obj.x, this.x);
        var y = Math.max(obj.y, this.y);
        var right = Math.min(obj.x + obj.width, this.right);
        var bottom = Math.min(obj.y + obj.height, this.bottom);
        return new Rectangle(x, y, right - x, bottom - y);
      }
    }, {
      key: "scale",
      value: function scale(x, y) {
        if (y === undefined) y = x;
        this.x *= x;
        this.y *= y;
        this.width *= x;
        this.height *= y;
        return this;
      }
    }, {
      key: "expand",
      value: function expand(x, y) {
        if (y === undefined) y = x;
        this.x -= x / 2;
        this.y -= y / 2;
        this.width += x;
        this.height += y;
        return this;
      }
    }, {
      key: "fix",
      value: function fix() {
        if (this.width < 0) {
          this.x += this.width;
          this.width *= -1;
        }
        if (this.height < 0) {
          this.y += this.height;
          this.height *= -1;
        }
        return this;
      }
    }, {
      key: "clone",
      value: function clone() {
        return new Rectangle(this.x, this.y, this.width, this.height);
      }
    }, {
      key: "equals",
      value: function equals(obj) {
        try {
          return this.x === obj.x && this.y === obj.y && this.width === obj.width && this.height === obj.height;
        } catch (_unused) {
          return false;
        }
      }
    }, {
      key: "toString",
      value: function toString() {
        return "[Rectangle x:".concat(this.x, " y:").concat(this.y, " width:").concat(this.width, " height:").concat(this.height, "]");
      }
    }, {
      key: "toJSON",
      value: function toJSON() {
        return {
          x: this.x,
          y: this.y,
          width: this.width,
          height: this.height
        };
      }
    }]);
  }();
  Rectangle$1.union = function () {
    for (var _len4 = arguments.length, rects = new Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {
      rects[_key4] = arguments[_key4];
    }
    var x = Math.min.apply(Math, _toConsumableArray$3(rects.map(function (r) {
      return r.x;
    })));
    var y = Math.min.apply(Math, _toConsumableArray$3(rects.map(function (r) {
      return r.y;
    })));
    var right = Math.max.apply(Math, _toConsumableArray$3(rects.map(function (r) {
      return r.x + r.width;
    })));
    var bottom = Math.max.apply(Math, _toConsumableArray$3(rects.map(function (r) {
      return r.y + r.height;
    })));
    return new Rectangle$1(x, y, right - x, bottom - y);
  };
  Rectangle$1.intersection = function () {
    for (var _len5 = arguments.length, rects = new Array(_len5), _key5 = 0; _key5 < _len5; _key5++) {
      rects[_key5] = arguments[_key5];
    }
    var x = Math.max.apply(Math, _toConsumableArray$3(rects.map(function (r) {
      return r.x;
    })));
    var y = Math.max.apply(Math, _toConsumableArray$3(rects.map(function (r) {
      return r.y;
    })));
    var right = Math.min.apply(Math, _toConsumableArray$3(rects.map(function (r) {
      return r.x + r.width;
    })));
    var bottom = Math.min.apply(Math, _toConsumableArray$3(rects.map(function (r) {
      return r.y + r.height;
    })));
    return new Rectangle$1(x, y, right - x, bottom - y);
  };
  var TimeoutError = /*#__PURE__*/function (_Error2) {
    function TimeoutError(message) {
      var _this7;
      _classCallCheck$2(this, TimeoutError);
      _this7 = _callSuper$2(this, TimeoutError, [message]);
      _this7.name = "TimeoutError";
      return _this7;
    }
    _inherits$2(TimeoutError, _Error2);
    return _createClass$2(TimeoutError);
  }(/*#__PURE__*/_wrapNativeSuper$1(Error));
  var Color$2 = /*#__PURE__*/function () {
    function Color() {
      for (var _len6 = arguments.length, components = new Array(_len6), _key6 = 0; _key6 < _len6; _key6++) {
        components[_key6] = arguments[_key6];
      }
      _classCallCheck$2(this, Color);
      this._r = 0;
      this._g = 0;
      this._b = 0;
      this._h = 0;
      this._s = 0;
      this._l = 0;
      this._a = 1.0;
      if (components.length == 1) {
        var c = components[0];
        if (Array.isArray(c)) {
          s;
          components = _toConsumableArray$3(c);
        } else if (_typeof$3(c) === "object") {
          components = [c.r || c.red || 0, c.g || c.green || 0, c.b || c.blue || 0, c.a || c.alpha || 1];
        } else if (typeof c === "string") {
          if (c.charAt(0) === "#") c = c.slice(1);else if (c.substring(0, 2) === "0x") c = c.slice(2);
          if (c.length < 6) components = c.split("").map(function (a) {
            return a + a;
          });else components = c.match(/.{1,2}/g);
        }
      }
      components = components.map(function (c) {
        if (typeof c === "string" && c.match(/^[0-9a-f]{2}$/)) return parseInt(c, 16);
        return +c;
      });
      this.from_rgba.apply(this, _toConsumableArray$3(components));
    }
    return _createClass$2(Color, [{
      key: "r",
      get: function get() {
        return this._r;
      }
    }, {
      key: "g",
      get: function get() {
        return this._g;
      }
    }, {
      key: "b",
      get: function get() {
        return this._b;
      }
    }, {
      key: "h",
      get: function get() {
        return this._h;
      }
    }, {
      key: "s",
      get: function get() {
        return this._s;
      }
    }, {
      key: "l",
      get: function get() {
        return this._l;
      }
    }, {
      key: "a",
      get: function get() {
        return this._a;
      }
    }, {
      key: "from_hsl",
      value: function from_hsl() {
        var h = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;
        var s = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
        var l = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;
        return this.from_hsla(h, s, l, 1);
      }
    }, {
      key: "from_hsla",
      value: function from_hsla() {
        var h = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;
        var s = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
        var l = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;
        var a = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 1;
        this._h = h = clamp$1(h, 0, 1);
        this._s = s = clamp$1(s, 0, 1);
        this._l = l = clamp$1(l, 0, 1);
        this._a = a = clamp$1(a, 0, 1);
        var r, g, b;
        if (s == 0) {
          r = g = b = l;
        } else {
          var q = l < 0.5 ? l * (1 + s) : l + s - l * s;
          var p = 2 * l - q;
          r = Color.hue2rgb(p, q, h + 1 / 3);
          g = Color.hue2rgb(p, q, h);
          b = Color.hue2rgb(p, q, h - 1 / 3);
        }
        this._r = Math.round(r * 255);
        this._g = Math.round(g * 255);
        this._b = Math.round(b * 255);
        return this;
      }
    }, {
      key: "from_rgb",
      value: function from_rgb() {
        var r = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;
        var g = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
        var b = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;
        return this.from_rgba(r, g, b, 1);
      }
    }, {
      key: "from_rgba",
      value: function from_rgba() {
        var r = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;
        var g = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
        var b = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;
        var a = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 1;
        this._r = r = Math.round(clamp$1(r, 0, 255));
        this._g = g = Math.round(clamp$1(g, 0, 255));
        this._b = b = Math.round(clamp$1(b, 0, 255));
        this._a = a = Math.round(clamp$1(a, 0, 1));
        r /= 255;
        g /= 255;
        b /= 255;
        var cMax = Math.max(r, g, b);
        var cMin = Math.min(r, g, b);
        var delta = cMax - cMin;
        var l = (cMax + cMin) / 2;
        var h = 0;
        var s = 0;
        if (delta == 0) h = 0;else if (cMax == r) h = 60 * ((g - b) / delta % 6);else if (cMax == g) h = 60 * ((b - r) / delta + 2);else h = 60 * ((r - g) / delta + 4);
        s = delta == 0 ? 0 : delta / (1 - Math.abs(2 * l - 1));
        this._h = h;
        this._s = s;
        this._l = l;
        return this;
      }
    }, {
      key: "rgb_mix",
      value: function rgb_mix(c) {
        var m = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0.5;
        return this.rgba_mix(c, m);
      }
    }, {
      key: "rgba_mix",
      value: function rgba_mix(c) {
        var m = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0.5;
        c = Color.from(c);
        return new Color(lerp$1(this._r, c.r, m), lerp$1(this._g, c.g, m), lerp$1(this._b, c.b, m), lerp$1(this._a, c.a, m));
      }
    }, {
      key: "hsl_mix",
      value: function hsl_mix(c) {
        var m = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0.5;
        return this.hsla_mix(c, m);
      }
    }, {
      key: "hsla_mix",
      value: function hsla_mix(c) {
        var m = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0.5;
        c = Color.from(c);
        return new Color(lerp$1(this._h, c.h, m), lerp$1(this._s, c.s, m), lerp$1(this._l, c.l, m), lerp$1(this._a, c.a, m));
      }
    }, {
      key: "to_hsl_array",
      value: function to_hsl_array() {
        return [this._h, this._s, this._l];
      }
    }, {
      key: "to_rgb_array",
      value: function to_rgb_array() {
        return [this._r, this._g, this._b];
      }
    }, {
      key: "to_hsla_array",
      value: function to_hsla_array() {
        return [this._h, this._s, this._l, this._a];
      }
    }, {
      key: "to_rgba_array",
      value: function to_rgba_array() {
        return [this._r, this._g, this._b, this._a];
      }
    }, {
      key: "to_hsl_string",
      value: function to_hsl_string() {
        return "hsl(".concat(this._h, ", ").concat(this._s, ", ").concat(this._l, ")");
      }
    }, {
      key: "to_rgb_string",
      value: function to_rgb_string() {
        return "rgb(".concat(this._r, ", ").concat(this._g, ", ").concat(this._b, ")");
      }
    }, {
      key: "to_hsla_string",
      value: function to_hsla_string() {
        return "hsla(".concat(this._h, ", ").concat(this._s, ", ").concat(this._l, ", ").concat(this._a, ")");
      }
    }, {
      key: "to_rgba_string",
      value: function to_rgba_string() {
        return "rgba(".concat(this._r, ", ").concat(this._g, ", ").concat(this._b, ", ").concat(this._a, ")");
      }
    }, {
      key: "to_rgb_hex",
      value: function to_rgb_hex() {
        return "#".concat(this._r.toString(16)).concat(this._g.toString(16)).concat(this._b.toString(16));
      }
    }, {
      key: "to_rgba_hex",
      value: function to_rgba_hex() {
        return "#".concat(this._r.toString(16)).concat(this._g.toString(16)).concat(this._b.toString(16)).concat(this._a.toString(16));
      }
    }, {
      key: "toString",
      value: function toString() {
        return this.to_rgba_string();
      }
    }, {
      key: "copy",
      value: function copy() {
        var c = new Color();
        c._r = this._r;
        c._g = this._g;
        c._b = this._b;
        c._h = this._h;
        c._s = this._s;
        c._l = this._l;
        c._a = this._a;
        return c;
      }
    }]);
  }();
  Color$2.from = function () {
    for (var _len7 = arguments.length, components = new Array(_len7), _key7 = 0; _key7 < _len7; _key7++) {
      components[_key7] = arguments[_key7];
    }
    if (components.length === 1 && components[0] instanceof Color$2) {
      return components[0];
    }
    return _construct$1(Color$2, components);
  };
  Color$2.mix = function (c1, c2) {
    var m = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0.5;
    return Color$2.from(c1).mix(c2, m);
  };
  Color$2.hue_to_rgb = function (p, q, t) {
    if (t < 0) t += 1;
    if (t > 1) t -= 1;
    if (t < 1 / 6) return p + (q - p) * 6 * t;
    if (t < 1 / 2) return q;
    if (t < 2 / 3) return p + (q - p) * (2 / 3 - t) * 6;
    return p;
  };

  /** @typedef {{interval:number, immediate:bool, await:bool, context:any}} IntervalOptions  */
  var _options = /*#__PURE__*/new WeakMap();
  var _ticks = /*#__PURE__*/new WeakMap();
  var _destroyed = /*#__PURE__*/new WeakMap();
  var _last_tick = /*#__PURE__*/new WeakMap();
  var _timeout = /*#__PURE__*/new WeakMap();
  var Interval = /*#__PURE__*/function () {
    /** @param {function():void} callback @param {IntervalOptions} opts */
    function Interval(callback, opts) {
      _classCallCheck$2(this, Interval);
      /** @type {IntervalOptions} */
      _classPrivateFieldInitSpec$1(this, _options, void 0);
      _classPrivateFieldInitSpec$1(this, _ticks, 0);
      _classPrivateFieldInitSpec$1(this, _destroyed, false);
      _classPrivateFieldInitSpec$1(this, _last_tick, 0);
      _classPrivateFieldInitSpec$1(this, _timeout, void 0);
      if (_typeof$3(opts) !== "object") opts = {
        interval: opts
      };
      _classPrivateFieldSet$1(_options, this, Object.assign({
        interval: 10000,
        immediate: false,
        "await": true,
        context: null
      }, opts));
      /** @type {IntervalOptions} */
      this.options = options_proxy(_classPrivateFieldGet$1(_options, this));
      if (!this.options.immediate) _classPrivateFieldSet$1(_last_tick, this, Date.now());
      this.callback = callback;
      if (this.options.immediate) this.tick();else this.next();
    }
    return _createClass$2(Interval, [{
      key: "time_since_last_tick",
      get: function get() {
        return Math.max(0, Date.now() - _classPrivateFieldGet$1(_last_tick, this));
      }
    }, {
      key: "time_until_next_tick",
      get: function get() {
        return Math.max(0, this.options.interval - this.time_since_last_tick);
      }
    }, {
      key: "update",
      value: function update(opts) {
        Object.assign(_classPrivateFieldGet$1(_options, this), opts);
      }
    }, {
      key: "tick",
      value: function () {
        var _tick = _asyncToGenerator$1(/*#__PURE__*/_regeneratorRuntime$1().mark(function _callee() {
          var _this$ticks;
          var callback_args,
            ticks,
            _args2 = arguments;
          return _regeneratorRuntime$1().wrap(function _callee$(_context2) {
            while (1) switch (_context2.prev = _context2.next) {
              case 0:
                callback_args = _args2.length > 0 && _args2[0] !== undefined ? _args2[0] : null;
                ticks = _classPrivateFieldSet$1(_ticks, this, (_this$ticks = _classPrivateFieldGet$1(_ticks, this), ++_this$ticks));
                if (!_classPrivateFieldGet$1(_options, this)["await"]) {
                  _context2.next = 5;
                  break;
                }
                _context2.next = 5;
                return this._current_promise;
              case 5:
                if (!_classPrivateFieldGet$1(_destroyed, this) && ticks == _classPrivateFieldGet$1(_ticks, this)) {
                  _classPrivateFieldSet$1(_last_tick, this, Date.now());
                  this._current_promise = Promise.resolve(this.callback.apply(this.options.context, callback_args));
                  this.next();
                }
                return _context2.abrupt("return", this._current_promise);
              case 7:
              case "end":
                return _context2.stop();
            }
          }, _callee, this);
        }));
        function tick() {
          return _tick.apply(this, arguments);
        }
        return tick;
      }()
    }, {
      key: "next",
      value: function () {
        var _next2 = _asyncToGenerator$1(/*#__PURE__*/_regeneratorRuntime$1().mark(function _callee2() {
          var _this8 = this;
          return _regeneratorRuntime$1().wrap(function _callee2$(_context3) {
            while (1) switch (_context3.prev = _context3.next) {
              case 0:
                clearTimeout(_classPrivateFieldGet$1(_timeout, this));
                _classPrivateFieldSet$1(_timeout, this, setTimeout(function () {
                  return _this8.tick();
                }, this.options.interval));
              case 2:
              case "end":
                return _context3.stop();
            }
          }, _callee2, this);
        }));
        function next() {
          return _next2.apply(this, arguments);
        }
        return next;
      }()
    }, {
      key: "destroy",
      value: function destroy() {
        _classPrivateFieldSet$1(_destroyed, this, true);
        clearTimeout(_classPrivateFieldGet$1(_timeout, this));
      }
    }]);
  }();
  function options_proxy(opts) {
    return new Proxy(opts, {
      get: function get(target, prop, receiver) {
        if (prop in target) {
          if (typeof target[prop] === "function") return target[prop]();
          return target[prop];
        }
      }
    });
  }
  var OrderedSet = /*#__PURE__*/function () {
    function OrderedSet(items) {
      _classCallCheck$2(this, OrderedSet);
      this.set = new Set();
      this.array = [];
      if (Symbol.iterator in Object(items)) {
        var _iterator3 = _createForOfIteratorHelper$2(items),
          _step3;
        try {
          for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {
            var i = _step3.value;
            this.add(i);
          }
        } catch (err) {
          _iterator3.e(err);
        } finally {
          _iterator3.f();
        }
      }
    }
    return _createClass$2(OrderedSet, [{
      key: "add",
      value: function add(item) {
        if (this.set.has(item)) return false;
        this.set.add(item);
        this.array.push(item);
        return true;
      }
    }, {
      key: "delete",
      value: function _delete(item) {
        if (!this.set.has(item)) return false;
        this.set["delete"](item);
        this.array.splice(this.array.indexOf(item), 1);
        return true;
      }
    }, {
      key: "clear",
      value: function clear() {
        this.set.clear();
        this.array = [];
      }
    }, {
      key: "has",
      value: function has(item) {
        return this.set.has(item);
      }
    }, {
      key: "indexOf",
      value: function indexOf(item) {
        return this.array.indexOf(item);
      }
    }, {
      key: "size",
      get: function get() {
        return this.set.size;
      }
    }, {
      key: Symbol.iterator,
      value: function value() {
        return this.array[Symbol.iterator]();
      }
    }]);
  }();

  /** @typedef {{path:string, type:string, old_value:any new_value:any, nested:boolean}} ObserverChange */
  /** @callback ObserverListenerCallback @param {ObserverChange} change */

  var Observer = function () {
    var Observer_core = Symbol("Observer_core");
    var Observer_target = Symbol("Observer_target");
    var CHANGE = Object.freeze({
      set: "set",
      update: "update",
      "delete": "delete"
    });

    // var force_emit = false;
    /** @return {Proxy} */
    function Observer(target) {
      var _this = this;
      /** @type {ObserverListenerCallback[]} */
      var listeners = [];
      var parents = new Map();
      function listen(cb) {
        listeners.push(cb);
      }
      function unlisten(cb) {
        array_remove$1(listeners, cb);
      }
      function destroy() {
        listeners.splice(0, listeners.length);
        for (var _i2 = 0, _Array$from = Array.from(parents); _i2 < _Array$from.length; _i2++) {
          var _Array$from$_i = _slicedToArray$1(_Array$from[_i2], 2),
            key = _Array$from$_i[0],
            parent = _Array$from$_i[1];
          delete parent.proxy[key];
        }
      }
      function emit(path, type, old_value, new_value) {
        var nested = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : false;
        // technically accurate - to track changes objects must be deep copied here... but unnecessary for my purposes.
        // if (Observer.is_proxy(old_value)) old_value = deep_copy(old_value);
        // if (Observer.is_proxy(new_value)) new_value = deep_copy(new_value);
        if (listeners.length) {
          var _iterator4 = _createForOfIteratorHelper$2(listeners),
            _step4;
          try {
            for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {
              var listener = _step4.value;
              listener.apply(_this, [{
                path: path,
                type: type,
                old_value: old_value,
                new_value: new_value,
                nested: nested
              }]);
            }
          } catch (err) {
            _iterator4.e(err);
          } finally {
            _iterator4.f();
          }
        }
        var _iterator5 = _createForOfIteratorHelper$2(parents),
          _step5;
        try {
          for (_iterator5.s(); !(_step5 = _iterator5.n()).done;) {
            var _step5$value = _slicedToArray$1(_step5.value, 2),
              key = _step5$value[0],
              parent = _step5$value[1];
            parent.emit([key].concat(_toConsumableArray$3(path)), type, old_value, new_value, nested);
          }
        } catch (err) {
          _iterator5.e(err);
        } finally {
          _iterator5.f();
        }
      }
      Object.assign(this, {
        parents: parents,
        listen: listen,
        unlisten: unlisten,
        destroy: destroy,
        emit: emit
      });

      // -----------------

      function walk(o, delegate) {
        var path = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];
        if (_typeof$3(o) !== "object" || o === null) return;
        for (var k in o) {
          var sub_path = [].concat(_toConsumableArray$3(path), [k]);
          delegate.apply(o, [sub_path, o[k]]);
          walk(o[k], delegate, sub_path);
        }
      }
      function klaw(o, delegate) {
        var path = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];
        if (_typeof$3(o) !== "object" || o === null) return;
        for (var k in o) {
          var sub_path = [].concat(_toConsumableArray$3(path), [k]);
          klaw(o[k], delegate, sub_path);
          delegate.apply(o, [sub_path, o[k]]);
        }
      }
      function try_unregister_child(child, prop) {
        var child_observer = Observer.get_observer(child);
        if (child_observer && child_observer instanceof Observer) {
          klaw(child, function (path, val) {
            emit([prop].concat(_toConsumableArray$3(path)), CHANGE["delete"], val, undefined, true);
          });
          child_observer.parents["delete"](prop);
        }
      }
      function try_register_child(child, prop) {
        var child_observer = Observer.get_observer(child);
        if (child_observer && child_observer instanceof Observer) {
          walk(child, function (path, val) {
            emit([prop].concat(_toConsumableArray$3(path)), CHANGE.set, undefined, val, true);
          });
          child_observer.parents.set(prop, _this);
        }
      }

      // -----------------

      // !! Arrays (shift(), splice(), etc.) produce TONS of events... consider replacing arrays with special object that doesnt emit so many changes.

      var validator = {
        get: function get(target, prop) {
          if (prop === Observer_core) return _this;
          if (prop === Observer_target) return target;
          return target[prop];
        },
        set: function set(target, prop, new_value) {
          var old_value = target[prop];
          new_value = Observer.resolve(new_value);
          var changed = old_value !== new_value;
          if (changed) {
            var type = target[prop] === undefined ? CHANGE.set : CHANGE.update;
            try_unregister_child(old_value, prop);
            target[prop] = new_value;
            emit([prop], type, old_value, new_value);
            try_register_child(new_value, prop);
          }
          return true;
        },
        deleteProperty: function deleteProperty(target, prop) {
          if (prop in target) {
            var old_value = target[prop];
            try_unregister_child(old_value, prop);
            delete target[prop];
            emit([prop], CHANGE["delete"], old_value, undefined);
          }
          return true;
        } // defineProperty(target, prop, descriptor) {
        // },
        // enumerate(target, prop) {
        // },
        // ownKeys(target, prop) {
        // },
        // has(target, prop) {
        // },
        // getOwnPropertyDescriptor(target, prop) {
        // },
        // construct(target, prop) {
        // },
        // apply(target, thisArg, argumentsList) {
        // }
      };
      var proxy = new Proxy(Array.isArray(target) ? [] : {}, validator);
      Object.assign(proxy, target);
      _this.proxy = proxy;
      return proxy;
    }
    var RESET_KEY = "__RESET_0f726b__";
    Observer.RESET_KEY = RESET_KEY;
    Observer.get_observer = function (proxy) {
      if (proxy == null) return null;
      return proxy[Observer_core];
    };
    Observer.get_target = function (proxy) {
      if (proxy == null) return null;
      return proxy[Observer_target];
    };
    Observer.is_proxy = function (proxy) {
      return !!Observer.get_observer(proxy);
    };
    /** @param {ObserverListenerCallback} cb */
    Observer.listen = function (proxy, cb) {
      var observer = Observer.get_observer(proxy);
      if (observer) observer.listen(cb);
      return cb;
    };
    /** @param {ObserverListenerCallback} cb */
    Observer.unlisten = function (proxy, cb) {
      var observer = Observer.get_observer(proxy);
      if (observer) observer.unlisten(cb);
    };
    Observer.resolve = function (object) {
      if (Observer.is_proxy(object) || object === null || _typeof$3(object) !== "object") return object;
      return new Observer(object);
    };
    Observer.destroy = function (proxy) {
      var observer = Observer.get_observer(proxy);
      if (observer) observer.destroy();
    };
    Observer.flatten_changes = function (changes) {
      var result = {};
      var _iterator6 = _createForOfIteratorHelper$2(changes),
        _step6;
      try {
        for (_iterator6.s(); !(_step6 = _iterator6.n()).done;) {
          var c = _step6.value;
          var key = c.path[c.path.length - 1];
          var r = result;
          for (var _i3 = 0; _i3 < c.path.length - 1; _i3++) {
            var p = c.path[_i3];
            if (r[p] === undefined) r[p] = {};
            r = r[p];
          }
          var new_value = c.new_value;
          if (Observer.is_proxy(new_value)) {
            var target = Observer.get_target(new_value);
            new_value = {};
            if (c.old_value !== null) {
              new_value[RESET_KEY] = Array.isArray(target) ? 1 : 0; // 1 = Array, 0 = Object
            }
          }
          r[key] = new_value;
        }
      } catch (err) {
        _iterator6.e(err);
      } finally {
        _iterator6.f();
      }
      return result;
    };

    // root must be object, not array.
    Observer.apply_changes = function (target, changes) {
      var _apply = function apply(target, changes) {
        for (var k in changes) {
          if (k === RESET_KEY) continue;
          if (_typeof$3(changes[k]) === 'object' && changes[k] !== null) {
            if (RESET_KEY in changes[k]) {
              if (!target[k] || Array.isArray(target[k]) != changes[k][RESET_KEY]) {
                target[k] = changes[k][RESET_KEY] ? [] : {};
              } else {
                clear$1(target[k]); // VERY IMPORTANT - this keeps any prototype stuff.
              }
            }
            if (_typeof$3(target[k]) !== "object" || target[k] === null) {
              target[k] = Array.isArray(changes[k]) ? [] : {};
            }
            _apply(target[k], changes[k]);
            if (Array.isArray(changes[k])) target[k].length = changes[k].length;
          } else if (changes[k] === null) {
            delete target[k];
          } else {
            target[k] = changes[k];
          }
        }
      };
      _apply(target, changes);
    };
    return Observer;
  }();

  /** @typedef {{[0]:number, [1]:number, next:RangeTreeNode}} RangeTreeNode */
  var RangeTree = /*#__PURE__*/function () {
    function RangeTree(values) {
      _classCallCheck$2(this, RangeTree);
      /** @type {RangeTreeNode} */
      this._first = null;
      if (values) {
        var _iterator7 = _createForOfIteratorHelper$2(values),
          _step7;
        try {
          for (_iterator7.s(); !(_step7 = _iterator7.n()).done;) {
            var v = _step7.value;
            this.add(v[0], v[1]);
          }
        } catch (err) {
          _iterator7.e(err);
        } finally {
          _iterator7.f();
        }
      }
    }
    return _createClass$2(RangeTree, [{
      key: "values",
      get: function get() {
        return _toConsumableArray$3(this);
      }
    }, {
      key: "total",
      get: function get() {
        var a = 0;
        var _iterator8 = _createForOfIteratorHelper$2(this),
          _step8;
        try {
          for (_iterator8.s(); !(_step8 = _iterator8.n()).done;) {
            var p = _step8.value;
            a += p[1] - p[0];
          }
        } catch (err) {
          _iterator8.e(err);
        } finally {
          _iterator8.f();
        }
        return a;
      }
    }, {
      key: "add",
      value: function add(start, end) {
        if (start < 0) throw new Error("start must be >= 0: ".concat(start));
        if (start > end) throw new Error("start must be smaller than end: ".concat(start, " > ").concat(end));
        if (start == end) return;
        /** @type {RangeTreeNode} */
        var new_node = [start, end];
        if (!this._first || new_node[0] < this._first[0]) {
          new_node.next = this._first;
          this._first = new_node;
        }
        var curr = this._first;
        while (curr) {
          if (!curr.next || curr.next[0] > new_node[0]) {
            var n = curr.next;
            curr.next = new_node;
            new_node.next = n;
            if (new_node[0] <= curr[1] && new_node[0] >= curr[0]) {
              curr[1] = Math.max(new_node[1], curr[1]);
              curr.next = new_node.next;
            }
            if (new_node[1] <= curr[0] && new_node[1] >= curr[1]) {
              curr[0] = Math.min(new_node[0], curr[0]);
              curr.next = new_node.next;
            }
            while (curr.next && curr[1] >= curr.next[0]) {
              curr[1] = Math.max(curr[1], curr.next[1]);
              curr.next = curr.next.next;
            }
            break;
          }
          curr = curr.next;
        }
      }
    }, {
      key: "includes",
      value: function includes(low, high) {
        if (!high) high = low;
        var _iterator9 = _createForOfIteratorHelper$2(this),
          _step9;
        try {
          for (_iterator9.s(); !(_step9 = _iterator9.n()).done;) {
            var r = _step9.value;
            if (low >= r[0] && high <= r[1]) return true;
          }
        } catch (err) {
          _iterator9.e(err);
        } finally {
          _iterator9.f();
        }
        return false;
      }
    }, {
      key: Symbol.iterator,
      value: /*#__PURE__*/_regeneratorRuntime$1().mark(function value() {
        var next;
        return _regeneratorRuntime$1().wrap(function value$(_context4) {
          while (1) switch (_context4.prev = _context4.next) {
            case 0:
              next = this._first;
            case 1:
              if (!next) {
                _context4.next = 8;
                break;
              }
              if (!next) {
                _context4.next = 5;
                break;
              }
              _context4.next = 5;
              return _toConsumableArray$3(next);
            case 5:
              next = next.next;
              _context4.next = 1;
              break;
            case 8:
            case "end":
              return _context4.stop();
          }
        }, value, this);
      })
    }]);
  }();
  var regex = {
    urls: /(https?:\/\/[^\s]+)/gi
  };
  function is_valid_url$1(str) {
    return /(https?:\/\/(?:www\.|(?!www))[a-zA-Z0-9][a-zA-Z0-9-]+[a-zA-Z0-9]\.[^\s]{2,}|www\.[a-zA-Z0-9][a-zA-Z0-9-]+[a-zA-Z0-9]\.[^\s]{2,}|https?:\/\/(?:www\.|(?!www))[a-zA-Z0-9]+\.[^\s]{2,}|www\.[a-zA-Z0-9]+\.[^\s]{2,})/i.test(str);
  }
  function is_valid_rtmp_url$1(str) {
    return /^rtmps?\:\/\//i.test(str);
  }
  function is_valid_ip(str) {
    return /((^((([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5]))$)|(^((([0-9A-Fa-f]{1,4}:){7}([0-9A-Fa-f]{1,4}|:))|(([0-9A-Fa-f]{1,4}:){6}(:[0-9A-Fa-f]{1,4}|((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3})|:))|(([0-9A-Fa-f]{1,4}:){5}(((:[0-9A-Fa-f]{1,4}){1,2})|:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3})|:))|(([0-9A-Fa-f]{1,4}:){4}(((:[0-9A-Fa-f]{1,4}){1,3})|((:[0-9A-Fa-f]{1,4})?:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(([0-9A-Fa-f]{1,4}:){3}(((:[0-9A-Fa-f]{1,4}){1,4})|((:[0-9A-Fa-f]{1,4}){0,2}:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(([0-9A-Fa-f]{1,4}:){2}(((:[0-9A-Fa-f]{1,4}){1,5})|((:[0-9A-Fa-f]{1,4}){0,3}:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(([0-9A-Fa-f]{1,4}:){1}(((:[0-9A-Fa-f]{1,4}){1,6})|((:[0-9A-Fa-f]{1,4}){0,4}:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(:(((:[0-9A-Fa-f]{1,4}){1,7})|((:[0-9A-Fa-f]{1,4}){0,5}:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:)))(%.+)?$))/.test(str);
  }
  function is_uri(s) {
    return /^[a-z]{2,}\:\/\//.test(String(s));
  }
  function is_absolute_path(s) {
    return /^(?:[a-zA-Z]\:[\\/]|\/)/.test(String(s));
  }
  // includes subdomains
  function domain_match(uri, domain) {
    try {
      uri = new URL(uri).hostname || uri;
    } catch (_unused3) {}
    return !!uri.match("^(?:[^:]+:\\/\\/)?(?:.+?.)?(".concat(escape_regex(domain), ")(?:/|$)"));
  }
  function capitalize(str) {
    return String(str).replace(/(?:^|\s)\S/g, function (a) {
      return a.toUpperCase();
    });
  }
  function kebabcase(str) {
    return String(str).replace(/([a-z])([A-Z])/g, "$1-$2").replace(/[\s_]+/g, '-').toLowerCase();
  }
  function escape_regex(str) {
    return String(str).replace(/[-\/\\^$*+?.()|[\]{}]/g, '\\$&');
  }
  function split_after_first_line(str) {
    var m = str.match(/(.+?)[\n\r]+/);
    return m ? [m[1], str.slice(m[0].length)] : [str, undefined];
  }
  /* str_to_js(str) {
  	try { return JSON.parse(str); } catch (e) { }
  	return str;
  }, */
  function is_numeric(n) {
    return !isNaN(parseFloat(n)) && isFinite(n);
  }
  function zip() {
    for (var _len8 = arguments.length, its = new Array(_len8), _key8 = 0; _key8 < _len8; _key8++) {
      its[_key8] = arguments[_key8];
    }
    its = its.map(function (it) {
      return Array.isArray(it) ? it : _toConsumableArray$3(it);
    });
    return its[0].map(function (_, i) {
      return its.map(function (a) {
        return a[i];
      });
    });
  }
  /* export function zip(keys, values) {
  	return keys.reduce(
  		(obj, key, i)=>{
  			obj[key] = values[i];
  			return obj;
  		}, {}
  	);
  } */
  /** @template T @param {Iterable<T>} a @param {Iterable<T>} b @return {Set<T>} */
  function set_union(a, b) {
    return new Set([].concat(_toConsumableArray$3(a), _toConsumableArray$3(b)));
  }
  /** @template T @param {Iterable<T>} a @param {Iterable<T>} b @return {Set<T>} */
  function set_difference(a, b) {
    if (!(b instanceof Set)) b = new Set(b);
    return new Set(_toConsumableArray$3(a).filter(function (x) {
      return !b.has(x);
    }));
  }
  /** @template T @param {Iterable<T>} a @param {Iterable<T>} b @return {Set<T>} */
  function set_intersection(a, b) {
    if (!(b instanceof Set)) b = new Set(b);
    return new Set(_toConsumableArray$3(a).filter(function (x) {
      return b.has(x);
    }));
  }
  function sets_equal() {
    for (var _len9 = arguments.length, sets = new Array(_len9), _key9 = 0; _key9 < _len9; _key9++) {
      sets[_key9] = arguments[_key9];
    }
    var seta = sets[0];
    if (!(seta instanceof Set)) seta = new Set(seta);
    var _iterator10 = _createForOfIteratorHelper$2(sets.slice(1)),
      _step10;
    try {
      for (_iterator10.s(); !(_step10 = _iterator10.n()).done;) {
        var setb = _step10.value;
        if (!(setb instanceof Set)) setb = new Set(setb);
        if (seta.size !== setb.size) return false;
        var _iterator11 = _createForOfIteratorHelper$2(seta),
          _step11;
        try {
          for (_iterator11.s(); !(_step11 = _iterator11.n()).done;) {
            var a = _step11.value;
            if (!setb.has(a)) return false;
          }
        } catch (err) {
          _iterator11.e(err);
        } finally {
          _iterator11.f();
        }
      }
    } catch (err) {
      _iterator10.e(err);
    } finally {
      _iterator10.f();
    }
    return true;
  }
  function debounce$5(func) {
    var wait = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
    var immediate = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;
    var timeout, previous, args, result, context;
    var _later = function later() {
      var passed = Date.now() - previous;
      if (wait > passed) {
        timeout = setTimeout(_later, wait - passed);
      } else {
        timeout = null;
        if (!immediate) result = func.apply(context, args);
        if (!timeout) args = context = null;
      }
    };
    var debounced = function debounced() {
      context = this;
      for (var _len10 = arguments.length, p = new Array(_len10), _key10 = 0; _key10 < _len10; _key10++) {
        p[_key10] = arguments[_key10];
      }
      args = p;
      previous = Date.now();
      if (!timeout) {
        timeout = setTimeout(_later, wait);
        if (immediate) result = func.apply(context, args);
      }
      return result;
    };
    debounced.cancel = function () {
      clearTimeout(timeout);
      timeout = args = context = null;
    };
    return debounced;
  }
  function throttle$2(func, wait, options) {
    var timeout, context, args, result;
    var previous = 0;
    if (!options) options = {};
    var later = function later() {
      previous = options.leading === false ? 0 : now();
      timeout = null;
      result = func.apply(context, args);
      if (!timeout) context = args = null;
    };
    var throttled = function throttled() {
      var _now = now();
      if (!previous && options.leading === false) previous = _now;
      var remaining = wait - (_now - previous);
      context = this;
      args = arguments;
      if (remaining <= 0 || remaining > wait) {
        if (timeout) {
          clearTimeout(timeout);
          timeout = null;
        }
        previous = _now;
        result = func.apply(context, args);
        if (!timeout) context = args = null;
      } else if (!timeout && options.trailing !== false) {
        timeout = setTimeout(later, remaining);
      }
      return result;
    };
    throttled.cancel = function () {
      clearTimeout(timeout);
      previous = 0;
      timeout = context = args = null;
    };
    return throttled;
  }
  function almost_equal(a, b) {
    var epsilon = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : FLT_EPSILON;
    var d = Math.abs(a - b);
    return d <= epsilon;
  }
  /* sync_objects(src, dst) {
  	var dst_keys = new Set(Object.keys(dst));
  	for (var k in src) {
  		dst_keys.delete(k);
  		if (dst[k] !== src[k]) dst[k] = src[k];
  	}
  	for (var k of dst_keys) {
  		delete dst[k];
  	}
  }, */
  function sanitize_filename(name) {
    return String(name).toLowerCase().replace(/^\W+/, "").replace(/\W+$/, "").replace(/\W+/g, "-").trim().slice(0, 128);
  }
  function remove_nulls(obj) {
    if (Array.isArray(obj)) {
      var i = obj.length;
      while (i--) {
        if (obj[i] == null) obj.splice(i, 1);
      }
    } else {
      for (var _i4 = 0, _Object$keys = Object.keys(obj); _i4 < _Object$keys.length; _i4++) {
        var k = _Object$keys[_i4];
        if (obj[k] == null) delete obj[k];
      }
    }
  }
  /** @template T @param {Iterable<T>} values @param {function(T):string} cb @return {Record<string,T[]>} */
  function group_by(values, cb) {
    var groups = {};
    var _iterator12 = _createForOfIteratorHelper$2(values),
      _step12;
    try {
      for (_iterator12.s(); !(_step12 = _iterator12.n()).done;) {
        var value = _step12.value;
        var key = cb(value);
        if (!groups[key]) groups[key] = [];
        groups[key].push(value);
      }
    } catch (err) {
      _iterator12.e(err);
    } finally {
      _iterator12.f();
    }
    return groups;
  }
  /** @template T, K @param {Iterable<T>} values @param {function(T):K} cb @return {Map<K,T[]>} */
  function map_group_by(values, cb) {
    /** @type {Map<T,K[]>} */
    var groups = new Map();
    var _iterator13 = _createForOfIteratorHelper$2(values),
      _step13;
    try {
      for (_iterator13.s(); !(_step13 = _iterator13.n()).done;) {
        var value = _step13.value;
        var key = cb(value);
        if (!groups.has(key)) groups.set(key, []);
        groups.get(key).push(value);
      }
    } catch (err) {
      _iterator13.e(err);
    } finally {
      _iterator13.f();
    }
    return groups;
  }
  function is_path_remote(path_str) {
    return path_str.includes("://");
  }
  function transpose(array) {
    return array[0].map(function (_, c) {
      return array.map(function (row) {
        return row[c];
      });
    });
  }
  function format_bytes(bytes) {
    var decimals = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 2;
    var min = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1;
    decimals = Math.max(decimals, 0);
    var k = 1024;
    var sizes = ['Bytes', 'KiB', 'MiB', 'GiB', 'TiB', 'PiB'];
    var i = clamp$1(Math.floor(Math.log(bytes) / Math.log(k)), min, sizes.length - 1);
    if (!isFinite(i)) i = 0;
    return "".concat((bytes / Math.pow(k, i)).toFixed(decimals), " ").concat(sizes[i]);
  }
  /** @param {string} s */
  function string_to_bytes(s) {
    var m = s.match(/[a-z]+/i);
    var num = parseFloat(s);
    var e = 1;
    var unit = m[0] || "";
    if (m = unit.match(/^ki(bi)?/i)) e = 1024;else if (m = unit.match(/^k(ilo)?/i)) e = 1000;else if (m = unit.match(/^mi(bi)?/i)) e = Math.pow(1024, 2);else if (m = unit.match(/^m(ega)?/i)) e = Math.pow(1000, 2);else if (m = unit.match(/^gi(bi)?/i)) e = Math.pow(1024, 3);else if (m = unit.match(/^g(iga)?/i)) e = Math.pow(1000, 3);else if (m = unit.match(/^ti(bi)?/i)) e = Math.pow(1024, 4);else if (m = unit.match(/^t(era)?/i)) e = Math.pow(1000, 4);else if (m = unit.match(/^pi(bi)?/i)) e = Math.pow(1024, 5);else if (m = unit.match(/^p(eta)?/i)) e = Math.pow(1000, 5);
    unit = unit.slice(m ? m[0].length : 0);
    if (unit.match(/^b(?!yte)/)) num /= 8;
    return num * e;
  }
  function is_ip_local(ip) {
    return ip === "127.0.0.1" || ip === "::1" || ip == "::ffff:127.0.0.1";
  }
  function date_to_string(date, options) {
    if (date === undefined) date = Date.now();
    options = Object.assign({
      date: true,
      time: true,
      delimiter: "-"
    }, options);
    date = new Date(date);
    var parts = date.toISOString().slice(0, -1).split("T");
    if (!options.time) parts.splice(1, 1);
    if (!options.date) parts.splice(0, 1);
    var str = parts.join("-").replace(/[^\d]+/g, options.delimiter);
    return str;
  }
  function uniquify(arr, resolver) {
    if (!resolver) resolver = function resolver(s, i, n) {
      return n > 1 ? "".concat(s, " [").concat(i + 1, "]") : "".concat(s);
    };
    var map = new Map();
    var _iterator14 = _createForOfIteratorHelper$2(arr),
      _step14;
    try {
      for (_iterator14.s(); !(_step14 = _iterator14.n()).done;) {
        var e = _step14.value;
        if (map.has(e)) map.set(map.get(e) + 1);else map.set(e, 1);
      }
    } catch (err) {
      _iterator14.e(err);
    } finally {
      _iterator14.f();
    }
    return arr.map(function (e, i) {
      var n = map.get(e);
      return resolver.apply(null, [e, i, n]);
    });
  }
  function time_delta_readable(delta) {
    var time_formats = [[1, '1 second ago', '1 second from now'], [60, 'seconds', 1], [60 * 2, '1 minute ago', '1 minute from now'], [60 * 60, 'minutes', 60], [60 * 60 * 2, '1 hour ago', '1 hour from now'], [60 * 60 * 24, 'hours', 60 * 60], [60 * 60 * 24 * 2, 'Yesterday', 'Tomorrow'], [60 * 60 * 24 * 7, 'days', 60 * 60 * 24], [60 * 60 * 24 * 7 * 2, 'Last week', 'Next week'], [60 * 60 * 24 * 7 * 4, 'weeks', 60 * 60 * 24 * 7], [60 * 60 * 24 * 7 * 4 * 2, 'Last month', 'Next month'], [60 * 60 * 24 * 7 * 4 * 12, 'months', 60 * 60 * 24 * 30], [60 * 60 * 24 * 7 * 4 * 12 * 2, 'Last year', 'Next year'], [60 * 60 * 24 * 7 * 4 * 12 * 100, 'years', 60 * 60 * 24 * 365], [60 * 60 * 24 * 7 * 4 * 12 * 100 * 2, 'Last century', 'Next century'], [60 * 60 * 24 * 7 * 4 * 12 * 100 * 20, 'centuries', 60 * 60 * 24 * 365 * 100]];
    var seconds = Math.floor(delta / 1000);
    if (seconds == 0) return 'Just now';
    var _ref = seconds < 0 ? ["ago", 1] : ['from now', 2],
      _ref2 = _slicedToArray$1(_ref, 2),
      token = _ref2[0],
      i = _ref2[1];
    seconds = Math.abs(seconds);
    for (var _i5 = 0, _time_formats = time_formats; _i5 < _time_formats.length; _i5++) {
      var format = _time_formats[_i5];
      if (seconds >= format[0]) continue;
      return typeof format[2] === 'string' ? format[i] : "".concat(Math.floor(seconds / format[2]), " ").concat(format[1], " ").concat(token);
    }
    return time;
  }
  function time_diff_readable(from, to) {
    if (from && !to) {
      var _ref3 = [new Date(), from];
      from = _ref3[0];
      to = _ref3[1];
    }
    if (!from) from = new Date();
    if (!to) to = new Date();
    return time_delta_readable(to - from);
  }
  function split_path(path) {
    return path.split(path_separator_regex).filter(function (p) {
      return p;
    });
  }
  /* register_change(obj, name) {
  	return (key,value) => {
  		// if key is int, value an array element.
  		if (typeof key === "number") {
  			if (!obj[name]) obj[name] = [];
  			obj[name].push(value);
  		} else {
  			if (!obj[name]) obj[name] = {};
  			obj[name][key] = value;
  		}
  	}
  }, */
  function is_plain_object(obj) {
    return _typeof$3(obj) === 'object' && obj !== null && obj.constructor === Object && Object.prototype.toString.call(obj) === '[object Object]';
  }
  function websocket_ready(ws) {
    var is_open = ws ? ws.readyState === 1 : false;
    if (is_open) return Promise.resolve();
    return new Promise(function (resolve) {
      ws.on("open", function () {
        return resolve();
      });
    });
  }
  /* once(event_emitter, event){
  	return new Promise(resolve=>{
  		event_emitter.once(event, (...args)=>{
  			resolve(...args);
  		})
  	})
  }, */
  /** @template T @param {Object.<string,T|PromiseLike<T>>} obj @returns {Object.<string,Promise<Awaited<T>[]>>}; */
  function promise_all_object(_x) {
    return _promise_all_object.apply(this, arguments);
  }
  function _promise_all_object() {
    _promise_all_object = _asyncToGenerator$1(/*#__PURE__*/_regeneratorRuntime$1().mark(function _callee3(obj) {
      var new_obj;
      return _regeneratorRuntime$1().wrap(function _callee3$(_context6) {
        while (1) switch (_context6.prev = _context6.next) {
          case 0:
            new_obj = {};
            _context6.next = 3;
            return Promise.all(Object.entries(obj).map(function (_ref8) {
              var _ref9 = _slicedToArray$1(_ref8, 2),
                k = _ref9[0],
                p = _ref9[1];
              return Promise.resolve(p).then(function (data) {
                return new_obj[k] = data;
              });
            }));
          case 3:
            return _context6.abrupt("return", new_obj);
          case 4:
          case "end":
            return _context6.stop();
        }
      }, _callee3);
    }));
    return _promise_all_object.apply(this, arguments);
  }
  function replace_all(str, search, replace) {
    return str.split(search).join(replace);
  }
  function shuffle(arra1) {
    var ctr = arra1.length,
      temp,
      index;
    while (ctr > 0) {
      index = Math.floor(Math.random() * ctr);
      ctr--;
      temp = arra1[ctr];
      arra1[ctr] = arra1[index];
      arra1[index] = temp;
    }
    return arra1;
  }
  function matchAll(s, re) {
    var matches = [],
      m = null;
    while (m = re.exec(s)) {
      matches.push(m);
    }
    return matches;
  }
  function promise_timeout(promise) {
    var ms = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 10000;
    if (typeof promise === "function") promise = new Promise(promise);
    if (!ms || ms <= 0) return promise;
    return new Promise(function (resolve, reject) {
      setTimeout(function () {
        reject(new TimeoutError("Timed out in ".concat(ms, "ms.")));
      }, ms);
      promise.then(resolve)["catch"](reject);
    });
  }
  function promise_wait_atleast(promise) {
    var ms = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 10000;
    return Promise.all([promise, timeout(ms)]).then(function (d) {
      return d[0];
    });
  }
  function promise_pool(array, iteratorFn) {
    var poolLimit = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : Infinity;
    var i = 0;
    var ret = [];
    var executing = new Set();
    array = _toConsumableArray$3(array);
    var _enqueue = function enqueue() {
      if (i === array.length) {
        return Promise.resolve();
      }
      var item = array[i];
      var p = Promise.resolve().then(function () {
        return iteratorFn(item, i, array);
      });
      ret.push(p);
      var e = p.then(function () {
        return executing["delete"](e);
      });
      executing.add(e);
      var r = executing.size >= poolLimit ? Promise.race(executing) : Promise.resolve();
      i++;
      return r.then(function () {
        return _enqueue();
      });
    };
    return _enqueue().then(function () {
      return Promise.all(ret);
    });
  }
  function timeout(ms) {
    if (!Number.isFinite(ms) || ms <= 0) return Promise.resolve();
    return new Promise(function (resolve) {
      return setTimeout(resolve, ms);
    });
  }
  function split_string(str, partLength) {
    var list = [];
    if (str !== "" && partLength > 0) {
      for (var i = 0; i < str.length; i += partLength) {
        list.push(str.substr(i, Math.min(partLength, str.length)));
      }
    }
    return list;
  }
  function remove_emojis(str) {
    return str.replace(emoji_regex, '');
  }
  function array_move_before(arr, from, to) {
    if (to > from) to--;
    if (from === to) return arr;
    return array_move(arr, from, to);
  }
  function array_move(arr, from, to) {
    from = clamp$1(from, 0, arr.length - 1);
    to = clamp$1(to, 0, arr.length - 1);
    arr.splice.apply(arr, [to, 0].concat(_toConsumableArray$3(arr.splice(from, 1))));
    return arr;
  }
  function remove_duplicates(arr) {
    var s = new Set();
    var new_arr = [];
    var _iterator15 = _createForOfIteratorHelper$2(arr),
      _step15;
    try {
      for (_iterator15.s(); !(_step15 = _iterator15.n()).done;) {
        var i = _step15.value;
        if (s.has(i)) continue;
        s.add(i);
        new_arr.push(i);
      }
    } catch (err) {
      _iterator15.e(err);
    } finally {
      _iterator15.f();
    }
    return new_arr;
  }
  function timespan_str_to_seconds$1(str) {
    var format = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : "hh:mm:ss";
    return timespan_str_to_ms$1(str, format) / 1000;
  }
  // will also handle decimal points (milliseconds)
  function timespan_str_to_ms$1(str) {
    var format = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : "hh:mm:ss";
    var multiply = 1;
    if (str.startsWith("-")) {
      multiply = -1;
      str = str.slice(1);
    }
    var parts = String(str).split(/:/);
    var format_parts = format.split(/:/);
    if (format_parts.length > parts.length) format_parts = format_parts.slice(-parts.length); // so if str = "10:00" and format = "hh:mm:ss", the assumed format will be "mm:ss"
    else parts = parts.slice(-format_parts.length);
    var ms = 0;
    for (var i = 0; i < parts.length; i++) {
      var v = parseFloat(parts[i]);
      var f = format_parts[i][0];
      if (!Number.isFinite(v)) v = 0; // handles NaN & Infinity
      if (f == "d") ms += v * 24 * 60 * 60 * 1000;else if (f == "h") ms += v * 60 * 60 * 1000;else if (f == "m") ms += v * 60 * 1000;else if (f == "s") ms += v * 1000;
    }
    return ms * multiply;
  }
  // ms
  function ms_to_timespan_str$1(num) {
    var format = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : "hh:mm:ss";
    var negative = num < 0;
    num = Math.abs(+num) || 0;
    var format_parts = format.split(/([^a-z])/i).filter(function (m) {
      return m;
    });
    var parts = [];
    for (var i = 0; i < format_parts.length; i++) {
      var p = format_parts[i];
      var divider = null;
      if (p.startsWith("d")) divider = 24 * 60 * 60 * 1000;else if (p.startsWith("h")) divider = 60 * 60 * 1000;else if (p.startsWith("m")) divider = 60 * 1000;else if (p.startsWith("s")) divider = 1000;else if (p.startsWith("S")) divider = 1;else if (parts.length == 0) continue;
      if (p == "?") {
        if (parts[parts.length - 1] == 0) parts.pop();
        continue;
      }
      if (divider) {
        var v = Math.floor(num / divider);
        p = v.toString().padStart(p.length, "0");
        num -= v * divider;
      }
      parts.push(p);
    }
    return (negative ? "-" : "") + parts.join("");
  }
  function seconds_to_timespan_str(num) {
    var format = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : "hh:mm:ss";
    return ms_to_timespan_str$1(num * 1000, format);
  }
  // ms
  function ms_to_shorthand_str(num) {
    var show_ms = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
    var negative = num < 0;
    num = Math.abs(+num) || 0;
    var parts = [];
    for (var k in DIVIDERS) {
      var divider = DIVIDERS[k];
      var d = Math.floor(num / divider);
      num -= d * divider;
      if (k == "s" && show_ms) {
        d = (d + num / 1000).toFixed(+show_ms);
      }
      if (d) parts.push("".concat(d).concat(k));
    }
    return (negative ? "-" : "") + parts.join(" ");
  }
  function seconds_to_human_readable_str(t) {
    return ms_to_human_readable_str(t * 1000);
  }
  function ms_to_human_readable_str(t) {
    var days = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;
    var hours = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;
    var minutes = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : true;
    var seconds = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : true;
    var o = {};
    if (days) o["Day"] = 1000 * 60 * 60 * 24;
    if (hours) o["Hour"] = 1000 * 60 * 60;
    if (minutes) o["Minute"] = 1000 * 60;
    if (seconds) o["Second"] = 1000;
    var parts = [];
    for (var k in o) {
      var v = Math.floor(t / o[k]);
      if (v) parts.push("".concat(v.toLocaleString(), " ").concat(k).concat(v > 1 ? "s" : ""));
      t -= v * o[k];
    }
    return parts.join(" ") || "0 Seconds";
  }
  function array_remove$1(arr, item) {
    var index = arr.indexOf(item);
    if (index === -1) return false;
    arr.splice(index, 1);
    return true;
  }
  function array_unique(arr) {
    return Array.from(iterate_unique(arr));
  }
  function iterate_unique(arr) {
    var seen, _iterator16, _step16, a;
    return _regeneratorRuntime$1().wrap(function iterate_unique$(_context5) {
      while (1) switch (_context5.prev = _context5.next) {
        case 0:
          seen = new Set();
          _iterator16 = _createForOfIteratorHelper$2(arr);
          _context5.prev = 2;
          _iterator16.s();
        case 4:
          if ((_step16 = _iterator16.n()).done) {
            _context5.next = 13;
            break;
          }
          a = _step16.value;
          if (!seen.has(a)) {
            _context5.next = 8;
            break;
          }
          return _context5.abrupt("continue", 11);
        case 8:
          seen.add(a);
          _context5.next = 11;
          return a;
        case 11:
          _context5.next = 4;
          break;
        case 13:
          _context5.next = 18;
          break;
        case 15:
          _context5.prev = 15;
          _context5.t0 = _context5["catch"](2);
          _iterator16.e(_context5.t0);
        case 18:
          _context5.prev = 18;
          _iterator16.f();
          return _context5.finish(18);
        case 21:
        case "end":
          return _context5.stop();
      }
    }, _marked$1, null, [[2, 15, 18, 21]]);
  }
  function random(min, max) {
    // min and max included
    return Math.random() * (max - min) + min;
  }
  function random_int(min, max) {
    // min and max included
    min = ~~min;
    max = ~~max;
    return Math.floor(Math.random() * (max - min + 1) + min);
  }
  function array_repeat(d, n) {
    // min and max included
    var arr = [];
    while (n-- > 0) arr.push(d);
    return arr;
  }
  function random_string$1(length) {
    var chars = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : "0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ";
    var result = new Array(length),
      num_chars = chars.length;
    for (var i = length; i > 0; --i) result[i] = chars[Math.floor(Math.random() * num_chars)];
    return result.join("");
  }
  function random_hex_string(length) {
    return random_string$1(length, "0123456789abcdef");
  }
  /* random_string(length) {
  	[...Array(length)].map(i=>(~~(Math.random()*36)).toString(36)).join('')
  }, */
  function is_empty(obj) {
    if (!obj) return true;
    if (_typeof$3(obj) !== "object") return false;
    for (var key in obj) {
      if (obj.hasOwnProperty(key)) return false;
    }
    return true;
  }
  function filter_object(obj, filter_callback) {
    var in_place = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;
    if (in_place) {
      for (var _i6 = 0, _Object$keys2 = Object.keys(obj); _i6 < _Object$keys2.length; _i6++) {
        var k = _Object$keys2[_i6];
        if (!filter_callback(k, obj[k])) delete obj[k];
      }
      return obj;
    } else {
      var new_obj = {};
      for (var _i7 = 0, _Object$keys3 = Object.keys(obj); _i7 < _Object$keys3.length; _i7++) {
        var k = _Object$keys3[_i7];
        if (filter_callback(k, obj[k])) new_obj[k] = obj[k];
      }
      return new_obj;
    }
  }
  function array_equals(arr1, arr2) {
    var length = arr1.length;
    if (length !== arr2.length) return false;
    for (var i = 0; i < length; i++) {
      if (arr1[i] !== arr2[i]) return false;
    }
    return true;
  }
  function all_equal$1(array) {
    if (array.length <= 1) return true;
    for (var i = 1; i < array.length; i++) {
      if (array[0] !== array[i]) return false;
    }
    return true;
  }
  /** @template T1 @param {function():T1} cb @param {*} [default_value] @returns {T1} */
  function _try$1(cb) {
    var default_value = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : undefined;
    try {
      return cb();
    } catch (_unused4) {
      return default_value;
    }
  }
  function clear$1(obj) {
    if (Array.isArray(obj)) {
      obj.splice(0, obj.length);
    } else if (_typeof$3(obj) === "object") {
      for (var _i8 = 0, _Object$keys4 = Object.keys(obj); _i8 < _Object$keys4.length; _i8++) {
        var k = _Object$keys4[_i8];
        delete obj[k];
      }
    }
  }
  function round_to_factor$1(num) {
    var f = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1.0;
    return Math.round(num / f) * f;
  }
  function ceil_to_factor(num) {
    var f = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1.0;
    return Math.ceil(num / f) * f;
  }
  function floor_to_factor(num) {
    var f = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1.0;
    return Math.floor(num / f) * f;
  }
  function round_precise(num) {
    var precision = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
    var m = Math.pow(10, precision);
    return Math.round(num * m) / m;
  }
  function clamp$1(a) {
    var min = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
    var max = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1;
    return Math.min(max, Math.max(min, a));
  }
  function lerp$1(x, y, a) {
    return x * (1 - a) + y * a;
  }
  function invlerp(x, y, a) {
    return clamp$1((a - x) / (y - x));
  }
  function range(x1, y1, x2, y2, a) {
    return lerp$1(x2, y2, invlerp(x1, y1, a));
  }
  function loop(num, min, max) {
    var len = max - min;
    num = min + (len != 0 ? (num - min) % len : 0);
    if (num < min) num += len;
    return num;
  }
  function log(n, base) {
    return Math.log(n) / (base ? Math.log(base) : 1);
  }
  /** @param {Iterable<number>} iterable */
  function sum(iterable) {
    var total = 0.0;
    var _iterator17 = _createForOfIteratorHelper$2(iterable),
      _step17;
    try {
      for (_iterator17.s(); !(_step17 = _iterator17.n()).done;) {
        var num = _step17.value;
        total += num;
      }
    } catch (err) {
      _iterator17.e(err);
    } finally {
      _iterator17.f();
    }
    return total;
  }
  /** @param {Iterable<number>} iterable */
  function average(iterable) {
    var total = 0,
      n = 0;
    var _iterator18 = _createForOfIteratorHelper$2(iterable),
      _step18;
    try {
      for (_iterator18.s(); !(_step18 = _iterator18.n()).done;) {
        var num = _step18.value;
        total += num;
        n++;
      }
    } catch (err) {
      _iterator18.e(err);
    } finally {
      _iterator18.f();
    }
    return total / n;
  }
  /** @param {Iterable<number>} iterable */
  function get_best(iterable, cb) {
    var best_item = undefined,
      best_value = undefined,
      i = 0;
    var _iterator19 = _createForOfIteratorHelper$2(iterable),
      _step19;
    try {
      for (_iterator19.s(); !(_step19 = _iterator19.n()).done;) {
        var item = _step19.value;
        var curr_value = cb(item);
        if (i == 0 || curr_value > best_item) {
          best_item = item;
          best_value = curr_value;
        }
        i++;
      }
    } catch (err) {
      _iterator19.e(err);
    } finally {
      _iterator19.f();
    }
    return best_item;
  }
  function key_count(ob) {
    var i = 0;
    for (var k in ob) i++;
    return i;
  }
  /** @template T @param {Record<string,T>} ob @param {number} max_size  @returns {T[]} */
  function trim_object(ob, max_size) {
    var result = [];
    var num_keys = key_count(ob);
    for (var k in ob) {
      if (num_keys <= max_size) break;
      result.push(ob[k]);
      delete ob[k];
      num_keys--;
    }
    return result;
  }
  /**
   * @template T
   * @param {T[]} arr
   * @param {...(function(T):number)} cbs
  */
  function sort(arr) {
    for (var _len11 = arguments.length, cbs = new Array(_len11 > 1 ? _len11 - 1 : 0), _key11 = 1; _key11 < _len11; _key11++) {
      cbs[_key11 - 1] = arguments[_key11];
    }
    if (!cbs.length) cbs = [function (v) {
      return v;
    }];
    return arr.sort(function (a, b) {
      for (var _i9 = 0, _cbs = cbs; _i9 < _cbs.length; _i9++) {
        var cb = _cbs[_i9];
        var av = cb(a),
          bv = cb(b);
        if (!Array.isArray(av)) av = [av, "ASCENDING"];
        if (!Array.isArray(bv)) bv = [bv, "ASCENDING"];
        var m = 1;
        if (av[1] === "ASCENDING") m = 1;else if (av[1] === "DESCENDING") m = -1;else throw new Error();
        if (av[0] < bv[0]) return -1 * m;
        if (av[0] > bv[0]) return 1 * m;
      }
      return 0;
    });
  }
  function set_add(set, vals) {
    var _iterator20 = _createForOfIteratorHelper$2(vals),
      _step20;
    try {
      for (_iterator20.s(); !(_step20 = _iterator20.n()).done;) {
        var v = _step20.value;
        set.add(v);
      }
    } catch (err) {
      _iterator20.e(err);
    } finally {
      _iterator20.f();
    }
  }
  /* best(values, getter, comparator) {
  	var max, best;
  	for (var v of values) {
  		var a = getter(v);
  		if (comparator(a, max)) {
  			best = v;
  			max = a
  		}
  	}
  	return best;
  },
  min(values, cb) {
  	var min=Number.MAX_VALUE, best;
  	for (var v of values) {
  		var a = cb(v);
  		if (a < min) {
  			best = v;
  			min = a
  		}
  	}
  	return best;
  },
  max(values, cb) {
  	var max=Number.MIN_VALUE, best;
  	for (var v of values) {
  		var a = cb(v);
  		if (a > max) {
  			best = v;
  			max = a
  		}
  	}
  	return best;
  }, */
  function num_to_str(num) {
    var decimals = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 2;
    return num.toLocaleString(undefined, {
      minimumFractionDigits: decimals,
      maximumFractionDigits: decimals
    });
  }
  var Ease = {
    // no easing, no acceleration
    linear: function linear(t) {
      return t;
    },
    // accelerating from zero velocity
    inQuad: function inQuad(t) {
      return t * t;
    },
    // decelerating to zero velocity
    outQuad: function outQuad(t) {
      return t * (2 - t);
    },
    // acceleration until halfway, then deceleration
    inOutQuad: function inOutQuad(t) {
      return t < .5 ? 2 * t * t : -1 + (4 - 2 * t) * t;
    },
    // accelerating from zero velocity 
    inCubic: function inCubic(t) {
      return t * t * t;
    },
    // decelerating to zero velocity 
    outCubic: function outCubic(t) {
      return --t * t * t + 1;
    },
    // acceleration until halfway, then deceleration 
    inOutCubic: function inOutCubic(t) {
      return t < .5 ? 4 * t * t * t : (t - 1) * (2 * t - 2) * (2 * t - 2) + 1;
    },
    // accelerating from zero velocity 
    inQuart: function inQuart(t) {
      return t * t * t * t;
    },
    // decelerating to zero velocity 
    outQuart: function outQuart(t) {
      return 1 - --t * t * t * t;
    },
    // acceleration until halfway, then deceleration
    inOutQuart: function inOutQuart(t) {
      return t < .5 ? 8 * t * t * t * t : 1 - 8 * --t * t * t * t;
    },
    // accelerating from zero velocity
    inQuint: function inQuint(t) {
      return t * t * t * t * t;
    },
    // decelerating to zero velocity
    outQuint: function outQuint(t) {
      return 1 + --t * t * t * t * t;
    },
    // acceleration until halfway, then deceleration 
    inOutQuint: function inOutQuint(t) {
      return t < .5 ? 16 * t * t * t * t * t : 1 + 16 * --t * t * t * t * t;
    }
  };
  function remove_trailing_slash(filename) {
    return String(filename).replace(/[\/\\]+$/, "");
  }
  function dirname(filename) {
    filename = String(filename);
    filename = remove_trailing_slash(filename);
    return filename.substring(0, filename.length - basename(filename).length - 1);
  }
  function basename(filename) {
    filename = String(filename);
    return remove_trailing_slash(filename).split(path_separator_regex).pop();
  }
  function split_ext(filename) {
    filename = String(filename);
    var i = filename.lastIndexOf(".");
    if (i == -1) return [filename, ""];
    return [filename.substr(0, i), filename.slice(i)];
  }
  function join_paths() {
    for (var _len12 = arguments.length, paths = new Array(_len12), _key12 = 0; _key12 < _len12; _key12++) {
      paths[_key12] = arguments[_key12];
    }
    var last = paths.pop();
    return [].concat(_toConsumableArray$3(paths.map(function (f) {
      return remove_trailing_slash(f);
    })), [last]).join("/");
  }
  function relative_path(source, target) {
    var target_parts = String(target).split(path_separator_regex);
    var source_parts = String(source).split(path_separator_regex);
    if (array_equals(target_parts, source_parts)) {
      return ".";
    }
    var filename = target_parts.pop();
    var target_path = target_parts.join("/");
    var relative_parts = [];
    while (target_path.indexOf(source_parts.join("/")) === -1) {
      relative_parts.push("..");
      source_parts.pop();
    }
    relative_parts.push.apply(relative_parts, _toConsumableArray$3(target_parts.slice(source_parts.length)).concat([filename]));
    return relative_parts.join("/");
  }
  function split_datetime$1(date) {
    var apply_timezone = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
    return function (date) {
      var date = +new Date(date);
      if (apply_timezone) date += -(+new Date(date).getTimezoneOffset() * 60 * 1000);
      var parts = new Date(date).toISOString().slice(0, -1).split("T");
      if (parts[0][0] == "+") parts[0] = parts[0].slice(1);
      return parts;
    }(date);
  }
  function join_datetime$1(parts) {
    var apply_timezone = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
    var date = +new Date("".concat(parts.join(" "), "Z"));
    if (apply_timezone) date += +new Date(date).getTimezoneOffset() * 60 * 1000;
    return new Date(date);
  }
  function get_property_descriptor$1(obj, property) {
    while (obj) {
      var d = Object.getOwnPropertyDescriptor(obj, property);
      if (d) return d;
      obj = Object.getPrototypeOf(obj);
    }
    return null;
  }
  /** @return {string[]} */
  function get_property_keys(obj) {
    var proto = Object.getPrototypeOf(obj);
    var inherited = proto ? get_property_keys(proto) : [];
    var seen = new Set(inherited);
    return [].concat(_toConsumableArray$3(inherited), _toConsumableArray$3(Object.getOwnPropertyNames(obj).filter(function (k) {
      return !seen.has(k);
    })));
  }
  /* *walk(o, children_delegate) {
  	for (var c of children_delegate.apply(o, [o])) {
  		yield c;
  		var children = walk(c,children_delegate)
  		if (children && Symbol.iterator in children) {
  			for (var sc of children) {
  				yield sc;
  			}
  		}
  	}
  }, */
  /** @template T @param {T} o @param {function(T):Iterable<T>} children_cb */
  function flatten_tree(o, children_cb) {
    /** @type {T[]} */
    var result = [];
    var _next3 = function next(o) {
      result.push(o);
      var children = children_cb.apply(o, [o]);
      if (!children || !(Symbol.iterator in children)) return;
      var _iterator21 = _createForOfIteratorHelper$2(children),
        _step21;
      try {
        for (_iterator21.s(); !(_step21 = _iterator21.n()).done;) {
          var c = _step21.value;
          _next3(c);
        }
      } catch (err) {
        _iterator21.e(err);
      } finally {
        _iterator21.f();
      }
    };
    _next3(o);
    return result;
  }
  /** @template T @param {T} obj @param {Function(any):any} replacer @return {T} */
  function deep_copy$1(obj, replacer) {
    if (_typeof$3(obj) !== 'object' || obj === null) return obj;
    return JSON.parse(replacer ? JSON.stringify(obj, replacer) : JSON.stringify(obj));
  }
  function deep_filter(obj, cb) {
    var new_obj = Array.isArray(obj) ? [] : {};
    for (var _i10 = 0, _Object$keys5 = Object.keys(obj); _i10 < _Object$keys5.length; _i10++) {
      var k = _Object$keys5[_i10];
      if (_typeof$3(obj[k]) === "object" && obj[k] !== null) new_obj[k] = deep_filter(obj[k], cb);else if (cb.apply(obj, [k, obj[k]])) new_obj[k] = obj[k];
    }
    return new_obj;
  }
  function deep_merge(dst, src) {
    var delete_nulls = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;
    var info = {
      changes: 0
    };
    var _deep_merge = function deep_merge(dst, src) {
      var is_array = Array.isArray(src);
      for (var k in src) {
        if (_typeof$3(src[k]) === 'object' && src[k] !== null) {
          if (_typeof$3(dst[k]) !== "object" || dst[k] === null) {
            dst[k] = Array.isArray(src[k]) ? [] : {};
            info.changes++;
          }
          _deep_merge(dst[k], src[k]);
        } else {
          if (dst[k] !== src[k]) info.changes++;
          if (!is_array && delete_nulls && src[k] === null) delete dst[k];else dst[k] = src[k];
        }
      }
      if (is_array) dst.length = src.length;
    };
    _deep_merge(dst, src);
    return info;
  }
  function deep_assign(o1) {
    if (_typeof$3(o1) !== "object") throw new Error("deep_assign requires Object as first argument");
    for (var _len13 = arguments.length, objects = new Array(_len13 > 1 ? _len13 - 1 : 0), _key13 = 1; _key13 < _len13; _key13++) {
      objects[_key13 - 1] = arguments[_key13];
    }
    for (var _i11 = 0, _objects = objects; _i11 < _objects.length; _i11++) {
      var o2 = _objects[_i11];
      deep_merge(o1, o2);
    }
    return o1;
  }
  // syncs 2 objects to become identical, everything besides key order.
  function deep_sync(dst, src) {
    var dst_keys = Object.keys(dst);
    for (var k in src) {
      if (src[k] === dst[k]) continue;
      if (src[k] !== null && dst[k] !== null && _typeof$3(src[k]) === 'object' && _typeof$3(dst[k]) === 'object' && Array.isArray(src[k]) == Array.isArray(dst[k])) {
        deep_sync(dst[k], src[k]);
      } else {
        dst[k] = deep_copy$1(src[k]);
      }
    }
    if (Array.isArray(src)) dst.length = src.length;
    for (var _i12 = 0, _dst_keys = dst_keys; _i12 < _dst_keys.length; _i12++) {
      var k = _dst_keys[_i12];
      if (!(k in src)) delete dst[k];
    }
  }
  /* deep_diff(o1, o2) {
  	var changes = [];
  	function _deep_diff(o1,o2,path) {
  		if (typeof o1 !== "object" || typeof o2 !== "object") {
  			var type;
  			if (o1 === o2) return;
  			else if (o1 === undefined) type = "created";
  			else if (o2 === undefined) type = "deleted";
  			else type = "changed";
  			changes.push({
  				path,
  				type,
  				old_value: o1,
  				new_value: o2,
  			});
  		} else {
  			for (var key in o1) {
  				_deep_diff(o1[key], o2[key], [...path, key]);
  			}
  			for (var key in o2) {
  				if (o1[key] === undefined) _deep_diff(undefined, o2[key], [...path, key]);
  			}
  		}
  	}
  	_deep_diff(o1,o2,[]);
  	return changes;
  }, */
  function deep_equals(o1, o2) {
    var t1 = _typeof$3(o1);
    var t2 = _typeof$3(o2);
    if (t1 === "object" && t2 === "object" && o1 !== null && o2 !== null) {
      for (var k in o1) {
        if (!deep_equals(o1[k], o2[k])) return false;
      }
      for (var k in o2) {
        if (!(k in o1)) return false;
      }
      return true;
    } else {
      if (t1 == "number" && t2 == "number" && isNaN(o1) && isNaN(o2)) return true;
      if (o1 === o2) return true;
      return false;
    }
  }
  /* deep_equals(a, b) {
  	if (a === b) return true;
  	var [a_type,b_type] = [typeof a, typeof b];
  	if (a_type !== b_type) return false;
  	if (a_type === 'number' && isNaN(a) && isNaN(b)) return true;
  	if (a_type !== "object") return a === b;
  	var [a_keys,b_keys] = [Object.keys(a),Object.keys(b)];
  	if (a_keys.length !== b_keys.length) return false;
  	if (!a_keys.every((key)=>b.hasOwnProperty(key))) return false;
  	return a_keys.every((key)=>deep_equals(a[key], b[key]));
  }, */
  function deep_diff(o1, o2) {
    function _deep_diff(o1, o2) {
      if (_typeof$3(o1) === "object" && _typeof$3(o2) === "object" && o1 !== null && o2 !== null) {
        var diff = {},
          diffs = 0;
        for (var k in o1) {
          var d = _deep_diff(o1[k], o2[k]);
          if (d) {
            diff[k] = d;
            diffs++;
          }
        }
        for (var k in o2) {
          if (k in o1) continue;
          var d = _deep_diff(undefined, o2[k]);
          if (d) {
            diff[k] = d;
            diffs++;
          }
        }
        if (diffs) {
          return diff;
        }
      } else {
        if (deep_equals(o1, o2)) return;
        return new Diff$1(o1, o2);
      }
    }
    return _deep_diff(o1, o2) || {};
  }

  // flattens tree like object structure to list of paths and values
  function deep_entries(o) {
    var only_values = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;
    var filter = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;
    if (o == null) throw new Error("Cannot convert undefined or null to object");
    var entries = [];
    var _walk = function walk(o, path) {
      if (_typeof$3(o) === "object" && o !== null) {
        if (!only_values && path.length) entries.push([path, o]);
        for (var k in o) {
          var new_path = [].concat(_toConsumableArray$3(path), [k]);
          if (filter && !filter.apply(o, [k, o[k], new_path])) {
            entries.push([new_path, o[k]]);
            continue;
          }
          _walk(o[k], new_path);
        }
      } else {
        entries.push([path, o]);
      }
    };
    _walk(o, []);
    return entries;
  }
  function deep_keys(o) {
    var only_values = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;
    var filter = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;
    return deep_entries(o, only_values, filter).map(function (_ref4) {
      var _ref5 = _slicedToArray$1(_ref4, 2),
        k = _ref5[0];
        _ref5[1];
      return k;
    });
  }
  function deep_values(o) {
    var only_values = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;
    var filter = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;
    return deep_entries(o, only_values, filter).map(function (_ref6) {
      var _ref7 = _slicedToArray$1(_ref6, 2);
        _ref7[0];
        var v = _ref7[1];
      return v;
    });
  }
  function pathed_key_to_lookup(key, value) {
    var target = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
    var path = typeof key === "string" ? key.split("/") : _toConsumableArray$3(key);
    var curr = target;
    for (var i = 0; i < path.length - 1; i++) {
      var p = path[i];
      if (_typeof$3(curr[p]) !== "object" || curr[p] === null) curr[p] = {};
      curr = curr[p];
    }
    curr[path[path.length - 1]] = value;
    return target;
  }
  function tree_from_entries(entries) {
    var root = {};
    if (!Array.isArray(entries)) entries = [entries];
    var _iterator22 = _createForOfIteratorHelper$2(entries),
      _step22;
    try {
      for (_iterator22.s(); !(_step22 = _iterator22.n()).done;) {
        var c = _step22.value;
        if (Array.isArray(c)) {
          deep_merge(root, pathed_key_to_lookup(c[0], c[1]));
        } else {
          for (var k in c) {
            deep_merge(root, pathed_key_to_lookup(k, c[k]));
          }
        }
      }
    } catch (err) {
      _iterator22.e(err);
    } finally {
      _iterator22.f();
    }
    return root;
  }
  /** @typedef {[id:any,pid:any]} TreeCallbackResult */
  /** @template T @typedef {{value:T,children:TreeNode<T>[]}} TreeNode<T> */
  /** @template T @param {T[]} list @param {function(T):TreeCallbackResult} cb */
  function tree(list, cb) {
    var nodes = {},
      /** @type {TreeCallbackResult[]} */infos = [],
      /** @type {TreeNode<T>[]} */root_nodes = [];
    var i;
    for (i = 0; i < list.length; i++) {
      var info = infos[i] = cb(list[i]);
      nodes[info[0]] = {
        value: list[i],
        children: []
      };
    }
    for (i = 0; i < list.length; i++) {
      var info = infos[i];
      var node = nodes[info[0]];
      var parent_node = nodes[info[1]];
      if (parent_node) {
        parent_node.children.push(node);
      } else {
        root_nodes.push(node);
      }
    }
    return root_nodes;
  }
  function deep_map(o, cb) {
    if (_typeof$3(o) !== "object" || o === null) return;
    var new_o = {};
    for (var k in o) {
      if (_typeof$3(o[k]) === "object" && o[k] !== null) {
        new_o[k] = deep_map(o[k], cb);
      } else {
        new_o[k] = cb.apply(o, [k, o[k]]);
      }
    }
    return new_o;
  }
  function deep_walk(o, delegate_filter) {
    var _deep_walk = function deep_walk(o, delegate_filter, path) {
      if (_typeof$3(o) !== "object" || o === null) return;
      for (var k in o) {
        if (delegate_filter && delegate_filter.apply(o, [k, o[k], [].concat(_toConsumableArray$3(path), [k])]) === false) continue;
        _deep_walk(o[k], delegate_filter, [].concat(_toConsumableArray$3(path), [k]));
      }
    };
    _deep_walk(o, delegate_filter, []);
  }
  function replace_async(_x2, _x3, _x4) {
    return _replace_async.apply(this, arguments);
  }
  function _replace_async() {
    _replace_async = _asyncToGenerator$1(/*#__PURE__*/_regeneratorRuntime$1().mark(function _callee4(str, re, callback) {
      var parts, i, m, args, strings;
      return _regeneratorRuntime$1().wrap(function _callee4$(_context7) {
        while (1) switch (_context7.prev = _context7.next) {
          case 0:
            str = String(str);
            parts = [], i = 0;
            if (!(re instanceof RegExp)) {
              _context7.next = 15;
              break;
            }
            if (re.global) re.lastIndex = i;
          case 4:
            if (!(m = re.exec(str))) {
              _context7.next = 13;
              break;
            }
            args = m.concat([m.index, m.input]);
            parts.push(str.slice(i, m.index), callback.apply(null, args));
            i = re.lastIndex;
            if (re.global) {
              _context7.next = 10;
              break;
            }
            return _context7.abrupt("break", 13);
          case 10:
            // for non-global regexes only take the first match
            if (m[0].length == 0) re.lastIndex++;
            _context7.next = 4;
            break;
          case 13:
            _context7.next = 19;
            break;
          case 15:
            re = String(re);
            i = str.indexOf(re);
            parts.push(str.slice(0, i), callback.apply(null, [re, i, str]));
            i += re.length;
          case 19:
            parts.push(str.slice(i));
            _context7.next = 22;
            return Promise.all(parts);
          case 22:
            strings = _context7.sent;
            return _context7.abrupt("return", strings.join(""));
          case 24:
          case "end":
            return _context7.stop();
        }
      }, _callee4);
    }));
    return _replace_async.apply(this, arguments);
  }
  function get$1(fn_this, fn_path) {
    // if (typeof fn_path === "string") fn_path = fn_path.split(/\./);
    if (!Array.isArray(fn_path)) fn_path = [fn_path];
    var fn_ref = fn_this;
    try {
      var _iterator23 = _createForOfIteratorHelper$2(fn_path),
        _step23;
      try {
        for (_iterator23.s(); !(_step23 = _iterator23.n()).done;) {
          var fn_part = _step23.value;
          fn_this = fn_ref;
          var descriptor = get_property_descriptor$1(fn_ref, fn_part);
          if (descriptor && descriptor.get) fn_ref = descriptor.get.call(fn_this);else fn_ref = fn_ref[fn_part];
          // fn_ref = descriptor ? (descriptor.get ? descriptor.get.call(fn_this) : descriptor.value) : undefined;
        }
      } catch (err) {
        _iterator23.e(err);
      } finally {
        _iterator23.f();
      }
    } catch (_unused5) {
      throw new RefException$1("".concat(fn_this, " -> ").concat(fn_path));
    }
    return fn_ref;
  }
  function set$1(fn_this, fn_path, fn_value) {
    // if (typeof fn_path === "string") fn_path = fn_path.split(/\./);
    if (!Array.isArray(fn_path)) fn_path = [fn_path];
    var fn_ref = get$1(fn_this, fn_path.slice(0, -1));
    var prop = fn_path.slice(-1)[0];
    var descriptor = get_property_descriptor$1(fn_ref, prop);
    if (descriptor && descriptor.set) descriptor.set.call(fn_this, [fn_value]);else fn_ref[prop] = fn_value;
    return true;
  }
  function _delete(fn_this, fn_path) {
    // if (typeof fn_path === "string") fn_path = fn_path.split(/\./);
    if (!Array.isArray(fn_path)) fn_path = [fn_path];
    try {
      var fn_ref = get$1(fn_this, fn_path.slice(0, -1));
      var prop = fn_path.slice(-1)[0];
      delete fn_ref[prop];
    } catch (_unused6) {}
  }
  function call(fn_this, fn_path, fn_args) {
    var args = Array.prototype.slice.call(arguments);
    // if (typeof fn_path === "string") fn_path = fn_path.split(/\./);
    if (!Array.isArray(fn_path)) fn_path = [fn_path];
    if (!Array.isArray(fn_args)) fn_args = [fn_args];
    var fn_this = get$1(fn_this, fn_path.slice(0, -1));
    var fn_ref = get$1(fn_this, fn_path.slice(-1));
    if (fn_ref) {
      return fn_ref.apply(fn_this, fn_args);
    } else {
      throw new RefException$1("Bad call ref: ".concat(args.join(", ")));
    }
  }
  function build_url() {
    var config, url;
    for (var _len14 = arguments.length, args = new Array(_len14), _key14 = 0; _key14 < _len14; _key14++) {
      args[_key14] = arguments[_key14];
    }
    if (args.length == 1) {
      config = args[0];
    } else {
      url = args[0];
      config = args[1];
    }
    url = String(url || (typeof window !== "undefined" && window.location ? window.location.origin : null) || "https://localhost");
    var protocol = url.match(/^([^:]+:)?\/\//)[0];
    url = "https://" + url.slice(protocol.length);
    if (config.protocol) protocol = config.protocol;
    var url_ob = new URL(url);
    for (var k in config) url_ob[k] = config[k];
    url = url_ob.toString();
    if (url_ob.protocol != protocol) url = url.replace("https:", protocol);
    return url;
  }
  function path_to_file_uri(path) {
    if (!path.startsWith("/")) path = "/" + path;
    return new URL("file://" + path).toString();
  }
  function file_uri_to_path(uri) {
    if (typeof uri !== 'string' || uri.substring(0, 7) !== 'file://') {
      throw new TypeError('Must pass in a file:// URI to convert to a file path');
    }
    var rest = decodeURI(uri.substring(7));
    var firstSlash = rest.indexOf('/');
    var host = rest.substring(0, firstSlash);
    var path = rest.substring(firstSlash + 1);
    if (host === 'localhost') host = '';
    if (host) host = "//" + host;
    path = path.replace(/^(.+)\|/, '$1:');
    // path = path.replace(/\//g, '\\');
    // if not windows path...
    if (!/^.+:/.test(path)) {
      path = "/" + path;
    }
    return host + path;
  }
  function try_file_uri_to_path(uri) {
    try {
      return file_uri_to_path(uri);
    } catch (e) {
      return uri;
    }
  }
  /* get_random_values(array) {
  	for (let i = 0, l = array.length; i < l; i++) {
  			array[i] = Math.floor(Math.random() * 256);
  	}
  	return array;
  }, */
  function convert_links_to_html(str) {
    return str.replace(/(\b(https?|ftp):\/\/[-A-Z0-9+&@#\/%?=~_|!:,.;]*[-A-Z0-9+&@#\/%=~_|])/gim, '<a href="$1" target="_blank">$1</a>');
  }
  function convert_bytes(num) {
    var precision = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 2;
    num = Math.abs(num);
    var divider = 1;
    for (var _i13 = 0, _arr2 = ["bytes", "KB", "MB", "GB", "TB", "PB"]; _i13 < _arr2.length; _i13++) {
      x = _arr2[_i13];
      if (num / divider < 1024.0) break;
      divider *= 1024.0;
    }
    return "".concat((num / divider).toFixed(precision), " ").concat(x);
  }
  function get_default_stream(streams, type) {
    var index_map = new Map();
    streams.forEach(function (s, i) {
      return index_map.set(s, i);
    });
    if (type === "subtitle") streams = streams.filter(function (s) {
      return s["default"] || s.forced;
    });
    return sort(_toConsumableArray$3(streams), function (s) {
      return +s.forced;
    }, function (s) {
      return +s["default"];
    }, function (s) {
      return -index_map.get(s);
    }).pop();
  }

  /* fmod(a,b) {
  	return Number((a - (Math.floor(a / b) * b)));
  } */

  // the following junk prevents node 16.13.0 + vs code crashing when I start the debugger (weird but true)
  // a:1,
  // b:1,
  // c:1,
  var _cache = /*#__PURE__*/new WeakMap();
  var _limit = /*#__PURE__*/new WeakMap();
  var _n = /*#__PURE__*/new WeakMap();
  var Cache = /*#__PURE__*/function () {
    function Cache() {
      var limit = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;
      _classCallCheck$2(this, Cache);
      _classPrivateFieldInitSpec$1(this, _cache, {});
      _classPrivateFieldInitSpec$1(this, _limit, 0);
      _classPrivateFieldInitSpec$1(this, _n, 0);
      _classPrivateFieldSet$1(_limit, this, limit);
    }
    return _createClass$2(Cache, [{
      key: "has",
      value: function has(key) {
        return key in _classPrivateFieldGet$1(_cache, this);
      }
    }, {
      key: "get",
      value: function get(key) {
        return _classPrivateFieldGet$1(_cache, this)[key];
      }
    }, {
      key: "set",
      value: function set(key, value) {
        var _this$n3;
        if (key in _classPrivateFieldGet$1(_cache, this)) {
          var _this$n;
          delete _classPrivateFieldGet$1(_cache, this)[key];
          _classPrivateFieldSet$1(_n, this, (_this$n = _classPrivateFieldGet$1(_n, this), _this$n--, _this$n));
        }
        _classPrivateFieldGet$1(_cache, this)[key] = value;
        _classPrivateFieldSet$1(_n, this, (_this$n3 = _classPrivateFieldGet$1(_n, this), _this$n3++, _this$n3));
        if (_classPrivateFieldGet$1(_limit, this) > 0) {
          for (var k in _classPrivateFieldGet$1(_cache, this)) {
            var _this$n5;
            if (_classPrivateFieldGet$1(_n, this) <= _classPrivateFieldGet$1(_limit, this)) break;
            delete _classPrivateFieldGet$1(_cache, this)[k];
            _classPrivateFieldSet$1(_n, this, (_this$n5 = _classPrivateFieldGet$1(_n, this), _this$n5--, _this$n5));
          }
        }
      }
    }]);
  }();
  function nearest$1(num) {
    var minDiff = Number.MAX_VALUE;
    for (var _len15 = arguments.length, values = new Array(_len15 > 1 ? _len15 - 1 : 0), _key15 = 1; _key15 < _len15; _key15++) {
      values[_key15 - 1] = arguments[_key15];
    }
    for (var _i14 = 0, _values = values; _i14 < _values.length; _i14++) {
      var val = _values[_i14];
      var m = Math.abs(num - values[i]);
      if (m < minDiff) {
        minDiff = m;
        curr = val;
      }
    }
    return curr;
  }
  function truncate(str, len) {
    var suffix = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : "";
    str = String(str);
    if (str.length > len) str = str.slice(0, len) + suffix;
    return str;
  }

  /** @returns {Promise & {resolve:function(any):void, reject:function(any):void}} */
  function deferred() {
    var resolve, reject;
    var prom = new Promise(function (_resolve, _reject) {
      resolve = _resolve;
      reject = _reject;
    });
    prom.resolve = resolve;
    prom.reject = reject;
    return prom;
  }
  function fix_url(_url) {
    _url = String(_url).trim();
    var url;
    try {
      url = new URL(url);
      if (!url.hostname) url = new URL("https://" + _url);
    } catch (_unused7) {
      try {
        url = new URL("https://" + _url);
      } catch (_unused8) {
        return;
      }
    }
    return url.toString();
  }

  var md5 = libExports.md5;

  var utils = /*#__PURE__*/Object.freeze({
    __proto__: null,
    Cache: Cache,
    Color: Color$2,
    Diff: Diff$1,
    Ease: Ease,
    EventEmitter: EventEmitter$1,
    Interval: Interval,
    Observer: Observer,
    OrderedSet: OrderedSet,
    Point: Point$1,
    PromisePool: PromisePool,
    RangeTree: RangeTree,
    Rectangle: Rectangle$1,
    RefException: RefException$1,
    StopWatch: StopWatch$1,
    TimeoutError: TimeoutError,
    Timer: Timer$1,
    URLParams: URLParams,
    all_equal: all_equal$1,
    almost_equal: almost_equal,
    array_equals: array_equals,
    array_move: array_move,
    array_move_before: array_move_before,
    array_remove: array_remove$1,
    array_repeat: array_repeat,
    array_unique: array_unique,
    average: average,
    basename: basename,
    build_url: build_url,
    call: call,
    capitalize: capitalize,
    ceil_to_factor: ceil_to_factor,
    clamp: clamp$1,
    clear: clear$1,
    convert_bytes: convert_bytes,
    convert_links_to_html: convert_links_to_html,
    date_to_string: date_to_string,
    debounce: debounce$5,
    deep_assign: deep_assign,
    deep_copy: deep_copy$1,
    deep_diff: deep_diff,
    deep_entries: deep_entries,
    deep_equals: deep_equals,
    deep_filter: deep_filter,
    deep_keys: deep_keys,
    deep_map: deep_map,
    deep_merge: deep_merge,
    deep_sync: deep_sync,
    deep_values: deep_values,
    deep_walk: deep_walk,
    deferred: deferred,
    delete: _delete,
    dirname: dirname,
    domain_match: domain_match,
    emoji_regex: emoji_regex,
    escape_regex: escape_regex,
    file_uri_to_path: file_uri_to_path,
    filter_object: filter_object,
    fix_url: fix_url,
    flatten_tree: flatten_tree,
    floor_to_factor: floor_to_factor,
    format_bytes: format_bytes,
    get: get$1,
    get_best: get_best,
    get_default_stream: get_default_stream,
    get_property_descriptor: get_property_descriptor$1,
    get_property_keys: get_property_keys,
    group_by: group_by,
    invlerp: invlerp,
    is_absolute_path: is_absolute_path,
    is_empty: is_empty,
    is_ip_local: is_ip_local,
    is_numeric: is_numeric,
    is_path_remote: is_path_remote,
    is_plain_object: is_plain_object,
    is_uri: is_uri,
    is_valid_ip: is_valid_ip,
    is_valid_rtmp_url: is_valid_rtmp_url$1,
    is_valid_url: is_valid_url$1,
    iterate_unique: iterate_unique,
    join_datetime: join_datetime$1,
    join_paths: join_paths,
    kebabcase: kebabcase,
    key_count: key_count,
    lerp: lerp$1,
    log: log,
    loop: loop,
    map_group_by: map_group_by,
    matchAll: matchAll,
    md5: md5,
    ms_to_human_readable_str: ms_to_human_readable_str,
    ms_to_shorthand_str: ms_to_shorthand_str,
    ms_to_timespan_str: ms_to_timespan_str$1,
    nearest: nearest$1,
    num_to_str: num_to_str,
    options_proxy: options_proxy,
    path_separator_regex: path_separator_regex,
    path_to_file_uri: path_to_file_uri,
    pathed_key_to_lookup: pathed_key_to_lookup,
    promise_all_object: promise_all_object,
    promise_pool: promise_pool,
    promise_timeout: promise_timeout,
    promise_wait_atleast: promise_wait_atleast,
    random: random,
    random_hex_string: random_hex_string,
    random_int: random_int,
    random_string: random_string$1,
    range: range,
    regex: regex,
    relative_path: relative_path,
    remove_duplicates: remove_duplicates,
    remove_emojis: remove_emojis,
    remove_nulls: remove_nulls,
    remove_trailing_slash: remove_trailing_slash,
    replace_all: replace_all,
    replace_async: replace_async,
    round_precise: round_precise,
    round_to_factor: round_to_factor$1,
    sanitize_filename: sanitize_filename,
    seconds_to_human_readable_str: seconds_to_human_readable_str,
    seconds_to_timespan_str: seconds_to_timespan_str,
    set: set$1,
    set_add: set_add,
    set_difference: set_difference,
    set_intersection: set_intersection,
    set_union: set_union,
    sets_equal: sets_equal,
    shuffle: shuffle,
    sort: sort,
    split_after_first_line: split_after_first_line,
    split_datetime: split_datetime$1,
    split_ext: split_ext,
    split_path: split_path,
    split_string: split_string,
    string_to_bytes: string_to_bytes,
    sum: sum,
    throttle: throttle$2,
    time_delta_readable: time_delta_readable,
    time_diff_readable: time_diff_readable,
    timeout: timeout,
    timespan_str_to_ms: timespan_str_to_ms$1,
    timespan_str_to_seconds: timespan_str_to_seconds$1,
    transpose: transpose,
    tree: tree,
    tree_from_entries: tree_from_entries,
    trim_object: trim_object,
    truncate: truncate,
    try: _try$1,
    try_file_uri_to_path: try_file_uri_to_path,
    uniquify: uniquify,
    websocket_ready: websocket_ready,
    zip: zip
  });

  var top = 'top';
  var bottom = 'bottom';
  var right = 'right';
  var left = 'left';
  var auto = 'auto';
  var basePlacements = [top, bottom, right, left];
  var start = 'start';
  var end = 'end';
  var clippingParents = 'clippingParents';
  var viewport = 'viewport';
  var popper = 'popper';
  var reference = 'reference';
  var variationPlacements = /*#__PURE__*/basePlacements.reduce(function (acc, placement) {
    return acc.concat([placement + "-" + start, placement + "-" + end]);
  }, []);
  var placements = /*#__PURE__*/[].concat(basePlacements, [auto]).reduce(function (acc, placement) {
    return acc.concat([placement, placement + "-" + start, placement + "-" + end]);
  }, []); // modifiers that need to read the DOM

  var beforeRead = 'beforeRead';
  var read = 'read';
  var afterRead = 'afterRead'; // pure-logic modifiers

  var beforeMain = 'beforeMain';
  var main = 'main';
  var afterMain = 'afterMain'; // modifier with the purpose to write to the DOM (or write into a framework state)

  var beforeWrite = 'beforeWrite';
  var write = 'write';
  var afterWrite = 'afterWrite';
  var modifierPhases = [beforeRead, read, afterRead, beforeMain, main, afterMain, beforeWrite, write, afterWrite];

  function getNodeName(element) {
    return element ? (element.nodeName || '').toLowerCase() : null;
  }

  function getWindow(node) {
    if (node == null) {
      return window;
    }

    if (node.toString() !== '[object Window]') {
      var ownerDocument = node.ownerDocument;
      return ownerDocument ? ownerDocument.defaultView || window : window;
    }

    return node;
  }

  function isElement$2(node) {
    var OwnElement = getWindow(node).Element;
    return node instanceof OwnElement || node instanceof Element;
  }

  function isHTMLElement$1(node) {
    var OwnElement = getWindow(node).HTMLElement;
    return node instanceof OwnElement || node instanceof HTMLElement;
  }

  function isShadowRoot(node) {
    // IE 11 has no ShadowRoot
    if (typeof ShadowRoot === 'undefined') {
      return false;
    }

    var OwnElement = getWindow(node).ShadowRoot;
    return node instanceof OwnElement || node instanceof ShadowRoot;
  }

  // and applies them to the HTMLElements such as popper and arrow

  function applyStyles(_ref) {
    var state = _ref.state;
    Object.keys(state.elements).forEach(function (name) {
      var style = state.styles[name] || {};
      var attributes = state.attributes[name] || {};
      var element = state.elements[name]; // arrow is optional + virtual elements

      if (!isHTMLElement$1(element) || !getNodeName(element)) {
        return;
      } // Flow doesn't support to extend this property, but it's the most
      // effective way to apply styles to an HTMLElement
      // $FlowFixMe[cannot-write]


      Object.assign(element.style, style);
      Object.keys(attributes).forEach(function (name) {
        var value = attributes[name];

        if (value === false) {
          element.removeAttribute(name);
        } else {
          element.setAttribute(name, value === true ? '' : value);
        }
      });
    });
  }

  function effect$2(_ref2) {
    var state = _ref2.state;
    var initialStyles = {
      popper: {
        position: state.options.strategy,
        left: '0',
        top: '0',
        margin: '0'
      },
      arrow: {
        position: 'absolute'
      },
      reference: {}
    };
    Object.assign(state.elements.popper.style, initialStyles.popper);
    state.styles = initialStyles;

    if (state.elements.arrow) {
      Object.assign(state.elements.arrow.style, initialStyles.arrow);
    }

    return function () {
      Object.keys(state.elements).forEach(function (name) {
        var element = state.elements[name];
        var attributes = state.attributes[name] || {};
        var styleProperties = Object.keys(state.styles.hasOwnProperty(name) ? state.styles[name] : initialStyles[name]); // Set all values to an empty string to unset them

        var style = styleProperties.reduce(function (style, property) {
          style[property] = '';
          return style;
        }, {}); // arrow is optional + virtual elements

        if (!isHTMLElement$1(element) || !getNodeName(element)) {
          return;
        }

        Object.assign(element.style, style);
        Object.keys(attributes).forEach(function (attribute) {
          element.removeAttribute(attribute);
        });
      });
    };
  } // eslint-disable-next-line import/no-unused-modules


  var applyStyles$1 = {
    name: 'applyStyles',
    enabled: true,
    phase: 'write',
    fn: applyStyles,
    effect: effect$2,
    requires: ['computeStyles']
  };

  function getBasePlacement$1(placement) {
    return placement.split('-')[0];
  }

  var max = Math.max;
  var min = Math.min;
  var round$1 = Math.round;

  function getUAString() {
    var uaData = navigator.userAgentData;

    if (uaData != null && uaData.brands && Array.isArray(uaData.brands)) {
      return uaData.brands.map(function (item) {
        return item.brand + "/" + item.version;
      }).join(' ');
    }

    return navigator.userAgent;
  }

  function isLayoutViewport() {
    return !/^((?!chrome|android).)*safari/i.test(getUAString());
  }

  function getBoundingClientRect$1(element, includeScale, isFixedStrategy) {
    if (includeScale === void 0) {
      includeScale = false;
    }

    if (isFixedStrategy === void 0) {
      isFixedStrategy = false;
    }

    var clientRect = element.getBoundingClientRect();
    var scaleX = 1;
    var scaleY = 1;

    if (includeScale && isHTMLElement$1(element)) {
      scaleX = element.offsetWidth > 0 ? round$1(clientRect.width) / element.offsetWidth || 1 : 1;
      scaleY = element.offsetHeight > 0 ? round$1(clientRect.height) / element.offsetHeight || 1 : 1;
    }

    var _ref = isElement$2(element) ? getWindow(element) : window,
        visualViewport = _ref.visualViewport;

    var addVisualOffsets = !isLayoutViewport() && isFixedStrategy;
    var x = (clientRect.left + (addVisualOffsets && visualViewport ? visualViewport.offsetLeft : 0)) / scaleX;
    var y = (clientRect.top + (addVisualOffsets && visualViewport ? visualViewport.offsetTop : 0)) / scaleY;
    var width = clientRect.width / scaleX;
    var height = clientRect.height / scaleY;
    return {
      width: width,
      height: height,
      top: y,
      right: x + width,
      bottom: y + height,
      left: x,
      x: x,
      y: y
    };
  }

  // means it doesn't take into account transforms.

  function getLayoutRect(element) {
    var clientRect = getBoundingClientRect$1(element); // Use the clientRect sizes if it's not been transformed.
    // Fixes https://github.com/popperjs/popper-core/issues/1223

    var width = element.offsetWidth;
    var height = element.offsetHeight;

    if (Math.abs(clientRect.width - width) <= 1) {
      width = clientRect.width;
    }

    if (Math.abs(clientRect.height - height) <= 1) {
      height = clientRect.height;
    }

    return {
      x: element.offsetLeft,
      y: element.offsetTop,
      width: width,
      height: height
    };
  }

  function contains(parent, child) {
    var rootNode = child.getRootNode && child.getRootNode(); // First, attempt with faster native method

    if (parent.contains(child)) {
      return true;
    } // then fallback to custom implementation with Shadow DOM support
    else if (rootNode && isShadowRoot(rootNode)) {
        var next = child;

        do {
          if (next && parent.isSameNode(next)) {
            return true;
          } // $FlowFixMe[prop-missing]: need a better way to handle this...


          next = next.parentNode || next.host;
        } while (next);
      } // Give up, the result is false


    return false;
  }

  function getComputedStyle$1$1(element) {
    return getWindow(element).getComputedStyle(element);
  }

  function isTableElement(element) {
    return ['table', 'td', 'th'].indexOf(getNodeName(element)) >= 0;
  }

  function getDocumentElement(element) {
    // $FlowFixMe[incompatible-return]: assume body is always available
    return ((isElement$2(element) ? element.ownerDocument : // $FlowFixMe[prop-missing]
    element.document) || window.document).documentElement;
  }

  function getParentNode(element) {
    if (getNodeName(element) === 'html') {
      return element;
    }

    return (// this is a quicker (but less type safe) way to save quite some bytes from the bundle
      // $FlowFixMe[incompatible-return]
      // $FlowFixMe[prop-missing]
      element.assignedSlot || // step into the shadow DOM of the parent of a slotted node
      element.parentNode || ( // DOM Element detected
      isShadowRoot(element) ? element.host : null) || // ShadowRoot detected
      // $FlowFixMe[incompatible-call]: HTMLElement is a Node
      getDocumentElement(element) // fallback

    );
  }

  function getTrueOffsetParent(element) {
    if (!isHTMLElement$1(element) || // https://github.com/popperjs/popper-core/issues/837
    getComputedStyle$1$1(element).position === 'fixed') {
      return null;
    }

    return element.offsetParent;
  } // `.offsetParent` reports `null` for fixed elements, while absolute elements
  // return the containing block


  function getContainingBlock(element) {
    var isFirefox = /firefox/i.test(getUAString());
    var isIE = /Trident/i.test(getUAString());

    if (isIE && isHTMLElement$1(element)) {
      // In IE 9, 10 and 11 fixed elements containing block is always established by the viewport
      var elementCss = getComputedStyle$1$1(element);

      if (elementCss.position === 'fixed') {
        return null;
      }
    }

    var currentNode = getParentNode(element);

    if (isShadowRoot(currentNode)) {
      currentNode = currentNode.host;
    }

    while (isHTMLElement$1(currentNode) && ['html', 'body'].indexOf(getNodeName(currentNode)) < 0) {
      var css = getComputedStyle$1$1(currentNode); // This is non-exhaustive but covers the most common CSS properties that
      // create a containing block.
      // https://developer.mozilla.org/en-US/docs/Web/CSS/Containing_block#identifying_the_containing_block

      if (css.transform !== 'none' || css.perspective !== 'none' || css.contain === 'paint' || ['transform', 'perspective'].indexOf(css.willChange) !== -1 || isFirefox && css.willChange === 'filter' || isFirefox && css.filter && css.filter !== 'none') {
        return currentNode;
      } else {
        currentNode = currentNode.parentNode;
      }
    }

    return null;
  } // Gets the closest ancestor positioned element. Handles some edge cases,
  // such as table ancestors and cross browser bugs.


  function getOffsetParent(element) {
    var window = getWindow(element);
    var offsetParent = getTrueOffsetParent(element);

    while (offsetParent && isTableElement(offsetParent) && getComputedStyle$1$1(offsetParent).position === 'static') {
      offsetParent = getTrueOffsetParent(offsetParent);
    }

    if (offsetParent && (getNodeName(offsetParent) === 'html' || getNodeName(offsetParent) === 'body' && getComputedStyle$1$1(offsetParent).position === 'static')) {
      return window;
    }

    return offsetParent || getContainingBlock(element) || window;
  }

  function getMainAxisFromPlacement(placement) {
    return ['top', 'bottom'].indexOf(placement) >= 0 ? 'x' : 'y';
  }

  function within(min$1, value, max$1) {
    return max(min$1, min(value, max$1));
  }
  function withinMaxClamp(min, value, max) {
    var v = within(min, value, max);
    return v > max ? max : v;
  }

  function getFreshSideObject() {
    return {
      top: 0,
      right: 0,
      bottom: 0,
      left: 0
    };
  }

  function mergePaddingObject(paddingObject) {
    return Object.assign({}, getFreshSideObject(), paddingObject);
  }

  function expandToHashMap(value, keys) {
    return keys.reduce(function (hashMap, key) {
      hashMap[key] = value;
      return hashMap;
    }, {});
  }

  var toPaddingObject = function toPaddingObject(padding, state) {
    padding = typeof padding === 'function' ? padding(Object.assign({}, state.rects, {
      placement: state.placement
    })) : padding;
    return mergePaddingObject(typeof padding !== 'number' ? padding : expandToHashMap(padding, basePlacements));
  };

  function arrow(_ref) {
    var _state$modifiersData$;

    var state = _ref.state,
        name = _ref.name,
        options = _ref.options;
    var arrowElement = state.elements.arrow;
    var popperOffsets = state.modifiersData.popperOffsets;
    var basePlacement = getBasePlacement$1(state.placement);
    var axis = getMainAxisFromPlacement(basePlacement);
    var isVertical = [left, right].indexOf(basePlacement) >= 0;
    var len = isVertical ? 'height' : 'width';

    if (!arrowElement || !popperOffsets) {
      return;
    }

    var paddingObject = toPaddingObject(options.padding, state);
    var arrowRect = getLayoutRect(arrowElement);
    var minProp = axis === 'y' ? top : left;
    var maxProp = axis === 'y' ? bottom : right;
    var endDiff = state.rects.reference[len] + state.rects.reference[axis] - popperOffsets[axis] - state.rects.popper[len];
    var startDiff = popperOffsets[axis] - state.rects.reference[axis];
    var arrowOffsetParent = getOffsetParent(arrowElement);
    var clientSize = arrowOffsetParent ? axis === 'y' ? arrowOffsetParent.clientHeight || 0 : arrowOffsetParent.clientWidth || 0 : 0;
    var centerToReference = endDiff / 2 - startDiff / 2; // Make sure the arrow doesn't overflow the popper if the center point is
    // outside of the popper bounds

    var min = paddingObject[minProp];
    var max = clientSize - arrowRect[len] - paddingObject[maxProp];
    var center = clientSize / 2 - arrowRect[len] / 2 + centerToReference;
    var offset = within(min, center, max); // Prevents breaking syntax highlighting...

    var axisProp = axis;
    state.modifiersData[name] = (_state$modifiersData$ = {}, _state$modifiersData$[axisProp] = offset, _state$modifiersData$.centerOffset = offset - center, _state$modifiersData$);
  }

  function effect$1(_ref2) {
    var state = _ref2.state,
        options = _ref2.options;
    var _options$element = options.element,
        arrowElement = _options$element === void 0 ? '[data-popper-arrow]' : _options$element;

    if (arrowElement == null) {
      return;
    } // CSS selector


    if (typeof arrowElement === 'string') {
      arrowElement = state.elements.popper.querySelector(arrowElement);

      if (!arrowElement) {
        return;
      }
    }

    if (!contains(state.elements.popper, arrowElement)) {
      return;
    }

    state.elements.arrow = arrowElement;
  } // eslint-disable-next-line import/no-unused-modules


  var arrow$1 = {
    name: 'arrow',
    enabled: true,
    phase: 'main',
    fn: arrow,
    effect: effect$1,
    requires: ['popperOffsets'],
    requiresIfExists: ['preventOverflow']
  };

  function getVariation(placement) {
    return placement.split('-')[1];
  }

  var unsetSides = {
    top: 'auto',
    right: 'auto',
    bottom: 'auto',
    left: 'auto'
  }; // Round the offsets to the nearest suitable subpixel based on the DPR.
  // Zooming can change the DPR, but it seems to report a value that will
  // cleanly divide the values into the appropriate subpixels.

  function roundOffsetsByDPR(_ref, win) {
    var x = _ref.x,
        y = _ref.y;
    var dpr = win.devicePixelRatio || 1;
    return {
      x: round$1(x * dpr) / dpr || 0,
      y: round$1(y * dpr) / dpr || 0
    };
  }

  function mapToStyles(_ref2) {
    var _Object$assign2;

    var popper = _ref2.popper,
        popperRect = _ref2.popperRect,
        placement = _ref2.placement,
        variation = _ref2.variation,
        offsets = _ref2.offsets,
        position = _ref2.position,
        gpuAcceleration = _ref2.gpuAcceleration,
        adaptive = _ref2.adaptive,
        roundOffsets = _ref2.roundOffsets,
        isFixed = _ref2.isFixed;
    var _offsets$x = offsets.x,
        x = _offsets$x === void 0 ? 0 : _offsets$x,
        _offsets$y = offsets.y,
        y = _offsets$y === void 0 ? 0 : _offsets$y;

    var _ref3 = typeof roundOffsets === 'function' ? roundOffsets({
      x: x,
      y: y
    }) : {
      x: x,
      y: y
    };

    x = _ref3.x;
    y = _ref3.y;
    var hasX = offsets.hasOwnProperty('x');
    var hasY = offsets.hasOwnProperty('y');
    var sideX = left;
    var sideY = top;
    var win = window;

    if (adaptive) {
      var offsetParent = getOffsetParent(popper);
      var heightProp = 'clientHeight';
      var widthProp = 'clientWidth';

      if (offsetParent === getWindow(popper)) {
        offsetParent = getDocumentElement(popper);

        if (getComputedStyle$1$1(offsetParent).position !== 'static' && position === 'absolute') {
          heightProp = 'scrollHeight';
          widthProp = 'scrollWidth';
        }
      } // $FlowFixMe[incompatible-cast]: force type refinement, we compare offsetParent with window above, but Flow doesn't detect it


      offsetParent = offsetParent;

      if (placement === top || (placement === left || placement === right) && variation === end) {
        sideY = bottom;
        var offsetY = isFixed && offsetParent === win && win.visualViewport ? win.visualViewport.height : // $FlowFixMe[prop-missing]
        offsetParent[heightProp];
        y -= offsetY - popperRect.height;
        y *= gpuAcceleration ? 1 : -1;
      }

      if (placement === left || (placement === top || placement === bottom) && variation === end) {
        sideX = right;
        var offsetX = isFixed && offsetParent === win && win.visualViewport ? win.visualViewport.width : // $FlowFixMe[prop-missing]
        offsetParent[widthProp];
        x -= offsetX - popperRect.width;
        x *= gpuAcceleration ? 1 : -1;
      }
    }

    var commonStyles = Object.assign({
      position: position
    }, adaptive && unsetSides);

    var _ref4 = roundOffsets === true ? roundOffsetsByDPR({
      x: x,
      y: y
    }, getWindow(popper)) : {
      x: x,
      y: y
    };

    x = _ref4.x;
    y = _ref4.y;

    if (gpuAcceleration) {
      var _Object$assign;

      return Object.assign({}, commonStyles, (_Object$assign = {}, _Object$assign[sideY] = hasY ? '0' : '', _Object$assign[sideX] = hasX ? '0' : '', _Object$assign.transform = (win.devicePixelRatio || 1) <= 1 ? "translate(" + x + "px, " + y + "px)" : "translate3d(" + x + "px, " + y + "px, 0)", _Object$assign));
    }

    return Object.assign({}, commonStyles, (_Object$assign2 = {}, _Object$assign2[sideY] = hasY ? y + "px" : '', _Object$assign2[sideX] = hasX ? x + "px" : '', _Object$assign2.transform = '', _Object$assign2));
  }

  function computeStyles(_ref5) {
    var state = _ref5.state,
        options = _ref5.options;
    var _options$gpuAccelerat = options.gpuAcceleration,
        gpuAcceleration = _options$gpuAccelerat === void 0 ? true : _options$gpuAccelerat,
        _options$adaptive = options.adaptive,
        adaptive = _options$adaptive === void 0 ? true : _options$adaptive,
        _options$roundOffsets = options.roundOffsets,
        roundOffsets = _options$roundOffsets === void 0 ? true : _options$roundOffsets;
    var commonStyles = {
      placement: getBasePlacement$1(state.placement),
      variation: getVariation(state.placement),
      popper: state.elements.popper,
      popperRect: state.rects.popper,
      gpuAcceleration: gpuAcceleration,
      isFixed: state.options.strategy === 'fixed'
    };

    if (state.modifiersData.popperOffsets != null) {
      state.styles.popper = Object.assign({}, state.styles.popper, mapToStyles(Object.assign({}, commonStyles, {
        offsets: state.modifiersData.popperOffsets,
        position: state.options.strategy,
        adaptive: adaptive,
        roundOffsets: roundOffsets
      })));
    }

    if (state.modifiersData.arrow != null) {
      state.styles.arrow = Object.assign({}, state.styles.arrow, mapToStyles(Object.assign({}, commonStyles, {
        offsets: state.modifiersData.arrow,
        position: 'absolute',
        adaptive: false,
        roundOffsets: roundOffsets
      })));
    }

    state.attributes.popper = Object.assign({}, state.attributes.popper, {
      'data-popper-placement': state.placement
    });
  } // eslint-disable-next-line import/no-unused-modules


  var computeStyles$1 = {
    name: 'computeStyles',
    enabled: true,
    phase: 'beforeWrite',
    fn: computeStyles,
    data: {}
  };

  var passive = {
    passive: true
  };

  function effect(_ref) {
    var state = _ref.state,
        instance = _ref.instance,
        options = _ref.options;
    var _options$scroll = options.scroll,
        scroll = _options$scroll === void 0 ? true : _options$scroll,
        _options$resize = options.resize,
        resize = _options$resize === void 0 ? true : _options$resize;
    var window = getWindow(state.elements.popper);
    var scrollParents = [].concat(state.scrollParents.reference, state.scrollParents.popper);

    if (scroll) {
      scrollParents.forEach(function (scrollParent) {
        scrollParent.addEventListener('scroll', instance.update, passive);
      });
    }

    if (resize) {
      window.addEventListener('resize', instance.update, passive);
    }

    return function () {
      if (scroll) {
        scrollParents.forEach(function (scrollParent) {
          scrollParent.removeEventListener('scroll', instance.update, passive);
        });
      }

      if (resize) {
        window.removeEventListener('resize', instance.update, passive);
      }
    };
  } // eslint-disable-next-line import/no-unused-modules


  var eventListeners = {
    name: 'eventListeners',
    enabled: true,
    phase: 'write',
    fn: function fn() {},
    effect: effect,
    data: {}
  };

  var hash$1 = {
    left: 'right',
    right: 'left',
    bottom: 'top',
    top: 'bottom'
  };
  function getOppositePlacement(placement) {
    return placement.replace(/left|right|bottom|top/g, function (matched) {
      return hash$1[matched];
    });
  }

  var hash = {
    start: 'end',
    end: 'start'
  };
  function getOppositeVariationPlacement(placement) {
    return placement.replace(/start|end/g, function (matched) {
      return hash[matched];
    });
  }

  function getWindowScroll(node) {
    var win = getWindow(node);
    var scrollLeft = win.pageXOffset;
    var scrollTop = win.pageYOffset;
    return {
      scrollLeft: scrollLeft,
      scrollTop: scrollTop
    };
  }

  function getWindowScrollBarX(element) {
    // If <html> has a CSS width greater than the viewport, then this will be
    // incorrect for RTL.
    // Popper 1 is broken in this case and never had a bug report so let's assume
    // it's not an issue. I don't think anyone ever specifies width on <html>
    // anyway.
    // Browsers where the left scrollbar doesn't cause an issue report `0` for
    // this (e.g. Edge 2019, IE11, Safari)
    return getBoundingClientRect$1(getDocumentElement(element)).left + getWindowScroll(element).scrollLeft;
  }

  function getViewportRect(element, strategy) {
    var win = getWindow(element);
    var html = getDocumentElement(element);
    var visualViewport = win.visualViewport;
    var width = html.clientWidth;
    var height = html.clientHeight;
    var x = 0;
    var y = 0;

    if (visualViewport) {
      width = visualViewport.width;
      height = visualViewport.height;
      var layoutViewport = isLayoutViewport();

      if (layoutViewport || !layoutViewport && strategy === 'fixed') {
        x = visualViewport.offsetLeft;
        y = visualViewport.offsetTop;
      }
    }

    return {
      width: width,
      height: height,
      x: x + getWindowScrollBarX(element),
      y: y
    };
  }

  // of the `<html>` and `<body>` rect bounds if horizontally scrollable

  function getDocumentRect(element) {
    var _element$ownerDocumen;

    var html = getDocumentElement(element);
    var winScroll = getWindowScroll(element);
    var body = (_element$ownerDocumen = element.ownerDocument) == null ? void 0 : _element$ownerDocumen.body;
    var width = max(html.scrollWidth, html.clientWidth, body ? body.scrollWidth : 0, body ? body.clientWidth : 0);
    var height = max(html.scrollHeight, html.clientHeight, body ? body.scrollHeight : 0, body ? body.clientHeight : 0);
    var x = -winScroll.scrollLeft + getWindowScrollBarX(element);
    var y = -winScroll.scrollTop;

    if (getComputedStyle$1$1(body || html).direction === 'rtl') {
      x += max(html.clientWidth, body ? body.clientWidth : 0) - width;
    }

    return {
      width: width,
      height: height,
      x: x,
      y: y
    };
  }

  function isScrollParent(element) {
    // Firefox wants us to check `-x` and `-y` variations as well
    var _getComputedStyle = getComputedStyle$1$1(element),
        overflow = _getComputedStyle.overflow,
        overflowX = _getComputedStyle.overflowX,
        overflowY = _getComputedStyle.overflowY;

    return /auto|scroll|overlay|hidden/.test(overflow + overflowY + overflowX);
  }

  function getScrollParent(node) {
    if (['html', 'body', '#document'].indexOf(getNodeName(node)) >= 0) {
      // $FlowFixMe[incompatible-return]: assume body is always available
      return node.ownerDocument.body;
    }

    if (isHTMLElement$1(node) && isScrollParent(node)) {
      return node;
    }

    return getScrollParent(getParentNode(node));
  }

  /*
  given a DOM element, return the list of all scroll parents, up the list of ancesors
  until we get to the top window object. This list is what we attach scroll listeners
  to, because if any of these parent elements scroll, we'll need to re-calculate the
  reference element's position.
  */

  function listScrollParents(element, list) {
    var _element$ownerDocumen;

    if (list === void 0) {
      list = [];
    }

    var scrollParent = getScrollParent(element);
    var isBody = scrollParent === ((_element$ownerDocumen = element.ownerDocument) == null ? void 0 : _element$ownerDocumen.body);
    var win = getWindow(scrollParent);
    var target = isBody ? [win].concat(win.visualViewport || [], isScrollParent(scrollParent) ? scrollParent : []) : scrollParent;
    var updatedList = list.concat(target);
    return isBody ? updatedList : // $FlowFixMe[incompatible-call]: isBody tells us target will be an HTMLElement here
    updatedList.concat(listScrollParents(getParentNode(target)));
  }

  function rectToClientRect(rect) {
    return Object.assign({}, rect, {
      left: rect.x,
      top: rect.y,
      right: rect.x + rect.width,
      bottom: rect.y + rect.height
    });
  }

  function getInnerBoundingClientRect(element, strategy) {
    var rect = getBoundingClientRect$1(element, false, strategy === 'fixed');
    rect.top = rect.top + element.clientTop;
    rect.left = rect.left + element.clientLeft;
    rect.bottom = rect.top + element.clientHeight;
    rect.right = rect.left + element.clientWidth;
    rect.width = element.clientWidth;
    rect.height = element.clientHeight;
    rect.x = rect.left;
    rect.y = rect.top;
    return rect;
  }

  function getClientRectFromMixedType(element, clippingParent, strategy) {
    return clippingParent === viewport ? rectToClientRect(getViewportRect(element, strategy)) : isElement$2(clippingParent) ? getInnerBoundingClientRect(clippingParent, strategy) : rectToClientRect(getDocumentRect(getDocumentElement(element)));
  } // A "clipping parent" is an overflowable container with the characteristic of
  // clipping (or hiding) overflowing elements with a position different from
  // `initial`


  function getClippingParents(element) {
    var clippingParents = listScrollParents(getParentNode(element));
    var canEscapeClipping = ['absolute', 'fixed'].indexOf(getComputedStyle$1$1(element).position) >= 0;
    var clipperElement = canEscapeClipping && isHTMLElement$1(element) ? getOffsetParent(element) : element;

    if (!isElement$2(clipperElement)) {
      return [];
    } // $FlowFixMe[incompatible-return]: https://github.com/facebook/flow/issues/1414


    return clippingParents.filter(function (clippingParent) {
      return isElement$2(clippingParent) && contains(clippingParent, clipperElement) && getNodeName(clippingParent) !== 'body';
    });
  } // Gets the maximum area that the element is visible in due to any number of
  // clipping parents


  function getClippingRect(element, boundary, rootBoundary, strategy) {
    var mainClippingParents = boundary === 'clippingParents' ? getClippingParents(element) : [].concat(boundary);
    var clippingParents = [].concat(mainClippingParents, [rootBoundary]);
    var firstClippingParent = clippingParents[0];
    var clippingRect = clippingParents.reduce(function (accRect, clippingParent) {
      var rect = getClientRectFromMixedType(element, clippingParent, strategy);
      accRect.top = max(rect.top, accRect.top);
      accRect.right = min(rect.right, accRect.right);
      accRect.bottom = min(rect.bottom, accRect.bottom);
      accRect.left = max(rect.left, accRect.left);
      return accRect;
    }, getClientRectFromMixedType(element, firstClippingParent, strategy));
    clippingRect.width = clippingRect.right - clippingRect.left;
    clippingRect.height = clippingRect.bottom - clippingRect.top;
    clippingRect.x = clippingRect.left;
    clippingRect.y = clippingRect.top;
    return clippingRect;
  }

  function computeOffsets(_ref) {
    var reference = _ref.reference,
        element = _ref.element,
        placement = _ref.placement;
    var basePlacement = placement ? getBasePlacement$1(placement) : null;
    var variation = placement ? getVariation(placement) : null;
    var commonX = reference.x + reference.width / 2 - element.width / 2;
    var commonY = reference.y + reference.height / 2 - element.height / 2;
    var offsets;

    switch (basePlacement) {
      case top:
        offsets = {
          x: commonX,
          y: reference.y - element.height
        };
        break;

      case bottom:
        offsets = {
          x: commonX,
          y: reference.y + reference.height
        };
        break;

      case right:
        offsets = {
          x: reference.x + reference.width,
          y: commonY
        };
        break;

      case left:
        offsets = {
          x: reference.x - element.width,
          y: commonY
        };
        break;

      default:
        offsets = {
          x: reference.x,
          y: reference.y
        };
    }

    var mainAxis = basePlacement ? getMainAxisFromPlacement(basePlacement) : null;

    if (mainAxis != null) {
      var len = mainAxis === 'y' ? 'height' : 'width';

      switch (variation) {
        case start:
          offsets[mainAxis] = offsets[mainAxis] - (reference[len] / 2 - element[len] / 2);
          break;

        case end:
          offsets[mainAxis] = offsets[mainAxis] + (reference[len] / 2 - element[len] / 2);
          break;
      }
    }

    return offsets;
  }

  function detectOverflow(state, options) {
    if (options === void 0) {
      options = {};
    }

    var _options = options,
        _options$placement = _options.placement,
        placement = _options$placement === void 0 ? state.placement : _options$placement,
        _options$strategy = _options.strategy,
        strategy = _options$strategy === void 0 ? state.strategy : _options$strategy,
        _options$boundary = _options.boundary,
        boundary = _options$boundary === void 0 ? clippingParents : _options$boundary,
        _options$rootBoundary = _options.rootBoundary,
        rootBoundary = _options$rootBoundary === void 0 ? viewport : _options$rootBoundary,
        _options$elementConte = _options.elementContext,
        elementContext = _options$elementConte === void 0 ? popper : _options$elementConte,
        _options$altBoundary = _options.altBoundary,
        altBoundary = _options$altBoundary === void 0 ? false : _options$altBoundary,
        _options$padding = _options.padding,
        padding = _options$padding === void 0 ? 0 : _options$padding;
    var paddingObject = mergePaddingObject(typeof padding !== 'number' ? padding : expandToHashMap(padding, basePlacements));
    var altContext = elementContext === popper ? reference : popper;
    var popperRect = state.rects.popper;
    var element = state.elements[altBoundary ? altContext : elementContext];
    var clippingClientRect = getClippingRect(isElement$2(element) ? element : element.contextElement || getDocumentElement(state.elements.popper), boundary, rootBoundary, strategy);
    var referenceClientRect = getBoundingClientRect$1(state.elements.reference);
    var popperOffsets = computeOffsets({
      reference: referenceClientRect,
      element: popperRect,
      strategy: 'absolute',
      placement: placement
    });
    var popperClientRect = rectToClientRect(Object.assign({}, popperRect, popperOffsets));
    var elementClientRect = elementContext === popper ? popperClientRect : referenceClientRect; // positive = overflowing the clipping rect
    // 0 or negative = within the clipping rect

    var overflowOffsets = {
      top: clippingClientRect.top - elementClientRect.top + paddingObject.top,
      bottom: elementClientRect.bottom - clippingClientRect.bottom + paddingObject.bottom,
      left: clippingClientRect.left - elementClientRect.left + paddingObject.left,
      right: elementClientRect.right - clippingClientRect.right + paddingObject.right
    };
    var offsetData = state.modifiersData.offset; // Offsets can be applied only to the popper element

    if (elementContext === popper && offsetData) {
      var offset = offsetData[placement];
      Object.keys(overflowOffsets).forEach(function (key) {
        var multiply = [right, bottom].indexOf(key) >= 0 ? 1 : -1;
        var axis = [top, bottom].indexOf(key) >= 0 ? 'y' : 'x';
        overflowOffsets[key] += offset[axis] * multiply;
      });
    }

    return overflowOffsets;
  }

  function computeAutoPlacement(state, options) {
    if (options === void 0) {
      options = {};
    }

    var _options = options,
        placement = _options.placement,
        boundary = _options.boundary,
        rootBoundary = _options.rootBoundary,
        padding = _options.padding,
        flipVariations = _options.flipVariations,
        _options$allowedAutoP = _options.allowedAutoPlacements,
        allowedAutoPlacements = _options$allowedAutoP === void 0 ? placements : _options$allowedAutoP;
    var variation = getVariation(placement);
    var placements$1 = variation ? flipVariations ? variationPlacements : variationPlacements.filter(function (placement) {
      return getVariation(placement) === variation;
    }) : basePlacements;
    var allowedPlacements = placements$1.filter(function (placement) {
      return allowedAutoPlacements.indexOf(placement) >= 0;
    });

    if (allowedPlacements.length === 0) {
      allowedPlacements = placements$1;
    } // $FlowFixMe[incompatible-type]: Flow seems to have problems with two array unions...


    var overflows = allowedPlacements.reduce(function (acc, placement) {
      acc[placement] = detectOverflow(state, {
        placement: placement,
        boundary: boundary,
        rootBoundary: rootBoundary,
        padding: padding
      })[getBasePlacement$1(placement)];
      return acc;
    }, {});
    return Object.keys(overflows).sort(function (a, b) {
      return overflows[a] - overflows[b];
    });
  }

  function getExpandedFallbackPlacements(placement) {
    if (getBasePlacement$1(placement) === auto) {
      return [];
    }

    var oppositePlacement = getOppositePlacement(placement);
    return [getOppositeVariationPlacement(placement), oppositePlacement, getOppositeVariationPlacement(oppositePlacement)];
  }

  function flip(_ref) {
    var state = _ref.state,
        options = _ref.options,
        name = _ref.name;

    if (state.modifiersData[name]._skip) {
      return;
    }

    var _options$mainAxis = options.mainAxis,
        checkMainAxis = _options$mainAxis === void 0 ? true : _options$mainAxis,
        _options$altAxis = options.altAxis,
        checkAltAxis = _options$altAxis === void 0 ? true : _options$altAxis,
        specifiedFallbackPlacements = options.fallbackPlacements,
        padding = options.padding,
        boundary = options.boundary,
        rootBoundary = options.rootBoundary,
        altBoundary = options.altBoundary,
        _options$flipVariatio = options.flipVariations,
        flipVariations = _options$flipVariatio === void 0 ? true : _options$flipVariatio,
        allowedAutoPlacements = options.allowedAutoPlacements;
    var preferredPlacement = state.options.placement;
    var basePlacement = getBasePlacement$1(preferredPlacement);
    var isBasePlacement = basePlacement === preferredPlacement;
    var fallbackPlacements = specifiedFallbackPlacements || (isBasePlacement || !flipVariations ? [getOppositePlacement(preferredPlacement)] : getExpandedFallbackPlacements(preferredPlacement));
    var placements = [preferredPlacement].concat(fallbackPlacements).reduce(function (acc, placement) {
      return acc.concat(getBasePlacement$1(placement) === auto ? computeAutoPlacement(state, {
        placement: placement,
        boundary: boundary,
        rootBoundary: rootBoundary,
        padding: padding,
        flipVariations: flipVariations,
        allowedAutoPlacements: allowedAutoPlacements
      }) : placement);
    }, []);
    var referenceRect = state.rects.reference;
    var popperRect = state.rects.popper;
    var checksMap = new Map();
    var makeFallbackChecks = true;
    var firstFittingPlacement = placements[0];

    for (var i = 0; i < placements.length; i++) {
      var placement = placements[i];

      var _basePlacement = getBasePlacement$1(placement);

      var isStartVariation = getVariation(placement) === start;
      var isVertical = [top, bottom].indexOf(_basePlacement) >= 0;
      var len = isVertical ? 'width' : 'height';
      var overflow = detectOverflow(state, {
        placement: placement,
        boundary: boundary,
        rootBoundary: rootBoundary,
        altBoundary: altBoundary,
        padding: padding
      });
      var mainVariationSide = isVertical ? isStartVariation ? right : left : isStartVariation ? bottom : top;

      if (referenceRect[len] > popperRect[len]) {
        mainVariationSide = getOppositePlacement(mainVariationSide);
      }

      var altVariationSide = getOppositePlacement(mainVariationSide);
      var checks = [];

      if (checkMainAxis) {
        checks.push(overflow[_basePlacement] <= 0);
      }

      if (checkAltAxis) {
        checks.push(overflow[mainVariationSide] <= 0, overflow[altVariationSide] <= 0);
      }

      if (checks.every(function (check) {
        return check;
      })) {
        firstFittingPlacement = placement;
        makeFallbackChecks = false;
        break;
      }

      checksMap.set(placement, checks);
    }

    if (makeFallbackChecks) {
      // `2` may be desired in some cases – research later
      var numberOfChecks = flipVariations ? 3 : 1;

      var _loop = function _loop(_i) {
        var fittingPlacement = placements.find(function (placement) {
          var checks = checksMap.get(placement);

          if (checks) {
            return checks.slice(0, _i).every(function (check) {
              return check;
            });
          }
        });

        if (fittingPlacement) {
          firstFittingPlacement = fittingPlacement;
          return "break";
        }
      };

      for (var _i = numberOfChecks; _i > 0; _i--) {
        var _ret = _loop(_i);

        if (_ret === "break") break;
      }
    }

    if (state.placement !== firstFittingPlacement) {
      state.modifiersData[name]._skip = true;
      state.placement = firstFittingPlacement;
      state.reset = true;
    }
  } // eslint-disable-next-line import/no-unused-modules


  var flip$1 = {
    name: 'flip',
    enabled: true,
    phase: 'main',
    fn: flip,
    requiresIfExists: ['offset'],
    data: {
      _skip: false
    }
  };

  function getSideOffsets(overflow, rect, preventedOffsets) {
    if (preventedOffsets === void 0) {
      preventedOffsets = {
        x: 0,
        y: 0
      };
    }

    return {
      top: overflow.top - rect.height - preventedOffsets.y,
      right: overflow.right - rect.width + preventedOffsets.x,
      bottom: overflow.bottom - rect.height + preventedOffsets.y,
      left: overflow.left - rect.width - preventedOffsets.x
    };
  }

  function isAnySideFullyClipped(overflow) {
    return [top, right, bottom, left].some(function (side) {
      return overflow[side] >= 0;
    });
  }

  function hide(_ref) {
    var state = _ref.state,
        name = _ref.name;
    var referenceRect = state.rects.reference;
    var popperRect = state.rects.popper;
    var preventedOffsets = state.modifiersData.preventOverflow;
    var referenceOverflow = detectOverflow(state, {
      elementContext: 'reference'
    });
    var popperAltOverflow = detectOverflow(state, {
      altBoundary: true
    });
    var referenceClippingOffsets = getSideOffsets(referenceOverflow, referenceRect);
    var popperEscapeOffsets = getSideOffsets(popperAltOverflow, popperRect, preventedOffsets);
    var isReferenceHidden = isAnySideFullyClipped(referenceClippingOffsets);
    var hasPopperEscaped = isAnySideFullyClipped(popperEscapeOffsets);
    state.modifiersData[name] = {
      referenceClippingOffsets: referenceClippingOffsets,
      popperEscapeOffsets: popperEscapeOffsets,
      isReferenceHidden: isReferenceHidden,
      hasPopperEscaped: hasPopperEscaped
    };
    state.attributes.popper = Object.assign({}, state.attributes.popper, {
      'data-popper-reference-hidden': isReferenceHidden,
      'data-popper-escaped': hasPopperEscaped
    });
  } // eslint-disable-next-line import/no-unused-modules


  var hide$1 = {
    name: 'hide',
    enabled: true,
    phase: 'main',
    requiresIfExists: ['preventOverflow'],
    fn: hide
  };

  function distanceAndSkiddingToXY(placement, rects, offset) {
    var basePlacement = getBasePlacement$1(placement);
    var invertDistance = [left, top].indexOf(basePlacement) >= 0 ? -1 : 1;

    var _ref = typeof offset === 'function' ? offset(Object.assign({}, rects, {
      placement: placement
    })) : offset,
        skidding = _ref[0],
        distance = _ref[1];

    skidding = skidding || 0;
    distance = (distance || 0) * invertDistance;
    return [left, right].indexOf(basePlacement) >= 0 ? {
      x: distance,
      y: skidding
    } : {
      x: skidding,
      y: distance
    };
  }

  function offset$1(_ref2) {
    var state = _ref2.state,
        options = _ref2.options,
        name = _ref2.name;
    var _options$offset = options.offset,
        offset = _options$offset === void 0 ? [0, 0] : _options$offset;
    var data = placements.reduce(function (acc, placement) {
      acc[placement] = distanceAndSkiddingToXY(placement, state.rects, offset);
      return acc;
    }, {});
    var _data$state$placement = data[state.placement],
        x = _data$state$placement.x,
        y = _data$state$placement.y;

    if (state.modifiersData.popperOffsets != null) {
      state.modifiersData.popperOffsets.x += x;
      state.modifiersData.popperOffsets.y += y;
    }

    state.modifiersData[name] = data;
  } // eslint-disable-next-line import/no-unused-modules


  var offset$1$1 = {
    name: 'offset',
    enabled: true,
    phase: 'main',
    requires: ['popperOffsets'],
    fn: offset$1
  };

  function popperOffsets(_ref) {
    var state = _ref.state,
        name = _ref.name;
    // Offsets are the actual position the popper needs to have to be
    // properly positioned near its reference element
    // This is the most basic placement, and will be adjusted by
    // the modifiers in the next step
    state.modifiersData[name] = computeOffsets({
      reference: state.rects.reference,
      element: state.rects.popper,
      strategy: 'absolute',
      placement: state.placement
    });
  } // eslint-disable-next-line import/no-unused-modules


  var popperOffsets$1 = {
    name: 'popperOffsets',
    enabled: true,
    phase: 'read',
    fn: popperOffsets,
    data: {}
  };

  function getAltAxis(axis) {
    return axis === 'x' ? 'y' : 'x';
  }

  function preventOverflow(_ref) {
    var state = _ref.state,
        options = _ref.options,
        name = _ref.name;
    var _options$mainAxis = options.mainAxis,
        checkMainAxis = _options$mainAxis === void 0 ? true : _options$mainAxis,
        _options$altAxis = options.altAxis,
        checkAltAxis = _options$altAxis === void 0 ? false : _options$altAxis,
        boundary = options.boundary,
        rootBoundary = options.rootBoundary,
        altBoundary = options.altBoundary,
        padding = options.padding,
        _options$tether = options.tether,
        tether = _options$tether === void 0 ? true : _options$tether,
        _options$tetherOffset = options.tetherOffset,
        tetherOffset = _options$tetherOffset === void 0 ? 0 : _options$tetherOffset;
    var overflow = detectOverflow(state, {
      boundary: boundary,
      rootBoundary: rootBoundary,
      padding: padding,
      altBoundary: altBoundary
    });
    var basePlacement = getBasePlacement$1(state.placement);
    var variation = getVariation(state.placement);
    var isBasePlacement = !variation;
    var mainAxis = getMainAxisFromPlacement(basePlacement);
    var altAxis = getAltAxis(mainAxis);
    var popperOffsets = state.modifiersData.popperOffsets;
    var referenceRect = state.rects.reference;
    var popperRect = state.rects.popper;
    var tetherOffsetValue = typeof tetherOffset === 'function' ? tetherOffset(Object.assign({}, state.rects, {
      placement: state.placement
    })) : tetherOffset;
    var normalizedTetherOffsetValue = typeof tetherOffsetValue === 'number' ? {
      mainAxis: tetherOffsetValue,
      altAxis: tetherOffsetValue
    } : Object.assign({
      mainAxis: 0,
      altAxis: 0
    }, tetherOffsetValue);
    var offsetModifierState = state.modifiersData.offset ? state.modifiersData.offset[state.placement] : null;
    var data = {
      x: 0,
      y: 0
    };

    if (!popperOffsets) {
      return;
    }

    if (checkMainAxis) {
      var _offsetModifierState$;

      var mainSide = mainAxis === 'y' ? top : left;
      var altSide = mainAxis === 'y' ? bottom : right;
      var len = mainAxis === 'y' ? 'height' : 'width';
      var offset = popperOffsets[mainAxis];
      var min$1 = offset + overflow[mainSide];
      var max$1 = offset - overflow[altSide];
      var additive = tether ? -popperRect[len] / 2 : 0;
      var minLen = variation === start ? referenceRect[len] : popperRect[len];
      var maxLen = variation === start ? -popperRect[len] : -referenceRect[len]; // We need to include the arrow in the calculation so the arrow doesn't go
      // outside the reference bounds

      var arrowElement = state.elements.arrow;
      var arrowRect = tether && arrowElement ? getLayoutRect(arrowElement) : {
        width: 0,
        height: 0
      };
      var arrowPaddingObject = state.modifiersData['arrow#persistent'] ? state.modifiersData['arrow#persistent'].padding : getFreshSideObject();
      var arrowPaddingMin = arrowPaddingObject[mainSide];
      var arrowPaddingMax = arrowPaddingObject[altSide]; // If the reference length is smaller than the arrow length, we don't want
      // to include its full size in the calculation. If the reference is small
      // and near the edge of a boundary, the popper can overflow even if the
      // reference is not overflowing as well (e.g. virtual elements with no
      // width or height)

      var arrowLen = within(0, referenceRect[len], arrowRect[len]);
      var minOffset = isBasePlacement ? referenceRect[len] / 2 - additive - arrowLen - arrowPaddingMin - normalizedTetherOffsetValue.mainAxis : minLen - arrowLen - arrowPaddingMin - normalizedTetherOffsetValue.mainAxis;
      var maxOffset = isBasePlacement ? -referenceRect[len] / 2 + additive + arrowLen + arrowPaddingMax + normalizedTetherOffsetValue.mainAxis : maxLen + arrowLen + arrowPaddingMax + normalizedTetherOffsetValue.mainAxis;
      var arrowOffsetParent = state.elements.arrow && getOffsetParent(state.elements.arrow);
      var clientOffset = arrowOffsetParent ? mainAxis === 'y' ? arrowOffsetParent.clientTop || 0 : arrowOffsetParent.clientLeft || 0 : 0;
      var offsetModifierValue = (_offsetModifierState$ = offsetModifierState == null ? void 0 : offsetModifierState[mainAxis]) != null ? _offsetModifierState$ : 0;
      var tetherMin = offset + minOffset - offsetModifierValue - clientOffset;
      var tetherMax = offset + maxOffset - offsetModifierValue;
      var preventedOffset = within(tether ? min(min$1, tetherMin) : min$1, offset, tether ? max(max$1, tetherMax) : max$1);
      popperOffsets[mainAxis] = preventedOffset;
      data[mainAxis] = preventedOffset - offset;
    }

    if (checkAltAxis) {
      var _offsetModifierState$2;

      var _mainSide = mainAxis === 'x' ? top : left;

      var _altSide = mainAxis === 'x' ? bottom : right;

      var _offset = popperOffsets[altAxis];

      var _len = altAxis === 'y' ? 'height' : 'width';

      var _min = _offset + overflow[_mainSide];

      var _max = _offset - overflow[_altSide];

      var isOriginSide = [top, left].indexOf(basePlacement) !== -1;

      var _offsetModifierValue = (_offsetModifierState$2 = offsetModifierState == null ? void 0 : offsetModifierState[altAxis]) != null ? _offsetModifierState$2 : 0;

      var _tetherMin = isOriginSide ? _min : _offset - referenceRect[_len] - popperRect[_len] - _offsetModifierValue + normalizedTetherOffsetValue.altAxis;

      var _tetherMax = isOriginSide ? _offset + referenceRect[_len] + popperRect[_len] - _offsetModifierValue - normalizedTetherOffsetValue.altAxis : _max;

      var _preventedOffset = tether && isOriginSide ? withinMaxClamp(_tetherMin, _offset, _tetherMax) : within(tether ? _tetherMin : _min, _offset, tether ? _tetherMax : _max);

      popperOffsets[altAxis] = _preventedOffset;
      data[altAxis] = _preventedOffset - _offset;
    }

    state.modifiersData[name] = data;
  } // eslint-disable-next-line import/no-unused-modules


  var preventOverflow$1 = {
    name: 'preventOverflow',
    enabled: true,
    phase: 'main',
    fn: preventOverflow,
    requiresIfExists: ['offset']
  };

  function getHTMLElementScroll(element) {
    return {
      scrollLeft: element.scrollLeft,
      scrollTop: element.scrollTop
    };
  }

  function getNodeScroll(node) {
    if (node === getWindow(node) || !isHTMLElement$1(node)) {
      return getWindowScroll(node);
    } else {
      return getHTMLElementScroll(node);
    }
  }

  function isElementScaled(element) {
    var rect = element.getBoundingClientRect();
    var scaleX = round$1(rect.width) / element.offsetWidth || 1;
    var scaleY = round$1(rect.height) / element.offsetHeight || 1;
    return scaleX !== 1 || scaleY !== 1;
  } // Returns the composite rect of an element relative to its offsetParent.
  // Composite means it takes into account transforms as well as layout.


  function getCompositeRect(elementOrVirtualElement, offsetParent, isFixed) {
    if (isFixed === void 0) {
      isFixed = false;
    }

    var isOffsetParentAnElement = isHTMLElement$1(offsetParent);
    var offsetParentIsScaled = isHTMLElement$1(offsetParent) && isElementScaled(offsetParent);
    var documentElement = getDocumentElement(offsetParent);
    var rect = getBoundingClientRect$1(elementOrVirtualElement, offsetParentIsScaled, isFixed);
    var scroll = {
      scrollLeft: 0,
      scrollTop: 0
    };
    var offsets = {
      x: 0,
      y: 0
    };

    if (isOffsetParentAnElement || !isOffsetParentAnElement && !isFixed) {
      if (getNodeName(offsetParent) !== 'body' || // https://github.com/popperjs/popper-core/issues/1078
      isScrollParent(documentElement)) {
        scroll = getNodeScroll(offsetParent);
      }

      if (isHTMLElement$1(offsetParent)) {
        offsets = getBoundingClientRect$1(offsetParent, true);
        offsets.x += offsetParent.clientLeft;
        offsets.y += offsetParent.clientTop;
      } else if (documentElement) {
        offsets.x = getWindowScrollBarX(documentElement);
      }
    }

    return {
      x: rect.left + scroll.scrollLeft - offsets.x,
      y: rect.top + scroll.scrollTop - offsets.y,
      width: rect.width,
      height: rect.height
    };
  }

  function order(modifiers) {
    var map = new Map();
    var visited = new Set();
    var result = [];
    modifiers.forEach(function (modifier) {
      map.set(modifier.name, modifier);
    }); // On visiting object, check for its dependencies and visit them recursively

    function sort(modifier) {
      visited.add(modifier.name);
      var requires = [].concat(modifier.requires || [], modifier.requiresIfExists || []);
      requires.forEach(function (dep) {
        if (!visited.has(dep)) {
          var depModifier = map.get(dep);

          if (depModifier) {
            sort(depModifier);
          }
        }
      });
      result.push(modifier);
    }

    modifiers.forEach(function (modifier) {
      if (!visited.has(modifier.name)) {
        // check for visited object
        sort(modifier);
      }
    });
    return result;
  }

  function orderModifiers(modifiers) {
    // order based on dependencies
    var orderedModifiers = order(modifiers); // order based on phase

    return modifierPhases.reduce(function (acc, phase) {
      return acc.concat(orderedModifiers.filter(function (modifier) {
        return modifier.phase === phase;
      }));
    }, []);
  }

  function debounce$3(fn) {
    var pending;
    return function () {
      if (!pending) {
        pending = new Promise(function (resolve) {
          Promise.resolve().then(function () {
            pending = undefined;
            resolve(fn());
          });
        });
      }

      return pending;
    };
  }

  function mergeByName(modifiers) {
    var merged = modifiers.reduce(function (merged, current) {
      var existing = merged[current.name];
      merged[current.name] = existing ? Object.assign({}, existing, current, {
        options: Object.assign({}, existing.options, current.options),
        data: Object.assign({}, existing.data, current.data)
      }) : current;
      return merged;
    }, {}); // IE11 does not support Object.values

    return Object.keys(merged).map(function (key) {
      return merged[key];
    });
  }

  var DEFAULT_OPTIONS = {
    placement: 'bottom',
    modifiers: [],
    strategy: 'absolute'
  };

  function areValidElements() {
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return !args.some(function (element) {
      return !(element && typeof element.getBoundingClientRect === 'function');
    });
  }

  function popperGenerator(generatorOptions) {
    if (generatorOptions === void 0) {
      generatorOptions = {};
    }

    var _generatorOptions = generatorOptions,
        _generatorOptions$def = _generatorOptions.defaultModifiers,
        defaultModifiers = _generatorOptions$def === void 0 ? [] : _generatorOptions$def,
        _generatorOptions$def2 = _generatorOptions.defaultOptions,
        defaultOptions = _generatorOptions$def2 === void 0 ? DEFAULT_OPTIONS : _generatorOptions$def2;
    return function createPopper(reference, popper, options) {
      if (options === void 0) {
        options = defaultOptions;
      }

      var state = {
        placement: 'bottom',
        orderedModifiers: [],
        options: Object.assign({}, DEFAULT_OPTIONS, defaultOptions),
        modifiersData: {},
        elements: {
          reference: reference,
          popper: popper
        },
        attributes: {},
        styles: {}
      };
      var effectCleanupFns = [];
      var isDestroyed = false;
      var instance = {
        state: state,
        setOptions: function setOptions(setOptionsAction) {
          var options = typeof setOptionsAction === 'function' ? setOptionsAction(state.options) : setOptionsAction;
          cleanupModifierEffects();
          state.options = Object.assign({}, defaultOptions, state.options, options);
          state.scrollParents = {
            reference: isElement$2(reference) ? listScrollParents(reference) : reference.contextElement ? listScrollParents(reference.contextElement) : [],
            popper: listScrollParents(popper)
          }; // Orders the modifiers based on their dependencies and `phase`
          // properties

          var orderedModifiers = orderModifiers(mergeByName([].concat(defaultModifiers, state.options.modifiers))); // Strip out disabled modifiers

          state.orderedModifiers = orderedModifiers.filter(function (m) {
            return m.enabled;
          });
          runModifierEffects();
          return instance.update();
        },
        // Sync update – it will always be executed, even if not necessary. This
        // is useful for low frequency updates where sync behavior simplifies the
        // logic.
        // For high frequency updates (e.g. `resize` and `scroll` events), always
        // prefer the async Popper#update method
        forceUpdate: function forceUpdate() {
          if (isDestroyed) {
            return;
          }

          var _state$elements = state.elements,
              reference = _state$elements.reference,
              popper = _state$elements.popper; // Don't proceed if `reference` or `popper` are not valid elements
          // anymore

          if (!areValidElements(reference, popper)) {
            return;
          } // Store the reference and popper rects to be read by modifiers


          state.rects = {
            reference: getCompositeRect(reference, getOffsetParent(popper), state.options.strategy === 'fixed'),
            popper: getLayoutRect(popper)
          }; // Modifiers have the ability to reset the current update cycle. The
          // most common use case for this is the `flip` modifier changing the
          // placement, which then needs to re-run all the modifiers, because the
          // logic was previously ran for the previous placement and is therefore
          // stale/incorrect

          state.reset = false;
          state.placement = state.options.placement; // On each update cycle, the `modifiersData` property for each modifier
          // is filled with the initial data specified by the modifier. This means
          // it doesn't persist and is fresh on each update.
          // To ensure persistent data, use `${name}#persistent`

          state.orderedModifiers.forEach(function (modifier) {
            return state.modifiersData[modifier.name] = Object.assign({}, modifier.data);
          });

          for (var index = 0; index < state.orderedModifiers.length; index++) {
            if (state.reset === true) {
              state.reset = false;
              index = -1;
              continue;
            }

            var _state$orderedModifie = state.orderedModifiers[index],
                fn = _state$orderedModifie.fn,
                _state$orderedModifie2 = _state$orderedModifie.options,
                _options = _state$orderedModifie2 === void 0 ? {} : _state$orderedModifie2,
                name = _state$orderedModifie.name;

            if (typeof fn === 'function') {
              state = fn({
                state: state,
                options: _options,
                name: name,
                instance: instance
              }) || state;
            }
          }
        },
        // Async and optimistically optimized update – it will not be executed if
        // not necessary (debounced to run at most once-per-tick)
        update: debounce$3(function () {
          return new Promise(function (resolve) {
            instance.forceUpdate();
            resolve(state);
          });
        }),
        destroy: function destroy() {
          cleanupModifierEffects();
          isDestroyed = true;
        }
      };

      if (!areValidElements(reference, popper)) {
        return instance;
      }

      instance.setOptions(options).then(function (state) {
        if (!isDestroyed && options.onFirstUpdate) {
          options.onFirstUpdate(state);
        }
      }); // Modifiers have the ability to execute arbitrary code before the first
      // update cycle runs. They will be executed in the same order as the update
      // cycle. This is useful when a modifier adds some persistent data that
      // other modifiers need to use, but the modifier is run after the dependent
      // one.

      function runModifierEffects() {
        state.orderedModifiers.forEach(function (_ref) {
          var name = _ref.name,
              _ref$options = _ref.options,
              options = _ref$options === void 0 ? {} : _ref$options,
              effect = _ref.effect;

          if (typeof effect === 'function') {
            var cleanupFn = effect({
              state: state,
              name: name,
              instance: instance,
              options: options
            });

            var noopFn = function noopFn() {};

            effectCleanupFns.push(cleanupFn || noopFn);
          }
        });
      }

      function cleanupModifierEffects() {
        effectCleanupFns.forEach(function (fn) {
          return fn();
        });
        effectCleanupFns = [];
      }

      return instance;
    };
  }

  var defaultModifiers = [eventListeners, popperOffsets$1, computeStyles$1, applyStyles$1, offset$1$1, flip$1, preventOverflow$1, arrow$1, hide$1];
  var createPopper = /*#__PURE__*/popperGenerator({
    defaultModifiers: defaultModifiers
  }); // eslint-disable-next-line import/no-unused-modules

  /**!
  * tippy.js v6.3.7
  * (c) 2017-2021 atomiks
  * MIT License
  */
  var BOX_CLASS = "tippy-box";
  var CONTENT_CLASS = "tippy-content";
  var BACKDROP_CLASS = "tippy-backdrop";
  var ARROW_CLASS = "tippy-arrow";
  var SVG_ARROW_CLASS = "tippy-svg-arrow";
  var TOUCH_OPTIONS = {
    passive: true,
    capture: true
  };
  var TIPPY_DEFAULT_APPEND_TO = function TIPPY_DEFAULT_APPEND_TO() {
    return document.body;
  };
  function getValueAtIndexOrReturn(value, index, defaultValue) {
    if (Array.isArray(value)) {
      var v = value[index];
      return v == null ? Array.isArray(defaultValue) ? defaultValue[index] : defaultValue : v;
    }

    return value;
  }
  function isType(value, type) {
    var str = {}.toString.call(value);
    return str.indexOf('[object') === 0 && str.indexOf(type + "]") > -1;
  }
  function invokeWithArgsOrReturn(value, args) {
    return typeof value === 'function' ? value.apply(void 0, args) : value;
  }
  function debounce$2(fn, ms) {
    // Avoid wrapping in `setTimeout` if ms is 0 anyway
    if (ms === 0) {
      return fn;
    }

    var timeout;
    return function (arg) {
      clearTimeout(timeout);
      timeout = setTimeout(function () {
        fn(arg);
      }, ms);
    };
  }
  function splitBySpaces(value) {
    return value.split(/\s+/).filter(Boolean);
  }
  function normalizeToArray(value) {
    return [].concat(value);
  }
  function pushIfUnique(arr, value) {
    if (arr.indexOf(value) === -1) {
      arr.push(value);
    }
  }
  function unique$1(arr) {
    return arr.filter(function (item, index) {
      return arr.indexOf(item) === index;
    });
  }
  function getBasePlacement(placement) {
    return placement.split('-')[0];
  }
  function arrayFrom(value) {
    return [].slice.call(value);
  }
  function removeUndefinedProps(obj) {
    return Object.keys(obj).reduce(function (acc, key) {
      if (obj[key] !== undefined) {
        acc[key] = obj[key];
      }

      return acc;
    }, {});
  }

  function div() {
    return document.createElement('div');
  }
  function isElement$1(value) {
    return ['Element', 'Fragment'].some(function (type) {
      return isType(value, type);
    });
  }
  function isNodeList(value) {
    return isType(value, 'NodeList');
  }
  function isMouseEvent(value) {
    return isType(value, 'MouseEvent');
  }
  function isReferenceElement(value) {
    return !!(value && value._tippy && value._tippy.reference === value);
  }
  function getArrayOfElements(value) {
    if (isElement$1(value)) {
      return [value];
    }

    if (isNodeList(value)) {
      return arrayFrom(value);
    }

    if (Array.isArray(value)) {
      return value;
    }

    return arrayFrom(document.querySelectorAll(value));
  }
  function setTransitionDuration(els, value) {
    els.forEach(function (el) {
      if (el) {
        el.style.transitionDuration = value + "ms";
      }
    });
  }
  function setVisibilityState(els, state) {
    els.forEach(function (el) {
      if (el) {
        el.setAttribute('data-state', state);
      }
    });
  }
  function getOwnerDocument(elementOrElements) {
    var _element$ownerDocumen;

    var _normalizeToArray = normalizeToArray(elementOrElements),
        element = _normalizeToArray[0]; // Elements created via a <template> have an ownerDocument with no reference to the body


    return element != null && (_element$ownerDocumen = element.ownerDocument) != null && _element$ownerDocumen.body ? element.ownerDocument : document;
  }
  function isCursorOutsideInteractiveBorder(popperTreeData, event) {
    var clientX = event.clientX,
        clientY = event.clientY;
    return popperTreeData.every(function (_ref) {
      var popperRect = _ref.popperRect,
          popperState = _ref.popperState,
          props = _ref.props;
      var interactiveBorder = props.interactiveBorder;
      var basePlacement = getBasePlacement(popperState.placement);
      var offsetData = popperState.modifiersData.offset;

      if (!offsetData) {
        return true;
      }

      var topDistance = basePlacement === 'bottom' ? offsetData.top.y : 0;
      var bottomDistance = basePlacement === 'top' ? offsetData.bottom.y : 0;
      var leftDistance = basePlacement === 'right' ? offsetData.left.x : 0;
      var rightDistance = basePlacement === 'left' ? offsetData.right.x : 0;
      var exceedsTop = popperRect.top - clientY + topDistance > interactiveBorder;
      var exceedsBottom = clientY - popperRect.bottom - bottomDistance > interactiveBorder;
      var exceedsLeft = popperRect.left - clientX + leftDistance > interactiveBorder;
      var exceedsRight = clientX - popperRect.right - rightDistance > interactiveBorder;
      return exceedsTop || exceedsBottom || exceedsLeft || exceedsRight;
    });
  }
  function updateTransitionEndListener(box, action, listener) {
    var method = action + "EventListener"; // some browsers apparently support `transition` (unprefixed) but only fire
    // `webkitTransitionEnd`...

    ['transitionend', 'webkitTransitionEnd'].forEach(function (event) {
      box[method](event, listener);
    });
  }
  /**
   * Compared to xxx.contains, this function works for dom structures with shadow
   * dom
   */

  function actualContains(parent, child) {
    var target = child;

    while (target) {
      var _target$getRootNode;

      if (parent.contains(target)) {
        return true;
      }

      target = target.getRootNode == null ? void 0 : (_target$getRootNode = target.getRootNode()) == null ? void 0 : _target$getRootNode.host;
    }

    return false;
  }

  var currentInput = {
    isTouch: false
  };
  var lastMouseMoveTime = 0;
  /**
   * When a `touchstart` event is fired, it's assumed the user is using touch
   * input. We'll bind a `mousemove` event listener to listen for mouse input in
   * the future. This way, the `isTouch` property is fully dynamic and will handle
   * hybrid devices that use a mix of touch + mouse input.
   */

  function onDocumentTouchStart() {
    if (currentInput.isTouch) {
      return;
    }

    currentInput.isTouch = true;

    if (window.performance) {
      document.addEventListener('mousemove', onDocumentMouseMove);
    }
  }
  /**
   * When two `mousemove` event are fired consecutively within 20ms, it's assumed
   * the user is using mouse input again. `mousemove` can fire on touch devices as
   * well, but very rarely that quickly.
   */

  function onDocumentMouseMove() {
    var now = performance.now();

    if (now - lastMouseMoveTime < 20) {
      currentInput.isTouch = false;
      document.removeEventListener('mousemove', onDocumentMouseMove);
    }

    lastMouseMoveTime = now;
  }
  /**
   * When an element is in focus and has a tippy, leaving the tab/window and
   * returning causes it to show again. For mouse users this is unexpected, but
   * for keyboard use it makes sense.
   * TODO: find a better technique to solve this problem
   */

  function onWindowBlur() {
    var activeElement = document.activeElement;

    if (isReferenceElement(activeElement)) {
      var instance = activeElement._tippy;

      if (activeElement.blur && !instance.state.isVisible) {
        activeElement.blur();
      }
    }
  }
  function bindGlobalEventListeners() {
    document.addEventListener('touchstart', onDocumentTouchStart, TOUCH_OPTIONS);
    window.addEventListener('blur', onWindowBlur);
  }

  var isBrowser$1 = typeof window !== 'undefined' && typeof document !== 'undefined';
  var isIE11 = isBrowser$1 ? // @ts-ignore
  !!window.msCrypto : false;

  var pluginProps = {
    animateFill: false,
    followCursor: false,
    inlinePositioning: false,
    sticky: false
  };
  var renderProps = {
    allowHTML: false,
    animation: 'fade',
    arrow: true,
    content: '',
    inertia: false,
    maxWidth: 350,
    role: 'tooltip',
    theme: '',
    zIndex: 9999
  };
  var defaultProps = Object.assign({
    appendTo: TIPPY_DEFAULT_APPEND_TO,
    aria: {
      content: 'auto',
      expanded: 'auto'
    },
    delay: 0,
    duration: [300, 250],
    getReferenceClientRect: null,
    hideOnClick: true,
    ignoreAttributes: false,
    interactive: false,
    interactiveBorder: 2,
    interactiveDebounce: 0,
    moveTransition: '',
    offset: [0, 10],
    onAfterUpdate: function onAfterUpdate() {},
    onBeforeUpdate: function onBeforeUpdate() {},
    onCreate: function onCreate() {},
    onDestroy: function onDestroy() {},
    onHidden: function onHidden() {},
    onHide: function onHide() {},
    onMount: function onMount() {},
    onShow: function onShow() {},
    onShown: function onShown() {},
    onTrigger: function onTrigger() {},
    onUntrigger: function onUntrigger() {},
    onClickOutside: function onClickOutside() {},
    placement: 'top',
    plugins: [],
    popperOptions: {},
    render: null,
    showOnCreate: false,
    touch: true,
    trigger: 'mouseenter focus',
    triggerTarget: null
  }, pluginProps, renderProps);
  var defaultKeys = Object.keys(defaultProps);
  var setDefaultProps = function setDefaultProps(partialProps) {

    var keys = Object.keys(partialProps);
    keys.forEach(function (key) {
      defaultProps[key] = partialProps[key];
    });
  };
  function getExtendedPassedProps(passedProps) {
    var plugins = passedProps.plugins || [];
    var pluginProps = plugins.reduce(function (acc, plugin) {
      var name = plugin.name,
          defaultValue = plugin.defaultValue;

      if (name) {
        var _name;

        acc[name] = passedProps[name] !== undefined ? passedProps[name] : (_name = defaultProps[name]) != null ? _name : defaultValue;
      }

      return acc;
    }, {});
    return Object.assign({}, passedProps, pluginProps);
  }
  function getDataAttributeProps(reference, plugins) {
    var propKeys = plugins ? Object.keys(getExtendedPassedProps(Object.assign({}, defaultProps, {
      plugins: plugins
    }))) : defaultKeys;
    var props = propKeys.reduce(function (acc, key) {
      var valueAsString = (reference.getAttribute("data-tippy-" + key) || '').trim();

      if (!valueAsString) {
        return acc;
      }

      if (key === 'content') {
        acc[key] = valueAsString;
      } else {
        try {
          acc[key] = JSON.parse(valueAsString);
        } catch (e) {
          acc[key] = valueAsString;
        }
      }

      return acc;
    }, {});
    return props;
  }
  function evaluateProps(reference, props) {
    var out = Object.assign({}, props, {
      content: invokeWithArgsOrReturn(props.content, [reference])
    }, props.ignoreAttributes ? {} : getDataAttributeProps(reference, props.plugins));
    out.aria = Object.assign({}, defaultProps.aria, out.aria);
    out.aria = {
      expanded: out.aria.expanded === 'auto' ? props.interactive : out.aria.expanded,
      content: out.aria.content === 'auto' ? props.interactive ? null : 'describedby' : out.aria.content
    };
    return out;
  }

  var innerHTML = function innerHTML() {
    return 'innerHTML';
  };

  function dangerouslySetInnerHTML(element, html) {
    element[innerHTML()] = html;
  }

  function createArrowElement(value) {
    var arrow = div();

    if (value === true) {
      arrow.className = ARROW_CLASS;
    } else {
      arrow.className = SVG_ARROW_CLASS;

      if (isElement$1(value)) {
        arrow.appendChild(value);
      } else {
        dangerouslySetInnerHTML(arrow, value);
      }
    }

    return arrow;
  }

  function setContent(content, props) {
    if (isElement$1(props.content)) {
      dangerouslySetInnerHTML(content, '');
      content.appendChild(props.content);
    } else if (typeof props.content !== 'function') {
      if (props.allowHTML) {
        dangerouslySetInnerHTML(content, props.content);
      } else {
        content.textContent = props.content;
      }
    }
  }
  function getChildren(popper) {
    var box = popper.firstElementChild;
    var boxChildren = arrayFrom(box.children);
    return {
      box: box,
      content: boxChildren.find(function (node) {
        return node.classList.contains(CONTENT_CLASS);
      }),
      arrow: boxChildren.find(function (node) {
        return node.classList.contains(ARROW_CLASS) || node.classList.contains(SVG_ARROW_CLASS);
      }),
      backdrop: boxChildren.find(function (node) {
        return node.classList.contains(BACKDROP_CLASS);
      })
    };
  }
  function render(instance) {
    var popper = div();
    var box = div();
    box.className = BOX_CLASS;
    box.setAttribute('data-state', 'hidden');
    box.setAttribute('tabindex', '-1');
    var content = div();
    content.className = CONTENT_CLASS;
    content.setAttribute('data-state', 'hidden');
    setContent(content, instance.props);
    popper.appendChild(box);
    box.appendChild(content);
    onUpdate(instance.props, instance.props);

    function onUpdate(prevProps, nextProps) {
      var _getChildren = getChildren(popper),
          box = _getChildren.box,
          content = _getChildren.content,
          arrow = _getChildren.arrow;

      if (nextProps.theme) {
        box.setAttribute('data-theme', nextProps.theme);
      } else {
        box.removeAttribute('data-theme');
      }

      if (typeof nextProps.animation === 'string') {
        box.setAttribute('data-animation', nextProps.animation);
      } else {
        box.removeAttribute('data-animation');
      }

      if (nextProps.inertia) {
        box.setAttribute('data-inertia', '');
      } else {
        box.removeAttribute('data-inertia');
      }

      box.style.maxWidth = typeof nextProps.maxWidth === 'number' ? nextProps.maxWidth + "px" : nextProps.maxWidth;

      if (nextProps.role) {
        box.setAttribute('role', nextProps.role);
      } else {
        box.removeAttribute('role');
      }

      if (prevProps.content !== nextProps.content || prevProps.allowHTML !== nextProps.allowHTML) {
        setContent(content, instance.props);
      }

      if (nextProps.arrow) {
        if (!arrow) {
          box.appendChild(createArrowElement(nextProps.arrow));
        } else if (prevProps.arrow !== nextProps.arrow) {
          box.removeChild(arrow);
          box.appendChild(createArrowElement(nextProps.arrow));
        }
      } else if (arrow) {
        box.removeChild(arrow);
      }
    }

    return {
      popper: popper,
      onUpdate: onUpdate
    };
  } // Runtime check to identify if the render function is the default one; this
  // way we can apply default CSS transitions logic and it can be tree-shaken away

  render.$$tippy = true;

  var idCounter = 1;
  var mouseMoveListeners = []; // Used by `hideAll()`

  var mountedInstances = [];
  function createTippy(reference, passedProps) {
    var props = evaluateProps(reference, Object.assign({}, defaultProps, getExtendedPassedProps(removeUndefinedProps(passedProps)))); // ===========================================================================
    // 🔒 Private members
    // ===========================================================================

    var showTimeout;
    var hideTimeout;
    var scheduleHideAnimationFrame;
    var isVisibleFromClick = false;
    var didHideDueToDocumentMouseDown = false;
    var didTouchMove = false;
    var ignoreOnFirstUpdate = false;
    var lastTriggerEvent;
    var currentTransitionEndListener;
    var onFirstUpdate;
    var listeners = [];
    var debouncedOnMouseMove = debounce$2(onMouseMove, props.interactiveDebounce);
    var currentTarget; // ===========================================================================
    // 🔑 Public members
    // ===========================================================================

    var id = idCounter++;
    var popperInstance = null;
    var plugins = unique$1(props.plugins);
    var state = {
      // Is the instance currently enabled?
      isEnabled: true,
      // Is the tippy currently showing and not transitioning out?
      isVisible: false,
      // Has the instance been destroyed?
      isDestroyed: false,
      // Is the tippy currently mounted to the DOM?
      isMounted: false,
      // Has the tippy finished transitioning in?
      isShown: false
    };
    var instance = {
      // properties
      id: id,
      reference: reference,
      popper: div(),
      popperInstance: popperInstance,
      props: props,
      state: state,
      plugins: plugins,
      // methods
      clearDelayTimeouts: clearDelayTimeouts,
      setProps: setProps,
      setContent: setContent,
      show: show,
      hide: hide,
      hideWithInteractivity: hideWithInteractivity,
      enable: enable,
      disable: disable,
      unmount: unmount,
      destroy: destroy
    }; // TODO: Investigate why this early return causes a TDZ error in the tests —
    // it doesn't seem to happen in the browser

    /* istanbul ignore if */

    if (!props.render) {

      return instance;
    } // ===========================================================================
    // Initial mutations
    // ===========================================================================


    var _props$render = props.render(instance),
        popper = _props$render.popper,
        onUpdate = _props$render.onUpdate;

    popper.setAttribute('data-tippy-root', '');
    popper.id = "tippy-" + instance.id;
    instance.popper = popper;
    reference._tippy = instance;
    popper._tippy = instance;
    var pluginsHooks = plugins.map(function (plugin) {
      return plugin.fn(instance);
    });
    var hasAriaExpanded = reference.hasAttribute('aria-expanded');
    addListeners();
    handleAriaExpandedAttribute();
    handleStyles();
    invokeHook('onCreate', [instance]);

    if (props.showOnCreate) {
      scheduleShow();
    } // Prevent a tippy with a delay from hiding if the cursor left then returned
    // before it started hiding


    popper.addEventListener('mouseenter', function () {
      if (instance.props.interactive && instance.state.isVisible) {
        instance.clearDelayTimeouts();
      }
    });
    popper.addEventListener('mouseleave', function () {
      if (instance.props.interactive && instance.props.trigger.indexOf('mouseenter') >= 0) {
        getDocument().addEventListener('mousemove', debouncedOnMouseMove);
      }
    });
    return instance; // ===========================================================================
    // 🔒 Private methods
    // ===========================================================================

    function getNormalizedTouchSettings() {
      var touch = instance.props.touch;
      return Array.isArray(touch) ? touch : [touch, 0];
    }

    function getIsCustomTouchBehavior() {
      return getNormalizedTouchSettings()[0] === 'hold';
    }

    function getIsDefaultRenderFn() {
      var _instance$props$rende;

      // @ts-ignore
      return !!((_instance$props$rende = instance.props.render) != null && _instance$props$rende.$$tippy);
    }

    function getCurrentTarget() {
      return currentTarget || reference;
    }

    function getDocument() {
      var parent = getCurrentTarget().parentNode;
      return parent ? getOwnerDocument(parent) : document;
    }

    function getDefaultTemplateChildren() {
      return getChildren(popper);
    }

    function getDelay(isShow) {
      // For touch or keyboard input, force `0` delay for UX reasons
      // Also if the instance is mounted but not visible (transitioning out),
      // ignore delay
      if (instance.state.isMounted && !instance.state.isVisible || currentInput.isTouch || lastTriggerEvent && lastTriggerEvent.type === 'focus') {
        return 0;
      }

      return getValueAtIndexOrReturn(instance.props.delay, isShow ? 0 : 1, defaultProps.delay);
    }

    function handleStyles(fromHide) {
      if (fromHide === void 0) {
        fromHide = false;
      }

      popper.style.pointerEvents = instance.props.interactive && !fromHide ? '' : 'none';
      popper.style.zIndex = "" + instance.props.zIndex;
    }

    function invokeHook(hook, args, shouldInvokePropsHook) {
      if (shouldInvokePropsHook === void 0) {
        shouldInvokePropsHook = true;
      }

      pluginsHooks.forEach(function (pluginHooks) {
        if (pluginHooks[hook]) {
          pluginHooks[hook].apply(pluginHooks, args);
        }
      });

      if (shouldInvokePropsHook) {
        var _instance$props;

        (_instance$props = instance.props)[hook].apply(_instance$props, args);
      }
    }

    function handleAriaContentAttribute() {
      var aria = instance.props.aria;

      if (!aria.content) {
        return;
      }

      var attr = "aria-" + aria.content;
      var id = popper.id;
      var nodes = normalizeToArray(instance.props.triggerTarget || reference);
      nodes.forEach(function (node) {
        var currentValue = node.getAttribute(attr);

        if (instance.state.isVisible) {
          node.setAttribute(attr, currentValue ? currentValue + " " + id : id);
        } else {
          var nextValue = currentValue && currentValue.replace(id, '').trim();

          if (nextValue) {
            node.setAttribute(attr, nextValue);
          } else {
            node.removeAttribute(attr);
          }
        }
      });
    }

    function handleAriaExpandedAttribute() {
      if (hasAriaExpanded || !instance.props.aria.expanded) {
        return;
      }

      var nodes = normalizeToArray(instance.props.triggerTarget || reference);
      nodes.forEach(function (node) {
        if (instance.props.interactive) {
          node.setAttribute('aria-expanded', instance.state.isVisible && node === getCurrentTarget() ? 'true' : 'false');
        } else {
          node.removeAttribute('aria-expanded');
        }
      });
    }

    function cleanupInteractiveMouseListeners() {
      getDocument().removeEventListener('mousemove', debouncedOnMouseMove);
      mouseMoveListeners = mouseMoveListeners.filter(function (listener) {
        return listener !== debouncedOnMouseMove;
      });
    }

    function onDocumentPress(event) {
      // Moved finger to scroll instead of an intentional tap outside
      if (currentInput.isTouch) {
        if (didTouchMove || event.type === 'mousedown') {
          return;
        }
      }

      var actualTarget = event.composedPath && event.composedPath()[0] || event.target; // Clicked on interactive popper

      if (instance.props.interactive && actualContains(popper, actualTarget)) {
        return;
      } // Clicked on the event listeners target


      if (normalizeToArray(instance.props.triggerTarget || reference).some(function (el) {
        return actualContains(el, actualTarget);
      })) {
        if (currentInput.isTouch) {
          return;
        }

        if (instance.state.isVisible && instance.props.trigger.indexOf('click') >= 0) {
          return;
        }
      } else {
        invokeHook('onClickOutside', [instance, event]);
      }

      if (instance.props.hideOnClick === true) {
        instance.clearDelayTimeouts();
        instance.hide(); // `mousedown` event is fired right before `focus` if pressing the
        // currentTarget. This lets a tippy with `focus` trigger know that it
        // should not show

        didHideDueToDocumentMouseDown = true;
        setTimeout(function () {
          didHideDueToDocumentMouseDown = false;
        }); // The listener gets added in `scheduleShow()`, but this may be hiding it
        // before it shows, and hide()'s early bail-out behavior can prevent it
        // from being cleaned up

        if (!instance.state.isMounted) {
          removeDocumentPress();
        }
      }
    }

    function onTouchMove() {
      didTouchMove = true;
    }

    function onTouchStart() {
      didTouchMove = false;
    }

    function addDocumentPress() {
      var doc = getDocument();
      doc.addEventListener('mousedown', onDocumentPress, true);
      doc.addEventListener('touchend', onDocumentPress, TOUCH_OPTIONS);
      doc.addEventListener('touchstart', onTouchStart, TOUCH_OPTIONS);
      doc.addEventListener('touchmove', onTouchMove, TOUCH_OPTIONS);
    }

    function removeDocumentPress() {
      var doc = getDocument();
      doc.removeEventListener('mousedown', onDocumentPress, true);
      doc.removeEventListener('touchend', onDocumentPress, TOUCH_OPTIONS);
      doc.removeEventListener('touchstart', onTouchStart, TOUCH_OPTIONS);
      doc.removeEventListener('touchmove', onTouchMove, TOUCH_OPTIONS);
    }

    function onTransitionedOut(duration, callback) {
      onTransitionEnd(duration, function () {
        if (!instance.state.isVisible && popper.parentNode && popper.parentNode.contains(popper)) {
          callback();
        }
      });
    }

    function onTransitionedIn(duration, callback) {
      onTransitionEnd(duration, callback);
    }

    function onTransitionEnd(duration, callback) {
      var box = getDefaultTemplateChildren().box;

      function listener(event) {
        if (event.target === box) {
          updateTransitionEndListener(box, 'remove', listener);
          callback();
        }
      } // Make callback synchronous if duration is 0
      // `transitionend` won't fire otherwise


      if (duration === 0) {
        return callback();
      }

      updateTransitionEndListener(box, 'remove', currentTransitionEndListener);
      updateTransitionEndListener(box, 'add', listener);
      currentTransitionEndListener = listener;
    }

    function on(eventType, handler, options) {
      if (options === void 0) {
        options = false;
      }

      var nodes = normalizeToArray(instance.props.triggerTarget || reference);
      nodes.forEach(function (node) {
        node.addEventListener(eventType, handler, options);
        listeners.push({
          node: node,
          eventType: eventType,
          handler: handler,
          options: options
        });
      });
    }

    function addListeners() {
      if (getIsCustomTouchBehavior()) {
        on('touchstart', onTrigger, {
          passive: true
        });
        on('touchend', onMouseLeave, {
          passive: true
        });
      }

      splitBySpaces(instance.props.trigger).forEach(function (eventType) {
        if (eventType === 'manual') {
          return;
        }

        on(eventType, onTrigger);

        switch (eventType) {
          case 'mouseenter':
            on('mouseleave', onMouseLeave);
            break;

          case 'focus':
            on(isIE11 ? 'focusout' : 'blur', onBlurOrFocusOut);
            break;

          case 'focusin':
            on('focusout', onBlurOrFocusOut);
            break;
        }
      });
    }

    function removeListeners() {
      listeners.forEach(function (_ref) {
        var node = _ref.node,
            eventType = _ref.eventType,
            handler = _ref.handler,
            options = _ref.options;
        node.removeEventListener(eventType, handler, options);
      });
      listeners = [];
    }

    function onTrigger(event) {
      var _lastTriggerEvent;

      var shouldScheduleClickHide = false;

      if (!instance.state.isEnabled || isEventListenerStopped(event) || didHideDueToDocumentMouseDown) {
        return;
      }

      var wasFocused = ((_lastTriggerEvent = lastTriggerEvent) == null ? void 0 : _lastTriggerEvent.type) === 'focus';
      lastTriggerEvent = event;
      currentTarget = event.currentTarget;
      handleAriaExpandedAttribute();

      if (!instance.state.isVisible && isMouseEvent(event)) {
        // If scrolling, `mouseenter` events can be fired if the cursor lands
        // over a new target, but `mousemove` events don't get fired. This
        // causes interactive tooltips to get stuck open until the cursor is
        // moved
        mouseMoveListeners.forEach(function (listener) {
          return listener(event);
        });
      } // Toggle show/hide when clicking click-triggered tooltips


      if (event.type === 'click' && (instance.props.trigger.indexOf('mouseenter') < 0 || isVisibleFromClick) && instance.props.hideOnClick !== false && instance.state.isVisible) {
        shouldScheduleClickHide = true;
      } else {
        scheduleShow(event);
      }

      if (event.type === 'click') {
        isVisibleFromClick = !shouldScheduleClickHide;
      }

      if (shouldScheduleClickHide && !wasFocused) {
        scheduleHide(event);
      }
    }

    function onMouseMove(event) {
      var target = event.target;
      var isCursorOverReferenceOrPopper = getCurrentTarget().contains(target) || popper.contains(target);

      if (event.type === 'mousemove' && isCursorOverReferenceOrPopper) {
        return;
      }

      var popperTreeData = getNestedPopperTree().concat(popper).map(function (popper) {
        var _instance$popperInsta;

        var instance = popper._tippy;
        var state = (_instance$popperInsta = instance.popperInstance) == null ? void 0 : _instance$popperInsta.state;

        if (state) {
          return {
            popperRect: popper.getBoundingClientRect(),
            popperState: state,
            props: props
          };
        }

        return null;
      }).filter(Boolean);

      if (isCursorOutsideInteractiveBorder(popperTreeData, event)) {
        cleanupInteractiveMouseListeners();
        scheduleHide(event);
      }
    }

    function onMouseLeave(event) {
      var shouldBail = isEventListenerStopped(event) || instance.props.trigger.indexOf('click') >= 0 && isVisibleFromClick;

      if (shouldBail) {
        return;
      }

      if (instance.props.interactive) {
        instance.hideWithInteractivity(event);
        return;
      }

      scheduleHide(event);
    }

    function onBlurOrFocusOut(event) {
      if (instance.props.trigger.indexOf('focusin') < 0 && event.target !== getCurrentTarget()) {
        return;
      } // If focus was moved to within the popper


      if (instance.props.interactive && event.relatedTarget && popper.contains(event.relatedTarget)) {
        return;
      }

      scheduleHide(event);
    }

    function isEventListenerStopped(event) {
      return currentInput.isTouch ? getIsCustomTouchBehavior() !== event.type.indexOf('touch') >= 0 : false;
    }

    function createPopperInstance() {
      destroyPopperInstance();
      var _instance$props2 = instance.props,
          popperOptions = _instance$props2.popperOptions,
          placement = _instance$props2.placement,
          offset = _instance$props2.offset,
          getReferenceClientRect = _instance$props2.getReferenceClientRect,
          moveTransition = _instance$props2.moveTransition;
      var arrow = getIsDefaultRenderFn() ? getChildren(popper).arrow : null;
      var computedReference = getReferenceClientRect ? {
        getBoundingClientRect: getReferenceClientRect,
        contextElement: getReferenceClientRect.contextElement || getCurrentTarget()
      } : reference;
      var tippyModifier = {
        name: '$$tippy',
        enabled: true,
        phase: 'beforeWrite',
        requires: ['computeStyles'],
        fn: function fn(_ref2) {
          var state = _ref2.state;

          if (getIsDefaultRenderFn()) {
            var _getDefaultTemplateCh = getDefaultTemplateChildren(),
                box = _getDefaultTemplateCh.box;

            ['placement', 'reference-hidden', 'escaped'].forEach(function (attr) {
              if (attr === 'placement') {
                box.setAttribute('data-placement', state.placement);
              } else {
                if (state.attributes.popper["data-popper-" + attr]) {
                  box.setAttribute("data-" + attr, '');
                } else {
                  box.removeAttribute("data-" + attr);
                }
              }
            });
            state.attributes.popper = {};
          }
        }
      };
      var modifiers = [{
        name: 'offset',
        options: {
          offset: offset
        }
      }, {
        name: 'preventOverflow',
        options: {
          padding: {
            top: 2,
            bottom: 2,
            left: 5,
            right: 5
          }
        }
      }, {
        name: 'flip',
        options: {
          padding: 5
        }
      }, {
        name: 'computeStyles',
        options: {
          adaptive: !moveTransition
        }
      }, tippyModifier];

      if (getIsDefaultRenderFn() && arrow) {
        modifiers.push({
          name: 'arrow',
          options: {
            element: arrow,
            padding: 3
          }
        });
      }

      modifiers.push.apply(modifiers, (popperOptions == null ? void 0 : popperOptions.modifiers) || []);
      instance.popperInstance = createPopper(computedReference, popper, Object.assign({}, popperOptions, {
        placement: placement,
        onFirstUpdate: onFirstUpdate,
        modifiers: modifiers
      }));
    }

    function destroyPopperInstance() {
      if (instance.popperInstance) {
        instance.popperInstance.destroy();
        instance.popperInstance = null;
      }
    }

    function mount() {
      var appendTo = instance.props.appendTo;
      var parentNode; // By default, we'll append the popper to the triggerTargets's parentNode so
      // it's directly after the reference element so the elements inside the
      // tippy can be tabbed to
      // If there are clipping issues, the user can specify a different appendTo
      // and ensure focus management is handled correctly manually

      var node = getCurrentTarget();

      if (instance.props.interactive && appendTo === TIPPY_DEFAULT_APPEND_TO || appendTo === 'parent') {
        parentNode = node.parentNode;
      } else {
        parentNode = invokeWithArgsOrReturn(appendTo, [node]);
      } // The popper element needs to exist on the DOM before its position can be
      // updated as Popper needs to read its dimensions


      if (!parentNode.contains(popper)) {
        parentNode.appendChild(popper);
      }

      instance.state.isMounted = true;
      createPopperInstance();
    }

    function getNestedPopperTree() {
      return arrayFrom(popper.querySelectorAll('[data-tippy-root]'));
    }

    function scheduleShow(event) {
      instance.clearDelayTimeouts();

      if (event) {
        invokeHook('onTrigger', [instance, event]);
      }

      addDocumentPress();
      var delay = getDelay(true);

      var _getNormalizedTouchSe = getNormalizedTouchSettings(),
          touchValue = _getNormalizedTouchSe[0],
          touchDelay = _getNormalizedTouchSe[1];

      if (currentInput.isTouch && touchValue === 'hold' && touchDelay) {
        delay = touchDelay;
      }

      if (delay) {
        showTimeout = setTimeout(function () {
          instance.show();
        }, delay);
      } else {
        instance.show();
      }
    }

    function scheduleHide(event) {
      instance.clearDelayTimeouts();
      invokeHook('onUntrigger', [instance, event]);

      if (!instance.state.isVisible) {
        removeDocumentPress();
        return;
      } // For interactive tippies, scheduleHide is added to a document.body handler
      // from onMouseLeave so must intercept scheduled hides from mousemove/leave
      // events when trigger contains mouseenter and click, and the tip is
      // currently shown as a result of a click.


      if (instance.props.trigger.indexOf('mouseenter') >= 0 && instance.props.trigger.indexOf('click') >= 0 && ['mouseleave', 'mousemove'].indexOf(event.type) >= 0 && isVisibleFromClick) {
        return;
      }

      var delay = getDelay(false);

      if (delay) {
        hideTimeout = setTimeout(function () {
          if (instance.state.isVisible) {
            instance.hide();
          }
        }, delay);
      } else {
        // Fixes a `transitionend` problem when it fires 1 frame too
        // late sometimes, we don't want hide() to be called.
        scheduleHideAnimationFrame = requestAnimationFrame(function () {
          instance.hide();
        });
      }
    } // ===========================================================================
    // 🔑 Public methods
    // ===========================================================================


    function enable() {
      instance.state.isEnabled = true;
    }

    function disable() {
      // Disabling the instance should also hide it
      // https://github.com/atomiks/tippy.js-react/issues/106
      instance.hide();
      instance.state.isEnabled = false;
    }

    function clearDelayTimeouts() {
      clearTimeout(showTimeout);
      clearTimeout(hideTimeout);
      cancelAnimationFrame(scheduleHideAnimationFrame);
    }

    function setProps(partialProps) {

      if (instance.state.isDestroyed) {
        return;
      }

      invokeHook('onBeforeUpdate', [instance, partialProps]);
      removeListeners();
      var prevProps = instance.props;
      var nextProps = evaluateProps(reference, Object.assign({}, prevProps, removeUndefinedProps(partialProps), {
        ignoreAttributes: true
      }));
      instance.props = nextProps;
      addListeners();

      if (prevProps.interactiveDebounce !== nextProps.interactiveDebounce) {
        cleanupInteractiveMouseListeners();
        debouncedOnMouseMove = debounce$2(onMouseMove, nextProps.interactiveDebounce);
      } // Ensure stale aria-expanded attributes are removed


      if (prevProps.triggerTarget && !nextProps.triggerTarget) {
        normalizeToArray(prevProps.triggerTarget).forEach(function (node) {
          node.removeAttribute('aria-expanded');
        });
      } else if (nextProps.triggerTarget) {
        reference.removeAttribute('aria-expanded');
      }

      handleAriaExpandedAttribute();
      handleStyles();

      if (onUpdate) {
        onUpdate(prevProps, nextProps);
      }

      if (instance.popperInstance) {
        createPopperInstance(); // Fixes an issue with nested tippies if they are all getting re-rendered,
        // and the nested ones get re-rendered first.
        // https://github.com/atomiks/tippyjs-react/issues/177
        // TODO: find a cleaner / more efficient solution(!)

        getNestedPopperTree().forEach(function (nestedPopper) {
          // React (and other UI libs likely) requires a rAF wrapper as it flushes
          // its work in one
          requestAnimationFrame(nestedPopper._tippy.popperInstance.forceUpdate);
        });
      }

      invokeHook('onAfterUpdate', [instance, partialProps]);
    }

    function setContent(content) {
      instance.setProps({
        content: content
      });
    }

    function show() {


      var isAlreadyVisible = instance.state.isVisible;
      var isDestroyed = instance.state.isDestroyed;
      var isDisabled = !instance.state.isEnabled;
      var isTouchAndTouchDisabled = currentInput.isTouch && !instance.props.touch;
      var duration = getValueAtIndexOrReturn(instance.props.duration, 0, defaultProps.duration);

      if (isAlreadyVisible || isDestroyed || isDisabled || isTouchAndTouchDisabled) {
        return;
      } // Normalize `disabled` behavior across browsers.
      // Firefox allows events on disabled elements, but Chrome doesn't.
      // Using a wrapper element (i.e. <span>) is recommended.


      if (getCurrentTarget().hasAttribute('disabled')) {
        return;
      }

      invokeHook('onShow', [instance], false);

      if (instance.props.onShow(instance) === false) {
        return;
      }

      instance.state.isVisible = true;

      if (getIsDefaultRenderFn()) {
        popper.style.visibility = 'visible';
      }

      handleStyles();
      addDocumentPress();

      if (!instance.state.isMounted) {
        popper.style.transition = 'none';
      } // If flipping to the opposite side after hiding at least once, the
      // animation will use the wrong placement without resetting the duration


      if (getIsDefaultRenderFn()) {
        var _getDefaultTemplateCh2 = getDefaultTemplateChildren(),
            box = _getDefaultTemplateCh2.box,
            content = _getDefaultTemplateCh2.content;

        setTransitionDuration([box, content], 0);
      }

      onFirstUpdate = function onFirstUpdate() {
        var _instance$popperInsta2;

        if (!instance.state.isVisible || ignoreOnFirstUpdate) {
          return;
        }

        ignoreOnFirstUpdate = true; // reflow

        void popper.offsetHeight;
        popper.style.transition = instance.props.moveTransition;

        if (getIsDefaultRenderFn() && instance.props.animation) {
          var _getDefaultTemplateCh3 = getDefaultTemplateChildren(),
              _box = _getDefaultTemplateCh3.box,
              _content = _getDefaultTemplateCh3.content;

          setTransitionDuration([_box, _content], duration);
          setVisibilityState([_box, _content], 'visible');
        }

        handleAriaContentAttribute();
        handleAriaExpandedAttribute();
        pushIfUnique(mountedInstances, instance); // certain modifiers (e.g. `maxSize`) require a second update after the
        // popper has been positioned for the first time

        (_instance$popperInsta2 = instance.popperInstance) == null ? void 0 : _instance$popperInsta2.forceUpdate();
        invokeHook('onMount', [instance]);

        if (instance.props.animation && getIsDefaultRenderFn()) {
          onTransitionedIn(duration, function () {
            instance.state.isShown = true;
            invokeHook('onShown', [instance]);
          });
        }
      };

      mount();
    }

    function hide() {


      var isAlreadyHidden = !instance.state.isVisible;
      var isDestroyed = instance.state.isDestroyed;
      var isDisabled = !instance.state.isEnabled;
      var duration = getValueAtIndexOrReturn(instance.props.duration, 1, defaultProps.duration);

      if (isAlreadyHidden || isDestroyed || isDisabled) {
        return;
      }

      invokeHook('onHide', [instance], false);

      if (instance.props.onHide(instance) === false) {
        return;
      }

      instance.state.isVisible = false;
      instance.state.isShown = false;
      ignoreOnFirstUpdate = false;
      isVisibleFromClick = false;

      if (getIsDefaultRenderFn()) {
        popper.style.visibility = 'hidden';
      }

      cleanupInteractiveMouseListeners();
      removeDocumentPress();
      handleStyles(true);

      if (getIsDefaultRenderFn()) {
        var _getDefaultTemplateCh4 = getDefaultTemplateChildren(),
            box = _getDefaultTemplateCh4.box,
            content = _getDefaultTemplateCh4.content;

        if (instance.props.animation) {
          setTransitionDuration([box, content], duration);
          setVisibilityState([box, content], 'hidden');
        }
      }

      handleAriaContentAttribute();
      handleAriaExpandedAttribute();

      if (instance.props.animation) {
        if (getIsDefaultRenderFn()) {
          onTransitionedOut(duration, instance.unmount);
        }
      } else {
        instance.unmount();
      }
    }

    function hideWithInteractivity(event) {

      getDocument().addEventListener('mousemove', debouncedOnMouseMove);
      pushIfUnique(mouseMoveListeners, debouncedOnMouseMove);
      debouncedOnMouseMove(event);
    }

    function unmount() {

      if (instance.state.isVisible) {
        instance.hide();
      }

      if (!instance.state.isMounted) {
        return;
      }

      destroyPopperInstance(); // If a popper is not interactive, it will be appended outside the popper
      // tree by default. This seems mainly for interactive tippies, but we should
      // find a workaround if possible

      getNestedPopperTree().forEach(function (nestedPopper) {
        nestedPopper._tippy.unmount();
      });

      if (popper.parentNode) {
        popper.parentNode.removeChild(popper);
      }

      mountedInstances = mountedInstances.filter(function (i) {
        return i !== instance;
      });
      instance.state.isMounted = false;
      invokeHook('onHidden', [instance]);
    }

    function destroy() {

      if (instance.state.isDestroyed) {
        return;
      }

      instance.clearDelayTimeouts();
      instance.unmount();
      removeListeners();
      delete reference._tippy;
      instance.state.isDestroyed = true;
      invokeHook('onDestroy', [instance]);
    }
  }

  function tippy(targets, optionalProps) {
    if (optionalProps === void 0) {
      optionalProps = {};
    }

    var plugins = defaultProps.plugins.concat(optionalProps.plugins || []);

    bindGlobalEventListeners();
    var passedProps = Object.assign({}, optionalProps, {
      plugins: plugins
    });
    var elements = getArrayOfElements(targets);

    var instances = elements.reduce(function (acc, reference) {
      var instance = reference && createTippy(reference, passedProps);

      if (instance) {
        acc.push(instance);
      }

      return acc;
    }, []);
    return isElement$1(targets) ? instances[0] : instances;
  }

  tippy.defaultProps = defaultProps;
  tippy.setDefaultProps = setDefaultProps;
  tippy.currentInput = currentInput;

  // every time the popper is destroyed (i.e. a new target), removing the styles
  // and causing transitions to break for singletons when the console is open, but
  // most notably for non-transform styles being used, `gpuAcceleration: false`.

  Object.assign({}, applyStyles$1, {
    effect: function effect(_ref) {
      var state = _ref.state;
      var initialStyles = {
        popper: {
          position: state.options.strategy,
          left: '0',
          top: '0',
          margin: '0'
        },
        arrow: {
          position: 'absolute'
        },
        reference: {}
      };
      Object.assign(state.elements.popper.style, initialStyles.popper);
      state.styles = initialStyles;

      if (state.elements.arrow) {
        Object.assign(state.elements.arrow.style, initialStyles.arrow);
      } // intentionally return no cleanup function
      // return () => { ... }

    }
  });

  tippy.setDefaultProps({
    render: render
  });

  /*! js-cookie v3.0.5 | MIT */
  /* eslint-disable no-var */
  function assign (target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        target[key] = source[key];
      }
    }
    return target
  }
  /* eslint-enable no-var */

  /* eslint-disable no-var */
  var defaultConverter = {
    read: function (value) {
      if (value[0] === '"') {
        value = value.slice(1, -1);
      }
      return value.replace(/(%[\dA-F]{2})+/gi, decodeURIComponent)
    },
    write: function (value) {
      return encodeURIComponent(value).replace(
        /%(2[346BF]|3[AC-F]|40|5[BDE]|60|7[BCD])/g,
        decodeURIComponent
      )
    }
  };
  /* eslint-enable no-var */

  /* eslint-disable no-var */

  function init (converter, defaultAttributes) {
    function set (name, value, attributes) {
      if (typeof document === 'undefined') {
        return
      }

      attributes = assign({}, defaultAttributes, attributes);

      if (typeof attributes.expires === 'number') {
        attributes.expires = new Date(Date.now() + attributes.expires * 864e5);
      }
      if (attributes.expires) {
        attributes.expires = attributes.expires.toUTCString();
      }

      name = encodeURIComponent(name)
        .replace(/%(2[346B]|5E|60|7C)/g, decodeURIComponent)
        .replace(/[()]/g, escape);

      var stringifiedAttributes = '';
      for (var attributeName in attributes) {
        if (!attributes[attributeName]) {
          continue
        }

        stringifiedAttributes += '; ' + attributeName;

        if (attributes[attributeName] === true) {
          continue
        }

        // Considers RFC 6265 section 5.2:
        // ...
        // 3.  If the remaining unparsed-attributes contains a %x3B (";")
        //     character:
        // Consume the characters of the unparsed-attributes up to,
        // not including, the first %x3B (";") character.
        // ...
        stringifiedAttributes += '=' + attributes[attributeName].split(';')[0];
      }

      return (document.cookie =
        name + '=' + converter.write(value, name) + stringifiedAttributes)
    }

    function get (name) {
      if (typeof document === 'undefined' || (arguments.length && !name)) {
        return
      }

      // To prevent the for loop in the first place assign an empty array
      // in case there are no cookies at all.
      var cookies = document.cookie ? document.cookie.split('; ') : [];
      var jar = {};
      for (var i = 0; i < cookies.length; i++) {
        var parts = cookies[i].split('=');
        var value = parts.slice(1).join('=');

        try {
          var found = decodeURIComponent(parts[0]);
          jar[found] = converter.read(value, found);

          if (name === found) {
            break
          }
        } catch (e) {}
      }

      return name ? jar[name] : jar
    }

    return Object.create(
      {
        set,
        get,
        remove: function (name, attributes) {
          set(
            name,
            '',
            assign({}, attributes, {
              expires: -1
            })
          );
        },
        withAttributes: function (attributes) {
          return init(this.converter, assign({}, this.attributes, attributes))
        },
        withConverter: function (converter) {
          return init(assign({}, this.converter, converter), this.attributes)
        }
      },
      {
        attributes: { value: Object.freeze(defaultAttributes) },
        converter: { value: Object.freeze(converter) }
      }
    )
  }

  var api = init(defaultConverter, { path: '/' });

  /**
   * A collection of shims that provide minimal functionality of the ES6 collections.
   *
   * These implementations are not meant to be used outside of the ResizeObserver
   * modules as they cover only a limited range of use cases.
   */
  /* eslint-disable require-jsdoc, valid-jsdoc */
  var MapShim = (function () {
      if (typeof Map !== 'undefined') {
          return Map;
      }
      /**
       * Returns index in provided array that matches the specified key.
       *
       * @param {Array<Array>} arr
       * @param {*} key
       * @returns {number}
       */
      function getIndex(arr, key) {
          var result = -1;
          arr.some(function (entry, index) {
              if (entry[0] === key) {
                  result = index;
                  return true;
              }
              return false;
          });
          return result;
      }
      return /** @class */ (function () {
          function class_1() {
              this.__entries__ = [];
          }
          Object.defineProperty(class_1.prototype, "size", {
              /**
               * @returns {boolean}
               */
              get: function () {
                  return this.__entries__.length;
              },
              enumerable: true,
              configurable: true
          });
          /**
           * @param {*} key
           * @returns {*}
           */
          class_1.prototype.get = function (key) {
              var index = getIndex(this.__entries__, key);
              var entry = this.__entries__[index];
              return entry && entry[1];
          };
          /**
           * @param {*} key
           * @param {*} value
           * @returns {void}
           */
          class_1.prototype.set = function (key, value) {
              var index = getIndex(this.__entries__, key);
              if (~index) {
                  this.__entries__[index][1] = value;
              }
              else {
                  this.__entries__.push([key, value]);
              }
          };
          /**
           * @param {*} key
           * @returns {void}
           */
          class_1.prototype.delete = function (key) {
              var entries = this.__entries__;
              var index = getIndex(entries, key);
              if (~index) {
                  entries.splice(index, 1);
              }
          };
          /**
           * @param {*} key
           * @returns {void}
           */
          class_1.prototype.has = function (key) {
              return !!~getIndex(this.__entries__, key);
          };
          /**
           * @returns {void}
           */
          class_1.prototype.clear = function () {
              this.__entries__.splice(0);
          };
          /**
           * @param {Function} callback
           * @param {*} [ctx=null]
           * @returns {void}
           */
          class_1.prototype.forEach = function (callback, ctx) {
              if (ctx === void 0) { ctx = null; }
              for (var _i = 0, _a = this.__entries__; _i < _a.length; _i++) {
                  var entry = _a[_i];
                  callback.call(ctx, entry[1], entry[0]);
              }
          };
          return class_1;
      }());
  })();

  /**
   * Detects whether window and document objects are available in current environment.
   */
  var isBrowser = typeof window !== 'undefined' && typeof document !== 'undefined' && window.document === document;

  // Returns global object of a current environment.
  var global$1 = (function () {
      if (typeof global !== 'undefined' && global.Math === Math) {
          return global;
      }
      if (typeof self !== 'undefined' && self.Math === Math) {
          return self;
      }
      if (typeof window !== 'undefined' && window.Math === Math) {
          return window;
      }
      // eslint-disable-next-line no-new-func
      return Function('return this')();
  })();

  /**
   * A shim for the requestAnimationFrame which falls back to the setTimeout if
   * first one is not supported.
   *
   * @returns {number} Requests' identifier.
   */
  var requestAnimationFrame$1 = (function () {
      if (typeof requestAnimationFrame === 'function') {
          // It's required to use a bounded function because IE sometimes throws
          // an "Invalid calling object" error if rAF is invoked without the global
          // object on the left hand side.
          return requestAnimationFrame.bind(global$1);
      }
      return function (callback) { return setTimeout(function () { return callback(Date.now()); }, 1000 / 60); };
  })();

  // Defines minimum timeout before adding a trailing call.
  var trailingTimeout = 2;
  /**
   * Creates a wrapper function which ensures that provided callback will be
   * invoked only once during the specified delay period.
   *
   * @param {Function} callback - Function to be invoked after the delay period.
   * @param {number} delay - Delay after which to invoke callback.
   * @returns {Function}
   */
  function throttle$1 (callback, delay) {
      var leadingCall = false, trailingCall = false, lastCallTime = 0;
      /**
       * Invokes the original callback function and schedules new invocation if
       * the "proxy" was called during current request.
       *
       * @returns {void}
       */
      function resolvePending() {
          if (leadingCall) {
              leadingCall = false;
              callback();
          }
          if (trailingCall) {
              proxy();
          }
      }
      /**
       * Callback invoked after the specified delay. It will further postpone
       * invocation of the original function delegating it to the
       * requestAnimationFrame.
       *
       * @returns {void}
       */
      function timeoutCallback() {
          requestAnimationFrame$1(resolvePending);
      }
      /**
       * Schedules invocation of the original function.
       *
       * @returns {void}
       */
      function proxy() {
          var timeStamp = Date.now();
          if (leadingCall) {
              // Reject immediately following calls.
              if (timeStamp - lastCallTime < trailingTimeout) {
                  return;
              }
              // Schedule new call to be in invoked when the pending one is resolved.
              // This is important for "transitions" which never actually start
              // immediately so there is a chance that we might miss one if change
              // happens amids the pending invocation.
              trailingCall = true;
          }
          else {
              leadingCall = true;
              trailingCall = false;
              setTimeout(timeoutCallback, delay);
          }
          lastCallTime = timeStamp;
      }
      return proxy;
  }

  // Minimum delay before invoking the update of observers.
  var REFRESH_DELAY = 20;
  // A list of substrings of CSS properties used to find transition events that
  // might affect dimensions of observed elements.
  var transitionKeys = ['top', 'right', 'bottom', 'left', 'width', 'height', 'size', 'weight'];
  // Check if MutationObserver is available.
  var mutationObserverSupported = typeof MutationObserver !== 'undefined';
  /**
   * Singleton controller class which handles updates of ResizeObserver instances.
   */
  var ResizeObserverController = /** @class */ (function () {
      /**
       * Creates a new instance of ResizeObserverController.
       *
       * @private
       */
      function ResizeObserverController() {
          /**
           * Indicates whether DOM listeners have been added.
           *
           * @private {boolean}
           */
          this.connected_ = false;
          /**
           * Tells that controller has subscribed for Mutation Events.
           *
           * @private {boolean}
           */
          this.mutationEventsAdded_ = false;
          /**
           * Keeps reference to the instance of MutationObserver.
           *
           * @private {MutationObserver}
           */
          this.mutationsObserver_ = null;
          /**
           * A list of connected observers.
           *
           * @private {Array<ResizeObserverSPI>}
           */
          this.observers_ = [];
          this.onTransitionEnd_ = this.onTransitionEnd_.bind(this);
          this.refresh = throttle$1(this.refresh.bind(this), REFRESH_DELAY);
      }
      /**
       * Adds observer to observers list.
       *
       * @param {ResizeObserverSPI} observer - Observer to be added.
       * @returns {void}
       */
      ResizeObserverController.prototype.addObserver = function (observer) {
          if (!~this.observers_.indexOf(observer)) {
              this.observers_.push(observer);
          }
          // Add listeners if they haven't been added yet.
          if (!this.connected_) {
              this.connect_();
          }
      };
      /**
       * Removes observer from observers list.
       *
       * @param {ResizeObserverSPI} observer - Observer to be removed.
       * @returns {void}
       */
      ResizeObserverController.prototype.removeObserver = function (observer) {
          var observers = this.observers_;
          var index = observers.indexOf(observer);
          // Remove observer if it's present in registry.
          if (~index) {
              observers.splice(index, 1);
          }
          // Remove listeners if controller has no connected observers.
          if (!observers.length && this.connected_) {
              this.disconnect_();
          }
      };
      /**
       * Invokes the update of observers. It will continue running updates insofar
       * it detects changes.
       *
       * @returns {void}
       */
      ResizeObserverController.prototype.refresh = function () {
          var changesDetected = this.updateObservers_();
          // Continue running updates if changes have been detected as there might
          // be future ones caused by CSS transitions.
          if (changesDetected) {
              this.refresh();
          }
      };
      /**
       * Updates every observer from observers list and notifies them of queued
       * entries.
       *
       * @private
       * @returns {boolean} Returns "true" if any observer has detected changes in
       *      dimensions of it's elements.
       */
      ResizeObserverController.prototype.updateObservers_ = function () {
          // Collect observers that have active observations.
          var activeObservers = this.observers_.filter(function (observer) {
              return observer.gatherActive(), observer.hasActive();
          });
          // Deliver notifications in a separate cycle in order to avoid any
          // collisions between observers, e.g. when multiple instances of
          // ResizeObserver are tracking the same element and the callback of one
          // of them changes content dimensions of the observed target. Sometimes
          // this may result in notifications being blocked for the rest of observers.
          activeObservers.forEach(function (observer) { return observer.broadcastActive(); });
          return activeObservers.length > 0;
      };
      /**
       * Initializes DOM listeners.
       *
       * @private
       * @returns {void}
       */
      ResizeObserverController.prototype.connect_ = function () {
          // Do nothing if running in a non-browser environment or if listeners
          // have been already added.
          if (!isBrowser || this.connected_) {
              return;
          }
          // Subscription to the "Transitionend" event is used as a workaround for
          // delayed transitions. This way it's possible to capture at least the
          // final state of an element.
          document.addEventListener('transitionend', this.onTransitionEnd_);
          window.addEventListener('resize', this.refresh);
          if (mutationObserverSupported) {
              this.mutationsObserver_ = new MutationObserver(this.refresh);
              this.mutationsObserver_.observe(document, {
                  attributes: true,
                  childList: true,
                  characterData: true,
                  subtree: true
              });
          }
          else {
              document.addEventListener('DOMSubtreeModified', this.refresh);
              this.mutationEventsAdded_ = true;
          }
          this.connected_ = true;
      };
      /**
       * Removes DOM listeners.
       *
       * @private
       * @returns {void}
       */
      ResizeObserverController.prototype.disconnect_ = function () {
          // Do nothing if running in a non-browser environment or if listeners
          // have been already removed.
          if (!isBrowser || !this.connected_) {
              return;
          }
          document.removeEventListener('transitionend', this.onTransitionEnd_);
          window.removeEventListener('resize', this.refresh);
          if (this.mutationsObserver_) {
              this.mutationsObserver_.disconnect();
          }
          if (this.mutationEventsAdded_) {
              document.removeEventListener('DOMSubtreeModified', this.refresh);
          }
          this.mutationsObserver_ = null;
          this.mutationEventsAdded_ = false;
          this.connected_ = false;
      };
      /**
       * "Transitionend" event handler.
       *
       * @private
       * @param {TransitionEvent} event
       * @returns {void}
       */
      ResizeObserverController.prototype.onTransitionEnd_ = function (_a) {
          var _b = _a.propertyName, propertyName = _b === void 0 ? '' : _b;
          // Detect whether transition may affect dimensions of an element.
          var isReflowProperty = transitionKeys.some(function (key) {
              return !!~propertyName.indexOf(key);
          });
          if (isReflowProperty) {
              this.refresh();
          }
      };
      /**
       * Returns instance of the ResizeObserverController.
       *
       * @returns {ResizeObserverController}
       */
      ResizeObserverController.getInstance = function () {
          if (!this.instance_) {
              this.instance_ = new ResizeObserverController();
          }
          return this.instance_;
      };
      /**
       * Holds reference to the controller's instance.
       *
       * @private {ResizeObserverController}
       */
      ResizeObserverController.instance_ = null;
      return ResizeObserverController;
  }());

  /**
   * Defines non-writable/enumerable properties of the provided target object.
   *
   * @param {Object} target - Object for which to define properties.
   * @param {Object} props - Properties to be defined.
   * @returns {Object} Target object.
   */
  var defineConfigurable = (function (target, props) {
      for (var _i = 0, _a = Object.keys(props); _i < _a.length; _i++) {
          var key = _a[_i];
          Object.defineProperty(target, key, {
              value: props[key],
              enumerable: false,
              writable: false,
              configurable: true
          });
      }
      return target;
  });

  /**
   * Returns the global object associated with provided element.
   *
   * @param {Object} target
   * @returns {Object}
   */
  var getWindowOf = (function (target) {
      // Assume that the element is an instance of Node, which means that it
      // has the "ownerDocument" property from which we can retrieve a
      // corresponding global object.
      var ownerGlobal = target && target.ownerDocument && target.ownerDocument.defaultView;
      // Return the local global object if it's not possible extract one from
      // provided element.
      return ownerGlobal || global$1;
  });

  // Placeholder of an empty content rectangle.
  var emptyRect = createRectInit(0, 0, 0, 0);
  /**
   * Converts provided string to a number.
   *
   * @param {number|string} value
   * @returns {number}
   */
  function toFloat(value) {
      return parseFloat(value) || 0;
  }
  /**
   * Extracts borders size from provided styles.
   *
   * @param {CSSStyleDeclaration} styles
   * @param {...string} positions - Borders positions (top, right, ...)
   * @returns {number}
   */
  function getBordersSize(styles) {
      var positions = [];
      for (var _i = 1; _i < arguments.length; _i++) {
          positions[_i - 1] = arguments[_i];
      }
      return positions.reduce(function (size, position) {
          var value = styles['border-' + position + '-width'];
          return size + toFloat(value);
      }, 0);
  }
  /**
   * Extracts paddings sizes from provided styles.
   *
   * @param {CSSStyleDeclaration} styles
   * @returns {Object} Paddings box.
   */
  function getPaddings(styles) {
      var positions = ['top', 'right', 'bottom', 'left'];
      var paddings = {};
      for (var _i = 0, positions_1 = positions; _i < positions_1.length; _i++) {
          var position = positions_1[_i];
          var value = styles['padding-' + position];
          paddings[position] = toFloat(value);
      }
      return paddings;
  }
  /**
   * Calculates content rectangle of provided SVG element.
   *
   * @param {SVGGraphicsElement} target - Element content rectangle of which needs
   *      to be calculated.
   * @returns {DOMRectInit}
   */
  function getSVGContentRect(target) {
      var bbox = target.getBBox();
      return createRectInit(0, 0, bbox.width, bbox.height);
  }
  /**
   * Calculates content rectangle of provided HTMLElement.
   *
   * @param {HTMLElement} target - Element for which to calculate the content rectangle.
   * @returns {DOMRectInit}
   */
  function getHTMLElementContentRect(target) {
      // Client width & height properties can't be
      // used exclusively as they provide rounded values.
      var clientWidth = target.clientWidth, clientHeight = target.clientHeight;
      // By this condition we can catch all non-replaced inline, hidden and
      // detached elements. Though elements with width & height properties less
      // than 0.5 will be discarded as well.
      //
      // Without it we would need to implement separate methods for each of
      // those cases and it's not possible to perform a precise and performance
      // effective test for hidden elements. E.g. even jQuery's ':visible' filter
      // gives wrong results for elements with width & height less than 0.5.
      if (!clientWidth && !clientHeight) {
          return emptyRect;
      }
      var styles = getWindowOf(target).getComputedStyle(target);
      var paddings = getPaddings(styles);
      var horizPad = paddings.left + paddings.right;
      var vertPad = paddings.top + paddings.bottom;
      // Computed styles of width & height are being used because they are the
      // only dimensions available to JS that contain non-rounded values. It could
      // be possible to utilize the getBoundingClientRect if only it's data wasn't
      // affected by CSS transformations let alone paddings, borders and scroll bars.
      var width = toFloat(styles.width), height = toFloat(styles.height);
      // Width & height include paddings and borders when the 'border-box' box
      // model is applied (except for IE).
      if (styles.boxSizing === 'border-box') {
          // Following conditions are required to handle Internet Explorer which
          // doesn't include paddings and borders to computed CSS dimensions.
          //
          // We can say that if CSS dimensions + paddings are equal to the "client"
          // properties then it's either IE, and thus we don't need to subtract
          // anything, or an element merely doesn't have paddings/borders styles.
          if (Math.round(width + horizPad) !== clientWidth) {
              width -= getBordersSize(styles, 'left', 'right') + horizPad;
          }
          if (Math.round(height + vertPad) !== clientHeight) {
              height -= getBordersSize(styles, 'top', 'bottom') + vertPad;
          }
      }
      // Following steps can't be applied to the document's root element as its
      // client[Width/Height] properties represent viewport area of the window.
      // Besides, it's as well not necessary as the <html> itself neither has
      // rendered scroll bars nor it can be clipped.
      if (!isDocumentElement(target)) {
          // In some browsers (only in Firefox, actually) CSS width & height
          // include scroll bars size which can be removed at this step as scroll
          // bars are the only difference between rounded dimensions + paddings
          // and "client" properties, though that is not always true in Chrome.
          var vertScrollbar = Math.round(width + horizPad) - clientWidth;
          var horizScrollbar = Math.round(height + vertPad) - clientHeight;
          // Chrome has a rather weird rounding of "client" properties.
          // E.g. for an element with content width of 314.2px it sometimes gives
          // the client width of 315px and for the width of 314.7px it may give
          // 314px. And it doesn't happen all the time. So just ignore this delta
          // as a non-relevant.
          if (Math.abs(vertScrollbar) !== 1) {
              width -= vertScrollbar;
          }
          if (Math.abs(horizScrollbar) !== 1) {
              height -= horizScrollbar;
          }
      }
      return createRectInit(paddings.left, paddings.top, width, height);
  }
  /**
   * Checks whether provided element is an instance of the SVGGraphicsElement.
   *
   * @param {Element} target - Element to be checked.
   * @returns {boolean}
   */
  var isSVGGraphicsElement = (function () {
      // Some browsers, namely IE and Edge, don't have the SVGGraphicsElement
      // interface.
      if (typeof SVGGraphicsElement !== 'undefined') {
          return function (target) { return target instanceof getWindowOf(target).SVGGraphicsElement; };
      }
      // If it's so, then check that element is at least an instance of the
      // SVGElement and that it has the "getBBox" method.
      // eslint-disable-next-line no-extra-parens
      return function (target) { return (target instanceof getWindowOf(target).SVGElement &&
          typeof target.getBBox === 'function'); };
  })();
  /**
   * Checks whether provided element is a document element (<html>).
   *
   * @param {Element} target - Element to be checked.
   * @returns {boolean}
   */
  function isDocumentElement(target) {
      return target === getWindowOf(target).document.documentElement;
  }
  /**
   * Calculates an appropriate content rectangle for provided html or svg element.
   *
   * @param {Element} target - Element content rectangle of which needs to be calculated.
   * @returns {DOMRectInit}
   */
  function getContentRect(target) {
      if (!isBrowser) {
          return emptyRect;
      }
      if (isSVGGraphicsElement(target)) {
          return getSVGContentRect(target);
      }
      return getHTMLElementContentRect(target);
  }
  /**
   * Creates rectangle with an interface of the DOMRectReadOnly.
   * Spec: https://drafts.fxtf.org/geometry/#domrectreadonly
   *
   * @param {DOMRectInit} rectInit - Object with rectangle's x/y coordinates and dimensions.
   * @returns {DOMRectReadOnly}
   */
  function createReadOnlyRect(_a) {
      var x = _a.x, y = _a.y, width = _a.width, height = _a.height;
      // If DOMRectReadOnly is available use it as a prototype for the rectangle.
      var Constr = typeof DOMRectReadOnly !== 'undefined' ? DOMRectReadOnly : Object;
      var rect = Object.create(Constr.prototype);
      // Rectangle's properties are not writable and non-enumerable.
      defineConfigurable(rect, {
          x: x, y: y, width: width, height: height,
          top: y,
          right: x + width,
          bottom: height + y,
          left: x
      });
      return rect;
  }
  /**
   * Creates DOMRectInit object based on the provided dimensions and the x/y coordinates.
   * Spec: https://drafts.fxtf.org/geometry/#dictdef-domrectinit
   *
   * @param {number} x - X coordinate.
   * @param {number} y - Y coordinate.
   * @param {number} width - Rectangle's width.
   * @param {number} height - Rectangle's height.
   * @returns {DOMRectInit}
   */
  function createRectInit(x, y, width, height) {
      return { x: x, y: y, width: width, height: height };
  }

  /**
   * Class that is responsible for computations of the content rectangle of
   * provided DOM element and for keeping track of it's changes.
   */
  var ResizeObservation = /** @class */ (function () {
      /**
       * Creates an instance of ResizeObservation.
       *
       * @param {Element} target - Element to be observed.
       */
      function ResizeObservation(target) {
          /**
           * Broadcasted width of content rectangle.
           *
           * @type {number}
           */
          this.broadcastWidth = 0;
          /**
           * Broadcasted height of content rectangle.
           *
           * @type {number}
           */
          this.broadcastHeight = 0;
          /**
           * Reference to the last observed content rectangle.
           *
           * @private {DOMRectInit}
           */
          this.contentRect_ = createRectInit(0, 0, 0, 0);
          this.target = target;
      }
      /**
       * Updates content rectangle and tells whether it's width or height properties
       * have changed since the last broadcast.
       *
       * @returns {boolean}
       */
      ResizeObservation.prototype.isActive = function () {
          var rect = getContentRect(this.target);
          this.contentRect_ = rect;
          return (rect.width !== this.broadcastWidth ||
              rect.height !== this.broadcastHeight);
      };
      /**
       * Updates 'broadcastWidth' and 'broadcastHeight' properties with a data
       * from the corresponding properties of the last observed content rectangle.
       *
       * @returns {DOMRectInit} Last observed content rectangle.
       */
      ResizeObservation.prototype.broadcastRect = function () {
          var rect = this.contentRect_;
          this.broadcastWidth = rect.width;
          this.broadcastHeight = rect.height;
          return rect;
      };
      return ResizeObservation;
  }());

  var ResizeObserverEntry$1 = /** @class */ (function () {
      /**
       * Creates an instance of ResizeObserverEntry.
       *
       * @param {Element} target - Element that is being observed.
       * @param {DOMRectInit} rectInit - Data of the element's content rectangle.
       */
      function ResizeObserverEntry(target, rectInit) {
          var contentRect = createReadOnlyRect(rectInit);
          // According to the specification following properties are not writable
          // and are also not enumerable in the native implementation.
          //
          // Property accessors are not being used as they'd require to define a
          // private WeakMap storage which may cause memory leaks in browsers that
          // don't support this type of collections.
          defineConfigurable(this, { target: target, contentRect: contentRect });
      }
      return ResizeObserverEntry;
  }());

  var ResizeObserverSPI = /** @class */ (function () {
      /**
       * Creates a new instance of ResizeObserver.
       *
       * @param {ResizeObserverCallback} callback - Callback function that is invoked
       *      when one of the observed elements changes it's content dimensions.
       * @param {ResizeObserverController} controller - Controller instance which
       *      is responsible for the updates of observer.
       * @param {ResizeObserver} callbackCtx - Reference to the public
       *      ResizeObserver instance which will be passed to callback function.
       */
      function ResizeObserverSPI(callback, controller, callbackCtx) {
          /**
           * Collection of resize observations that have detected changes in dimensions
           * of elements.
           *
           * @private {Array<ResizeObservation>}
           */
          this.activeObservations_ = [];
          /**
           * Registry of the ResizeObservation instances.
           *
           * @private {Map<Element, ResizeObservation>}
           */
          this.observations_ = new MapShim();
          if (typeof callback !== 'function') {
              throw new TypeError('The callback provided as parameter 1 is not a function.');
          }
          this.callback_ = callback;
          this.controller_ = controller;
          this.callbackCtx_ = callbackCtx;
      }
      /**
       * Starts observing provided element.
       *
       * @param {Element} target - Element to be observed.
       * @returns {void}
       */
      ResizeObserverSPI.prototype.observe = function (target) {
          if (!arguments.length) {
              throw new TypeError('1 argument required, but only 0 present.');
          }
          // Do nothing if current environment doesn't have the Element interface.
          if (typeof Element === 'undefined' || !(Element instanceof Object)) {
              return;
          }
          if (!(target instanceof getWindowOf(target).Element)) {
              throw new TypeError('parameter 1 is not of type "Element".');
          }
          var observations = this.observations_;
          // Do nothing if element is already being observed.
          if (observations.has(target)) {
              return;
          }
          observations.set(target, new ResizeObservation(target));
          this.controller_.addObserver(this);
          // Force the update of observations.
          this.controller_.refresh();
      };
      /**
       * Stops observing provided element.
       *
       * @param {Element} target - Element to stop observing.
       * @returns {void}
       */
      ResizeObserverSPI.prototype.unobserve = function (target) {
          if (!arguments.length) {
              throw new TypeError('1 argument required, but only 0 present.');
          }
          // Do nothing if current environment doesn't have the Element interface.
          if (typeof Element === 'undefined' || !(Element instanceof Object)) {
              return;
          }
          if (!(target instanceof getWindowOf(target).Element)) {
              throw new TypeError('parameter 1 is not of type "Element".');
          }
          var observations = this.observations_;
          // Do nothing if element is not being observed.
          if (!observations.has(target)) {
              return;
          }
          observations.delete(target);
          if (!observations.size) {
              this.controller_.removeObserver(this);
          }
      };
      /**
       * Stops observing all elements.
       *
       * @returns {void}
       */
      ResizeObserverSPI.prototype.disconnect = function () {
          this.clearActive();
          this.observations_.clear();
          this.controller_.removeObserver(this);
      };
      /**
       * Collects observation instances the associated element of which has changed
       * it's content rectangle.
       *
       * @returns {void}
       */
      ResizeObserverSPI.prototype.gatherActive = function () {
          var _this = this;
          this.clearActive();
          this.observations_.forEach(function (observation) {
              if (observation.isActive()) {
                  _this.activeObservations_.push(observation);
              }
          });
      };
      /**
       * Invokes initial callback function with a list of ResizeObserverEntry
       * instances collected from active resize observations.
       *
       * @returns {void}
       */
      ResizeObserverSPI.prototype.broadcastActive = function () {
          // Do nothing if observer doesn't have active observations.
          if (!this.hasActive()) {
              return;
          }
          var ctx = this.callbackCtx_;
          // Create ResizeObserverEntry instance for every active observation.
          var entries = this.activeObservations_.map(function (observation) {
              return new ResizeObserverEntry$1(observation.target, observation.broadcastRect());
          });
          this.callback_.call(ctx, entries, ctx);
          this.clearActive();
      };
      /**
       * Clears the collection of active observations.
       *
       * @returns {void}
       */
      ResizeObserverSPI.prototype.clearActive = function () {
          this.activeObservations_.splice(0);
      };
      /**
       * Tells whether observer has active observations.
       *
       * @returns {boolean}
       */
      ResizeObserverSPI.prototype.hasActive = function () {
          return this.activeObservations_.length > 0;
      };
      return ResizeObserverSPI;
  }());

  // Registry of internal observers. If WeakMap is not available use current shim
  // for the Map collection as it has all required methods and because WeakMap
  // can't be fully polyfilled anyway.
  var observers = typeof WeakMap !== 'undefined' ? new WeakMap() : new MapShim();
  /**
   * ResizeObserver API. Encapsulates the ResizeObserver SPI implementation
   * exposing only those methods and properties that are defined in the spec.
   */
  var ResizeObserver$1 = /** @class */ (function () {
      /**
       * Creates a new instance of ResizeObserver.
       *
       * @param {ResizeObserverCallback} callback - Callback that is invoked when
       *      dimensions of the observed elements change.
       */
      function ResizeObserver(callback) {
          if (!(this instanceof ResizeObserver)) {
              throw new TypeError('Cannot call a class as a function.');
          }
          if (!arguments.length) {
              throw new TypeError('1 argument required, but only 0 present.');
          }
          var controller = ResizeObserverController.getInstance();
          var observer = new ResizeObserverSPI(callback, controller, this);
          observers.set(this, observer);
      }
      return ResizeObserver;
  }());
  // Expose public methods of ResizeObserver.
  [
      'observe',
      'unobserve',
      'disconnect'
  ].forEach(function (method) {
      ResizeObserver$1.prototype[method] = function () {
          var _a;
          return (_a = observers.get(this))[method].apply(_a, arguments);
      };
  });

  ((function () {
      // Export existing implementation if available.
      if (typeof global$1.ResizeObserver !== 'undefined') {
          return global$1.ResizeObserver;
      }
      return ResizeObserver$1;
  }))();

  /*!
   * OverlayScrollbars
   * Version: 2.10.0
   *
   * Copyright (c) Rene Haas | KingSora.
   * https://github.com/KingSora
   *
   * Released under the MIT license.
   */
  const createCache = (t, n) => {
    const {o: o, i: s, u: e} = t;
    let c = o;
    let r;
    const cacheUpdateContextual = (t, n) => {
      const o = c;
      const l = t;
      const i = n || (s ? !s(o, l) : o !== l);
      if (i || e) {
        c = l;
        r = o;
      }
      return [ c, i, r ];
    };
    const cacheUpdateIsolated = t => cacheUpdateContextual(n(c, r), t);
    const getCurrentCache = t => [ c, !!t, r ];
    return [ n ? cacheUpdateIsolated : cacheUpdateContextual, getCurrentCache ];
  };

  const t$1 = typeof window !== "undefined" && typeof HTMLElement !== "undefined" && !!window.document;

  const n$1 = t$1 ? window : {};

  const o$1 = Math.max;

  const s$1$1 = Math.min;

  const e$1 = Math.round;

  const c$1 = Math.abs;

  const r$1 = Math.sign;

  const l$1 = n$1.cancelAnimationFrame;

  const i$1$1 = n$1.requestAnimationFrame;

  const a$1 = n$1.setTimeout;

  const u$1 = n$1.clearTimeout;

  const getApi = t => typeof n$1[t] !== "undefined" ? n$1[t] : void 0;

  const _$1 = getApi("MutationObserver");

  const d$1 = getApi("IntersectionObserver");

  const f$1 = getApi("ResizeObserver");

  const v$1 = getApi("ScrollTimeline");

  const isUndefined = t => t === void 0;

  const isNull = t => t === null;

  const isNumber$1 = t => typeof t === "number";

  const isString = t => typeof t === "string";

  const isBoolean = t => typeof t === "boolean";

  const isFunction$1 = t => typeof t === "function";

  const isArray$1 = t => Array.isArray(t);

  const isObject$1 = t => typeof t === "object" && !isArray$1(t) && !isNull(t);

  const isArrayLike = t => {
    const n = !!t && t.length;
    const o = isNumber$1(n) && n > -1 && n % 1 == 0;
    return isArray$1(t) || !isFunction$1(t) && o ? n > 0 && isObject$1(t) ? n - 1 in t : true : false;
  };

  const isPlainObject = t => !!t && t.constructor === Object;

  const isHTMLElement = t => t instanceof HTMLElement;

  const isElement = t => t instanceof Element;

  const animationCurrentTime = () => performance.now();

  const animateNumber = (t, n, s, e, c) => {
    let r = 0;
    const a = animationCurrentTime();
    const u = o$1(0, s);
    const frame = s => {
      const l = animationCurrentTime();
      const _ = l - a;
      const d = _ >= u;
      const f = s ? 1 : 1 - (o$1(0, a + u - l) / u || 0);
      const v = (n - t) * (isFunction$1(c) ? c(f, f * u, 0, 1, u) : f) + t;
      const p = d || f === 1;
      e && e(v, f, p);
      r = p ? 0 : i$1$1((() => frame()));
    };
    frame();
    return t => {
      l$1(r);
      t && frame(t);
    };
  };

  function each$1(t, n) {
    if (isArrayLike(t)) {
      for (let o = 0; o < t.length; o++) {
        if (n(t[o], o, t) === false) {
          break;
        }
      }
    } else if (t) {
      each$1(Object.keys(t), (o => n(t[o], o, t)));
    }
    return t;
  }

  const inArray = (t, n) => t.indexOf(n) >= 0;

  const concat = (t, n) => t.concat(n);

  const push = (t, n, o) => {
    !isString(n) && isArrayLike(n) ? Array.prototype.push.apply(t, n) : t.push(n);
    return t;
  };

  const from$1 = t => Array.from(t || []);

  const createOrKeepArray = t => {
    if (isArray$1(t)) {
      return t;
    }
    return !isString(t) && isArrayLike(t) ? from$1(t) : [ t ];
  };

  const isEmptyArray = t => !!t && !t.length;

  const deduplicateArray = t => from$1(new Set(t));

  const runEachAndClear = (t, n, o) => {
    const runFn = t => t ? t.apply(void 0, n || []) : true;
    each$1(t, runFn);
    !o && (t.length = 0);
  };

  const p$1 = "paddingTop";

  const h$1 = "paddingRight";

  const g$1 = "paddingLeft";

  const b$1 = "paddingBottom";

  const w$1 = "marginLeft";

  const y$1 = "marginRight";

  const S$1 = "marginBottom";

  const m$1 = "overflowX";

  const O$1 = "overflowY";

  const $$1 = "width";

  const C$1 = "height";

  const x$2 = "visible";

  const H = "hidden";

  const E$1 = "scroll";

  const capitalizeFirstLetter = t => {
    const n = String(t || "");
    return n ? n[0].toUpperCase() + n.slice(1) : "";
  };

  const equal = (t, n, o, s) => {
    if (t && n) {
      let e = true;
      each$1(o, (o => {
        const c = t[o];
        const r = n[o];
        if (c !== r) {
          e = false;
        }
      }));
      return e;
    }
    return false;
  };

  const equalWH = (t, n) => equal(t, n, [ "w", "h" ]);

  const equalXY = (t, n) => equal(t, n, [ "x", "y" ]);

  const equalTRBL = (t, n) => equal(t, n, [ "t", "r", "b", "l" ]);

  const noop$1 = () => {};

  const bind = (t, ...n) => t.bind(0, ...n);

  const selfClearTimeout = t => {
    let n;
    const o = t ? a$1 : i$1$1;
    const s = t ? u$1 : l$1;
    return [ e => {
      s(n);
      n = o((() => e()), isFunction$1(t) ? t() : t);
    }, () => s(n) ];
  };

  const debounce$1 = (t, n) => {
    const {_: o, v: s, p: e, S: c} = n || {};
    let r;
    let _;
    let d;
    let f;
    let v = noop$1;
    const p = function invokeFunctionToDebounce(n) {
      v();
      u$1(r);
      f = r = _ = void 0;
      v = noop$1;
      t.apply(this, n);
    };
    const mergeParms = t => c && _ ? c(_, t) : t;
    const flush = () => {
      if (v !== noop$1) {
        p(mergeParms(d) || d);
      }
    };
    const h = function debouncedFn() {
      const t = from$1(arguments);
      const n = isFunction$1(o) ? o() : o;
      const c = isNumber$1(n) && n >= 0;
      if (c) {
        const o = isFunction$1(s) ? s() : s;
        const c = isNumber$1(o) && o >= 0;
        const h = n > 0 ? a$1 : i$1$1;
        const g = n > 0 ? u$1 : l$1;
        const b = mergeParms(t);
        const w = b || t;
        const y = p.bind(0, w);
        let S;
        v();
        if (e && !f) {
          y();
          f = true;
          S = h((() => f = void 0), n);
        } else {
          S = h(y, n);
          if (c && !r) {
            r = a$1(flush, o);
          }
        }
        v = () => g(S);
        _ = d = w;
      } else {
        p(t);
      }
    };
    h.m = flush;
    return h;
  };

  const hasOwnProperty = (t, n) => Object.prototype.hasOwnProperty.call(t, n);

  const keys = t => t ? Object.keys(t) : [];

  const assignDeep = (t, n, o, s, e, c, r) => {
    const l = [ n, o, s, e, c, r ];
    if ((typeof t !== "object" || isNull(t)) && !isFunction$1(t)) {
      t = {};
    }
    each$1(l, (n => {
      each$1(n, ((o, s) => {
        const e = n[s];
        if (t === e) {
          return true;
        }
        const c = isArray$1(e);
        if (e && isPlainObject(e)) {
          const n = t[s];
          let o = n;
          if (c && !isArray$1(n)) {
            o = [];
          } else if (!c && !isPlainObject(n)) {
            o = {};
          }
          t[s] = assignDeep(o, e);
        } else {
          t[s] = c ? e.slice() : e;
        }
      }));
    }));
    return t;
  };

  const removeUndefinedProperties = (t, n) => each$1(assignDeep({}, t), ((t, o, s) => {
    if (t === void 0) {
      delete s[o];
    } else if (t && isPlainObject(t)) {
      s[o] = removeUndefinedProperties(t);
    }
  }));

  const isEmptyObject = t => !keys(t).length;

  const capNumber = (t, n, e) => o$1(t, s$1$1(n, e));

  const getDomTokensArray = t => deduplicateArray((isArray$1(t) ? t : (t || "").split(" ")).filter((t => t)));

  const getAttr = (t, n) => t && t.getAttribute(n);

  const hasAttr = (t, n) => t && t.hasAttribute(n);

  const setAttrs = (t, n, o) => {
    each$1(getDomTokensArray(n), (n => {
      t && t.setAttribute(n, String(o || ""));
    }));
  };

  const removeAttrs = (t, n) => {
    each$1(getDomTokensArray(n), (n => t && t.removeAttribute(n)));
  };

  const domTokenListAttr = (t, n) => {
    const o = getDomTokensArray(getAttr(t, n));
    const s = bind(setAttrs, t, n);
    const domTokenListOperation = (t, n) => {
      const s = new Set(o);
      each$1(getDomTokensArray(t), (t => {
        s[n](t);
      }));
      return from$1(s).join(" ");
    };
    return {
      O: t => s(domTokenListOperation(t, "delete")),
      $: t => s(domTokenListOperation(t, "add")),
      C: t => {
        const n = getDomTokensArray(t);
        return n.reduce(((t, n) => t && o.includes(n)), n.length > 0);
      }
    };
  };

  const removeAttrClass = (t, n, o) => {
    domTokenListAttr(t, n).O(o);
    return bind(addAttrClass, t, n, o);
  };

  const addAttrClass = (t, n, o) => {
    domTokenListAttr(t, n).$(o);
    return bind(removeAttrClass, t, n, o);
  };

  const addRemoveAttrClass = (t, n, o, s) => (s ? addAttrClass : removeAttrClass)(t, n, o);

  const hasAttrClass = (t, n, o) => domTokenListAttr(t, n).C(o);

  const createDomTokenListClass = t => domTokenListAttr(t, "class");

  const removeClass$1 = (t, n) => {
    createDomTokenListClass(t).O(n);
  };

  const addClass$1 = (t, n) => {
    createDomTokenListClass(t).$(n);
    return bind(removeClass$1, t, n);
  };

  const find$1 = (t, n) => {
    const o = n ? isElement(n) && n : document;
    return o ? from$1(o.querySelectorAll(t)) : [];
  };

  const findFirst = (t, n) => {
    const o = n ? isElement(n) && n : document;
    return o && o.querySelector(t);
  };

  const is = (t, n) => isElement(t) && t.matches(n);

  const isBodyElement = t => is(t, "body");

  const contents = t => t ? from$1(t.childNodes) : [];

  const parent = t => t && t.parentElement;

  const closest$1$1 = (t, n) => isElement(t) && t.closest(n);

  const getFocusedElement = t => (document).activeElement;

  const liesBetween = (t, n, o) => {
    const s = closest$1$1(t, n);
    const e = t && findFirst(o, s);
    const c = closest$1$1(e, n) === s;
    return s && e ? s === t || e === t || c && closest$1$1(closest$1$1(t, o), n) !== s : false;
  };

  const removeElements = t => {
    each$1(createOrKeepArray(t), (t => {
      const n = parent(t);
      t && n && n.removeChild(t);
    }));
  };

  const appendChildren = (t, n) => bind(removeElements, t && n && each$1(createOrKeepArray(n), (n => {
    n && t.appendChild(n);
  })));

  const createDiv = t => {
    const n = document.createElement("div");
    setAttrs(n, "class", t);
    return n;
  };

  const createDOM = t => {
    const n = createDiv();
    n.innerHTML = t.trim();
    return each$1(contents(n), (t => removeElements(t)));
  };

  const getCSSVal = (t, n) => t.getPropertyValue(n) || t[n] || "";

  const validFiniteNumber = t => {
    const n = t || 0;
    return isFinite(n) ? n : 0;
  };

  const parseToZeroOrNumber = t => validFiniteNumber(parseFloat(t || ""));

  const roundCssNumber = t => Math.round(t * 1e4) / 1e4;

  const numberToCssPx = t => `${roundCssNumber(validFiniteNumber(t))}px`;

  function setStyles(t, n) {
    t && n && each$1(n, ((n, o) => {
      try {
        const s = t.style;
        const e = isNull(n) || isBoolean(n) ? "" : isNumber$1(n) ? numberToCssPx(n) : n;
        if (o.indexOf("--") === 0) {
          s.setProperty(o, e);
        } else {
          s[o] = e;
        }
      } catch (s) {}
    }));
  }

  function getStyles(t, o, s) {
    const e = isString(o);
    let c = e ? "" : {};
    if (t) {
      const r = n$1.getComputedStyle(t, s) || t.style;
      c = e ? getCSSVal(r, o) : from$1(o).reduce(((t, n) => {
        t[n] = getCSSVal(r, n);
        return t;
      }), c);
    }
    return c;
  }

  const topRightBottomLeft = (t, n, o) => {
    const s = n ? `${n}-` : "";
    const e = o ? `-${o}` : "";
    const c = `${s}top${e}`;
    const r = `${s}right${e}`;
    const l = `${s}bottom${e}`;
    const i = `${s}left${e}`;
    const a = getStyles(t, [ c, r, l, i ]);
    return {
      t: parseToZeroOrNumber(a[c]),
      r: parseToZeroOrNumber(a[r]),
      b: parseToZeroOrNumber(a[l]),
      l: parseToZeroOrNumber(a[i])
    };
  };

  const getTrasformTranslateValue = (t, n) => `translate${isObject$1(t) ? `(${t.x},${t.y})` : `${"Y"}(${t})`}`;

  const elementHasDimensions = t => !!(t.offsetWidth || t.offsetHeight || t.getClientRects().length);

  const z$1 = {
    w: 0,
    h: 0
  };

  const getElmWidthHeightProperty = (t, n) => n ? {
    w: n[`${t}Width`],
    h: n[`${t}Height`]
  } : z$1;

  const getWindowSize = t => getElmWidthHeightProperty("inner", t || n$1);

  const I$1 = bind(getElmWidthHeightProperty, "offset");

  const A$1 = bind(getElmWidthHeightProperty, "client");

  const D = bind(getElmWidthHeightProperty, "scroll");

  const getFractionalSize = t => {
    const n = parseFloat(getStyles(t, $$1)) || 0;
    const o = parseFloat(getStyles(t, C$1)) || 0;
    return {
      w: n - e$1(n),
      h: o - e$1(o)
    };
  };

  const getBoundingClientRect = t => t.getBoundingClientRect();

  const hasDimensions = t => !!t && elementHasDimensions(t);

  const domRectHasDimensions = t => !!(t && (t[C$1] || t[$$1]));

  const domRectAppeared = (t, n) => {
    const o = domRectHasDimensions(t);
    const s = domRectHasDimensions(n);
    return !s && o;
  };

  const removeEventListener = (t, n, o, s) => {
    each$1(getDomTokensArray(n), (n => {
      t && t.removeEventListener(n, o, s);
    }));
  };

  const addEventListener = (t, n, o, s) => {
    var e;
    const c = (e = s && s.H) != null ? e : true;
    const r = s && s.I || false;
    const l = s && s.A || false;
    const i = {
      passive: c,
      capture: r
    };
    return bind(runEachAndClear, getDomTokensArray(n).map((n => {
      const s = l ? e => {
        removeEventListener(t, n, s, r);
        o && o(e);
      } : o;
      t && t.addEventListener(n, s, i);
      return bind(removeEventListener, t, n, s, r);
    })));
  };

  const stopPropagation = t => t.stopPropagation();

  const preventDefault$1 = t => t.preventDefault();

  const stopAndPrevent = t => stopPropagation(t) || preventDefault$1(t);

  const scrollElementTo = (t, n) => {
    const {x: o, y: s} = isNumber$1(n) ? {
      x: n,
      y: n
    } : n || {};
    isNumber$1(o) && (t.scrollLeft = o);
    isNumber$1(s) && (t.scrollTop = s);
  };

  const getElementScroll = t => ({
    x: t.scrollLeft,
    y: t.scrollTop
  });

  const getZeroScrollCoordinates = () => ({
    D: {
      x: 0,
      y: 0
    },
    M: {
      x: 0,
      y: 0
    }
  });

  const sanitizeScrollCoordinates = (t, n) => {
    const {D: o, M: s} = t;
    const {w: e, h: l} = n;
    const sanitizeAxis = (t, n, o) => {
      let s = r$1(t) * o;
      let e = r$1(n) * o;
      if (s === e) {
        const o = c$1(t);
        const r = c$1(n);
        e = o > r ? 0 : e;
        s = o < r ? 0 : s;
      }
      s = s === e ? 0 : s;
      return [ s + 0, e + 0 ];
    };
    const [i, a] = sanitizeAxis(o.x, s.x, e);
    const [u, _] = sanitizeAxis(o.y, s.y, l);
    return {
      D: {
        x: i,
        y: u
      },
      M: {
        x: a,
        y: _
      }
    };
  };

  const isDefaultDirectionScrollCoordinates = ({D: t, M: n}) => {
    const getAxis = (t, n) => t === 0 && t <= n;
    return {
      x: getAxis(t.x, n.x),
      y: getAxis(t.y, n.y)
    };
  };

  const getScrollCoordinatesPercent = ({D: t, M: n}, o) => {
    const getAxis = (t, n, o) => capNumber(0, 1, (t - o) / (t - n) || 0);
    return {
      x: getAxis(t.x, n.x, o.x),
      y: getAxis(t.y, n.y, o.y)
    };
  };

  const focusElement = t => {
    if (t && t.focus) {
      t.focus({
        preventScroll: true
      });
    }
  };

  const manageListener = (t, n) => {
    each$1(createOrKeepArray(n), t);
  };

  const createEventListenerHub = t => {
    const n = new Map;
    const removeEvent = (t, o) => {
      if (t) {
        const s = n.get(t);
        manageListener((t => {
          if (s) {
            s[t ? "delete" : "clear"](t);
          }
        }), o);
      } else {
        n.forEach((t => {
          t.clear();
        }));
        n.clear();
      }
    };
    const addEvent = (t, o) => {
      if (isString(t)) {
        const s = n.get(t) || new Set;
        n.set(t, s);
        manageListener((t => {
          isFunction$1(t) && s.add(t);
        }), o);
        return bind(removeEvent, t, o);
      }
      if (isBoolean(o) && o) {
        removeEvent();
      }
      const s = keys(t);
      const e = [];
      each$1(s, (n => {
        const o = t[n];
        o && push(e, addEvent(n, o));
      }));
      return bind(runEachAndClear, e);
    };
    const triggerEvent = (t, o) => {
      each$1(from$1(n.get(t)), (t => {
        if (o && !isEmptyArray(o)) {
          t.apply(0, o);
        } else {
          t();
        }
      }));
    };
    addEvent(t || {});
    return [ addEvent, removeEvent, triggerEvent ];
  };

  const opsStringify = t => JSON.stringify(t, ((t, n) => {
    if (isFunction$1(n)) {
      throw 0;
    }
    return n;
  }));

  const getPropByPath = (t, n) => t ? `${n}`.split(".").reduce(((t, n) => t && hasOwnProperty(t, n) ? t[n] : void 0), t) : void 0;

  const M$1 = {
    paddingAbsolute: false,
    showNativeOverlaidScrollbars: false,
    update: {
      elementEvents: [ [ "img", "load" ] ],
      debounce: [ 0, 33 ],
      attributes: null,
      ignoreMutation: null
    },
    overflow: {
      x: "scroll",
      y: "scroll"
    },
    scrollbars: {
      theme: "os-theme-dark",
      visibility: "auto",
      autoHide: "never",
      autoHideDelay: 1300,
      autoHideSuspend: false,
      dragScroll: true,
      clickScroll: false,
      pointers: [ "mouse", "touch", "pen" ]
    }
  };

  const getOptionsDiff = (t, n) => {
    const o = {};
    const s = concat(keys(n), keys(t));
    each$1(s, (s => {
      const e = t[s];
      const c = n[s];
      if (isObject$1(e) && isObject$1(c)) {
        assignDeep(o[s] = {}, getOptionsDiff(e, c));
        if (isEmptyObject(o[s])) {
          delete o[s];
        }
      } else if (hasOwnProperty(n, s) && c !== e) {
        let t = true;
        if (isArray$1(e) || isArray$1(c)) {
          try {
            if (opsStringify(e) === opsStringify(c)) {
              t = false;
            }
          } catch (r) {}
        }
        if (t) {
          o[s] = c;
        }
      }
    }));
    return o;
  };

  const createOptionCheck = (t, n, o) => s => [ getPropByPath(t, s), o || getPropByPath(n, s) !== void 0 ];

  const T$1 = `data-overlayscrollbars`;

  const k$1 = "os-environment";

  const R$1 = `${k$1}-scrollbar-hidden`;

  const V = `${T$1}-initialize`;

  const L$1 = "noClipping";

  const U = `${T$1}-body`;

  const P$1 = T$1;

  const N = "host";

  const q = `${T$1}-viewport`;

  const B = m$1;

  const F$1 = O$1;

  const j = "arrange";

  const X = "measuring";

  const Y = "scrolling";

  const W = "scrollbarHidden";

  const J = "noContent";

  const G = `${T$1}-padding`;

  const K = `${T$1}-content`;

  const Q = "os-size-observer";

  const Z = `${Q}-appear`;

  const tt = `${Q}-listener`;

  const nt = `${tt}-scroll`;

  const ot = `${tt}-item`;

  const st = `${ot}-final`;

  const et = "os-trinsic-observer";

  const ct = "os-theme-none";

  const rt = "os-scrollbar";

  const lt = `${rt}-rtl`;

  const it = `${rt}-horizontal`;

  const at = `${rt}-vertical`;

  const ut = `${rt}-track`;

  const _t = `${rt}-handle`;

  const dt = `${rt}-visible`;

  const ft = `${rt}-cornerless`;

  const vt = `${rt}-interaction`;

  const pt = `${rt}-unusable`;

  const ht = `${rt}-auto-hide`;

  const gt = `${ht}-hidden`;

  const bt = `${rt}-wheel`;

  const wt = `${ut}-interactive`;

  const yt = `${_t}-interactive`;

  let St;

  const getNonce = () => St;

  const setNonce = t => {
    St = t;
  };

  let mt;

  const createEnvironment = () => {
    const getNativeScrollbarSize = (t, n, o) => {
      appendChildren(document.body, t);
      appendChildren(document.body, t);
      const s = A$1(t);
      const e = I$1(t);
      const c = getFractionalSize(n);
      o && removeElements(t);
      return {
        x: e.h - s.h + c.h,
        y: e.w - s.w + c.w
      };
    };
    const getNativeScrollbarsHiding = t => {
      let n = false;
      const o = addClass$1(t, R$1);
      try {
        n = getStyles(t, "scrollbar-width") === "none" || getStyles(t, "display", "::-webkit-scrollbar") === "none";
      } catch (s) {}
      o();
      return n;
    };
    const t = `.${k$1}{scroll-behavior:auto!important;position:fixed;opacity:0;visibility:hidden;overflow:scroll;height:200px;width:200px;z-index:-1}.${k$1} div{width:200%;height:200%;margin:10px 0}.${R$1}{scrollbar-width:none!important}.${R$1}::-webkit-scrollbar,.${R$1}::-webkit-scrollbar-corner{appearance:none!important;display:none!important;width:0!important;height:0!important}`;
    const o = createDOM(`<div class="${k$1}"><div></div><style>${t}</style></div>`);
    const s = o[0];
    const e = s.firstChild;
    const c = s.lastChild;
    const r = getNonce();
    if (r) {
      c.nonce = r;
    }
    const [l, , i] = createEventListenerHub();
    const [a, u] = createCache({
      o: getNativeScrollbarSize(s, e),
      i: equalXY
    }, bind(getNativeScrollbarSize, s, e, true));
    const [_] = u();
    const d = getNativeScrollbarsHiding(s);
    const f = {
      x: _.x === 0,
      y: _.y === 0
    };
    const p = {
      elements: {
        host: null,
        padding: !d,
        viewport: t => d && isBodyElement(t) && t,
        content: false
      },
      scrollbars: {
        slot: true
      },
      cancel: {
        nativeScrollbarsOverlaid: false,
        body: null
      }
    };
    const h = assignDeep({}, M$1);
    const g = bind(assignDeep, {}, h);
    const b = bind(assignDeep, {}, p);
    const w = {
      T: _,
      k: f,
      R: d,
      V: !!v$1,
      L: bind(l, "r"),
      U: b,
      P: t => assignDeep(p, t) && b(),
      N: g,
      q: t => assignDeep(h, t) && g(),
      B: assignDeep({}, p),
      F: assignDeep({}, h)
    };
    removeAttrs(s, "style");
    removeElements(s);
    addEventListener(n$1, "resize", (() => {
      i("r", []);
    }));
    if (isFunction$1(n$1.matchMedia) && !d && (!f.x || !f.y)) {
      const addZoomListener = t => {
        const o = n$1.matchMedia(`(resolution: ${n$1.devicePixelRatio}dppx)`);
        addEventListener(o, "change", (() => {
          t();
          addZoomListener(t);
        }), {
          A: true
        });
      };
      addZoomListener((() => {
        const [t, n] = a();
        assignDeep(w.T, t);
        i("r", [ n ]);
      }));
    }
    return w;
  };

  const getEnvironment = () => {
    if (!mt) {
      mt = createEnvironment();
    }
    return mt;
  };

  const resolveInitialization = (t, n) => isFunction$1(n) ? n.apply(0, t) : n;

  const staticInitializationElement = (t, n, o, s) => {
    const e = isUndefined(s) ? o : s;
    const c = resolveInitialization(t, e);
    return c || n.apply(0, t);
  };

  const dynamicInitializationElement = (t, n, o, s) => {
    const e = isUndefined(s) ? o : s;
    const c = resolveInitialization(t, e);
    return !!c && (isHTMLElement(c) ? c : n.apply(0, t));
  };

  const cancelInitialization = (t, n) => {
    const {nativeScrollbarsOverlaid: o, body: s} = n || {};
    const {k: e, R: c, U: r} = getEnvironment();
    const {nativeScrollbarsOverlaid: l, body: i} = r().cancel;
    const a = o != null ? o : l;
    const u = isUndefined(s) ? i : s;
    const _ = (e.x || e.y) && a;
    const d = t && (isNull(u) ? !c : u);
    return !!_ || !!d;
  };

  const Ot = new WeakMap;

  const addInstance = (t, n) => {
    Ot.set(t, n);
  };

  const removeInstance = t => {
    Ot.delete(t);
  };

  const getInstance = t => Ot.get(t);

  const createEventContentChange = (t, n, o) => {
    let s = false;
    const e = o ? new WeakMap : false;
    const destroy = () => {
      s = true;
    };
    const updateElements = c => {
      if (e && o) {
        const r = o.map((n => {
          const [o, s] = n || [];
          const e = s && o ? (c || find$1)(o, t) : [];
          return [ e, s ];
        }));
        each$1(r, (o => each$1(o[0], (c => {
          const r = o[1];
          const l = e.get(c) || [];
          const i = t.contains(c);
          if (i && r) {
            const t = addEventListener(c, r, (o => {
              if (s) {
                t();
                e.delete(c);
              } else {
                n(o);
              }
            }));
            e.set(c, push(l, t));
          } else {
            runEachAndClear(l);
            e.delete(c);
          }
        }))));
      }
    };
    updateElements();
    return [ destroy, updateElements ];
  };

  const createDOMObserver = (t, n, o, s) => {
    let e = false;
    const {j: c, X: r, Y: l, W: i, J: a, G: u} = s || {};
    const d = debounce$1((() => e && o(true)), {
      _: 33,
      v: 99
    });
    const [f, v] = createEventContentChange(t, d, l);
    const p = c || [];
    const h = r || [];
    const g = concat(p, h);
    const observerCallback = (e, c) => {
      if (!isEmptyArray(c)) {
        const r = a || noop$1;
        const l = u || noop$1;
        const _ = [];
        const d = [];
        let f = false;
        let p = false;
        each$1(c, (o => {
          const {attributeName: e, target: c, type: a, oldValue: u, addedNodes: v, removedNodes: g} = o;
          const b = a === "attributes";
          const w = a === "childList";
          const y = t === c;
          const S = b && e;
          const m = S && getAttr(c, e || "");
          const O = isString(m) ? m : null;
          const $ = S && u !== O;
          const C = inArray(h, e) && $;
          if (n && (w || !y)) {
            const n = b && $;
            const a = n && i && is(c, i);
            const d = a ? !r(c, e, u, O) : !b || n;
            const f = d && !l(o, !!a, t, s);
            each$1(v, (t => push(_, t)));
            each$1(g, (t => push(_, t)));
            p = p || f;
          }
          if (!n && y && $ && !r(c, e, u, O)) {
            push(d, e);
            f = f || C;
          }
        }));
        v((t => deduplicateArray(_).reduce(((n, o) => {
          push(n, find$1(t, o));
          return is(o, t) ? push(n, o) : n;
        }), [])));
        if (n) {
          !e && p && o(false);
          return [ false ];
        }
        if (!isEmptyArray(d) || f) {
          const t = [ deduplicateArray(d), f ];
          !e && o.apply(0, t);
          return t;
        }
      }
    };
    const b = new _$1(bind(observerCallback, false));
    return [ () => {
      b.observe(t, {
        attributes: true,
        attributeOldValue: true,
        attributeFilter: g,
        subtree: n,
        childList: n,
        characterData: n
      });
      e = true;
      return () => {
        if (e) {
          f();
          b.disconnect();
          e = false;
        }
      };
    }, () => {
      if (e) {
        d.m();
        return observerCallback(true, b.takeRecords());
      }
    } ];
  };

  const $t = {};

  const Ct = {};

  const addPlugins = t => {
    each$1(t, (t => each$1(t, ((n, o) => {
      $t[o] = t[o];
    }))));
  };

  const registerPluginModuleInstances = (t, n, o) => keys(t).map((s => {
    const {static: e, instance: c} = t[s];
    const [r, l, i] = o || [];
    const a = o ? c : e;
    if (a) {
      const t = o ? a(r, l, n) : a(n);
      return (i || Ct)[s] = t;
    }
  }));

  const getStaticPluginModuleInstance = t => Ct[t];

  const xt = "__osOptionsValidationPlugin";

  const Ht = "__osSizeObserverPlugin";

  const Et = /* @__PURE__ */ (() => ({
    [Ht]: {
      static: () => (t, n, o) => {
        const s = 3333333;
        const e = "scroll";
        const c = createDOM(`<div class="${ot}" dir="ltr"><div class="${ot}"><div class="${st}"></div></div><div class="${ot}"><div class="${st}" style="width: 200%; height: 200%"></div></div></div>`);
        const r = c[0];
        const a = r.lastChild;
        const u = r.firstChild;
        const _ = u == null ? void 0 : u.firstChild;
        let d = I$1(r);
        let f = d;
        let v = false;
        let p;
        const reset = () => {
          scrollElementTo(u, s);
          scrollElementTo(a, s);
        };
        const onResized = t => {
          p = 0;
          if (v) {
            d = f;
            n(t === true);
          }
        };
        const onScroll = t => {
          f = I$1(r);
          v = !t || !equalWH(f, d);
          if (t) {
            stopPropagation(t);
            if (v && !p) {
              l$1(p);
              p = i$1$1(onResized);
            }
          } else {
            onResized(t === false);
          }
          reset();
        };
        const h = [ appendChildren(t, c), addEventListener(u, e, onScroll), addEventListener(a, e, onScroll) ];
        addClass$1(t, nt);
        setStyles(_, {
          [$$1]: s,
          [C$1]: s
        });
        i$1$1(reset);
        return [ o ? bind(onScroll, false) : reset, h ];
      }
    }
  }))();

  const getShowNativeOverlaidScrollbars = (t, n) => {
    const {k: o} = n;
    const [s, e] = t("showNativeOverlaidScrollbars");
    return [ s && o.x && o.y, e ];
  };

  const overflowIsVisible = t => t.indexOf(x$2) === 0;

  const createViewportOverflowState = (t, n) => {
    const getAxisOverflowStyle = (t, n, o, s) => {
      const e = t === x$2 ? H : t.replace(`${x$2}-`, "");
      const c = overflowIsVisible(t);
      const r = overflowIsVisible(o);
      if (!n && !s) {
        return H;
      }
      if (c && r) {
        return x$2;
      }
      if (c) {
        const t = n ? x$2 : H;
        return n && s ? e : t;
      }
      const l = r && s ? x$2 : H;
      return n ? e : l;
    };
    const o = {
      x: getAxisOverflowStyle(n.x, t.x, n.y, t.y),
      y: getAxisOverflowStyle(n.y, t.y, n.x, t.x)
    };
    return {
      K: o,
      Z: {
        x: o.x === E$1,
        y: o.y === E$1
      }
    };
  };

  const zt = "__osScrollbarsHidingPlugin";

  const It = /* @__PURE__ */ (() => ({
    [zt]: {
      static: () => ({
        tt: (t, n, o, s, e) => {
          const {nt: c, ot: r} = t;
          const {R: l, k: i, T: a} = s;
          const u = !c && !l && (i.x || i.y);
          const [_] = getShowNativeOverlaidScrollbars(e, s);
          const readViewportOverflowState = () => {
            const getStatePerAxis = t => {
              const n = getStyles(r, t);
              const o = n === E$1;
              return [ n, o ];
            };
            const [t, n] = getStatePerAxis(m$1);
            const [o, s] = getStatePerAxis(O$1);
            return {
              K: {
                x: t,
                y: o
              },
              Z: {
                x: n,
                y: s
              }
            };
          };
          const _getViewportOverflowHideOffset = t => {
            const {Z: n} = t;
            const o = l || _ ? 0 : 42;
            const getHideOffsetPerAxis = (t, n, s) => {
              const e = t ? o : s;
              const c = n && !l ? e : 0;
              const r = t && !!o;
              return [ c, r ];
            };
            const [s, e] = getHideOffsetPerAxis(i.x, n.x, a.x);
            const [c, r] = getHideOffsetPerAxis(i.y, n.y, a.y);
            return {
              st: {
                x: s,
                y: c
              },
              et: {
                x: e,
                y: r
              }
            };
          };
          const _hideNativeScrollbars = (t, {ct: o}, s) => {
            if (!c) {
              const e = assignDeep({}, {
                [y$1]: 0,
                [S$1]: 0,
                [w$1]: 0
              });
              const {st: c, et: r} = _getViewportOverflowHideOffset(t);
              const {x: l, y: i} = r;
              const {x: a, y: u} = c;
              const {rt: _} = n;
              const d = o ? w$1 : y$1;
              const f = o ? g$1 : h$1;
              const v = _[d];
              const p = _[S$1];
              const m = _[f];
              const O = _[b$1];
              e[$$1] = `calc(100% + ${u + v * -1}px)`;
              e[d] = -u + v;
              e[S$1] = -a + p;
              if (s) {
                e[f] = m + (i ? u : 0);
                e[b$1] = O + (l ? a : 0);
              }
              return e;
            }
          };
          const _arrangeViewport = (t, s, e) => {
            if (u) {
              const {rt: c} = n;
              const {st: l, et: i} = _getViewportOverflowHideOffset(t);
              const {x: a, y: u} = i;
              const {x: _, y: d} = l;
              const {ct: f} = o;
              const v = f ? h$1 : g$1;
              const p = c[v];
              const b = c.paddingTop;
              const w = s.w + e.w;
              const y = s.h + e.h;
              const S = {
                w: d && u ? `${d + w - p}px` : "",
                h: _ && a ? `${_ + y - b}px` : ""
              };
              setStyles(r, {
                "--os-vaw": S.w,
                "--os-vah": S.h
              });
            }
            return u;
          };
          const _undoViewportArrange = t => {
            if (u) {
              const s = t || readViewportOverflowState();
              const {rt: e} = n;
              const {et: c} = _getViewportOverflowHideOffset(s);
              const {x: l, y: i} = c;
              const a = {};
              const assignProps = t => each$1(t, (t => {
                a[t] = e[t];
              }));
              if (l) {
                assignProps([ S$1, p$1, b$1 ]);
              }
              if (i) {
                assignProps([ w$1, y$1, g$1, h$1 ]);
              }
              const _ = getStyles(r, keys(a));
              const d = removeAttrClass(r, q, j);
              setStyles(r, a);
              return [ () => {
                setStyles(r, assignDeep({}, _, _hideNativeScrollbars(s, o, u)));
                d();
              }, s ];
            }
            return [ noop$1 ];
          };
          return {
            lt: _getViewportOverflowHideOffset,
            it: _arrangeViewport,
            ut: _undoViewportArrange,
            _t: _hideNativeScrollbars
          };
        }
      })
    }
  }))();

  const At = "__osClickScrollPlugin";

  const Dt = /* @__PURE__ */ (() => ({
    [At]: {
      static: () => (t, n, o, s) => {
        let e = false;
        let c = noop$1;
        const r = 133;
        const l = 222;
        const [i, a] = selfClearTimeout(r);
        const u = Math.sign(n);
        const _ = o * u;
        const d = _ / 2;
        const easing = t => 1 - (1 - t) * (1 - t);
        const easedEndPressAnimation = (n, o) => animateNumber(n, o, l, t, easing);
        const linearPressAnimation = (o, s) => animateNumber(o, n - _, r * s, ((o, s, e) => {
          t(o);
          if (e) {
            c = easedEndPressAnimation(o, n);
          }
        }));
        const f = animateNumber(0, _, l, ((r, l, a) => {
          t(r);
          if (a) {
            s(e);
            if (!e) {
              const t = n - r;
              const s = Math.sign(t - d) === u;
              s && i((() => {
                const s = t - _;
                const e = Math.sign(s) === u;
                c = e ? linearPressAnimation(r, Math.abs(s) / o) : easedEndPressAnimation(r, n);
              }));
            }
          }
        }), easing);
        return t => {
          e = true;
          if (t) {
            f();
          }
          a();
          c();
        };
      }
    }
  }))();

  const createSizeObserver = (t, n, o) => {
    const {dt: s} = o || {};
    const e = getStaticPluginModuleInstance(Ht);
    const [c] = createCache({
      o: false,
      u: true
    });
    return () => {
      const o = [];
      const r = createDOM(`<div class="${Q}"><div class="${tt}"></div></div>`);
      const l = r[0];
      const i = l.firstChild;
      const onSizeChangedCallbackProxy = t => {
        const o = t instanceof ResizeObserverEntry;
        let s = false;
        let e = false;
        if (o) {
          const [n, , o] = c(t.contentRect);
          const r = domRectHasDimensions(n);
          e = domRectAppeared(n, o);
          s = !e && !r;
        } else {
          e = t === true;
        }
        if (!s) {
          n({
            ft: true,
            dt: e
          });
        }
      };
      if (f$1) {
        const t = new f$1((t => onSizeChangedCallbackProxy(t.pop())));
        t.observe(i);
        push(o, (() => {
          t.disconnect();
        }));
      } else if (e) {
        const [t, n] = e(i, onSizeChangedCallbackProxy, s);
        push(o, concat([ addClass$1(l, Z), addEventListener(l, "animationstart", t) ], n));
      } else {
        return noop$1;
      }
      return bind(runEachAndClear, push(o, appendChildren(t, l)));
    };
  };

  const createTrinsicObserver = (t, n) => {
    let o;
    const isHeightIntrinsic = t => t.h === 0 || t.isIntersecting || t.intersectionRatio > 0;
    const s = createDiv(et);
    const [e] = createCache({
      o: false
    });
    const triggerOnTrinsicChangedCallback = (t, o) => {
      if (t) {
        const s = e(isHeightIntrinsic(t));
        const [, c] = s;
        return c && !o && n(s) && [ s ];
      }
    };
    const intersectionObserverCallback = (t, n) => triggerOnTrinsicChangedCallback(n.pop(), t);
    return [ () => {
      const n = [];
      if (d$1) {
        o = new d$1(bind(intersectionObserverCallback, false), {
          root: t
        });
        o.observe(s);
        push(n, (() => {
          o.disconnect();
        }));
      } else {
        const onSizeChanged = () => {
          const t = I$1(s);
          triggerOnTrinsicChangedCallback(t);
        };
        push(n, createSizeObserver(s, onSizeChanged)());
        onSizeChanged();
      }
      return bind(runEachAndClear, push(n, appendChildren(t, s)));
    }, () => o && intersectionObserverCallback(true, o.takeRecords()) ];
  };

  const createObserversSetup = (t, n, o, s) => {
    let e;
    let c;
    let r;
    let l;
    let i;
    let a;
    const u = `[${P$1}]`;
    const _ = `[${q}]`;
    const d = [ "id", "class", "style", "open", "wrap", "cols", "rows" ];
    const {vt: v, ht: p, ot: h, gt: g, bt: b, nt: w, wt: y, yt: S, St: m, Ot: O} = t;
    const getDirectionIsRTL = t => getStyles(t, "direction") === "rtl";
    const $ = {
      $t: false,
      ct: getDirectionIsRTL(v)
    };
    const C = getEnvironment();
    const x = getStaticPluginModuleInstance(zt);
    const [H] = createCache({
      i: equalWH,
      o: {
        w: 0,
        h: 0
      }
    }, (() => {
      const s = x && x.tt(t, n, $, C, o).ut;
      const e = y && w;
      const c = !e && hasAttrClass(p, P$1, L$1);
      const r = !w && S(j);
      const l = r && getElementScroll(g);
      const i = l && O();
      const a = m(X, c);
      const u = r && s && s()[0];
      const _ = D(h);
      const d = getFractionalSize(h);
      u && u();
      scrollElementTo(g, l);
      i && i();
      c && a();
      return {
        w: _.w + d.w,
        h: _.h + d.h
      };
    }));
    const E = debounce$1(s, {
      _: () => e,
      v: () => c,
      S(t, n) {
        const [o] = t;
        const [s] = n;
        return [ concat(keys(o), keys(s)).reduce(((t, n) => {
          t[n] = o[n] || s[n];
          return t;
        }), {}) ];
      }
    });
    const setDirection = t => {
      const n = getDirectionIsRTL(v);
      assignDeep(t, {
        Ct: a !== n
      });
      assignDeep($, {
        ct: n
      });
      a = n;
    };
    const onTrinsicChanged = (t, n) => {
      const [o, e] = t;
      const c = {
        xt: e
      };
      assignDeep($, {
        $t: o
      });
      !n && s(c);
      return c;
    };
    const onSizeChanged = ({ft: t, dt: n}) => {
      const o = t && !n;
      const e = !o && C.R ? E : s;
      const c = {
        ft: t || n,
        dt: n
      };
      setDirection(c);
      e(c);
    };
    const onContentMutation = (t, n) => {
      const [, o] = H();
      const e = {
        Ht: o
      };
      setDirection(e);
      const c = t ? s : E;
      o && !n && c(e);
      return e;
    };
    const onHostMutation = (t, n, o) => {
      const s = {
        Et: n
      };
      setDirection(s);
      if (n && !o) {
        E(s);
      }
      return s;
    };
    const [z, I] = b ? createTrinsicObserver(p, onTrinsicChanged) : [];
    const A = !w && createSizeObserver(p, onSizeChanged, {
      dt: true
    });
    const [M, T] = createDOMObserver(p, false, onHostMutation, {
      X: d,
      j: d
    });
    const k = w && f$1 && new f$1((t => {
      const n = t[t.length - 1].contentRect;
      onSizeChanged({
        ft: true,
        dt: domRectAppeared(n, i)
      });
      i = n;
    }));
    const R = debounce$1((() => {
      const [, t] = H();
      s({
        Ht: t
      });
    }), {
      _: 222,
      p: true
    });
    return [ () => {
      k && k.observe(p);
      const t = A && A();
      const n = z && z();
      const o = M();
      const s = C.L((t => {
        if (t) {
          E({
            zt: t
          });
        } else {
          R();
        }
      }));
      return () => {
        k && k.disconnect();
        t && t();
        n && n();
        l && l();
        o();
        s();
      };
    }, ({It: t, At: n, Dt: o}) => {
      const s = {};
      const [i] = t("update.ignoreMutation");
      const [a, f] = t("update.attributes");
      const [v, p] = t("update.elementEvents");
      const [g, y] = t("update.debounce");
      const S = p || f;
      const m = n || o;
      const ignoreMutationFromOptions = t => isFunction$1(i) && i(t);
      if (S) {
        r && r();
        l && l();
        const [t, n] = createDOMObserver(b || h, true, onContentMutation, {
          j: concat(d, a || []),
          Y: v,
          W: u,
          G: (t, n) => {
            const {target: o, attributeName: s} = t;
            const e = !n && s && !w ? liesBetween(o, u, _) : false;
            return e || !!closest$1$1(o, `.${rt}`) || !!ignoreMutationFromOptions(t);
          }
        });
        l = t();
        r = n;
      }
      if (y) {
        E.m();
        if (isArray$1(g)) {
          const t = g[0];
          const n = g[1];
          e = isNumber$1(t) && t;
          c = isNumber$1(n) && n;
        } else if (isNumber$1(g)) {
          e = g;
          c = false;
        } else {
          e = false;
          c = false;
        }
      }
      if (m) {
        const t = T();
        const n = I && I();
        const o = r && r();
        t && assignDeep(s, onHostMutation(t[0], t[1], m));
        n && assignDeep(s, onTrinsicChanged(n[0], m));
        o && assignDeep(s, onContentMutation(o[0], m));
      }
      setDirection(s);
      return s;
    }, $ ];
  };

  const createScrollbarsSetupElements = (t, n, o, s) => {
    const e = "--os-viewport-percent";
    const c = "--os-scroll-percent";
    const r = "--os-scroll-direction";
    const {U: l} = getEnvironment();
    const {scrollbars: i} = l();
    const {slot: a} = i;
    const {vt: u, ht: _, ot: d, Mt: f, gt: p, wt: h, nt: g} = n;
    const {scrollbars: b} = f ? {} : t;
    const {slot: w} = b || {};
    const y = [];
    const S = [];
    const m = [];
    const O = dynamicInitializationElement([ u, _, d ], (() => g && h ? u : _), a, w);
    const initScrollTimeline = t => {
      if (v$1) {
        const n = new v$1({
          source: p,
          axis: t
        });
        const _addScrollPercentAnimation = t => {
          const o = t.Tt.animate({
            clear: [ "left" ],
            [c]: [ 0, 1 ]
          }, {
            timeline: n
          });
          return () => o.cancel();
        };
        return {
          kt: _addScrollPercentAnimation
        };
      }
    };
    const $ = {
      x: initScrollTimeline("x"),
      y: initScrollTimeline("y")
    };
    const getViewportPercent = () => {
      const {Rt: t, Vt: n} = o;
      const getAxisValue = (t, n) => capNumber(0, 1, t / (t + n) || 0);
      return {
        x: getAxisValue(n.x, t.x),
        y: getAxisValue(n.y, t.y)
      };
    };
    const scrollbarStructureAddRemoveClass = (t, n, o) => {
      const s = o ? addClass$1 : removeClass$1;
      each$1(t, (t => {
        s(t.Tt, n);
      }));
    };
    const scrollbarStyle = (t, n) => {
      each$1(t, (t => {
        const [o, s] = n(t);
        setStyles(o, s);
      }));
    };
    const scrollbarsAddRemoveClass = (t, n, o) => {
      const s = isBoolean(o);
      const e = s ? o : true;
      const c = s ? !o : true;
      e && scrollbarStructureAddRemoveClass(S, t, n);
      c && scrollbarStructureAddRemoveClass(m, t, n);
    };
    const refreshScrollbarsHandleLength = () => {
      const t = getViewportPercent();
      const createScrollbarStyleFn = t => n => [ n.Tt, {
        [e]: roundCssNumber(t) + ""
      } ];
      scrollbarStyle(S, createScrollbarStyleFn(t.x));
      scrollbarStyle(m, createScrollbarStyleFn(t.y));
    };
    const refreshScrollbarsHandleOffset = () => {
      if (!v$1) {
        const {Lt: t} = o;
        const n = getScrollCoordinatesPercent(t, getElementScroll(p));
        const createScrollbarStyleFn = t => n => [ n.Tt, {
          [c]: roundCssNumber(t) + ""
        } ];
        scrollbarStyle(S, createScrollbarStyleFn(n.x));
        scrollbarStyle(m, createScrollbarStyleFn(n.y));
      }
    };
    const refreshScrollbarsScrollCoordinates = () => {
      const {Lt: t} = o;
      const n = isDefaultDirectionScrollCoordinates(t);
      const createScrollbarStyleFn = t => n => [ n.Tt, {
        [r]: t ? "0" : "1"
      } ];
      scrollbarStyle(S, createScrollbarStyleFn(n.x));
      scrollbarStyle(m, createScrollbarStyleFn(n.y));
    };
    const refreshScrollbarsScrollbarOffset = () => {
      if (g && !h) {
        const {Rt: t, Lt: n} = o;
        const s = isDefaultDirectionScrollCoordinates(n);
        const e = getScrollCoordinatesPercent(n, getElementScroll(p));
        const styleScrollbarPosition = n => {
          const {Tt: o} = n;
          const c = parent(o) === d && o;
          const getTranslateValue = (t, n, o) => {
            const s = n * t;
            return numberToCssPx(o ? s : -s);
          };
          return [ c, c && {
            transform: getTrasformTranslateValue({
              x: getTranslateValue(e.x, t.x, s.x),
              y: getTranslateValue(e.y, t.y, s.y)
            })
          } ];
        };
        scrollbarStyle(S, styleScrollbarPosition);
        scrollbarStyle(m, styleScrollbarPosition);
      }
    };
    const generateScrollbarDOM = t => {
      const n = t ? "x" : "y";
      const o = t ? it : at;
      const e = createDiv(`${rt} ${o}`);
      const c = createDiv(ut);
      const r = createDiv(_t);
      const l = {
        Tt: e,
        Ut: c,
        Pt: r
      };
      const i = $[n];
      push(t ? S : m, l);
      push(y, [ appendChildren(e, c), appendChildren(c, r), bind(removeElements, e), i && i.kt(l), s(l, scrollbarsAddRemoveClass, t) ]);
      return l;
    };
    const C = bind(generateScrollbarDOM, true);
    const x = bind(generateScrollbarDOM, false);
    const appendElements = () => {
      appendChildren(O, S[0].Tt);
      appendChildren(O, m[0].Tt);
      return bind(runEachAndClear, y);
    };
    C();
    x();
    return [ {
      Nt: refreshScrollbarsHandleLength,
      qt: refreshScrollbarsHandleOffset,
      Bt: refreshScrollbarsScrollCoordinates,
      Ft: refreshScrollbarsScrollbarOffset,
      jt: scrollbarsAddRemoveClass,
      Xt: {
        Yt: S,
        Wt: C,
        Jt: bind(scrollbarStyle, S)
      },
      Gt: {
        Yt: m,
        Wt: x,
        Jt: bind(scrollbarStyle, m)
      }
    }, appendElements ];
  };

  const createScrollbarsSetupEvents = (t, n, o, s) => (r, l, i) => {
    const {ht: u, ot: _, nt: d, gt: f, Kt: v, Ot: p} = n;
    const {Tt: h, Ut: g, Pt: b} = r;
    const [w, y] = selfClearTimeout(333);
    const [S, m] = selfClearTimeout(444);
    const scrollOffsetElementScrollBy = t => {
      isFunction$1(f.scrollBy) && f.scrollBy({
        behavior: "smooth",
        left: t.x,
        top: t.y
      });
    };
    const createInteractiveScrollEvents = () => {
      const n = "pointerup pointercancel lostpointercapture";
      const s = `client${i ? "X" : "Y"}`;
      const r = i ? $$1 : C$1;
      const l = i ? "left" : "top";
      const a = i ? "w" : "h";
      const u = i ? "x" : "y";
      const createRelativeHandleMove = (t, n) => s => {
        const {Rt: e} = o;
        const c = I$1(g)[a] - I$1(b)[a];
        const r = n * s / c;
        const l = r * e[u];
        scrollElementTo(f, {
          [u]: t + l
        });
      };
      const _ = [];
      return addEventListener(g, "pointerdown", (o => {
        const i = closest$1$1(o.target, `.${_t}`) === b;
        const d = i ? b : g;
        const h = t.scrollbars;
        const w = h[i ? "dragScroll" : "clickScroll"];
        const {button: y, isPrimary: O, pointerType: $} = o;
        const {pointers: C} = h;
        const x = y === 0 && O && w && (C || []).includes($);
        if (x) {
          runEachAndClear(_);
          m();
          const t = !i && (o.shiftKey || w === "instant");
          const h = bind(getBoundingClientRect, b);
          const y = bind(getBoundingClientRect, g);
          const getHandleOffset = (t, n) => (t || h())[l] - (n || y())[l];
          const O = e$1(getBoundingClientRect(f)[r]) / I$1(f)[a] || 1;
          const $ = createRelativeHandleMove(getElementScroll(f)[u], 1 / O);
          const C = o[s];
          const x = h();
          const H = y();
          const E = x[r];
          const z = getHandleOffset(x, H) + E / 2;
          const A = C - H[l];
          const D = i ? 0 : A - z;
          const releasePointerCapture = t => {
            runEachAndClear(k);
            d.releasePointerCapture(t.pointerId);
          };
          const M = i || t;
          const T = p();
          const k = [ addEventListener(v, n, releasePointerCapture), addEventListener(v, "selectstart", (t => preventDefault$1(t)), {
            H: false
          }), addEventListener(g, n, releasePointerCapture), M && addEventListener(g, "pointermove", (t => $(D + (t[s] - C)))), M && (() => {
            const t = getElementScroll(f);
            T();
            const n = getElementScroll(f);
            const o = {
              x: n.x - t.x,
              y: n.y - t.y
            };
            if (c$1(o.x) > 3 || c$1(o.y) > 3) {
              p();
              scrollElementTo(f, t);
              scrollOffsetElementScrollBy(o);
              S(T);
            }
          }) ];
          d.setPointerCapture(o.pointerId);
          if (t) {
            $(D);
          } else if (!i) {
            const t = getStaticPluginModuleInstance(At);
            if (t) {
              const n = t($, D, E, (t => {
                if (t) {
                  T();
                } else {
                  push(k, T);
                }
              }));
              push(k, n);
              push(_, bind(n, true));
            }
          }
        }
      }));
    };
    let O = true;
    return bind(runEachAndClear, [ addEventListener(b, "pointermove pointerleave", s), addEventListener(h, "pointerenter", (() => {
      l(vt, true);
    })), addEventListener(h, "pointerleave pointercancel", (() => {
      l(vt, false);
    })), !d && addEventListener(h, "mousedown", (() => {
      const t = getFocusedElement();
      if (hasAttr(t, q) || hasAttr(t, P$1) || t === document.body) {
        a$1(bind(focusElement, _), 25);
      }
    })), addEventListener(h, "wheel", (t => {
      const {deltaX: n, deltaY: o, deltaMode: s} = t;
      if (O && s === 0 && parent(h) === u) {
        scrollOffsetElementScrollBy({
          x: n,
          y: o
        });
      }
      O = false;
      l(bt, true);
      w((() => {
        O = true;
        l(bt);
      }));
      preventDefault$1(t);
    }), {
      H: false,
      I: true
    }), addEventListener(h, "pointerdown", bind(addEventListener, v, "click", stopAndPrevent, {
      A: true,
      I: true,
      H: false
    }), {
      I: true
    }), createInteractiveScrollEvents(), y, m ]);
  };

  const createScrollbarsSetup = (t, n, o, s, e, c) => {
    let r;
    let l;
    let i;
    let a;
    let u;
    let _ = noop$1;
    let d = 0;
    const isHoverablePointerType = t => t.pointerType === "mouse";
    const [f, v] = selfClearTimeout();
    const [p, h] = selfClearTimeout(100);
    const [g, b] = selfClearTimeout(100);
    const [w, y] = selfClearTimeout((() => d));
    const [S, m] = createScrollbarsSetupElements(t, e, s, createScrollbarsSetupEvents(n, e, s, (t => isHoverablePointerType(t) && manageScrollbarsAutoHideInstantInteraction())));
    const {ht: O, Qt: $, wt: C} = e;
    const {jt: H, Nt: z, qt: I, Bt: A, Ft: D} = S;
    const manageScrollbarsAutoHide = (t, n) => {
      y();
      if (t) {
        H(gt);
      } else {
        const t = bind(H, gt, true);
        if (d > 0 && !n) {
          w(t);
        } else {
          t();
        }
      }
    };
    const manageScrollbarsAutoHideInstantInteraction = () => {
      if (i ? !r : !a) {
        manageScrollbarsAutoHide(true);
        p((() => {
          manageScrollbarsAutoHide(false);
        }));
      }
    };
    const manageAutoHideSuspension = t => {
      H(ht, t, true);
      H(ht, t, false);
    };
    const onHostMouseEnter = t => {
      if (isHoverablePointerType(t)) {
        r = i;
        i && manageScrollbarsAutoHide(true);
      }
    };
    const M = [ y, h, b, v, () => _(), addEventListener(O, "pointerover", onHostMouseEnter, {
      A: true
    }), addEventListener(O, "pointerenter", onHostMouseEnter), addEventListener(O, "pointerleave", (t => {
      if (isHoverablePointerType(t)) {
        r = false;
        i && manageScrollbarsAutoHide(false);
      }
    })), addEventListener(O, "pointermove", (t => {
      isHoverablePointerType(t) && l && manageScrollbarsAutoHideInstantInteraction();
    })), addEventListener($, "scroll", (t => {
      f((() => {
        I();
        manageScrollbarsAutoHideInstantInteraction();
      }));
      c(t);
      D();
    })) ];
    return [ () => bind(runEachAndClear, push(M, m())), ({It: t, Dt: n, Zt: e, tn: c}) => {
      const {nn: r, sn: f, en: v, cn: p} = c || {};
      const {Ct: h, dt: b} = e || {};
      const {ct: w} = o;
      const {k: y} = getEnvironment();
      const {K: S, rn: m} = s;
      const [O, M] = t("showNativeOverlaidScrollbars");
      const [T, k] = t("scrollbars.theme");
      const [R, V] = t("scrollbars.visibility");
      const [L, U] = t("scrollbars.autoHide");
      const [P, N] = t("scrollbars.autoHideSuspend");
      const [q] = t("scrollbars.autoHideDelay");
      const [B, F] = t("scrollbars.dragScroll");
      const [j, X] = t("scrollbars.clickScroll");
      const [Y, W] = t("overflow");
      const J = b && !n;
      const G = m.x || m.y;
      const K = r || f || p || h || n;
      const Q = v || V || W;
      const Z = O && y.x && y.y;
      const setScrollbarVisibility = (t, n, o) => {
        const s = t.includes(E$1) && (R === x$2 || R === "auto" && n === E$1);
        H(dt, s, o);
        return s;
      };
      d = q;
      if (J) {
        if (P && G) {
          manageAutoHideSuspension(false);
          _();
          g((() => {
            _ = addEventListener($, "scroll", bind(manageAutoHideSuspension, true), {
              A: true
            });
          }));
        } else {
          manageAutoHideSuspension(true);
        }
      }
      if (M) {
        H(ct, Z);
      }
      if (k) {
        H(u);
        H(T, true);
        u = T;
      }
      if (N && !P) {
        manageAutoHideSuspension(true);
      }
      if (U) {
        l = L === "move";
        i = L === "leave";
        a = L === "never";
        manageScrollbarsAutoHide(a, true);
      }
      if (F) {
        H(yt, B);
      }
      if (X) {
        H(wt, !!j);
      }
      if (Q) {
        const t = setScrollbarVisibility(Y.x, S.x, true);
        const n = setScrollbarVisibility(Y.y, S.y, false);
        const o = t && n;
        H(ft, !o);
      }
      if (K) {
        I();
        z();
        D();
        p && A();
        H(pt, !m.x, true);
        H(pt, !m.y, false);
        H(lt, w && !C);
      }
    }, {}, S ];
  };

  const createStructureSetupElements = t => {
    const o = getEnvironment();
    const {U: s, R: e} = o;
    const {elements: c} = s();
    const {padding: r, viewport: l, content: i} = c;
    const a = isHTMLElement(t);
    const u = a ? {} : t;
    const {elements: _} = u;
    const {padding: d, viewport: f, content: v} = _ || {};
    const p = a ? t : u.target;
    const h = isBodyElement(p);
    const g = p.ownerDocument;
    const b = g.documentElement;
    const getDocumentWindow = () => g.defaultView || n$1;
    const w = bind(staticInitializationElement, [ p ]);
    const y = bind(dynamicInitializationElement, [ p ]);
    const S = bind(createDiv, "");
    const $ = bind(w, S, l);
    const C = bind(y, S, i);
    const elementHasOverflow = t => {
      const n = I$1(t);
      const o = D(t);
      const s = getStyles(t, m$1);
      const e = getStyles(t, O$1);
      return o.w - n.w > 0 && !overflowIsVisible(s) || o.h - n.h > 0 && !overflowIsVisible(e);
    };
    const x = $(f);
    const H = x === p;
    const E = H && h;
    const z = !H && C(v);
    const A = !H && x === z;
    const M = E ? b : x;
    const T = E ? M : p;
    const k = !H && y(S, r, d);
    const R = !A && z;
    const L = [ R, M, k, T ].map((t => isHTMLElement(t) && !parent(t) && t));
    const elementIsGenerated = t => t && inArray(L, t);
    const B = !elementIsGenerated(M) && elementHasOverflow(M) ? M : p;
    const F = E ? b : M;
    const j = E ? g : M;
    const X = {
      vt: p,
      ht: T,
      ot: M,
      ln: k,
      bt: R,
      gt: F,
      Qt: j,
      an: h ? b : B,
      Kt: g,
      wt: h,
      Mt: a,
      nt: H,
      un: getDocumentWindow,
      yt: t => hasAttrClass(M, q, t),
      St: (t, n) => addRemoveAttrClass(M, q, t, n),
      Ot: () => addRemoveAttrClass(F, q, Y, true)
    };
    const {vt: J, ht: Q, ln: Z, ot: tt, bt: nt} = X;
    const ot = [ () => {
      removeAttrs(Q, [ P$1, V ]);
      removeAttrs(J, V);
      if (h) {
        removeAttrs(b, [ V, P$1 ]);
      }
    } ];
    let st = contents([ nt, tt, Z, Q, J ].find((t => t && !elementIsGenerated(t))));
    const et = E ? J : nt || tt;
    const ct = bind(runEachAndClear, ot);
    const appendElements = () => {
      const t = getDocumentWindow();
      const n = getFocusedElement();
      const unwrap = t => {
        appendChildren(parent(t), contents(t));
        removeElements(t);
      };
      const prepareWrapUnwrapFocus = t => addEventListener(t, "focusin focusout focus blur", stopAndPrevent, {
        I: true,
        H: false
      });
      const o = "tabindex";
      const s = getAttr(tt, o);
      const c = prepareWrapUnwrapFocus(n);
      setAttrs(Q, P$1, H ? "" : N);
      setAttrs(Z, G, "");
      setAttrs(tt, q, "");
      setAttrs(nt, K, "");
      if (!H) {
        setAttrs(tt, o, s || "-1");
        h && setAttrs(b, U, "");
      }
      appendChildren(et, st);
      appendChildren(Q, Z);
      appendChildren(Z || Q, !H && tt);
      appendChildren(tt, nt);
      push(ot, [ c, () => {
        const t = getFocusedElement();
        const n = elementIsGenerated(tt);
        const e = n && t === tt ? J : t;
        const c = prepareWrapUnwrapFocus(e);
        removeAttrs(Z, G);
        removeAttrs(nt, K);
        removeAttrs(tt, q);
        h && removeAttrs(b, U);
        s ? setAttrs(tt, o, s) : removeAttrs(tt, o);
        elementIsGenerated(nt) && unwrap(nt);
        n && unwrap(tt);
        elementIsGenerated(Z) && unwrap(Z);
        focusElement(e);
        c();
      } ]);
      if (e && !H) {
        addAttrClass(tt, q, W);
        push(ot, bind(removeAttrs, tt, q));
      }
      focusElement(!H && h && n === J && t.top === t ? tt : n);
      c();
      st = 0;
      return ct;
    };
    return [ X, appendElements, ct ];
  };

  const createTrinsicUpdateSegment = ({bt: t}) => ({Zt: n, _n: o, Dt: s}) => {
    const {xt: e} = n || {};
    const {$t: c} = o;
    const r = t && (e || s);
    if (r) {
      setStyles(t, {
        [C$1]: c && "100%"
      });
    }
  };

  const createPaddingUpdateSegment = ({ht: t, ln: n, ot: o, nt: s}, e) => {
    const [c, r] = createCache({
      i: equalTRBL,
      o: topRightBottomLeft()
    }, bind(topRightBottomLeft, t, "padding", ""));
    return ({It: t, Zt: l, _n: i, Dt: a}) => {
      let [u, _] = r(a);
      const {R: d} = getEnvironment();
      const {ft: f, Ht: v, Ct: m} = l || {};
      const {ct: O} = i;
      const [C, x] = t("paddingAbsolute");
      const H = a || v;
      if (f || _ || H) {
        [u, _] = c(a);
      }
      const E = !s && (x || m || _);
      if (E) {
        const t = !C || !n && !d;
        const s = u.r + u.l;
        const c = u.t + u.b;
        const r = {
          [y$1]: t && !O ? -s : 0,
          [S$1]: t ? -c : 0,
          [w$1]: t && O ? -s : 0,
          top: t ? -u.t : 0,
          right: t ? O ? -u.r : "auto" : 0,
          left: t ? O ? "auto" : -u.l : 0,
          [$$1]: t && `calc(100% + ${s}px)`
        };
        const l = {
          [p$1]: t ? u.t : 0,
          [h$1]: t ? u.r : 0,
          [b$1]: t ? u.b : 0,
          [g$1]: t ? u.l : 0
        };
        setStyles(n || o, r);
        setStyles(o, l);
        assignDeep(e, {
          ln: u,
          dn: !t,
          rt: n ? l : assignDeep({}, r, l)
        });
      }
      return {
        fn: E
      };
    };
  };

  const createOverflowUpdateSegment = (t, s) => {
    const e = getEnvironment();
    const {ht: c, ln: r, ot: l, nt: a, Qt: u, gt: _, wt: d, St: f, un: v} = t;
    const {R: p} = e;
    const h = d && a;
    const g = bind(o$1, 0);
    const b = {
      display: () => false,
      direction: t => t !== "ltr",
      flexDirection: t => t.endsWith("-reverse"),
      writingMode: t => t !== "horizontal-tb"
    };
    const w = keys(b);
    const y = {
      i: equalWH,
      o: {
        w: 0,
        h: 0
      }
    };
    const S = {
      i: equalXY,
      o: {}
    };
    const setMeasuringMode = t => {
      f(X, !h && t);
    };
    const getMeasuredScrollCoordinates = t => {
      const n = w.some((n => {
        const o = t[n];
        return o && b[n](o);
      }));
      if (!n) {
        return {
          D: {
            x: 0,
            y: 0
          },
          M: {
            x: 1,
            y: 1
          }
        };
      }
      setMeasuringMode(true);
      const o = getElementScroll(_);
      const s = f(J, true);
      const e = addEventListener(u, E$1, (t => {
        const n = getElementScroll(_);
        if (t.isTrusted && n.x === o.x && n.y === o.y) {
          stopPropagation(t);
        }
      }), {
        I: true,
        A: true
      });
      scrollElementTo(_, {
        x: 0,
        y: 0
      });
      s();
      const c = getElementScroll(_);
      const r = D(_);
      scrollElementTo(_, {
        x: r.w,
        y: r.h
      });
      const l = getElementScroll(_);
      scrollElementTo(_, {
        x: l.x - c.x < 1 && -r.w,
        y: l.y - c.y < 1 && -r.h
      });
      const a = getElementScroll(_);
      scrollElementTo(_, o);
      i$1$1((() => e()));
      return {
        D: c,
        M: a
      };
    };
    const getOverflowAmount = (t, o) => {
      const s = n$1.devicePixelRatio % 1 !== 0 ? 1 : 0;
      const e = {
        w: g(t.w - o.w),
        h: g(t.h - o.h)
      };
      return {
        w: e.w > s ? e.w : 0,
        h: e.h > s ? e.h : 0
      };
    };
    const [m, O] = createCache(y, bind(getFractionalSize, l));
    const [$, C] = createCache(y, bind(D, l));
    const [z, I] = createCache(y);
    const [M] = createCache(S);
    const [T, k] = createCache(y);
    const [R] = createCache(S);
    const [V] = createCache({
      i: (t, n) => equal(t, n, w),
      o: {}
    }, (() => hasDimensions(l) ? getStyles(l, w) : {}));
    const [U, N] = createCache({
      i: (t, n) => equalXY(t.D, n.D) && equalXY(t.M, n.M),
      o: getZeroScrollCoordinates()
    });
    const q = getStaticPluginModuleInstance(zt);
    const createViewportOverflowStyleClassName = (t, n) => {
      const o = n ? B : F$1;
      return `${o}${capitalizeFirstLetter(t)}`;
    };
    const setViewportOverflowStyle = t => {
      const createAllOverflowStyleClassNames = t => [ x$2, H, E$1 ].map((n => createViewportOverflowStyleClassName(n, t)));
      const n = createAllOverflowStyleClassNames(true).concat(createAllOverflowStyleClassNames()).join(" ");
      f(n);
      f(keys(t).map((n => createViewportOverflowStyleClassName(t[n], n === "x"))).join(" "), true);
    };
    return ({It: n, Zt: o, _n: i, Dt: a}, {fn: u}) => {
      const {ft: _, Ht: d, Ct: b, dt: w, zt: y} = o || {};
      const S = q && q.tt(t, s, i, e, n);
      const {it: x, ut: H, _t: E} = S || {};
      const [D, B] = getShowNativeOverlaidScrollbars(n, e);
      const [F, j] = n("overflow");
      const X = overflowIsVisible(F.x);
      const Y = overflowIsVisible(F.y);
      const J = true;
      let K = O(a);
      let Q = C(a);
      let Z = I(a);
      let tt = k(a);
      if (B && p) {
        f(W, !D);
      }
      {
        if (hasAttrClass(c, P$1, L$1)) {
          setMeasuringMode(true);
        }
        const [t] = H ? H() : [];
        const [n] = K = m(a);
        const [o] = Q = $(a);
        const s = A$1(l);
        const e = h && getWindowSize(v());
        const r = {
          w: g(o.w + n.w),
          h: g(o.h + n.h)
        };
        const i = {
          w: g((e ? e.w : s.w + g(s.w - o.w)) + n.w),
          h: g((e ? e.h : s.h + g(s.h - o.h)) + n.h)
        };
        t && t();
        tt = T(i);
        Z = z(getOverflowAmount(r, i), a);
      }
      const [nt, ot] = tt;
      const [st, et] = Z;
      const [ct, rt] = Q;
      const [lt, it] = K;
      const [at, ut] = M({
        x: st.w > 0,
        y: st.h > 0
      });
      const _t = X && Y && (at.x || at.y) || X && at.x && !at.y || Y && at.y && !at.x;
      const dt = u || b || y || it || rt || ot || et || j || B || J;
      const ft = createViewportOverflowState(at, F);
      const [vt, pt] = R(ft.K);
      const [ht, gt] = V(a);
      const bt = b || w || gt || ut || a;
      const [wt, yt] = bt ? U(getMeasuredScrollCoordinates(ht), a) : N();
      if (dt) {
        pt && setViewportOverflowStyle(ft.K);
        if (E && x) {
          setStyles(l, E(ft, i, x(ft, ct, lt)));
        }
      }
      setMeasuringMode(false);
      addRemoveAttrClass(c, P$1, L$1, _t);
      addRemoveAttrClass(r, G, L$1, _t);
      assignDeep(s, {
        K: vt,
        Vt: {
          x: nt.w,
          y: nt.h
        },
        Rt: {
          x: st.w,
          y: st.h
        },
        rn: at,
        Lt: sanitizeScrollCoordinates(wt, st)
      });
      return {
        en: pt,
        nn: ot,
        sn: et,
        cn: yt || et,
        vn: bt
      };
    };
  };

  const createStructureSetup = t => {
    const [n, o, s] = createStructureSetupElements(t);
    const e = {
      ln: {
        t: 0,
        r: 0,
        b: 0,
        l: 0
      },
      dn: false,
      rt: {
        [y$1]: 0,
        [S$1]: 0,
        [w$1]: 0,
        [p$1]: 0,
        [h$1]: 0,
        [b$1]: 0,
        [g$1]: 0
      },
      Vt: {
        x: 0,
        y: 0
      },
      Rt: {
        x: 0,
        y: 0
      },
      K: {
        x: H,
        y: H
      },
      rn: {
        x: false,
        y: false
      },
      Lt: getZeroScrollCoordinates()
    };
    const {vt: c, gt: r, nt: l, Ot: i} = n;
    const {R: a, k: u} = getEnvironment();
    const _ = !a && (u.x || u.y);
    const d = [ createTrinsicUpdateSegment(n), createPaddingUpdateSegment(n, e), createOverflowUpdateSegment(n, e) ];
    return [ o, t => {
      const n = {};
      const o = _;
      const s = o && getElementScroll(r);
      const e = s && i();
      each$1(d, (o => {
        assignDeep(n, o(t, n) || {});
      }));
      scrollElementTo(r, s);
      e && e();
      !l && scrollElementTo(c, 0);
      return n;
    }, e, n, s ];
  };

  const createSetups = (t, n, o, s, e) => {
    let c = false;
    const r = createOptionCheck(n, {});
    const [l, i, a, u, _] = createStructureSetup(t);
    const [d, f, v] = createObserversSetup(u, a, r, (t => {
      update({}, t);
    }));
    const [p, h, , g] = createScrollbarsSetup(t, n, v, a, u, e);
    const updateHintsAreTruthy = t => keys(t).some((n => !!t[n]));
    const update = (t, e) => {
      if (o()) {
        return false;
      }
      const {pn: r, Dt: l, At: a, hn: u} = t;
      const _ = r || {};
      const d = !!l || !c;
      const p = {
        It: createOptionCheck(n, _, d),
        pn: _,
        Dt: d
      };
      if (u) {
        h(p);
        return false;
      }
      const g = e || f(assignDeep({}, p, {
        At: a
      }));
      const b = i(assignDeep({}, p, {
        _n: v,
        Zt: g
      }));
      h(assignDeep({}, p, {
        Zt: g,
        tn: b
      }));
      const w = updateHintsAreTruthy(g);
      const y = updateHintsAreTruthy(b);
      const S = w || y || !isEmptyObject(_) || d;
      c = true;
      S && s(t, {
        Zt: g,
        tn: b
      });
      return S;
    };
    return [ () => {
      const {an: t, gt: n, Ot: o} = u;
      const s = getElementScroll(t);
      const e = [ d(), l(), p() ];
      const c = o();
      scrollElementTo(n, s);
      c();
      return bind(runEachAndClear, e);
    }, update, () => ({
      gn: v,
      bn: a
    }), {
      wn: u,
      yn: g
    }, _ ];
  };

  const OverlayScrollbars = (t, n, o) => {
    const {N: s} = getEnvironment();
    const e = isHTMLElement(t);
    const c = e ? t : t.target;
    const r = getInstance(c);
    if (n && !r) {
      let r = false;
      const l = [];
      const i = {};
      const validateOptions = t => {
        const n = removeUndefinedProperties(t);
        const o = getStaticPluginModuleInstance(xt);
        return o ? o(n, true) : n;
      };
      const a = assignDeep({}, s(), validateOptions(n));
      const [u, _, d] = createEventListenerHub();
      const [f, v, p] = createEventListenerHub(o);
      const triggerEvent = (t, n) => {
        p(t, n);
        d(t, n);
      };
      const [h, g, b, w, y] = createSetups(t, a, (() => r), (({pn: t, Dt: n}, {Zt: o, tn: s}) => {
        const {ft: e, Ct: c, xt: r, Ht: l, Et: i, dt: a} = o;
        const {nn: u, sn: _, en: d, cn: f} = s;
        triggerEvent("updated", [ S, {
          updateHints: {
            sizeChanged: !!e,
            directionChanged: !!c,
            heightIntrinsicChanged: !!r,
            overflowEdgeChanged: !!u,
            overflowAmountChanged: !!_,
            overflowStyleChanged: !!d,
            scrollCoordinatesChanged: !!f,
            contentMutation: !!l,
            hostMutation: !!i,
            appear: !!a
          },
          changedOptions: t || {},
          force: !!n
        } ]);
      }), (t => triggerEvent("scroll", [ S, t ])));
      const destroy = t => {
        removeInstance(c);
        runEachAndClear(l);
        r = true;
        triggerEvent("destroyed", [ S, t ]);
        _();
        v();
      };
      const S = {
        options(t, n) {
          if (t) {
            const o = n ? s() : {};
            const e = getOptionsDiff(a, assignDeep(o, validateOptions(t)));
            if (!isEmptyObject(e)) {
              assignDeep(a, e);
              g({
                pn: e
              });
            }
          }
          return assignDeep({}, a);
        },
        on: f,
        off: (t, n) => {
          t && n && v(t, n);
        },
        state() {
          const {gn: t, bn: n} = b();
          const {ct: o} = t;
          const {Vt: s, Rt: e, K: c, rn: l, ln: i, dn: a, Lt: u} = n;
          return assignDeep({}, {
            overflowEdge: s,
            overflowAmount: e,
            overflowStyle: c,
            hasOverflow: l,
            scrollCoordinates: {
              start: u.D,
              end: u.M
            },
            padding: i,
            paddingAbsolute: a,
            directionRTL: o,
            destroyed: r
          });
        },
        elements() {
          const {vt: t, ht: n, ln: o, ot: s, bt: e, gt: c, Qt: r} = w.wn;
          const {Xt: l, Gt: i} = w.yn;
          const translateScrollbarStructure = t => {
            const {Pt: n, Ut: o, Tt: s} = t;
            return {
              scrollbar: s,
              track: o,
              handle: n
            };
          };
          const translateScrollbarsSetupElement = t => {
            const {Yt: n, Wt: o} = t;
            const s = translateScrollbarStructure(n[0]);
            return assignDeep({}, s, {
              clone: () => {
                const t = translateScrollbarStructure(o());
                g({
                  hn: true
                });
                return t;
              }
            });
          };
          return assignDeep({}, {
            target: t,
            host: n,
            padding: o || s,
            viewport: s,
            content: e || s,
            scrollOffsetElement: c,
            scrollEventElement: r,
            scrollbarHorizontal: translateScrollbarsSetupElement(l),
            scrollbarVertical: translateScrollbarsSetupElement(i)
          });
        },
        update: t => g({
          Dt: t,
          At: true
        }),
        destroy: bind(destroy, false),
        plugin: t => i[keys(t)[0]]
      };
      push(l, [ y ]);
      addInstance(c, S);
      registerPluginModuleInstances($t, OverlayScrollbars, [ S, u, i ]);
      if (cancelInitialization(w.wn.wt, !e && t.cancel)) {
        destroy(true);
        return S;
      }
      push(l, h());
      triggerEvent("initialized", [ S ]);
      S.update();
      return S;
    }
    return r;
  };

  OverlayScrollbars.plugin = t => {
    const n = isArray$1(t);
    const o = n ? t : [ t ];
    const s = o.map((t => registerPluginModuleInstances(t, OverlayScrollbars)[0]));
    addPlugins(o);
    return n ? s : s[0];
  };

  OverlayScrollbars.valid = t => {
    const n = t && t.elements;
    const o = isFunction$1(n) && n();
    return isPlainObject(o) && !!getInstance(o.target);
  };

  OverlayScrollbars.env = () => {
    const {T: t, k: n, R: o, V: s, B: e, F: c, U: r, P: l, N: i, q: a} = getEnvironment();
    return assignDeep({}, {
      scrollbarsSize: t,
      scrollbarsOverlaid: n,
      scrollbarsHiding: o,
      scrollTimeline: s,
      staticDefaultInitialization: e,
      staticDefaultOptions: c,
      getDefaultInitialization: r,
      setDefaultInitialization: l,
      getDefaultOptions: i,
      setDefaultOptions: a
    });
  };

  OverlayScrollbars.nonce = setNonce;

  var commonjsGlobal$1 = typeof globalThis !== 'undefined' ? globalThis : typeof window !== 'undefined' ? window : typeof global !== 'undefined' ? global : typeof self !== 'undefined' ? self : {};

  var lib = {exports: {}};

  (function (module, exports) {
  	!function(r,n){module.exports=n();}("undefined"!=typeof self?self:commonjsGlobal$1,(function(){return function(r){var n={};function e(t){if(n[t])return n[t].exports;var o=n[t]={i:t,l:!1,exports:{}};return r[t].call(o.exports,o,o.exports,e),o.l=!0,o.exports}return e.m=r,e.c=n,e.d=function(r,n,t){e.o(r,n)||Object.defineProperty(r,n,{enumerable:!0,get:t});},e.r=function(r){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(r,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(r,"__esModule",{value:!0});},e.t=function(r,n){if(1&n&&(r=e(r)),8&n)return r;if(4&n&&"object"==typeof r&&r&&r.__esModule)return r;var t=Object.create(null);if(e.r(t),Object.defineProperty(t,"default",{enumerable:!0,value:r}),2&n&&"string"!=typeof r)for(var o in r)e.d(t,o,function(n){return r[n]}.bind(null,o));return t},e.n=function(r){var n=r&&r.__esModule?function(){return r.default}:function(){return r};return e.d(n,"a",n),n},e.o=function(r,n){return Object.prototype.hasOwnProperty.call(r,n)},e.p="",e(e.s=0)}([function(r,n,e){e.r(n),e.d(n,"md5",(function(){return p}));var t="0123456789abcdef".split("");var o=function(r){for(var n="",e=0;e<4;e++)n+=t[r>>8*e+4&15]+t[r>>8*e&15];return n};var u=function(r){for(var n=r.length,e=0;e<n;e++)r[e]=o(r[e]);return r.join("")};var f=function(r,n){return r+n&4294967295};var i=function(r,n,e,t,o,u,i){return function(r,n,e){return f(r<<n|r>>>32-n,e)}(n=function(r,n,e,t){return n=f(f(n,r),f(e,t))}(r,n,t,u),o,e)};var a=function(r,n,e,t,o,u,f,a){return i(e&t|~e&o,n,e,u,f,a)};var c=function(r,n,e,t,o,u,f,a){return i(e&o|t&~o,n,e,u,f,a)};var l=function(r,n,e,t,o,u,f,a){return i(e^t^o,n,e,u,f,a)};var d=function(r,n,e,t,o,u,f,a){return i(t^(e|~o),n,e,u,f,a)};var v=function(r,n,e){void 0===e&&(e=f);var t=r[0],o=r[1],u=r[2],i=r[3],v=a.bind(null,e);t=v(t,o,u,i,n[0],7,-680876936),i=v(i,t,o,u,n[1],12,-389564586),u=v(u,i,t,o,n[2],17,606105819),o=v(o,u,i,t,n[3],22,-1044525330),t=v(t,o,u,i,n[4],7,-176418897),i=v(i,t,o,u,n[5],12,1200080426),u=v(u,i,t,o,n[6],17,-1473231341),o=v(o,u,i,t,n[7],22,-45705983),t=v(t,o,u,i,n[8],7,1770035416),i=v(i,t,o,u,n[9],12,-1958414417),u=v(u,i,t,o,n[10],17,-42063),o=v(o,u,i,t,n[11],22,-1990404162),t=v(t,o,u,i,n[12],7,1804603682),i=v(i,t,o,u,n[13],12,-40341101),u=v(u,i,t,o,n[14],17,-1502002290),o=v(o,u,i,t,n[15],22,1236535329);var s=c.bind(null,e);t=s(t,o,u,i,n[1],5,-165796510),i=s(i,t,o,u,n[6],9,-1069501632),u=s(u,i,t,o,n[11],14,643717713),o=s(o,u,i,t,n[0],20,-373897302),t=s(t,o,u,i,n[5],5,-701558691),i=s(i,t,o,u,n[10],9,38016083),u=s(u,i,t,o,n[15],14,-660478335),o=s(o,u,i,t,n[4],20,-405537848),t=s(t,o,u,i,n[9],5,568446438),i=s(i,t,o,u,n[14],9,-1019803690),u=s(u,i,t,o,n[3],14,-187363961),o=s(o,u,i,t,n[8],20,1163531501),t=s(t,o,u,i,n[13],5,-1444681467),i=s(i,t,o,u,n[2],9,-51403784),u=s(u,i,t,o,n[7],14,1735328473),o=s(o,u,i,t,n[12],20,-1926607734);var b=l.bind(null,e);t=b(t,o,u,i,n[5],4,-378558),i=b(i,t,o,u,n[8],11,-2022574463),u=b(u,i,t,o,n[11],16,1839030562),o=b(o,u,i,t,n[14],23,-35309556),t=b(t,o,u,i,n[1],4,-1530992060),i=b(i,t,o,u,n[4],11,1272893353),u=b(u,i,t,o,n[7],16,-155497632),o=b(o,u,i,t,n[10],23,-1094730640),t=b(t,o,u,i,n[13],4,681279174),i=b(i,t,o,u,n[0],11,-358537222),u=b(u,i,t,o,n[3],16,-722521979),o=b(o,u,i,t,n[6],23,76029189),t=b(t,o,u,i,n[9],4,-640364487),i=b(i,t,o,u,n[12],11,-421815835),u=b(u,i,t,o,n[15],16,530742520),o=b(o,u,i,t,n[2],23,-995338651);var p=d.bind(null,e);t=p(t,o,u,i,n[0],6,-198630844),i=p(i,t,o,u,n[7],10,1126891415),u=p(u,i,t,o,n[14],15,-1416354905),o=p(o,u,i,t,n[5],21,-57434055),t=p(t,o,u,i,n[12],6,1700485571),i=p(i,t,o,u,n[3],10,-1894986606),u=p(u,i,t,o,n[10],15,-1051523),o=p(o,u,i,t,n[1],21,-2054922799),t=p(t,o,u,i,n[8],6,1873313359),i=p(i,t,o,u,n[15],10,-30611744),u=p(u,i,t,o,n[6],15,-1560198380),o=p(o,u,i,t,n[13],21,1309151649),t=p(t,o,u,i,n[4],6,-145523070),i=p(i,t,o,u,n[11],10,-1120210379),u=p(u,i,t,o,n[2],15,718787259),o=p(o,u,i,t,n[9],21,-343485551),r[0]=e(t,r[0]),r[1]=e(o,r[1]),r[2]=e(u,r[2]),r[3]=e(i,r[3]);};var s=function(r){for(var n=[],e=0;e<64;e+=4)n[e>>2]=r.charCodeAt(e)+(r.charCodeAt(e+1)<<8)+(r.charCodeAt(e+2)<<16)+(r.charCodeAt(e+3)<<24);return n};var b=function(r,n){var e,t=r.length,o=[1732584193,-271733879,-1732584194,271733878];for(e=64;e<=t;e+=64)v(o,s(r.substring(e-64,e)),n);var u=[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],f=(r=r.substring(e-64)).length;for(e=0;e<f;e++)u[e>>2]|=r.charCodeAt(e)<<(e%4<<3);if(u[e>>2]|=128<<(e%4<<3),e>55)for(v(o,u,n),e=16;e--;)u[e]=0;return u[14]=8*t,v(o,u,n),o};function p(r){var n;return "5d41402abc4b2a76b9719d911017c592"!==u(b("hello"))&&(n=function(r,n){var e=(65535&r)+(65535&n);return (r>>16)+(n>>16)+(e>>16)<<16|65535&e}),u(b(r,n))}}])}));
  	
  } (lib));

  function _createForOfIteratorHelper$1(r, e) { var t = "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"]; if (!t) { if (Array.isArray(r) || (t = _unsupportedIterableToArray$1(r)) || e) { t && (r = t); var _n2 = 0, F = function F() {}; return { s: F, n: function n() { return _n2 >= r.length ? { done: !0 } : { done: !1, value: r[_n2++] }; }, e: function e(r) { throw r; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var o, a = !0, u = !1; return { s: function s() { t = t.call(r); }, n: function n() { var r = t.next(); return a = r.done, r; }, e: function e(r) { u = !0, o = r; }, f: function f() { try { a || null == t["return"] || t["return"](); } finally { if (u) throw o; } } }; }
  function _toConsumableArray$1(r) { return _arrayWithoutHoles$1(r) || _iterableToArray$1(r) || _unsupportedIterableToArray$1(r) || _nonIterableSpread$1(); }
  function _nonIterableSpread$1() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
  function _iterableToArray$1(r) { if ("undefined" != typeof Symbol && null != r[Symbol.iterator] || null != r["@@iterator"]) return Array.from(r); }
  function _arrayWithoutHoles$1(r) { if (Array.isArray(r)) return _arrayLikeToArray$1(r); }
  function _typeof$1(o) { "@babel/helpers - typeof"; return _typeof$1 = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof$1(o); }
  function _defineProperty$1(e, r, t) { return (r = _toPropertyKey$1(r)) in e ? Object.defineProperty(e, r, { value: t, enumerable: !0, configurable: !0, writable: !0 }) : e[r] = t, e; }
  function _unsupportedIterableToArray$1(r, a) { if (r) { if ("string" == typeof r) return _arrayLikeToArray$1(r, a); var t = {}.toString.call(r).slice(8, -1); return "Object" === t && r.constructor && (t = r.constructor.name), "Map" === t || "Set" === t ? Array.from(r) : "Arguments" === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t) ? _arrayLikeToArray$1(r, a) : void 0; } }
  function _arrayLikeToArray$1(r, a) { (null == a || a > r.length) && (a = r.length); for (var e = 0, n = Array(a); e < a; e++) n[e] = r[e]; return n; }
  function _defineProperties$1(e, r) { for (var t = 0; t < r.length; t++) { var o = r[t]; o.enumerable = o.enumerable || !1, o.configurable = !0, "value" in o && (o.writable = !0), Object.defineProperty(e, _toPropertyKey$1(o.key), o); } }
  function _createClass$1(e, r, t) { return r && _defineProperties$1(e.prototype, r), Object.defineProperty(e, "prototype", { writable: !1 }), e; }
  function _toPropertyKey$1(t) { var i = _toPrimitive$1(t, "string"); return "symbol" == _typeof$1(i) ? i : i + ""; }
  function _toPrimitive$1(t, r) { if ("object" != _typeof$1(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r); if ("object" != _typeof$1(i)) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return (String )(t); }
  function _classCallCheck$1(a, n) { if (!(a instanceof n)) throw new TypeError("Cannot call a class as a function"); }
  function _callSuper$1(t, o, e) { return o = _getPrototypeOf$1(o), _possibleConstructorReturn$1(t, _isNativeReflectConstruct$1() ? Reflect.construct(o, e || [], _getPrototypeOf$1(t).constructor) : o.apply(t, e)); }
  function _possibleConstructorReturn$1(t, e) { if (e && ("object" == _typeof$1(e) || "function" == typeof e)) return e; if (void 0 !== e) throw new TypeError("Derived constructors may only return object or undefined"); return _assertThisInitialized$1(t); }
  function _assertThisInitialized$1(e) { if (void 0 === e) throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); return e; }
  function _inherits$1(t, e) { if ("function" != typeof e && null !== e) throw new TypeError("Super expression must either be null or a function"); t.prototype = Object.create(e && e.prototype, { constructor: { value: t, writable: !0, configurable: !0 } }), Object.defineProperty(t, "prototype", { writable: !1 }), e && _setPrototypeOf$1(t, e); }
  function _wrapNativeSuper(t) { var r = "function" == typeof Map ? new Map() : void 0; return _wrapNativeSuper = function _wrapNativeSuper(t) { if (null === t || !_isNativeFunction(t)) return t; if ("function" != typeof t) throw new TypeError("Super expression must either be null or a function"); if (void 0 !== r) { if (r.has(t)) return r.get(t); r.set(t, Wrapper); } function Wrapper() { return _construct(t, arguments, _getPrototypeOf$1(this).constructor); } return Wrapper.prototype = Object.create(t.prototype, { constructor: { value: Wrapper, enumerable: !1, writable: !0, configurable: !0 } }), _setPrototypeOf$1(Wrapper, t); }, _wrapNativeSuper(t); }
  function _construct(t, e, r) { if (_isNativeReflectConstruct$1()) return Reflect.construct.apply(null, arguments); var o = [null]; o.push.apply(o, e); var p = new (t.bind.apply(t, o))(); return r && _setPrototypeOf$1(p, r.prototype), p; }
  function _isNativeReflectConstruct$1() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct$1 = function _isNativeReflectConstruct() { return !!t; })(); }
  function _isNativeFunction(t) { try { return -1 !== Function.toString.call(t).indexOf("[native code]"); } catch (n) { return "function" == typeof t; } }
  function _setPrototypeOf$1(t, e) { return _setPrototypeOf$1 = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function (t, e) { return t.__proto__ = e, t; }, _setPrototypeOf$1(t, e); }
  function _getPrototypeOf$1(t) { return _getPrototypeOf$1 = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function (t) { return t.__proto__ || Object.getPrototypeOf(t); }, _getPrototypeOf$1(t); }
  var RefException = /*#__PURE__*/function (_Error) {
    function RefException(str) {
      _classCallCheck$1(this, RefException);
      return _callSuper$1(this, RefException, ["Invalid reference : ".concat(str)]);
    }
    _inherits$1(RefException, _Error);
    return _createClass$1(RefException);
  }(/*#__PURE__*/_wrapNativeSuper(Error));
  var EventEmitter = /*#__PURE__*/function () {
    function EventEmitter() {
      _classCallCheck$1(this, EventEmitter);
      _defineProperty$1(this, "_events", {});
      this.addEventListener = this.on;
      this.addListener = this.on;
      this.removeEventListener = this.off;
      this.removeListener = this.off;
    }
    return _createClass$1(EventEmitter, [{
      key: "on",
      value: function on(event, listener) {
        if (_typeof$1(this._events[event]) !== 'object') this._events[event] = [];
        this._events[event].push(listener);
      }
    }, {
      key: "removeAllListeners",
      value: function removeAllListeners() {
        clear(this._events);
      }
    }, {
      key: "off",
      value: function off(event, listener) {
        if (!event) {
          this.removeAllListeners();
          return;
        }
        if (_typeof$1(this._events[event]) !== 'object') return;
        if (listener) array_remove(this._events[event], listener);else clear(this._events[event]);
      }
    }, {
      key: "emit",
      value: function emit(event) {
        if (_typeof$1(this._events[event]) !== 'object') return;
        for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
          args[_key - 1] = arguments[_key];
        }
        for (var _i = 0, _arr = _toConsumableArray$1(this._events[event]); _i < _arr.length; _i++) {
          var l = _arr[_i];
          l.apply(this, args);
        }
      }
    }, {
      key: "once",
      value: function once(event, listener) {
        var _this4 = this;
        var _listener_wrapped = function listener_wrapped() {
          _this4.removeListener(event, _listener_wrapped);
          for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
            args[_key2] = arguments[_key2];
          }
          listener.apply(_this4, args);
        };
        this.on(event, _listener_wrapped);
      }
    }]);
  }();
  var Timer = /*#__PURE__*/function (_EventEmitter2) {
    function Timer() {
      var _this5;
      var time = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;
      var autostart = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
      _classCallCheck$1(this, Timer);
      _this5 = _callSuper$1(this, Timer);
      _this5._total_time = time;
      _this5._interval_id;
      _this5._last_seconds_left;
      _this5._stopwatch = new StopWatch();
      _this5._stopwatch.on("pause", function () {
        clearInterval(_this5._interval_id);
        _this5.emit("pause");
      });
      _this5._stopwatch.on("start", function () {
        _this5._interval_id = setInterval(function () {
          return _this5.tick();
        }, Timer.TICK_INTERVAL);
        _this5.emit("start");
      });
      _this5._stopwatch.on("reset", function () {
        _this5._last_seconds_left = _this5.seconds_left;
        _this5.emit("reset");
        _this5.emit("second", _this5._last_seconds_left);
      });
      if (autostart) _this5.restart();
      return _this5;
    }
    _inherits$1(Timer, _EventEmitter2);
    return _createClass$1(Timer, [{
      key: "time_left",
      get: function get() {
        return Math.max(0, this._total_time - this._stopwatch.time);
      }
    }, {
      key: "seconds_left",
      get: function get() {
        return Math.ceil(this.time_left / 1000);
      }
    }, {
      key: "finished",
      get: function get() {
        return this.time_left <= 0;
      }
    }, {
      key: "paused",
      get: function get() {
        return this._stopwatch.paused;
      }
    }, {
      key: "restart",
      value: function restart(time) {
        if (time !== undefined) this._total_time = time;
        this._stopwatch.reset();
        this.resume();
      }
    }, {
      key: "tick",
      value: function tick() {
        var seconds_left = this.seconds_left;
        for (var i = this._last_seconds_left - 1; i >= seconds_left; i--) {
          this.emit("second", i);
        }
        this._last_seconds_left = seconds_left;
        this.emit("tick");
        if (this.finished) {
          this.pause();
          this.emit("finish");
        }
      }
    }, {
      key: "pause",
      value: function pause() {
        this._stopwatch.pause();
      }
    }, {
      key: "resume",
      value: function resume() {
        this._stopwatch.resume();
      }
    }, {
      key: "reset",
      value: function reset() {
        this._stopwatch.reset();
      }
    }, {
      key: "destroy",
      value: function destroy() {
        this._stopwatch.destroy();
        this.removeAllListeners();
      }
    }]);
  }(EventEmitter);
  Timer.TICK_INTERVAL = 1000 / 60;
  var StopWatch = /*#__PURE__*/function (_EventEmitter3) {
    function StopWatch() {
      var _this6;
      _classCallCheck$1(this, StopWatch);
      _this6 = _callSuper$1(this, StopWatch);
      _this6._start_time = 0;
      _this6._pause_time = 0;
      _this6._paused = true;
      return _this6;
    }
    _inherits$1(StopWatch, _EventEmitter3);
    return _createClass$1(StopWatch, [{
      key: "time",
      get: function get() {
        return (this._paused ? this._pause_time : Date.now()) - this._start_time;
      }
    }, {
      key: "paused",
      get: function get() {
        return this._paused;
      }
    }, {
      key: "start",
      value: function start() {
        var now = Date.now();
        if (!this._start_time) this._start_time = now;
        if (this._paused) {
          this._paused = false;
          this._start_time += now - this._pause_time;
          this._pause_time = 0;
          this.emit("start");
        }
      }
    }, {
      key: "resume",
      value: function resume() {
        this.start();
      }
    }, {
      key: "pause",
      value: function pause() {
        if (this._paused) return;
        this._paused = true;
        this._pause_time = Date.now();
        this.emit("pause");
      }
    }, {
      key: "reset",
      value: function reset() {
        this._start_time = Date.now();
        if (this._paused) this._pause_time = this._start_time;
        this.emit("reset");
      }
    }, {
      key: "destroy",
      value: function destroy() {
        this.removeAllListeners();
      }
    }]);
  }(EventEmitter);
  var Diff = /*#__PURE__*/_createClass$1(function Diff(old_value, new_value) {
    _classCallCheck$1(this, Diff);
    if (old_value === new_value) this.type = 0;
    if (old_value === undefined) this.type = Diff.CREATED;else if (new_value === undefined) this.type = Diff.DELETED;else this.type = Diff.CHANGED;
    this.old_value = old_value;
    this.new_value = new_value;
    Object.freeze(this);
  });
  Diff.CREATED = 1;
  Diff.DELETED = 2;
  Diff.CHANGED = 3;
  var Point = /*#__PURE__*/_createClass$1(function Point(x, y) {
    _classCallCheck$1(this, Point);
    this.x = x;
    this.y = y;
  });
  Point.distance = function (x1, y1, x2, y2) {
    return Math.sqrt(Math.pow(x2 - x1, 2), Math.pow(y2 - y1, 2));
  };
  var Rectangle = /*#__PURE__*/function () {
    function Rectangle() {
      for (var _len3 = arguments.length, args = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {
        args[_key3] = arguments[_key3];
      }
      _classCallCheck$1(this, Rectangle);
      args = function () {
        if (args.length == 4) return args;
        if (args.length == 2) return [0, 0].concat(_toConsumableArray$1(args));
        if (args.length == 1) {
          if (Array.isArray(args[0])) return args[0];
          if (_typeof$1(args[0]) === "object") {
            var _args$ = args[0],
              x = _args$.x,
              y = _args$.y,
              width = _args$.width,
              height = _args$.height,
              left = _args$.left,
              right = _args$.right,
              bottom = _args$.bottom,
              top = _args$.top;
            if (x == undefined) x = left;
            if (y == undefined) y = top;
            if (width == undefined) width = right - left;
            if (height == undefined) height = bottom - top;
            return [x, y, width, height];
          }
        }
        if (args.length == 0) return [0, 0, 0, 0];
      }();
      this.x = +args[0] || 0;
      this.y = +args[1] || 0;
      this.width = +args[2] || 0;
      this.height = +args[3] || 0;
    }
    return _createClass$1(Rectangle, [{
      key: "left",
      get: function get() {
        return this.x;
      },
      set: function set(value) {
        var d = value - this.x;
        this.x += d;
        this.width -= d;
      }
    }, {
      key: "top",
      get: function get() {
        return this.y;
      },
      set: function set(value) {
        var d = value - this.y;
        this.y += d;
        this.height -= d;
      }
    }, {
      key: "right",
      get: function get() {
        return this.x + this.width;
      },
      set: function set(value) {
        this.width += value - this.right;
      }
    }, {
      key: "bottom",
      get: function get() {
        return this.y + this.height;
      },
      set: function set(value) {
        this.height += value - this.bottom;
      }
    }, {
      key: "center",
      get: function get() {
        return {
          x: this.x + this.width / 2,
          y: this.y + this.height / 2
        };
      }
    }, {
      key: "contains",
      value: function contains(obj) {
        if (!obj.width && !obj.height) return obj.x > this.left && obj.x < this.right && obj.y > this.top && obj.y < this.bottom;
        return obj.x > this.left && obj.x + obj.width < this.right && obj.y > this.top && obj.y + obj.height < this.bottom;
      }
    }, {
      key: "intersects",
      value: function intersects(obj) {
        return obj.x + obj.width > this.left && obj.x < this.right && obj.y + obj.height > this.top && obj.y < this.bottom;
      }
    }, {
      key: "union",
      value: function union(obj) {
        var x = Math.min(obj.x, this.x);
        var y = Math.min(obj.y, this.y);
        var right = Math.max(obj.x + (obj.width || 0), this.right);
        var bottom = Math.max(obj.y + (obj.height || 0), this.bottom);
        return new Rectangle(x, y, right - x, bottom - y);
      }
    }, {
      key: "intersection",
      value: function intersection(obj) {
        var x = Math.max(obj.x, this.x);
        var y = Math.max(obj.y, this.y);
        var right = Math.min(obj.x + obj.width, this.right);
        var bottom = Math.min(obj.y + obj.height, this.bottom);
        return new Rectangle(x, y, right - x, bottom - y);
      }
    }, {
      key: "scale",
      value: function scale(x, y) {
        if (y === undefined) y = x;
        this.x *= x;
        this.y *= y;
        this.width *= x;
        this.height *= y;
        return this;
      }
    }, {
      key: "expand",
      value: function expand(x, y) {
        if (y === undefined) y = x;
        this.x -= x / 2;
        this.y -= y / 2;
        this.width += x;
        this.height += y;
        return this;
      }
    }, {
      key: "fix",
      value: function fix() {
        if (this.width < 0) {
          this.x += this.width;
          this.width *= -1;
        }
        if (this.height < 0) {
          this.y += this.height;
          this.height *= -1;
        }
        return this;
      }
    }, {
      key: "clone",
      value: function clone() {
        return new Rectangle(this.x, this.y, this.width, this.height);
      }
    }, {
      key: "equals",
      value: function equals(obj) {
        try {
          return this.x === obj.x && this.y === obj.y && this.width === obj.width && this.height === obj.height;
        } catch (_unused) {
          return false;
        }
      }
    }, {
      key: "toString",
      value: function toString() {
        return "[Rectangle x:".concat(this.x, " y:").concat(this.y, " width:").concat(this.width, " height:").concat(this.height, "]");
      }
    }, {
      key: "toJSON",
      value: function toJSON() {
        return {
          x: this.x,
          y: this.y,
          width: this.width,
          height: this.height
        };
      }
    }]);
  }();
  Rectangle.union = function () {
    for (var _len4 = arguments.length, rects = new Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {
      rects[_key4] = arguments[_key4];
    }
    var x = Math.min.apply(Math, _toConsumableArray$1(rects.map(function (r) {
      return r.x;
    })));
    var y = Math.min.apply(Math, _toConsumableArray$1(rects.map(function (r) {
      return r.y;
    })));
    var right = Math.max.apply(Math, _toConsumableArray$1(rects.map(function (r) {
      return r.x + r.width;
    })));
    var bottom = Math.max.apply(Math, _toConsumableArray$1(rects.map(function (r) {
      return r.y + r.height;
    })));
    return new Rectangle(x, y, right - x, bottom - y);
  };
  Rectangle.intersection = function () {
    for (var _len5 = arguments.length, rects = new Array(_len5), _key5 = 0; _key5 < _len5; _key5++) {
      rects[_key5] = arguments[_key5];
    }
    var x = Math.max.apply(Math, _toConsumableArray$1(rects.map(function (r) {
      return r.x;
    })));
    var y = Math.max.apply(Math, _toConsumableArray$1(rects.map(function (r) {
      return r.y;
    })));
    var right = Math.min.apply(Math, _toConsumableArray$1(rects.map(function (r) {
      return r.x + r.width;
    })));
    var bottom = Math.min.apply(Math, _toConsumableArray$1(rects.map(function (r) {
      return r.y + r.height;
    })));
    return new Rectangle(x, y, right - x, bottom - y);
  };
  var Color$1 = /*#__PURE__*/function () {
    function Color() {
      for (var _len6 = arguments.length, components = new Array(_len6), _key6 = 0; _key6 < _len6; _key6++) {
        components[_key6] = arguments[_key6];
      }
      _classCallCheck$1(this, Color);
      this._r = 0;
      this._g = 0;
      this._b = 0;
      this._h = 0;
      this._s = 0;
      this._l = 0;
      this._a = 1.0;
      if (components.length == 1) {
        var c = components[0];
        if (Array.isArray(c)) {
          s;
          components = _toConsumableArray$1(c);
        } else if (_typeof$1(c) === "object") {
          components = [c.r || c.red || 0, c.g || c.green || 0, c.b || c.blue || 0, c.a || c.alpha || 1];
        } else if (typeof c === "string") {
          if (c.charAt(0) === "#") c = c.slice(1);else if (c.substring(0, 2) === "0x") c = c.slice(2);
          if (c.length < 6) components = c.split("").map(function (a) {
            return a + a;
          });else components = c.match(/.{1,2}/g);
        }
      }
      components = components.map(function (c) {
        if (typeof c === "string" && c.match(/^[0-9a-f]{2}$/)) return parseInt(c, 16);
        return +c;
      });
      this.from_rgba.apply(this, _toConsumableArray$1(components));
    }
    return _createClass$1(Color, [{
      key: "r",
      get: function get() {
        return this._r;
      }
    }, {
      key: "g",
      get: function get() {
        return this._g;
      }
    }, {
      key: "b",
      get: function get() {
        return this._b;
      }
    }, {
      key: "h",
      get: function get() {
        return this._h;
      }
    }, {
      key: "s",
      get: function get() {
        return this._s;
      }
    }, {
      key: "l",
      get: function get() {
        return this._l;
      }
    }, {
      key: "a",
      get: function get() {
        return this._a;
      }
    }, {
      key: "from_hsl",
      value: function from_hsl() {
        var h = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;
        var s = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
        var l = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;
        return this.from_hsla(h, s, l, 1);
      }
    }, {
      key: "from_hsla",
      value: function from_hsla() {
        var h = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;
        var s = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
        var l = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;
        var a = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 1;
        this._h = h = clamp(h, 0, 1);
        this._s = s = clamp(s, 0, 1);
        this._l = l = clamp(l, 0, 1);
        this._a = a = clamp(a, 0, 1);
        var r, g, b;
        if (s == 0) {
          r = g = b = l;
        } else {
          var q = l < 0.5 ? l * (1 + s) : l + s - l * s;
          var p = 2 * l - q;
          r = Color.hue2rgb(p, q, h + 1 / 3);
          g = Color.hue2rgb(p, q, h);
          b = Color.hue2rgb(p, q, h - 1 / 3);
        }
        this._r = Math.round(r * 255);
        this._g = Math.round(g * 255);
        this._b = Math.round(b * 255);
        return this;
      }
    }, {
      key: "from_rgb",
      value: function from_rgb() {
        var r = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;
        var g = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
        var b = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;
        return this.from_rgba(r, g, b, 1);
      }
    }, {
      key: "from_rgba",
      value: function from_rgba() {
        var r = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;
        var g = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
        var b = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;
        var a = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 1;
        this._r = r = Math.round(clamp(r, 0, 255));
        this._g = g = Math.round(clamp(g, 0, 255));
        this._b = b = Math.round(clamp(b, 0, 255));
        this._a = a = Math.round(clamp(a, 0, 1));
        r /= 255;
        g /= 255;
        b /= 255;
        var cMax = Math.max(r, g, b);
        var cMin = Math.min(r, g, b);
        var delta = cMax - cMin;
        var l = (cMax + cMin) / 2;
        var h = 0;
        var s = 0;
        if (delta == 0) h = 0;else if (cMax == r) h = 60 * ((g - b) / delta % 6);else if (cMax == g) h = 60 * ((b - r) / delta + 2);else h = 60 * ((r - g) / delta + 4);
        s = delta == 0 ? 0 : delta / (1 - Math.abs(2 * l - 1));
        this._h = h;
        this._s = s;
        this._l = l;
        return this;
      }
    }, {
      key: "rgb_mix",
      value: function rgb_mix(c) {
        var m = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0.5;
        return this.rgba_mix(c, m);
      }
    }, {
      key: "rgba_mix",
      value: function rgba_mix(c) {
        var m = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0.5;
        c = Color.from(c);
        return new Color(lerp(this._r, c.r, m), lerp(this._g, c.g, m), lerp(this._b, c.b, m), lerp(this._a, c.a, m));
      }
    }, {
      key: "hsl_mix",
      value: function hsl_mix(c) {
        var m = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0.5;
        return this.hsla_mix(c, m);
      }
    }, {
      key: "hsla_mix",
      value: function hsla_mix(c) {
        var m = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0.5;
        c = Color.from(c);
        return new Color(lerp(this._h, c.h, m), lerp(this._s, c.s, m), lerp(this._l, c.l, m), lerp(this._a, c.a, m));
      }
    }, {
      key: "to_hsl_array",
      value: function to_hsl_array() {
        return [this._h, this._s, this._l];
      }
    }, {
      key: "to_rgb_array",
      value: function to_rgb_array() {
        return [this._r, this._g, this._b];
      }
    }, {
      key: "to_hsla_array",
      value: function to_hsla_array() {
        return [this._h, this._s, this._l, this._a];
      }
    }, {
      key: "to_rgba_array",
      value: function to_rgba_array() {
        return [this._r, this._g, this._b, this._a];
      }
    }, {
      key: "to_hsl_string",
      value: function to_hsl_string() {
        return "hsl(".concat(this._h, ", ").concat(this._s, ", ").concat(this._l, ")");
      }
    }, {
      key: "to_rgb_string",
      value: function to_rgb_string() {
        return "rgb(".concat(this._r, ", ").concat(this._g, ", ").concat(this._b, ")");
      }
    }, {
      key: "to_hsla_string",
      value: function to_hsla_string() {
        return "hsla(".concat(this._h, ", ").concat(this._s, ", ").concat(this._l, ", ").concat(this._a, ")");
      }
    }, {
      key: "to_rgba_string",
      value: function to_rgba_string() {
        return "rgba(".concat(this._r, ", ").concat(this._g, ", ").concat(this._b, ", ").concat(this._a, ")");
      }
    }, {
      key: "to_rgb_hex",
      value: function to_rgb_hex() {
        return "#".concat(this._r.toString(16)).concat(this._g.toString(16)).concat(this._b.toString(16));
      }
    }, {
      key: "to_rgba_hex",
      value: function to_rgba_hex() {
        return "#".concat(this._r.toString(16)).concat(this._g.toString(16)).concat(this._b.toString(16)).concat(this._a.toString(16));
      }
    }, {
      key: "toString",
      value: function toString() {
        return this.to_rgba_string();
      }
    }, {
      key: "copy",
      value: function copy() {
        var c = new Color();
        c._r = this._r;
        c._g = this._g;
        c._b = this._b;
        c._h = this._h;
        c._s = this._s;
        c._l = this._l;
        c._a = this._a;
        return c;
      }
    }]);
  }();
  Color$1.from = function () {
    for (var _len7 = arguments.length, components = new Array(_len7), _key7 = 0; _key7 < _len7; _key7++) {
      components[_key7] = arguments[_key7];
    }
    if (components.length === 1 && components[0] instanceof Color$1) {
      return components[0];
    }
    return _construct(Color$1, components);
  };
  Color$1.mix = function (c1, c2) {
    var m = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0.5;
    return Color$1.from(c1).mix(c2, m);
  };
  Color$1.hue_to_rgb = function (p, q, t) {
    if (t < 0) t += 1;
    if (t > 1) t -= 1;
    if (t < 1 / 6) return p + (q - p) * 6 * t;
    if (t < 1 / 2) return q;
    if (t < 2 / 3) return p + (q - p) * (2 / 3 - t) * 6;
    return p;
  };
  function is_valid_url(str) {
    return /(https?:\/\/(?:www\.|(?!www))[a-zA-Z0-9][a-zA-Z0-9-]+[a-zA-Z0-9]\.[^\s]{2,}|www\.[a-zA-Z0-9][a-zA-Z0-9-]+[a-zA-Z0-9]\.[^\s]{2,}|https?:\/\/(?:www\.|(?!www))[a-zA-Z0-9]+\.[^\s]{2,}|www\.[a-zA-Z0-9]+\.[^\s]{2,})/i.test(str);
  }
  function is_valid_rtmp_url(str) {
    return /^rtmps?\:\/\//i.test(str);
  }
  function debounce$4(func) {
    var wait = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
    var immediate = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;
    var timeout, previous, args, result, context;
    var _later = function later() {
      var passed = Date.now() - previous;
      if (wait > passed) {
        timeout = setTimeout(_later, wait - passed);
      } else {
        timeout = null;
        if (!immediate) result = func.apply(context, args);
        if (!timeout) args = context = null;
      }
    };
    var debounced = function debounced() {
      context = this;
      for (var _len10 = arguments.length, p = new Array(_len10), _key10 = 0; _key10 < _len10; _key10++) {
        p[_key10] = arguments[_key10];
      }
      args = p;
      previous = Date.now();
      if (!timeout) {
        timeout = setTimeout(_later, wait);
        if (immediate) result = func.apply(context, args);
      }
      return result;
    };
    debounced.cancel = function () {
      clearTimeout(timeout);
      timeout = args = context = null;
    };
    return debounced;
  }
  function timespan_str_to_seconds(str) {
    var format = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : "hh:mm:ss";
    return timespan_str_to_ms(str, format) / 1000;
  }
  // will also handle decimal points (milliseconds)
  function timespan_str_to_ms(str) {
    var format = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : "hh:mm:ss";
    var multiply = 1;
    if (str.startsWith("-")) {
      multiply = -1;
      str = str.slice(1);
    }
    var parts = String(str).split(/:/);
    var format_parts = format.split(/:/);
    if (format_parts.length > parts.length) format_parts = format_parts.slice(-parts.length); // so if str = "10:00" and format = "hh:mm:ss", the assumed format will be "mm:ss"
    else parts = parts.slice(-format_parts.length);
    var ms = 0;
    for (var i = 0; i < parts.length; i++) {
      var v = parseFloat(parts[i]);
      var f = format_parts[i][0];
      if (!Number.isFinite(v)) v = 0; // handles NaN & Infinity
      if (f == "d") ms += v * 24 * 60 * 60 * 1000;else if (f == "h") ms += v * 60 * 60 * 1000;else if (f == "m") ms += v * 60 * 1000;else if (f == "s") ms += v * 1000;
    }
    return ms * multiply;
  }
  // ms
  function ms_to_timespan_str(num) {
    var format = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : "hh:mm:ss";
    var negative = num < 0;
    num = Math.abs(+num) || 0;
    var format_parts = format.split(/([^a-z])/i).filter(function (m) {
      return m;
    });
    var parts = [];
    for (var i = 0; i < format_parts.length; i++) {
      var p = format_parts[i];
      var divider = null;
      if (p.startsWith("d")) divider = 24 * 60 * 60 * 1000;else if (p.startsWith("h")) divider = 60 * 60 * 1000;else if (p.startsWith("m")) divider = 60 * 1000;else if (p.startsWith("s")) divider = 1000;else if (p.startsWith("S")) divider = 1;else if (parts.length == 0) continue;
      if (p == "?") {
        if (parts[parts.length - 1] == 0) parts.pop();
        continue;
      }
      if (divider) {
        var v = Math.floor(num / divider);
        p = v.toString().padStart(p.length, "0");
        num -= v * divider;
      }
      parts.push(p);
    }
    return (negative ? "-" : "") + parts.join("");
  }
  function array_remove(arr, item) {
    var index = arr.indexOf(item);
    if (index === -1) return false;
    arr.splice(index, 1);
    return true;
  }
  function random_string(length) {
    var chars = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : "0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ";
    var result = new Array(length),
      num_chars = chars.length;
    for (var i = length; i > 0; --i) result[i] = chars[Math.floor(Math.random() * num_chars)];
    return result.join("");
  }
  function all_equal(array) {
    if (array.length <= 1) return true;
    for (var i = 1; i < array.length; i++) {
      if (array[0] !== array[i]) return false;
    }
    return true;
  }
  /** @template T1 @param {function():T1} cb @param {*} [default_value] @returns {T1} */
  function _try(cb) {
    var default_value = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : undefined;
    try {
      return cb();
    } catch (_unused4) {
      return default_value;
    }
  }
  function clear(obj) {
    if (Array.isArray(obj)) {
      obj.splice(0, obj.length);
    } else if (_typeof$1(obj) === "object") {
      for (var _i8 = 0, _Object$keys4 = Object.keys(obj); _i8 < _Object$keys4.length; _i8++) {
        var k = _Object$keys4[_i8];
        delete obj[k];
      }
    }
  }
  function round_to_factor(num) {
    var f = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1.0;
    return Math.round(num / f) * f;
  }
  function clamp(a) {
    var min = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
    var max = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1;
    return Math.min(max, Math.max(min, a));
  }
  function lerp(x, y, a) {
    return x * (1 - a) + y * a;
  }
  function split_datetime(date) {
    var apply_timezone = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
    return function (date) {
      var date = +new Date(date);
      if (apply_timezone) date += -(+new Date(date).getTimezoneOffset() * 60 * 1000);
      var parts = new Date(date).toISOString().slice(0, -1).split("T");
      if (parts[0][0] == "+") parts[0] = parts[0].slice(1);
      return parts;
    }(date);
  }
  function join_datetime(parts) {
    var apply_timezone = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
    var date = +new Date("".concat(parts.join(" "), "Z"));
    if (apply_timezone) date += +new Date(date).getTimezoneOffset() * 60 * 1000;
    return new Date(date);
  }
  function get_property_descriptor(obj, property) {
    while (obj) {
      var d = Object.getOwnPropertyDescriptor(obj, property);
      if (d) return d;
      obj = Object.getPrototypeOf(obj);
    }
    return null;
  }
  /** @template T @param {T} obj @param {Function(any):any} replacer @return {T} */
  function deep_copy(obj, replacer) {
    if (_typeof$1(obj) !== 'object' || obj === null) return obj;
    return JSON.parse(JSON.stringify(obj));
  }
  function get(fn_this, fn_path) {
    // if (typeof fn_path === "string") fn_path = fn_path.split(/\./);
    if (!Array.isArray(fn_path)) fn_path = [fn_path];
    var fn_ref = fn_this;
    try {
      var _iterator23 = _createForOfIteratorHelper$1(fn_path),
        _step23;
      try {
        for (_iterator23.s(); !(_step23 = _iterator23.n()).done;) {
          var fn_part = _step23.value;
          fn_this = fn_ref;
          var descriptor = get_property_descriptor(fn_ref, fn_part);
          if (descriptor && descriptor.get) fn_ref = descriptor.get.call(fn_this);else fn_ref = fn_ref[fn_part];
          // fn_ref = descriptor ? (descriptor.get ? descriptor.get.call(fn_this) : descriptor.value) : undefined;
        }
      } catch (err) {
        _iterator23.e(err);
      } finally {
        _iterator23.f();
      }
    } catch (_unused5) {
      throw new RefException("".concat(fn_this, " -> ").concat(fn_path));
    }
    return fn_ref;
  }
  function nearest(num) {
    var minDiff = Number.MAX_VALUE;
    for (var _len15 = arguments.length, values = new Array(_len15 > 1 ? _len15 - 1 : 0), _key15 = 1; _key15 < _len15; _key15++) {
      values[_key15 - 1] = arguments[_key15];
    }
    for (var _i14 = 0, _values = values; _i14 < _values.length; _i14++) {
      var val = _values[_i14];
      var m = Math.abs(num - values[i]);
      if (m < minDiff) {
        minDiff = m;
        curr = val;
      }
    }
    return curr;
  }

  var _marked = /*#__PURE__*/_regeneratorRuntime().mark(find$2);
  function _typeof$2(o) { "@babel/helpers - typeof"; return _typeof$2 = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof$2(o); }
  function ownKeys$1(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
  function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys$1(Object(t), !0).forEach(function (r) { _defineProperty$2(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys$1(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
  function _superPropGet(t, e, o, r) { var p = _get(_getPrototypeOf(t.prototype ), e, o); return "function" == typeof p ? function (t) { return p.apply(o, t); } : p; }
  function _get() { return _get = "undefined" != typeof Reflect && Reflect.get ? Reflect.get.bind() : function (e, t, r) { var p = _superPropBase(e, t); if (p) { var n = Object.getOwnPropertyDescriptor(p, t); return n.get ? n.get.call(arguments.length < 3 ? e : r) : n.value; } }, _get.apply(null, arguments); }
  function _superPropBase(t, o) { for (; !{}.hasOwnProperty.call(t, o) && null !== (t = _getPrototypeOf(t));); return t; }
  function _slicedToArray(r, e) { return _arrayWithHoles(r) || _iterableToArrayLimit(r, e) || _unsupportedIterableToArray$2(r, e) || _nonIterableRest(); }
  function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
  function _iterableToArrayLimit(r, l) { var t = null == r ? null : "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"]; if (null != t) { var e, n, i, u, a = [], f = !0, o = !1; try { if (i = (t = t.call(r)).next, 0 === l) ; else for (; !(f = (e = i.call(t)).done) && (a.push(e.value), a.length !== l); f = !0); } catch (r) { o = !0, n = r; } finally { try { if (!f && null != t["return"] && (u = t["return"](), Object(u) !== u)) return; } finally { if (o) throw n; } } return a; } }
  function _arrayWithHoles(r) { if (Array.isArray(r)) return r; }
  function _createForOfIteratorHelper(r, e) { var t = "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"]; if (!t) { if (Array.isArray(r) || (t = _unsupportedIterableToArray$2(r)) || e) { t && (r = t); var _n = 0, F = function F() {}; return { s: F, n: function n() { return _n >= r.length ? { done: !0 } : { done: !1, value: r[_n++] }; }, e: function e(r) { throw r; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var o, a = !0, u = !1; return { s: function s() { t = t.call(r); }, n: function n() { var r = t.next(); return a = r.done, r; }, e: function e(r) { u = !0, o = r; }, f: function f() { try { a || null == t["return"] || t["return"](); } finally { if (u) throw o; } } }; }
  function _toConsumableArray$2(r) { return _arrayWithoutHoles$2(r) || _iterableToArray$2(r) || _unsupportedIterableToArray$2(r) || _nonIterableSpread$2(); }
  function _nonIterableSpread$2() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
  function _unsupportedIterableToArray$2(r, a) { if (r) { if ("string" == typeof r) return _arrayLikeToArray$2(r, a); var t = {}.toString.call(r).slice(8, -1); return "Object" === t && r.constructor && (t = r.constructor.name), "Map" === t || "Set" === t ? Array.from(r) : "Arguments" === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t) ? _arrayLikeToArray$2(r, a) : void 0; } }
  function _iterableToArray$2(r) { if ("undefined" != typeof Symbol && null != r[Symbol.iterator] || null != r["@@iterator"]) return Array.from(r); }
  function _arrayWithoutHoles$2(r) { if (Array.isArray(r)) return _arrayLikeToArray$2(r); }
  function _arrayLikeToArray$2(r, a) { (null == a || a > r.length) && (a = r.length); for (var e = 0, n = Array(a); e < a; e++) n[e] = r[e]; return n; }
  function _defineProperty$2(e, r, t) { return (r = _toPropertyKey(r)) in e ? Object.defineProperty(e, r, { value: t, enumerable: !0, configurable: !0, writable: !0 }) : e[r] = t, e; }
  function _regeneratorRuntime() { /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */ _regeneratorRuntime = function _regeneratorRuntime() { return e; }; var t, e = {}, r = Object.prototype, n = r.hasOwnProperty, o = Object.defineProperty || function (t, e, r) { t[e] = r.value; }, i = "function" == typeof Symbol ? Symbol : {}, a = i.iterator || "@@iterator", c = i.asyncIterator || "@@asyncIterator", u = i.toStringTag || "@@toStringTag"; function define(t, e, r) { return Object.defineProperty(t, e, { value: r, enumerable: !0, configurable: !0, writable: !0 }), t[e]; } try { define({}, ""); } catch (t) { define = function define(t, e, r) { return t[e] = r; }; } function wrap(t, e, r, n) { var i = e && e.prototype instanceof Generator ? e : Generator, a = Object.create(i.prototype), c = new Context(n || []); return o(a, "_invoke", { value: makeInvokeMethod(t, r, c) }), a; } function tryCatch(t, e, r) { try { return { type: "normal", arg: t.call(e, r) }; } catch (t) { return { type: "throw", arg: t }; } } e.wrap = wrap; var h = "suspendedStart", l = "suspendedYield", f = "executing", s = "completed", y = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var p = {}; define(p, a, function () { return this; }); var d = Object.getPrototypeOf, v = d && d(d(values([]))); v && v !== r && n.call(v, a) && (p = v); var g = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(p); function defineIteratorMethods(t) { ["next", "throw", "return"].forEach(function (e) { define(t, e, function (t) { return this._invoke(e, t); }); }); } function AsyncIterator(t, e) { function invoke(r, o, i, a) { var c = tryCatch(t[r], t, o); if ("throw" !== c.type) { var u = c.arg, h = u.value; return h && "object" == _typeof$2(h) && n.call(h, "__await") ? e.resolve(h.__await).then(function (t) { invoke("next", t, i, a); }, function (t) { invoke("throw", t, i, a); }) : e.resolve(h).then(function (t) { u.value = t, i(u); }, function (t) { return invoke("throw", t, i, a); }); } a(c.arg); } var r; o(this, "_invoke", { value: function value(t, n) { function callInvokeWithMethodAndArg() { return new e(function (e, r) { invoke(t, n, e, r); }); } return r = r ? r.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg(); } }); } function makeInvokeMethod(e, r, n) { var o = h; return function (i, a) { if (o === f) throw Error("Generator is already running"); if (o === s) { if ("throw" === i) throw a; return { value: t, done: !0 }; } for (n.method = i, n.arg = a;;) { var c = n.delegate; if (c) { var u = maybeInvokeDelegate(c, n); if (u) { if (u === y) continue; return u; } } if ("next" === n.method) n.sent = n._sent = n.arg;else if ("throw" === n.method) { if (o === h) throw o = s, n.arg; n.dispatchException(n.arg); } else "return" === n.method && n.abrupt("return", n.arg); o = f; var p = tryCatch(e, r, n); if ("normal" === p.type) { if (o = n.done ? s : l, p.arg === y) continue; return { value: p.arg, done: n.done }; } "throw" === p.type && (o = s, n.method = "throw", n.arg = p.arg); } }; } function maybeInvokeDelegate(e, r) { var n = r.method, o = e.iterator[n]; if (o === t) return r.delegate = null, "throw" === n && e.iterator["return"] && (r.method = "return", r.arg = t, maybeInvokeDelegate(e, r), "throw" === r.method) || "return" !== n && (r.method = "throw", r.arg = new TypeError("The iterator does not provide a '" + n + "' method")), y; var i = tryCatch(o, e.iterator, r.arg); if ("throw" === i.type) return r.method = "throw", r.arg = i.arg, r.delegate = null, y; var a = i.arg; return a ? a.done ? (r[e.resultName] = a.value, r.next = e.nextLoc, "return" !== r.method && (r.method = "next", r.arg = t), r.delegate = null, y) : a : (r.method = "throw", r.arg = new TypeError("iterator result is not an object"), r.delegate = null, y); } function pushTryEntry(t) { var e = { tryLoc: t[0] }; 1 in t && (e.catchLoc = t[1]), 2 in t && (e.finallyLoc = t[2], e.afterLoc = t[3]), this.tryEntries.push(e); } function resetTryEntry(t) { var e = t.completion || {}; e.type = "normal", delete e.arg, t.completion = e; } function Context(t) { this.tryEntries = [{ tryLoc: "root" }], t.forEach(pushTryEntry, this), this.reset(!0); } function values(e) { if (e || "" === e) { var r = e[a]; if (r) return r.call(e); if ("function" == typeof e.next) return e; if (!isNaN(e.length)) { var o = -1, i = function next() { for (; ++o < e.length;) if (n.call(e, o)) return next.value = e[o], next.done = !1, next; return next.value = t, next.done = !0, next; }; return i.next = i; } } throw new TypeError(_typeof$2(e) + " is not iterable"); } return GeneratorFunction.prototype = GeneratorFunctionPrototype, o(g, "constructor", { value: GeneratorFunctionPrototype, configurable: !0 }), o(GeneratorFunctionPrototype, "constructor", { value: GeneratorFunction, configurable: !0 }), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, u, "GeneratorFunction"), e.isGeneratorFunction = function (t) { var e = "function" == typeof t && t.constructor; return !!e && (e === GeneratorFunction || "GeneratorFunction" === (e.displayName || e.name)); }, e.mark = function (t) { return Object.setPrototypeOf ? Object.setPrototypeOf(t, GeneratorFunctionPrototype) : (t.__proto__ = GeneratorFunctionPrototype, define(t, u, "GeneratorFunction")), t.prototype = Object.create(g), t; }, e.awrap = function (t) { return { __await: t }; }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, c, function () { return this; }), e.AsyncIterator = AsyncIterator, e.async = function (t, r, n, o, i) { void 0 === i && (i = Promise); var a = new AsyncIterator(wrap(t, r, n, o), i); return e.isGeneratorFunction(r) ? a : a.next().then(function (t) { return t.done ? t.value : a.next(); }); }, defineIteratorMethods(g), define(g, u, "Generator"), define(g, a, function () { return this; }), define(g, "toString", function () { return "[object Generator]"; }), e.keys = function (t) { var e = Object(t), r = []; for (var n in e) r.push(n); return r.reverse(), function next() { for (; r.length;) { var t = r.pop(); if (t in e) return next.value = t, next.done = !1, next; } return next.done = !0, next; }; }, e.values = values, Context.prototype = { constructor: Context, reset: function reset(e) { if (this.prev = 0, this.next = 0, this.sent = this._sent = t, this.done = !1, this.delegate = null, this.method = "next", this.arg = t, this.tryEntries.forEach(resetTryEntry), !e) for (var r in this) "t" === r.charAt(0) && n.call(this, r) && !isNaN(+r.slice(1)) && (this[r] = t); }, stop: function stop() { this.done = !0; var t = this.tryEntries[0].completion; if ("throw" === t.type) throw t.arg; return this.rval; }, dispatchException: function dispatchException(e) { if (this.done) throw e; var r = this; function handle(n, o) { return a.type = "throw", a.arg = e, r.next = n, o && (r.method = "next", r.arg = t), !!o; } for (var o = this.tryEntries.length - 1; o >= 0; --o) { var i = this.tryEntries[o], a = i.completion; if ("root" === i.tryLoc) return handle("end"); if (i.tryLoc <= this.prev) { var c = n.call(i, "catchLoc"), u = n.call(i, "finallyLoc"); if (c && u) { if (this.prev < i.catchLoc) return handle(i.catchLoc, !0); if (this.prev < i.finallyLoc) return handle(i.finallyLoc); } else if (c) { if (this.prev < i.catchLoc) return handle(i.catchLoc, !0); } else { if (!u) throw Error("try statement without catch or finally"); if (this.prev < i.finallyLoc) return handle(i.finallyLoc); } } } }, abrupt: function abrupt(t, e) { for (var r = this.tryEntries.length - 1; r >= 0; --r) { var o = this.tryEntries[r]; if (o.tryLoc <= this.prev && n.call(o, "finallyLoc") && this.prev < o.finallyLoc) { var i = o; break; } } i && ("break" === t || "continue" === t) && i.tryLoc <= e && e <= i.finallyLoc && (i = null); var a = i ? i.completion : {}; return a.type = t, a.arg = e, i ? (this.method = "next", this.next = i.finallyLoc, y) : this.complete(a); }, complete: function complete(t, e) { if ("throw" === t.type) throw t.arg; return "break" === t.type || "continue" === t.type ? this.next = t.arg : "return" === t.type ? (this.rval = this.arg = t.arg, this.method = "return", this.next = "end") : "normal" === t.type && e && (this.next = e), y; }, finish: function finish(t) { for (var e = this.tryEntries.length - 1; e >= 0; --e) { var r = this.tryEntries[e]; if (r.finallyLoc === t) return this.complete(r.completion, r.afterLoc), resetTryEntry(r), y; } }, "catch": function _catch(t) { for (var e = this.tryEntries.length - 1; e >= 0; --e) { var r = this.tryEntries[e]; if (r.tryLoc === t) { var n = r.completion; if ("throw" === n.type) { var o = n.arg; resetTryEntry(r); } return o; } } throw Error("illegal catch attempt"); }, delegateYield: function delegateYield(e, r, n) { return this.delegate = { iterator: values(e), resultName: r, nextLoc: n }, "next" === this.method && (this.arg = t), y; } }, e; }
  function asyncGeneratorStep(n, t, e, r, o, a, c) { try { var i = n[a](c), u = i.value; } catch (n) { return void e(n); } i.done ? t(u) : Promise.resolve(u).then(r, o); }
  function _asyncToGenerator(n) { return function () { var t = this, e = arguments; return new Promise(function (r, o) { var a = n.apply(t, e); function _next(n) { asyncGeneratorStep(a, r, o, _next, _throw, "next", n); } function _throw(n) { asyncGeneratorStep(a, r, o, _next, _throw, "throw", n); } _next(void 0); }); }; }
  function _classPrivateMethodInitSpec(e, a) { _checkPrivateRedeclaration(e, a), a.add(e); }
  function _classPrivateFieldInitSpec(e, t, a) { _checkPrivateRedeclaration(e, t), t.set(e, a); }
  function _checkPrivateRedeclaration(e, t) { if (t.has(e)) throw new TypeError("Cannot initialize the same private elements twice on an object"); }
  function _classPrivateFieldSet(s, a, r) { return s.set(_assertClassBrand(s, a), r), r; }
  function _classPrivateFieldGet(s, a) { return s.get(_assertClassBrand(s, a)); }
  function _assertClassBrand(e, t, n) { if ("function" == typeof e ? e === t : e.has(t)) return arguments.length < 3 ? t : n; throw new TypeError("Private element is not present on this object"); }
  function _classCallCheck(a, n) { if (!(a instanceof n)) throw new TypeError("Cannot call a class as a function"); }
  function _defineProperties(e, r) { for (var t = 0; t < r.length; t++) { var o = r[t]; o.enumerable = o.enumerable || !1, o.configurable = !0, "value" in o && (o.writable = !0), Object.defineProperty(e, _toPropertyKey(o.key), o); } }
  function _createClass(e, r, t) { return r && _defineProperties(e.prototype, r), Object.defineProperty(e, "prototype", { writable: !1 }), e; }
  function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == _typeof$2(i) ? i : i + ""; }
  function _toPrimitive(t, r) { if ("object" != _typeof$2(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r); if ("object" != _typeof$2(i)) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return (String )(t); }
  function _callSuper(t, o, e) { return o = _getPrototypeOf(o), _possibleConstructorReturn(t, _isNativeReflectConstruct() ? Reflect.construct(o, e || [], _getPrototypeOf(t).constructor) : o.apply(t, e)); }
  function _possibleConstructorReturn(t, e) { if (e && ("object" == _typeof$2(e) || "function" == typeof e)) return e; if (void 0 !== e) throw new TypeError("Derived constructors may only return object or undefined"); return _assertThisInitialized(t); }
  function _assertThisInitialized(e) { if (void 0 === e) throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); return e; }
  function _isNativeReflectConstruct() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct = function _isNativeReflectConstruct() { return !!t; })(); }
  function _getPrototypeOf(t) { return _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function (t) { return t.__proto__ || Object.getPrototypeOf(t); }, _getPrototypeOf(t); }
  function _inherits(t, e) { if ("function" != typeof e && null !== e) throw new TypeError("Super expression must either be null or a function"); t.prototype = Object.create(e && e.prototype, { constructor: { value: t, writable: !0, configurable: !0 } }), Object.defineProperty(t, "prototype", { writable: !1 }), e && _setPrototypeOf(t, e); }
  function _setPrototypeOf(t, e) { return _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function (t, e) { return t.__proto__ = e, t; }, _setPrototypeOf(t, e); }
  var _temp_div = document.createElement('div');
  var _div2 = document.createElement('div');
  var $$2 = function $(html) {
    var elems = render_html(html);
    if (!elems) return null;
    return Array.isArray(elems) ? elems : [elems];
  };
  var textarea_input_events = ["input", "propertychange", "paste"];
  var entity_table = {
    34: 'quot',
    38: 'amp',
    39: 'apos',
    60: 'lt',
    62: 'gt',
    160: 'nbsp',
    161: 'iexcl',
    162: 'cent',
    163: 'pound',
    164: 'curren',
    165: 'yen',
    166: 'brvbar',
    167: 'sect',
    168: 'uml',
    169: 'copy',
    170: 'ordf',
    171: 'laquo',
    172: 'not',
    173: 'shy',
    174: 'reg',
    175: 'macr',
    176: 'deg',
    177: 'plusmn',
    178: 'sup2',
    179: 'sup3',
    180: 'acute',
    181: 'micro',
    182: 'para',
    183: 'middot',
    184: 'cedil',
    185: 'sup1',
    186: 'ordm',
    187: 'raquo',
    188: 'frac14',
    189: 'frac12',
    190: 'frac34',
    191: 'iquest',
    192: 'Agrave',
    193: 'Aacute',
    194: 'Acirc',
    195: 'Atilde',
    196: 'Auml',
    197: 'Aring',
    198: 'AElig',
    199: 'Ccedil',
    200: 'Egrave',
    201: 'Eacute',
    202: 'Ecirc',
    203: 'Euml',
    204: 'Igrave',
    205: 'Iacute',
    206: 'Icirc',
    207: 'Iuml',
    208: 'ETH',
    209: 'Ntilde',
    210: 'Ograve',
    211: 'Oacute',
    212: 'Ocirc',
    213: 'Otilde',
    214: 'Ouml',
    215: 'times',
    216: 'Oslash',
    217: 'Ugrave',
    218: 'Uacute',
    219: 'Ucirc',
    220: 'Uuml',
    221: 'Yacute',
    222: 'THORN',
    223: 'szlig',
    224: 'agrave',
    225: 'aacute',
    226: 'acirc',
    227: 'atilde',
    228: 'auml',
    229: 'aring',
    230: 'aelig',
    231: 'ccedil',
    232: 'egrave',
    233: 'eacute',
    234: 'ecirc',
    235: 'euml',
    236: 'igrave',
    237: 'iacute',
    238: 'icirc',
    239: 'iuml',
    240: 'eth',
    241: 'ntilde',
    242: 'ograve',
    243: 'oacute',
    244: 'ocirc',
    245: 'otilde',
    246: 'ouml',
    247: 'divide',
    248: 'oslash',
    249: 'ugrave',
    250: 'uacute',
    251: 'ucirc',
    252: 'uuml',
    253: 'yacute',
    254: 'thorn',
    255: 'yuml',
    402: 'fnof',
    913: 'Alpha',
    914: 'Beta',
    915: 'Gamma',
    916: 'Delta',
    917: 'Epsilon',
    918: 'Zeta',
    919: 'Eta',
    920: 'Theta',
    921: 'Iota',
    922: 'Kappa',
    923: 'Lambda',
    924: 'Mu',
    925: 'Nu',
    926: 'Xi',
    927: 'Omicron',
    928: 'Pi',
    929: 'Rho',
    931: 'Sigma',
    932: 'Tau',
    933: 'Upsilon',
    934: 'Phi',
    935: 'Chi',
    936: 'Psi',
    937: 'Omega',
    945: 'alpha',
    946: 'beta',
    947: 'gamma',
    948: 'delta',
    949: 'epsilon',
    950: 'zeta',
    951: 'eta',
    952: 'theta',
    953: 'iota',
    954: 'kappa',
    955: 'lambda',
    956: 'mu',
    957: 'nu',
    958: 'xi',
    959: 'omicron',
    960: 'pi',
    961: 'rho',
    962: 'sigmaf',
    963: 'sigma',
    964: 'tau',
    965: 'upsilon',
    966: 'phi',
    967: 'chi',
    968: 'psi',
    969: 'omega',
    977: 'thetasym',
    978: 'upsih',
    982: 'piv',
    8226: 'bull',
    8230: 'hellip',
    8242: 'prime',
    8243: 'Prime',
    8254: 'oline',
    8260: 'frasl',
    8472: 'weierp',
    8465: 'image',
    8476: 'real',
    8482: 'trade',
    8501: 'alefsym',
    8592: 'larr',
    8593: 'uarr',
    8594: 'rarr',
    8595: 'darr',
    8596: 'harr',
    8629: 'crarr',
    8656: 'lArr',
    8657: 'uArr',
    8658: 'rArr',
    8659: 'dArr',
    8660: 'hArr',
    8704: 'forall',
    8706: 'part',
    8707: 'exist',
    8709: 'empty',
    8711: 'nabla',
    8712: 'isin',
    8713: 'notin',
    8715: 'ni',
    8719: 'prod',
    8721: 'sum',
    8722: 'minus',
    8727: 'lowast',
    8730: 'radic',
    8733: 'prop',
    8734: 'infin',
    8736: 'ang',
    8743: 'and',
    8744: 'or',
    8745: 'cap',
    8746: 'cup',
    8747: 'int',
    8756: 'there4',
    8764: 'sim',
    8773: 'cong',
    8776: 'asymp',
    8800: 'ne',
    8801: 'equiv',
    8804: 'le',
    8805: 'ge',
    8834: 'sub',
    8835: 'sup',
    8836: 'nsub',
    8838: 'sube',
    8839: 'supe',
    8853: 'oplus',
    8855: 'otimes',
    8869: 'perp',
    8901: 'sdot',
    8968: 'lceil',
    8969: 'rceil',
    8970: 'lfloor',
    8971: 'rfloor',
    9001: 'lang',
    9002: 'rang',
    9674: 'loz',
    9824: 'spades',
    9827: 'clubs',
    9829: 'hearts',
    9830: 'diams',
    338: 'OElig',
    339: 'oelig',
    352: 'Scaron',
    353: 'scaron',
    376: 'Yuml',
    710: 'circ',
    732: 'tilde',
    8194: 'ensp',
    8195: 'emsp',
    8201: 'thinsp',
    8204: 'zwnj',
    8205: 'zwj',
    8206: 'lrm',
    8207: 'rlm',
    8211: 'ndash',
    8212: 'mdash',
    8216: 'lsquo',
    8217: 'rsquo',
    8218: 'sbquo',
    8220: 'ldquo',
    8221: 'rdquo',
    8222: 'bdquo',
    8224: 'dagger',
    8225: 'Dagger',
    8240: 'permil',
    8249: 'lsaquo',
    8250: 'rsaquo',
    8364: 'euro'
  };

  /* new MutationObserver(mutations => {
      Array.from(mutations).forEach(mutation => {
          Array.from(mutation.addedNodes).forEach(node => {
              if (node.matches("textarea[autosize]")) new AutoSizeController(node);
          });
          Array.from(mutation.removedNodes).forEach(node => {
              if (node.matches("textarea[autosize]")) node.__autosize__.destroy()
          });
      });
  }).observe(document.body, { childList: true }); */
  var TouchListener = /*#__PURE__*/function (_utils$EventEmitter) {
    function TouchListener(elem, user_settings) {
      var _this;
      _classCallCheck(this, TouchListener);
      _this = _callSuper(this, TouchListener);
      var settings = {
        mode: "normal",
        start: function start(e) {},
        move: function move(e) {},
        end: function end(e) {}
      };
      elem.style["touch-actions"] = "none";
      Object.assign(settings, user_settings);
      _this.elem = elem;
      var end_target = window.document;
      var start_events = ["pointerdown"];
      var move_events = ["pointermove"];
      var end_events = ["pointerup"];
      if (settings.mode == "hover") {
        start_events = ["pointerover"];
        end_events = ["pointerout"];
        end_target = _this.elem;
      }
      var _on_touch_start = function _on_touch_start(e) {
        // VERY NECESSARY!
        e.preventDefault();
      };
      var _on_start = function _on_start(e) {
        if (e.pointerId && settings.mode != "hover") {
          if (e.button != 0) return;
          _this.elem.setPointerCapture(e.pointerId);
          _this.elem.addEventListener("lostpointercapture", _on_end);
        }
        e.stopPropagation();
        e.preventDefault();
        settings.start(e);
        move_events.forEach(function (et) {
          return window.addEventListener(et, _on_move);
        });
        end_events.forEach(function (et) {
          return end_target.addEventListener(et, _on_end);
        });
      };
      var _on_move = function _on_move(e) {
        // console.log(e.type, e);
        settings.move(e);
      };
      var _on_end = function _on_end(e) {
        // console.log(e.type, e);
        settings.end(e);
        cleanup();
      };
      var cleanup = function cleanup() {
        _this.elem.removeEventListener("lostpointercapture", _on_end);
        move_events.forEach(function (et) {
          return window.removeEventListener(et, _on_move);
        });
        end_events.forEach(function (et) {
          return end_target.removeEventListener(et, _on_end);
        });
      };
      _this._destroy = function () {
        _this.elem.removeEventListener("touchstart", _on_touch_start);
        start_events.forEach(function (et) {
          return _this.elem.removeEventListener(et, _on_start);
        });
        cleanup();
      };
      start_events.forEach(function (et) {
        return _this.elem.addEventListener(et, _on_start);
      });
      _this.elem.addEventListener("touchstart", _on_touch_start);
      return _this;
    }
    _inherits(TouchListener, _utils$EventEmitter);
    return _createClass(TouchListener, [{
      key: "destroy",
      value: function destroy() {
        this._destroy();
      }
    }]);
  }(EventEmitter);
  var AutoSizeController = /*#__PURE__*/function (_utils$EventEmitter2) {
    function AutoSizeController(elem, min_rows) {
      var _this2;
      var auto_update = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;
      _classCallCheck(this, AutoSizeController);
      _this2 = _callSuper(this, AutoSizeController);
      _this2.elem = elem;
      _this2.min_rows = min_rows || 1;
      _this2.on_change = function (e) {
        _this2.update();
      };
      _this2.debounced_update = debounce$4(function () {
        return _this2.update();
      }, 50);
      textarea_input_events.forEach(function (ev) {
        return _this2.elem.addEventListener(ev, _this2.on_change);
      });
      if (auto_update) {
        window.addEventListener("resize", _this2.debounced_update);
        var fs;
        _this2.check_interval = setInterval(function () {
          var new_fs = getComputedStyle(elem).getPropertyValue("font-size");
          if (new_fs !== fs) _this2.update();
          fs = new_fs;
        }, 200);
      }
      elem.__autosize__ = _this2;
      _this2.update();
      return _this2;
    }
    _inherits(AutoSizeController, _utils$EventEmitter2);
    return _createClass(AutoSizeController, [{
      key: "update",
      value: function update() {
        this.emit("pre-update");
        autosize(this.elem, this.min_rows);
        this.emit("post_update");
      }
    }, {
      key: "destroy",
      value: function destroy() {
        var _this3 = this;
        delete elem.__autosize__;
        clearInterval(this.check_interval);
        this.input_events.forEach(function (ev) {
          return _this3.elem.removeEventListener(ev, _this3.on_change);
        });
        window.removeEventListener("resize", this.debounced_update);
      }
    }]);
  }(EventEmitter); // var LocalStorageDeleted = Symbol("LocalStorageDeleted");
  var _name = /*#__PURE__*/new WeakMap();
  var _data = /*#__PURE__*/new WeakMap();
  var _defaults = /*#__PURE__*/new WeakMap();
  var _last_data_hash = /*#__PURE__*/new WeakMap();
  var _interval = /*#__PURE__*/new WeakMap();
  var _LocalStorageBucket_brand = /*#__PURE__*/new WeakSet();
  var LocalStorageBucket = /*#__PURE__*/function (_utils$EventEmitter3) {
    function LocalStorageBucket(name, defaults) {
      var _this4;
      _classCallCheck(this, LocalStorageBucket);
      _this4 = _callSuper(this, LocalStorageBucket);
      _classPrivateMethodInitSpec(_this4, _LocalStorageBucket_brand);
      _classPrivateFieldInitSpec(_this4, _name, void 0);
      _classPrivateFieldInitSpec(_this4, _data, {});
      _classPrivateFieldInitSpec(_this4, _defaults, void 0);
      _classPrivateFieldInitSpec(_this4, _last_data_hash, void 0);
      _classPrivateFieldInitSpec(_this4, _interval, void 0);
      _this4.save = debounce$4(_assertClassBrand(_LocalStorageBucket_brand, _this4, _save), 0);
      _classPrivateFieldSet(_name, _this4, name);
      _classPrivateFieldSet(_defaults, _this4, defaults ? deep_copy(defaults) : {});
      // in case it is altered in another window.
      _classPrivateFieldSet(_interval, _this4, setInterval(function () {
        return _this4.load();
      }, 2000));
      _this4.load();
      return _this4;
    }
    _inherits(LocalStorageBucket, _utils$EventEmitter3);
    return _createClass(LocalStorageBucket, [{
      key: "$",
      get: function get() {
        return this.data;
      }
    }, {
      key: "data",
      get: function get() {
        return Object.assign({}, this.defaults, _classPrivateFieldGet(_data, this));
      }
    }, {
      key: "keys",
      get: function get() {
        return Object.keys(this.data);
      }
    }, {
      key: "defaults",
      get: function get() {
        return _classPrivateFieldGet(_defaults, this);
      }
    }, {
      key: "get",
      value: function get(k) {
        return k in _classPrivateFieldGet(_data, this) ? _classPrivateFieldGet(_data, this)[k] : _classPrivateFieldGet(_defaults, this)[k];
      }
    }, {
      key: "set",
      value: function set(k, new_value) {
        var new_hash = JSON.stringify(new_value);
        var old_value = _classPrivateFieldGet(_data, this)[k];
        var old_hash = JSON.stringify(old_value);
        var default_hash = JSON.stringify(_classPrivateFieldGet(_defaults, this)[k]);
        if (new_hash === old_hash) return;
        if (new_hash === default_hash) delete _classPrivateFieldGet(_data, this)[k];else _classPrivateFieldGet(_data, this)[k] = new_value;
        this.emit("change", {
          name: k,
          old_value: old_value,
          new_value: new_value
        });
        this.save();
      }
    }, {
      key: "unset",
      value: function unset(k) {
        if (!(k in _classPrivateFieldGet(_data, this))) return;
        this.set(k, _classPrivateFieldGet(_defaults, this)[k]);
      }
    }, {
      key: "toggle",
      value: function toggle(k) {
        this.set(k, !this.get(k));
      }
    }, {
      key: "load",
      value: function load() {
        var reset = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;
        var new_values;
        try {
          new_values = JSON.parse(localStorage.getItem(_classPrivateFieldGet(_name, this)));
        } catch (_unused) {
          return;
        }
        if (reset) clear(_classPrivateFieldGet(_data, this));
        for (var k in new_values) {
          if (k in _classPrivateFieldGet(_defaults, this)) {
            this.set(k, new_values[k]);
          } else {
            console.warn("LocalStorageBucket '".concat(_classPrivateFieldGet(_name, this), "' key '").concat(k, "' not defined in defaults."));
          }
        }
      }
    }, {
      key: "destroy",
      value: function destroy() {
        clearInterval(_classPrivateFieldGet(_interval, this));
      }
    }]);
  }(EventEmitter);
  function _save() {
    _classPrivateFieldSet(_last_data_hash, this, JSON.stringify(_classPrivateFieldGet(_data, this)));
    localStorage.setItem(_classPrivateFieldGet(_name, this), _classPrivateFieldGet(_last_data_hash, this));
  }
  var WebSocket2 = /*#__PURE__*/function (_utils$EventEmitter4) {
    function WebSocket2(url) {
      var _this5;
      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
      _classCallCheck(this, WebSocket2);
      _this5 = _callSuper(this, WebSocket2);
      _this5.url = url;
      _this5.options = Object.assign({
        auto_reconnect: true,
        auto_reconnect_interval: 1000
      }, options);
      _this5._init_websocket();
      return _this5;
    }
    _inherits(WebSocket2, _utils$EventEmitter4);
    return _createClass(WebSocket2, [{
      key: "requests",
      get: function get() {
        return this._requests;
      }
    }, {
      key: "ready_state",
      get: function get() {
        return this.ws.readyState;
      }
    }, {
      key: "ready_promise",
      get: function get() {
        var _this6 = this;
        return this.ws.readyState === WebSocket.OPEN ? Promise.resolve(true) : new Promise(function (resolve) {
          return _this6.once("open", resolve);
        });
      }
    }, {
      key: "request",
      value: function request(data, timeout) {
        var _this7 = this;
        return new Promise(function (resolve, reject) {
          var rid = ++_this7._requests;
          _this7._request_ids[rid] = function (response) {
            if (response.error) reject(response.error.message);else resolve(response.result);
          };
          _this7.send(Object.assign({
            __id__: rid
          }, data));
          setTimeout(function () {
            return reject("WebSocket2 request ".concat(rid, " timed out"));
          }, timeout);
        })["catch"](function (e) {
          return console.error(e);
        });
      }
    }, {
      key: "send",
      value: function () {
        var _send = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee(data) {
          return _regeneratorRuntime().wrap(function _callee$(_context) {
            while (1) switch (_context.prev = _context.next) {
              case 0:
                _context.next = 2;
                return this.ready_promise;
              case 2:
                if (data instanceof ArrayBuffer || data instanceof Blob) {
                  this.ws.send(data);
                } else {
                  this.ws.send(JSON.stringify(data));
                }
              case 3:
              case "end":
                return _context.stop();
            }
          }, _callee, this);
        }));
        function send(_x) {
          return _send.apply(this, arguments);
        }
        return send;
      }()
    }, {
      key: "_init_websocket",
      value: function _init_websocket() {
        var _this8 = this;
        this._request_ids = {};
        this._requests = 0;
        var url = this.url;
        var protocols = this.protocols;
        if (typeof url === "function") url = url();
        if (typeof protocols === "function") protocols = protocols();
        this.ws = new WebSocket(url, protocols);
        this.emit("connecting");
        var try_reconnect = function try_reconnect() {
          if (!_this8.options.auto_reconnect) return;
          clearTimeout(_this8._reconnect_timeout);
          _this8._reconnect_timeout = setTimeout(function () {
            _this8._init_websocket();
          }, _this8.options.auto_reconnect_interval);
        };
        this.ws.addEventListener("open", function (e) {
          clearTimeout(_this8._reconnect_timeout);
          _this8.emit("open", e);
        });
        this.ws.addEventListener("message", function (e) {
          _this8.emit("message", e);
          if (e.data === "ping") {
            _this8.ws.send("pong");
            return;
          }
          var data;
          try {
            data = JSON.parse(e.data);
          } catch (ex) {
            console.error(ex);
            return;
          }
          if (data && data.__id__ !== undefined) {
            var cb = _this8._request_ids[data.__id__];
            delete _this8._request_ids[data.__id__];
            cb(data);
          }
          _this8.emit("data", data);
          // this event always runs before cb() promise as promises resolve later in another (pseudo) thread.
          // setTimeout(()=>this.emit("data", data), 0);
        });
        this.ws.addEventListener("close", function (e) {
          _this8.emit("close", e);
          if (e.code == 1014) {
            // bad gateway, don't bother.
            console.error("Connection refused: Bad gateway.");
          } else {
            try_reconnect();
          }
        });
        this.ws.addEventListener("error", function (e) {
          _this8.emit("error", e);
        });
      }
    }]);
  }(EventEmitter); // depends on tippy js
  var UI = /*#__PURE__*/function (_utils$EventEmitter5) {
    // get_children() { return UI.find(this.elem, UI, false); }
    // get_descendents() { return UI.find(this.elem, UI, true); }
    // get_parents() { return UI.parents(this.elem); }

    function UI(elem, settings) {
      var _this9;
      _classCallCheck(this, UI);
      _this9 = _callSuper(this, UI);
      /** @type {Set<UI>} */
      _defineProperty$2(_this9, "_children", new Set());
      /** @type {UI} */
      _defineProperty$2(_this9, "_parent", void 0);
      _this9.__UID__ = ++UI.id;
      if (typeof elem === "string") elem = $$2(elem)[0];
      if (elem instanceof Document) elem = elem.body;
      if (!(elem instanceof Element) && !settings) {
        settings = elem;
        elem = null;
      }
      if (!elem) elem = document.createElement('div');
      /** @type {HTMLElement} */
      _this9.elem = elem;
      _this9.elem[UI.expando] = _this9;
      _this9.elem.classList.add(UI.pre);
      _this9.settings = Object.assign({}, settings);
      if ("class" in _this9.settings) {
        var _this9$elem$classList;
        var classes = _this9.get_setting("class");
        if (typeof classes === "string") classes = classes.split(/\s+/);
        (_this9$elem$classList = _this9.elem.classList).add.apply(_this9$elem$classList, _toConsumableArray$2(classes));
      }

      // this.__update_display();

      // this.update();
      _this9.update_next_frame = debounce_next_frame(function () {
        _this9.update();
      });
      // this.update_next_frame();

      if (_this9.elem.isConnected) {
        _this9.root.register(_this9);
      }
      _this9.init();
      _this9.get_setting("init");
      return _this9;
    }
    _inherits(UI, _utils$EventEmitter5);
    return _createClass(UI, [{
      key: "disabled",
      get: function get() {
        // var parent = this.parent;
        var disabled = !!this.get_setting("disabled");
        return disabled;
      },
      set: function set(value) {
        if (this.settings.disabled == value) return;
        this.settings.disabled = value;
        this.update_next_frame();
      }
    }, {
      key: "disabled_or_parent_disabled",
      get: function get() {
        return this.disabled || this.disabled_parent;
      }
    }, {
      key: "disabled_parent",
      get: function get() {
        var parent = this.parent;
        return parent ? parent.disabled_or_parent_disabled : false;
      }
    }, {
      key: "hidden",
      get: function get() {
        return this.get_setting("hidden");
      },
      set: function set(value) {
        if (this.settings.hidden == value) return;
        this.settings.hidden = value;
        this.update_next_frame();
        // this.debounced_update();
      }
    }, {
      key: "root",
      get: function get() {
        return this.get_closest(UI.Root);
      }
    }, {
      key: "visible",
      get: function get() {
        return is_visible(this.elem);
      } // not the opposite of hidden
    }, {
      key: "children",
      get: function get() {
        return _toConsumableArray$2(this.get_children());
      }
    }, {
      key: "descendents",
      get: function get() {
        return _toConsumableArray$2(this.get_descendents());
      }
    }, {
      key: "parents",
      get: function get() {
        return _toConsumableArray$2(this.get_parents());
      }
    }, {
      key: "parent",
      get: function get() {
        return this._parent;
      }
    }, {
      key: "id",
      get: function get() {
        return this.__UID__;
      }
    }, {
      key: "style",
      get: function get() {
        return this.elem.style;
      }
    }, {
      key: "get_children",
      value: /*#__PURE__*/_regeneratorRuntime().mark(function get_children() {
        var _iterator, _step, c;
        return _regeneratorRuntime().wrap(function get_children$(_context2) {
          while (1) switch (_context2.prev = _context2.next) {
            case 0:
              _iterator = _createForOfIteratorHelper(this._children);
              _context2.prev = 1;
              _iterator.s();
            case 3:
              if ((_step = _iterator.n()).done) {
                _context2.next = 9;
                break;
              }
              c = _step.value;
              _context2.next = 7;
              return c;
            case 7:
              _context2.next = 3;
              break;
            case 9:
              _context2.next = 14;
              break;
            case 11:
              _context2.prev = 11;
              _context2.t0 = _context2["catch"](1);
              _iterator.e(_context2.t0);
            case 14:
              _context2.prev = 14;
              _iterator.f();
              return _context2.finish(14);
            case 17:
            case "end":
              return _context2.stop();
          }
        }, get_children, this, [[1, 11, 14, 17]]);
      }) /** @return {Generator<UI>} */
    }, {
      key: "get_descendents",
      value:
      /*#__PURE__*/
      _regeneratorRuntime().mark(function get_descendents() {
        var _iterator2, _step2, c, _iterator3, _step3, gc;
        return _regeneratorRuntime().wrap(function get_descendents$(_context3) {
          while (1) switch (_context3.prev = _context3.next) {
            case 0:
              _iterator2 = _createForOfIteratorHelper(this._children);
              _context3.prev = 1;
              _iterator2.s();
            case 3:
              if ((_step2 = _iterator2.n()).done) {
                _context3.next = 26;
                break;
              }
              c = _step2.value;
              _context3.next = 7;
              return c;
            case 7:
              _iterator3 = _createForOfIteratorHelper(c.get_descendents());
              _context3.prev = 8;
              _iterator3.s();
            case 10:
              if ((_step3 = _iterator3.n()).done) {
                _context3.next = 16;
                break;
              }
              gc = _step3.value;
              _context3.next = 14;
              return gc;
            case 14:
              _context3.next = 10;
              break;
            case 16:
              _context3.next = 21;
              break;
            case 18:
              _context3.prev = 18;
              _context3.t0 = _context3["catch"](8);
              _iterator3.e(_context3.t0);
            case 21:
              _context3.prev = 21;
              _iterator3.f();
              return _context3.finish(21);
            case 24:
              _context3.next = 3;
              break;
            case 26:
              _context3.next = 31;
              break;
            case 28:
              _context3.prev = 28;
              _context3.t1 = _context3["catch"](1);
              _iterator2.e(_context3.t1);
            case 31:
              _context3.prev = 31;
              _iterator2.f();
              return _context3.finish(31);
            case 34:
            case "end":
              return _context3.stop();
          }
        }, get_descendents, this, [[1, 28, 31, 34], [8, 18, 21, 24]]);
      })
    }, {
      key: "get_parents",
      value: /*#__PURE__*/_regeneratorRuntime().mark(function get_parents() {
        var p;
        return _regeneratorRuntime().wrap(function get_parents$(_context4) {
          while (1) switch (_context4.prev = _context4.next) {
            case 0:
              p = this._parent;
            case 1:
              if (!p) {
                _context4.next = 7;
                break;
              }
              _context4.next = 4;
              return p;
            case 4:
              p = p._parent;
              _context4.next = 1;
              break;
            case 7:
            case "end":
              return _context4.stop();
          }
        }, get_parents, this);
      }) /** @template [T=UI] @param {new() => T} type @returns {T} */
    }, {
      key: "get_closest",
      value: function get_closest() {
        var type = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : UI;
        return UI.closest(this.elem, type);
      }
    }, {
      key: "init",
      value: function init() {}
    }, {
      key: "update",
      value: function update() {
        this.emit("pre_update");
        this.__update_display();
        this.get_setting("update");
        this.emit("update");
        var _iterator4 = _createForOfIteratorHelper(this._children),
          _step4;
        try {
          for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {
            var c = _step4.value;
            c.update();
          }
        } catch (err) {
          _iterator4.e(err);
        } finally {
          _iterator4.f();
        }
        this.get_setting("post_update");
        this.emit("post_update");
      }
    }, {
      key: "update_settings",
      value: function update_settings(settings) {
        Object.assign(this.settings, settings);
        this.update_next_frame();
      }
    }, {
      key: "__update_display",
      value: function __update_display() {
        var _this10 = this;
        var hidden = this.hidden;
        if (hidden !== undefined) toggle_class(this.elem, "d-none", hidden);
        toggle_attribute(this.elem, "disabled", !!this.disabled_or_parent_disabled);

        /* var _class = this.class.join(" ");
        if ("class" in this.settings) {
            var c = this.get_setting("class");
            _class += " "+(typeof c === "string" ? c : c.join(" "));
        }
        if (_class !== this.__last_class) {
            this.__last_class = _class; // I hate this so much
            this.elem.className = _class;
        } */

        if ("gap" in this.settings) {
          var gap = this.get_setting("gap");
          if (typeof gap !== "string" || gap.match(/^[0-9.]+$/)) gap = "".concat(parseFloat(gap), "px");
          this.elem.style.setProperty("gap", gap);
        }
        if ("title" in this.settings) this.elem.title = this.get_setting("title");
        if ("display" in this.settings) this.elem.style.display = this.get_setting("display");
        if ("align" in this.settings) this.elem.style.alignItems = this.get_setting("align");
        if ("justify" in this.settings) this.elem.style.justifyContent = this.get_setting("justify");
        if ("flex" in this.settings) this.elem.style.flex = this.get_setting("flex");
        if ("id" in this.settings) this.elem.id = this.get_setting("id");
        if ("children" in this.settings) set_children(this.elem, this.get_setting("children"));
        if ("content" in this.settings) set_inner_html(this.elem, this.get_setting("content"));
        if ("click" in this.settings) this.elem.onclick = function (e) {
          var r = _this10.get_setting("click", e);
          _this10.emit("click");
          return r;
        };
        if ("mousedown" in this.settings) this.elem.onmousedown = function (e) {
          var r = _this10.get_setting("mousedown", e);
          _this10.emit("mousedown");
          return r;
        };
        if ("mouseup" in this.settings) this.elem.onmouseup = function (e) {
          var r = _this10.get_setting("mouseup", e);
          _this10.emit("mouseup");
          return r;
        };
        if ("dblclick" in this.settings) this.elem.ondblclick = function (e) {
          var r = _this10.get_setting("dblclick", e);
          _this10.emit("dblclick");
          return r;
        };
      }
    }, {
      key: "get_setting",
      value: function get_setting(key) {
        var setting = this.settings[key];
        if (typeof setting === "function") {
          for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
            args[_key - 1] = arguments[_key];
          }
          setting = setting.apply(this, args);
        }
        return setting;
      }
    }, {
      key: "get_settings_group",
      value: function get_settings_group(key) {
        return Object.fromEntries(Object.entries(this.settings).filter(function (_ref) {
          var _ref2 = _slicedToArray(_ref, 2),
            k = _ref2[0];
            _ref2[1];
          return k.startsWith(key + ".");
        }).map(function (_ref3) {
          var _ref4 = _slicedToArray(_ref3, 2),
            k = _ref4[0],
            v = _ref4[1];
          return [k.slice(key.length + 1), v];
        }));
      }
    }, {
      key: "empty",
      value: function empty() {
        _empty(this.elem);
        return this;
      }
      /** @template T @param {T} el @returns {T} */
    }, {
      key: "append",
      value: function append(el) {
        var _this$elem;
        (_this$elem = this.elem).append.apply(_this$elem, arguments);
        return el;
      }
      /** @template T @param {T} el @returns {T} */
    }, {
      key: "prepend",
      value: function prepend(el) {
        var _this$elem2;
        (_this$elem2 = this.elem).prepend.apply(_this$elem2, arguments);
        return el;
      }
    }, {
      key: "destroy",
      value: function destroy() {
        if (this.elem) this.elem.remove();
        this.emit("destroy");
      }
    }, {
      key: "update_layout",
      value: function update_layout(layout) {
        var _this11 = this;
        var hash = JSON.stringify(layout, function (k, p) {
          return p instanceof UI ? p.id : p;
        });
        if (hash !== this._layout_hash) {
          this._layout_hash = hash;
          this.elem.innerHTML = "";
          var _process = function process(parent, layout) {
            var _iterator5 = _createForOfIteratorHelper(layout),
              _step5;
            try {
              for (_iterator5.s(); !(_step5 = _iterator5.n()).done;) {
                var o = _step5.value;
                if (Array.isArray(o)) {
                  var r = _this11.append(new UI.FlexRow({
                    "hidden": function hidden() {
                      return this.children.every(function (c) {
                        return c.hidden;
                      });
                    }
                  }));
                  _process(r, o);
                } else if (typeof o === "string" && o.startsWith("-")) {
                  _this11.append(new UI.Separator());
                } else if (o) {
                  parent.append(o);
                }
              }
            } catch (err) {
              _iterator5.e(err);
            } finally {
              _iterator5.f();
            }
          };
          _process(this, layout);
        }
        this.update_next_frame();
      }

      /* clone() {
          return new this.constructor(elem, settings);
      } */
    }]);
  }(EventEmitter);
  UI.id = 0;
  UI.pre = "uis";
  UI.expando = "".concat(UI.pre, "-").concat(Date.now());
  var old_append = Element.prototype.append;
  var old_prepend = Element.prototype.prepend;

  // UI.creating = 0;
  /* UI.create = function(...args) {
      var oc = ++UI.creating;
      var ui = new this();
      if (UI.creating != oc) {
          throw new Error("Cannot initialize new UI in constructor function");
      }
      --UI.creating;
      ui.init(...args);
      return ui;
  } */

  /** @template [T=UI] @param {Element} elem @param {new() => T} type @param {function(UI):boolean|boolean} cb @param {boolean} include_self @returns {Generator<T>} */
  UI.find = function (elem) {
    var type = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : UI;
    var cb = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;
    var include_self = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;
    return /*#__PURE__*/_regeneratorRuntime().mark(function _callee2() {
      var _iterator6, _step6, c, found, check, _iterator7, _step7, sc;
      return _regeneratorRuntime().wrap(function _callee2$(_context5) {
        while (1) switch (_context5.prev = _context5.next) {
          case 0:
            if (!type) type = UI;
            if (!(include_self && elem[UI.expando] && elem[UI.expando] instanceof type)) {
              _context5.next = 4;
              break;
            }
            _context5.next = 4;
            return elem[UI.expando];
          case 4:
            if (elem.children) {
              _context5.next = 6;
              break;
            }
            return _context5.abrupt("return");
          case 6:
            _iterator6 = _createForOfIteratorHelper(elem.children);
            _context5.prev = 7;
            _iterator6.s();
          case 9:
            if ((_step6 = _iterator6.n()).done) {
              _context5.next = 36;
              break;
            }
            c = _step6.value;
            found = c[UI.expando] && c[UI.expando] instanceof type;
            if (!found) {
              _context5.next = 15;
              break;
            }
            _context5.next = 15;
            return c[UI.expando];
          case 15:
            check = typeof cb === "function" ? cb(c[UI.expando]) : !!cb;
            if (!(!found || check)) {
              _context5.next = 34;
              break;
            }
            _iterator7 = _createForOfIteratorHelper(UI.find(c, type, cb));
            _context5.prev = 18;
            _iterator7.s();
          case 20:
            if ((_step7 = _iterator7.n()).done) {
              _context5.next = 26;
              break;
            }
            sc = _step7.value;
            _context5.next = 24;
            return sc;
          case 24:
            _context5.next = 20;
            break;
          case 26:
            _context5.next = 31;
            break;
          case 28:
            _context5.prev = 28;
            _context5.t0 = _context5["catch"](18);
            _iterator7.e(_context5.t0);
          case 31:
            _context5.prev = 31;
            _iterator7.f();
            return _context5.finish(31);
          case 34:
            _context5.next = 9;
            break;
          case 36:
            _context5.next = 41;
            break;
          case 38:
            _context5.prev = 38;
            _context5.t1 = _context5["catch"](7);
            _iterator6.e(_context5.t1);
          case 41:
            _context5.prev = 41;
            _iterator6.f();
            return _context5.finish(41);
          case 44:
          case "end":
            return _context5.stop();
        }
      }, _callee2, null, [[7, 38, 41, 44], [18, 28, 31, 34]]);
    })();
  };

  // /** @template [T=UI] @param {Element} elem @param {function(UI):boolean} cb @param {boolean} recursive @param {boolean} include_self @returns {Generator<T>} */
  // UI.walk = function(elem, type=UI, cb=null, include_self=false) {
  //     var r;
  //     if (include_self && elem[UI.expando]) {
  //         r = cb(elem[UI.expando]);
  //         if (r==true) yield elem[UI.expando];
  //         if (r==false) return;
  //     }
  //     if (!elem.children) return;
  //     for (var c of elem.children) {
  //         if (c[UI.expando]) {
  //             r = cb(c[UI.expando]);
  //             if (r==true) yield c[UI.expando];
  //             if (r==false) continue;
  //         }
  //         for (var ui of UI.walk(c, cb)) yield ui;
  //     }
  // }
  /** @returns {Generator<UI>} */
  UI.parents = function (elem) {
    var include_self = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
    return /*#__PURE__*/_regeneratorRuntime().mark(function _callee3() {
      return _regeneratorRuntime().wrap(function _callee3$(_context6) {
        while (1) switch (_context6.prev = _context6.next) {
          case 0:
            if (!include_self) elem = elem.parentElement;
          case 1:
            if (!elem) {
              _context6.next = 8;
              break;
            }
            if (!elem[UI.expando]) {
              _context6.next = 5;
              break;
            }
            _context6.next = 5;
            return elem[UI.expando];
          case 5:
            elem = elem.parentElement;
            _context6.next = 1;
            break;
          case 8:
          case "end":
            return _context6.stop();
        }
      }, _callee3);
    })();
  };
  /** @returns {UI} */
  UI.parent = function (elem) {
    var _iterator8 = _createForOfIteratorHelper(UI.parents(elem)),
      _step8;
    try {
      for (_iterator8.s(); !(_step8 = _iterator8.n()).done;) {
        var ui = _step8.value;
        return ui;
      }
    } catch (err) {
      _iterator8.e(err);
    } finally {
      _iterator8.f();
    }
  };
  /** @template [T=UI] @param {Element} elem @param {new() => T} type @returns {T} */
  UI.closest = function (elem) {
    var type = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : UI;
    var _iterator9 = _createForOfIteratorHelper(UI.parents(elem, true)),
      _step9;
    try {
      for (_iterator9.s(); !(_step9 = _iterator9.n()).done;) {
        var ui = _step9.value;
        if (ui instanceof type) return ui;
      }
    } catch (err) {
      _iterator9.e(err);
    } finally {
      _iterator9.f();
    }
  };

  /* UI.merge_settings = function(...settings) {
      var o = {};
      for (var s of settings) {
          if (!s || typeof s !== "object") continue;
          for (var k in s) {
              let value = s[k];
              if (k === "class") {
                  if (typeof value === "string") {
                      value = value.split(/\s+/).filter(s=>s);
                  }
              } else if (k === "style") {
                  if (typeof value === "string") {
                      value = parse_style(value);
                  }
              }
              if (k in o) {
                  if (utils.is_plain_object(o[k])) {
                      Object.assign(o[k], value);
                      continue;
                  } else if (Array.isArray(o[k])) {
                      o[k].push(...value);
                      continue;
                  }
              }
              o[k] = value;
          }
      }
      return o;
  } */

  /** @return {Iterable<HTMLElement>} */
  var _handle_els = /*#__PURE__*/_regeneratorRuntime().mark(function handle_els(o) {
    var _iterator10, _step10, c, _iterator11, _step11, c2, _iterator12, _step12;
    return _regeneratorRuntime().wrap(function handle_els$(_context7) {
      while (1) switch (_context7.prev = _context7.next) {
        case 0:
          if (!Array.isArray(o)) {
            _context7.next = 35;
            break;
          }
          _iterator10 = _createForOfIteratorHelper(o);
          _context7.prev = 2;
          _iterator10.s();
        case 4:
          if ((_step10 = _iterator10.n()).done) {
            _context7.next = 25;
            break;
          }
          c = _step10.value;
          _iterator11 = _createForOfIteratorHelper(_handle_els(c));
          _context7.prev = 7;
          _iterator11.s();
        case 9:
          if ((_step11 = _iterator11.n()).done) {
            _context7.next = 15;
            break;
          }
          c2 = _step11.value;
          _context7.next = 13;
          return c2;
        case 13:
          _context7.next = 9;
          break;
        case 15:
          _context7.next = 20;
          break;
        case 17:
          _context7.prev = 17;
          _context7.t0 = _context7["catch"](7);
          _iterator11.e(_context7.t0);
        case 20:
          _context7.prev = 20;
          _iterator11.f();
          return _context7.finish(20);
        case 23:
          _context7.next = 4;
          break;
        case 25:
          _context7.next = 30;
          break;
        case 27:
          _context7.prev = 27;
          _context7.t1 = _context7["catch"](2);
          _iterator10.e(_context7.t1);
        case 30:
          _context7.prev = 30;
          _iterator10.f();
          return _context7.finish(30);
        case 33:
          _context7.next = 63;
          break;
        case 35:
          if (!(o instanceof UI)) {
            _context7.next = 40;
            break;
          }
          _context7.next = 38;
          return o.elem;
        case 38:
          _context7.next = 63;
          break;
        case 40:
          if (!(typeof o === "string")) {
            _context7.next = 60;
            break;
          }
          _iterator12 = _createForOfIteratorHelper($$2(o));
          _context7.prev = 42;
          _iterator12.s();
        case 44:
          if ((_step12 = _iterator12.n()).done) {
            _context7.next = 50;
            break;
          }
          c = _step12.value;
          _context7.next = 48;
          return c;
        case 48:
          _context7.next = 44;
          break;
        case 50:
          _context7.next = 55;
          break;
        case 52:
          _context7.prev = 52;
          _context7.t2 = _context7["catch"](42);
          _iterator12.e(_context7.t2);
        case 55:
          _context7.prev = 55;
          _iterator12.f();
          return _context7.finish(55);
        case 58:
          _context7.next = 63;
          break;
        case 60:
          if (!o) {
            _context7.next = 63;
            break;
          }
          _context7.next = 63;
          return o;
        case 63:
        case "end":
          return _context7.stop();
      }
    }, handle_els, null, [[2, 27, 30, 33], [7, 17, 20, 23], [42, 52, 55, 58]]);
  });
  Element.prototype.append = function () {
    for (var _len2 = arguments.length, children = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
      children[_key2] = arguments[_key2];
    }
    old_append.apply(this, _toConsumableArray$2(_handle_els(children)));
  };
  Element.prototype.prepend = function () {
    for (var _len3 = arguments.length, children = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {
      children[_key3] = arguments[_key3];
    }
    old_prepend.apply(this, _toConsumableArray$2(_handle_els(children)));
  };
  UI.Column = /*#__PURE__*/function (_UI2) {
    function Column() {
      _classCallCheck(this, Column);
      return _callSuper(this, Column, arguments);
    }
    _inherits(Column, _UI2);
    return _createClass(Column, [{
      key: "init",
      value: function init() {
        _superPropGet(Column, "init", this)([]);
        this.elem.classList.add("column");
      }
    }]);
  }(UI);
  UI.FlexColumn = /*#__PURE__*/function (_UI3) {
    function FlexColumn() {
      _classCallCheck(this, FlexColumn);
      return _callSuper(this, FlexColumn, arguments);
    }
    _inherits(FlexColumn, _UI3);
    return _createClass(FlexColumn, [{
      key: "init",
      value: function init() {
        _superPropGet(FlexColumn, "init", this)([]);
        this.elem.classList.add("flex", "column");
      }
    }]);
  }(UI);
  UI.Row = /*#__PURE__*/function (_UI4) {
    function Row() {
      _classCallCheck(this, Row);
      return _callSuper(this, Row, arguments);
    }
    _inherits(Row, _UI4);
    return _createClass(Row, [{
      key: "init",
      value: function init() {
        _superPropGet(Row, "init", this)([]);
        this.elem.classList.add("row");
      }
    }]);
  }(UI);
  UI.FlexRow = /*#__PURE__*/function (_UI5) {
    function FlexRow() {
      _classCallCheck(this, FlexRow);
      return _callSuper(this, FlexRow, arguments);
    }
    _inherits(FlexRow, _UI5);
    return _createClass(FlexRow, [{
      key: "init",
      value: function init() {
        _superPropGet(FlexRow, "init", this)([]);
        this.elem.classList.add("flex", "row");
      }
    }]);
  }(UI);
  UI.Separator = /*#__PURE__*/function (_UI6) {
    function Separator(settings) {
      _classCallCheck(this, Separator);
      return _callSuper(this, Separator, ["<hr>", settings]);
    }
    _inherits(Separator, _UI6);
    return _createClass(Separator);
  }(UI);
  UI.Label = /*#__PURE__*/function (_UI7) {
    function Label(content, settings) {
      _classCallCheck(this, Label);
      return _callSuper(this, Label, ["<label></label>", _objectSpread({
        content: content
      }, settings)]);
    }
    _inherits(Label, _UI7);
    return _createClass(Label);
  }(UI);
  UI.Link = /*#__PURE__*/function (_UI8) {
    function Link(content, settings) {
      var _this12;
      _classCallCheck(this, Link);
      var el = $$2("<a>")[0];
      el.innerHTML = content;
      _this12 = _callSuper(this, Link, [el, _objectSpread({}, settings)]);
      _this12.on("update", function () {
        if ("href" in _this12.settings) _this12.elem.href = _this12.get_setting("href");
        if ("target" in _this12.settings) _this12.elem.target = _this12.get_setting("target");
      });
      return _this12;
    }
    _inherits(Link, _UI8);
    return _createClass(Link);
  }(UI);
  UI.Button = /*#__PURE__*/function (_UI9) {
    function Button(label, settings) {
      _classCallCheck(this, Button);
      var el = $$2("<button>")[0];
      el.innerHTML = label;
      return _callSuper(this, Button, [el, _objectSpread({}, settings)]);
    }
    _inherits(Button, _UI9);
    return _createClass(Button, [{
      key: "init",
      value: function init() {
        _superPropGet(Button, "init", this)([]);
        this.elem.classList.add("button");
      }
    }]);
  }(UI);
  UI.Root = /*#__PURE__*/function (_UI10) {
    /** @type {Set<UI>} */
    // connected_uis = new Set();
    function Root(root) {
      var _this13;
      _classCallCheck(this, Root);
      if (!root) root = document.body;
      _this13 = _callSuper(this, Root, [root]);
      _this13.ui_interval = setInterval(function () {
        _this13.update();
      }, 1000);
      _this13.ui_observer = new MutationObserver(function (mutations) {
        var _iterator13 = _createForOfIteratorHelper(mutations),
          _step13;
        try {
          for (_iterator13.s(); !(_step13 = _iterator13.n()).done;) {
            var mutation = _step13.value;
            var _iterator14 = _createForOfIteratorHelper(mutation.addedNodes),
              _step14;
            try {
              for (_iterator14.s(); !(_step14 = _iterator14.n()).done;) {
                var node = _step14.value;
                var _iterator16 = _createForOfIteratorHelper(UI.find(node, UI, true, true)),
                  _step16;
                try {
                  for (_iterator16.s(); !(_step16 = _iterator16.n()).done;) {
                    var ui = _step16.value;
                    _this13.register(ui);
                  }
                } catch (err) {
                  _iterator16.e(err);
                } finally {
                  _iterator16.f();
                }
              }
            } catch (err) {
              _iterator14.e(err);
            } finally {
              _iterator14.f();
            }
            var _iterator15 = _createForOfIteratorHelper(mutation.removedNodes),
              _step15;
            try {
              for (_iterator15.s(); !(_step15 = _iterator15.n()).done;) {
                var node = _step15.value;
                var _iterator17 = _createForOfIteratorHelper(UI.find(node, UI, true, true)),
                  _step17;
                try {
                  for (_iterator17.s(); !(_step17 = _iterator17.n()).done;) {
                    var ui = _step17.value;
                    _this13.unregister(ui);
                  }
                } catch (err) {
                  _iterator17.e(err);
                } finally {
                  _iterator17.f();
                }
              }
            } catch (err) {
              _iterator15.e(err);
            } finally {
              _iterator15.f();
            }
          }
        } catch (err) {
          _iterator13.e(err);
        } finally {
          _iterator13.f();
        }
      });
      ["keydown", "keyup", "mousedown", "mouseup", "click"].forEach(function (ev) {
        root.addEventListener(ev, function (e) {
          _this13.update_next_frame();
          /* for (var ui of UI.parents(e.target, true)) {
              ui.update_next_frame();
          } */
        });
      });
      _this13.ui_observer.observe(root, {
        childList: true,
        subtree: true
      }); //, attributes:true
      return _this13;
    }
    /** @param {UI} ui */
    _inherits(Root, _UI10);
    return _createClass(Root, [{
      key: "register",
      value: function register(ui) {
        this.unregister(ui);
        ui._parent = UI.parent(ui.elem);
        if (ui instanceof UI.Property) {
          ui._container = UI.closest(ui.elem, UI.PropertyContainer);
          if (ui._container) ui._container._properties.add(ui);
        }
        if (ui._parent) ui._parent._children.add(ui);
        ui.update_next_frame();
        /* if (!this.connected_uis.has(ui)) {
            this.connected_uis.add(ui);
            ui.update_next_frame();
        } */
      }
      /** @param {UI} ui */
    }, {
      key: "unregister",
      value: function unregister(ui) {
        if (ui._parent) {
          ui._parent._children["delete"](ui);
          ui._parent = null;
        }
        if (ui._container) {
          ui._container._properties["delete"](ui);
          ui._container = null;
        }
        // this.connected_uis.delete(ui);
      }
      /* update() {
          for (var ui of this.connected_uis) {
              ui.update();
          }
      } */
    }, {
      key: "destroy",
      value: function destroy() {
        _superPropGet(Root, "destroy", this)([]);
        clearInterval(this.ui_interval);
        this.ui_observer.disconnect();
      }
    }]);
  }(UI);
  UI.PropertyContainer = /*#__PURE__*/function (_UI11) {
    function PropertyContainer(settings) {
      var _this14;
      _classCallCheck(this, PropertyContainer);
      _this14 = _callSuper(this, PropertyContainer, [null, Object.assign({
        data: function data(a) {
          return a;
        },
        nullify_defaults: false,
        disabled: false
        // autoregister: true,
      }, settings)]);
      /** @type {Set<UI.Property>} */
      _defineProperty$2(_this14, "_properties", new Set());
      _this14.elem.classList.add("property-container");

      // /** @type {Set<UI.Property>} */
      // this.properties = new Set();

      /* if (this.settings.autoregister) {
          this.autoregister_observer = new MutationObserver(mutations=>{
              for (var mutation of mutations) {
                  for (var node of mutation.addedNodes) {
                      this.register_properties(...UI.find(node, UI.Property, false, true));
                  }
              }
          });
          this.autoregister_observer.observe(this.elem, { childList:true, subtree:true });
      } */

      _this14.datas = [null]; // necessary so update(null, {...}) can work

      _this14.elem.addEventListener("keydown", function (e) {
        if (e.key === "Enter" && e.target.matches("input,select")) {
          var inputs = _this14.get_interactive_elements();
          var next_input = inputs[inputs.indexOf(e.target) + 1];
          if (next_input) next_input.focus();else e.target.blur();
          e.preventDefault();
          e.stopPropagation();
        }
      });
      return _this14;
    }

    // /** @param {UI.Properties} properties */
    // register_properties(...properties) {
    //     for (var p of properties) {
    //         this.properties.add(p);
    //         p.container = this;
    //     }
    // }

    // /** @param {UI.Properties} properties */
    // unregister_properties(...properties) {
    //     for (var p of properties) {
    //         this.properties.delete(p);
    //         p.container = undefined;
    //     }
    // }
    _inherits(PropertyContainer, _UI11);
    return _createClass(PropertyContainer, [{
      key: "data",
      get: function get() {
        return this.get_setting("data", this._datas[0]);
      },
      set: function set(value) {
        this._datas = [value];
      }
    }, {
      key: "datas",
      get: function get() {
        var _this15 = this;
        return this._datas.map(function (data) {
          return _this15.get_setting("data", data);
        });
      }
      /** @type {object[]} */,
      set: function set(values) {
        if (!Array.isArray(values)) values = [values];
        this._datas = _toConsumableArray$2(values);
        if (this._datas.length == 0) this._datas = [null];
      }
    }, {
      key: "valid",
      get: function get() {
        return this.properties.every(function (p) {
          return p.valid;
        });
      }
    }, {
      key: "valid_visible",
      get: function get() {
        var _iterator18 = _createForOfIteratorHelper(this.get_properties()),
          _step18;
        try {
          for (_iterator18.s(); !(_step18 = _iterator18.n()).done;) {
            var p = _step18.value;
            if (p.visible && !p.valid) return false;
          }
        } catch (err) {
          _iterator18.e(err);
        } finally {
          _iterator18.f();
        }
        return true;
      }
      /** @type {object} */
    }, {
      key: "property_lookup",
      get: function get() {
        return Object.fromEntries(this.properties.map(function (p) {
          return [p.id, p._value];
        }));
      }
      /** @type {object} */
    }, {
      key: "named_property_lookup",
      get: function get() {
        return Object.fromEntries(this.properties.filter(function (p) {
          return !p.is_indeterminate && p.name;
        }).map(function (p) {
          return [p.name, p._value];
        }));
      }
      /** @type {object} */
    }, {
      key: "named_property_lookup_not_null",
      get: function get() {
        return Object.fromEntries(Object.entries(this.named_property_lookup).filter(function (_ref5) {
          var _ref6 = _slicedToArray(_ref5, 2);
            _ref6[0];
            var v = _ref6[1];
          return v !== null;
        }));
      }
    }, {
      key: "properties",
      get: function get() {
        return _toConsumableArray$2(this.get_properties());
      }
    }, {
      key: "get_properties",
      value: /*#__PURE__*/_regeneratorRuntime().mark(function get_properties() {
        var _iterator19, _step19, p;
        return _regeneratorRuntime().wrap(function get_properties$(_context8) {
          while (1) switch (_context8.prev = _context8.next) {
            case 0:
              if (this._properties) {
                _context8.next = 2;
                break;
              }
              return _context8.abrupt("return");
            case 2:
              _iterator19 = _createForOfIteratorHelper(this._properties);
              _context8.prev = 3;
              _iterator19.s();
            case 5:
              if ((_step19 = _iterator19.n()).done) {
                _context8.next = 11;
                break;
              }
              p = _step19.value;
              _context8.next = 9;
              return p;
            case 9:
              _context8.next = 5;
              break;
            case 11:
              _context8.next = 16;
              break;
            case 13:
              _context8.prev = 13;
              _context8.t0 = _context8["catch"](3);
              _iterator19.e(_context8.t0);
            case 16:
              _context8.prev = 16;
              _iterator19.f();
              return _context8.finish(16);
            case 19:
            case "end":
              return _context8.stop();
          }
        }, get_properties, this, [[3, 13, 16, 19]]);
      })
    }, {
      key: "get_properties_by_name",
      value: function get_properties_by_name(name) {
        return this.properties.filter(function (p) {
          return p.name === name;
        });
      }
    }, {
      key: "get_property_by_name",
      value: function get_property_by_name(name) {
        return this.get_properties_by_name(name)[0];
      }
    }, {
      key: "get_interactive_elements",
      value: function get_interactive_elements() {
        return _toConsumableArray$2(this.elem.querySelectorAll("input,select,textarea")).filter(function (e) {
          return is_visible(e);
        });
      }
    }, {
      key: "reset",
      value: function reset() {
        var _iterator20 = _createForOfIteratorHelper(this.get_properties()),
          _step20;
        try {
          for (_iterator20.s(); !(_step20 = _iterator20.n()).done;) {
            var p = _step20.value;
            p.reset(true);
          }
        } catch (err) {
          _iterator20.e(err);
        } finally {
          _iterator20.f();
        }
      }
    }, {
      key: "update",
      value: function update() {
        var _iterator21 = _createForOfIteratorHelper(this.get_properties()),
          _step21;
        try {
          for (_iterator21.s(); !(_step21 = _iterator21.n()).done;) {
            var p = _step21.value;
            if (p.settings["data"] !== undefined) {
              var values = this.datas.map(function (d) {
                return p.get_setting("data", d);
              });
              p.set_values(values);
            } else if (p.name) {
              var path = p.name.split("/").filter(function (p) {
                return p;
              });
              var values = this.datas.map(function (d) {
                if (!d) return null;
                return _try(function () {
                  return get(d, path);
                });
              });
              var hash = JSON.stringify(values);
              if (p._last_values_on_property_update !== hash) {
                p._last_values_on_property_update = hash;
                p.set_values(values);
              }
            }
          }
        } catch (err) {
          _iterator21.e(err);
        } finally {
          _iterator21.f();
        }
        _superPropGet(PropertyContainer, "update", this)([]);
      }
    }]);
  }(UI);

  /* UI.Indeterminate = Object.freeze(new class {
      toString() { return "[Indeterminate]"; }
  }()); */

  /** @typedef {HTMLInputElement|HTMLSelectElement|HTMLTextAreaElement} Input */

  UI.Property = /*#__PURE__*/function (_UI12) {
    /** @param {string} name @param {string} label @param {string|Element[]} contents @param {object} settings */
    function Property(name, label, contents, settings) {
      var _this16;
      _classCallCheck(this, Property);
      settings = _objectSpread({
        "setup": function setup() {
          var inputs_selector = "input,select,textarea";
          var inputs = _this16.contents.map(function (e) {
            if (e.matches(inputs_selector)) return [e];
            return Array.from(e.querySelectorAll(inputs_selector));
          }).flat();
          inputs.forEach(function (i) {
            return _this16.setup_generic_input(i);
          });
          return inputs;
        },
        "label": label,
        // "event":(e)=>e.type === "change",
        "placeholder": "",
        "invalid_class": "invalid",
        "default": null,
        "readonly": undefined,
        "spinner": undefined,
        "min": undefined,
        "max": undefined,
        "step": undefined,
        "round": undefined,
        "precision": undefined,
        "disabled": false,
        "reset": true,
        "hidden": false,
        "info": undefined,
        "options": undefined,
        "copy": false,
        "reset_on_dblclick": false,
        "nullify_defaults": function nullify_defaults() {
          var container = _this16.container;
          return container ? container.get_setting("nullify_defaults") : false;
        }
      }, settings);
      _this16 = _callSuper(this, Property, [null, settings]);
      _this16.elem.classList.add("property");
      _this16._values = [null];
      /** @type {Element[]} */
      _this16.contents = [];
      /** @type {Input[]} */
      _this16.inputs = [];
      /** @type {Function(any,Input):string[]} */
      _this16.input_modifiers = [];
      /** @type {Function(any,Input):any[]} */
      _this16.output_modifiers = []; //(v,input)=>input.value=v
      /** @type {Function(any,Input):any[]} */
      _this16.validators = [];
      _this16.options_consistant = true;
      // this.values_valid = true;
      _this16.inputs_valid = true;
      _this16.name = name;
      _this16.name_id = "".concat(_this16.name, "-").concat(_this16.id);
      _this16.inner = new UI();
      _this16.inner.elem.classList.add("property-inner");
      _this16.append(_this16.inner);
      contents = typeof contents === "string" ? $$2(contents) : contents;
      if (!Array.isArray(contents)) contents = [contents];
      contents.forEach(function (e) {
        return _this16.inner.append(e);
      });
      _this16.contents = contents;
      var inputs = _this16.get_setting("setup") || [];
      if (!Array.isArray(inputs)) inputs = [inputs];
      _this16.inputs = inputs;
      if (_this16.input) {
        if (_this16.settings["placeholder"] === undefined) _this16.settings["placeholder"] = _this16.input.placeholder;
        if (_this16.settings["readonly"] === undefined) _this16.settings["readonly"] = _this16.input.readOnly;
        if (_this16.settings["default"] === undefined) _this16.settings["default"] = _this16.input.value;
        if (_this16.settings["min"] === undefined && _this16.input.min) _this16.settings["min"] = function () {
          return _this16.apply_input_modifiers(+_this16.input.min);
        };
        if (_this16.settings["max"] === undefined && _this16.input.max) _this16.settings["max"] = function () {
          return _this16.apply_input_modifiers(+_this16.input.max);
        };
        if (_this16.settings["step"] === undefined && _this16.input.step) _this16.settings["step"] = function () {
          return _this16.apply_input_modifiers(+_this16.input.step);
        };
      }
      if (_this16.input && _this16.input.type === "number" || _this16.settings["step"] !== undefined || _this16.settings["precision"] !== undefined || _this16.settings["round"] !== undefined || _this16.settings["min"] !== undefined || _this16.settings["max"] !== undefined || _this16.settings["spinner"] !== undefined) {
        _this16.is_numeric = true;
        _this16.settings["step"] = _this16.settings["step"] || 1;
        if (_this16.settings["spinner"] !== false && _this16.input.type !== "range") {
          _this16.spinner_elem = new UI().elem;
          _this16.spinner_elem.classList.add("spinner");
          _this16.up_button = new UI.Button("<i class=\"fas fa-caret-up\"></i>", {
            "click": function click(e) {
              return _this16.set_values(_this16.value + _this16.get_setting("step"), {
                trigger_if_changed: true
              });
            },
            "disabled": function disabled() {
              return _this16.value >= _this16.get_setting("max");
            }
          });
          _this16.down_button = new UI.Button("<i class=\"fas fa-caret-down\"></i>", {
            "click": function click(e) {
              return _this16.set_values(_this16.value - _this16.get_setting("step"), {
                trigger_if_changed: true
              });
            },
            "disabled": function disabled() {
              return _this16.value <= _this16.get_setting("min");
            }
          });
          _this16.spinner_elem.append(_this16.up_button, _this16.down_button);
          _this16.inner.append(_this16.spinner_elem);
        }
      }
      var label_elem = _this16.elem.querySelector("label");
      if (!label_elem) {
        label_elem = $$2("<label><span></span></label>")[0];
        _this16.label = new UI(label_elem, {
          hidden: function hidden() {
            return !_this16.get_setting("label", _this16.data);
          },
          update: function update() {
            set_inner_html(_this16.label.elem.firstChild, _this16.get_setting("label", _this16.data));
            var info = _this16.get_setting("info", _this16.data);
            if (info) {
              if (!_this16.info_elem) {
                _this16.info_elem = $$2("<span><i class=\"fas fa-question-circle info\"></i></span>")[0];
                _this16.label.append(_this16.info_elem);
                _this16.tooltip = new UI.Tooltip(_this16.info_elem);
              }
              _this16.tooltip.set_content(info);
            }
            if (_this16.info_elem) toggle_class(_this16.info_elem, "d-none", !info);
          }
        });
        _this16.prepend(_this16.label);
      }
      label_elem.setAttribute("for", _this16.name_id);
      if (_this16.get_setting("copy")) {
        var copy_hide_timeout;
        var copy_tippy;
        _this16.copy_button = new UI.Button("<i class=\"fas fa-copy\"></i>", {
          "click": function click(e) {
            e.preventDefault();
            _this16.input.select();
            window.navigator.clipboard.writeText(_this16.input.value);
            if (!copy_tippy) {
              copy_tippy = tippy(_this16.input, {
                content: "Copied!",
                distance: 0,
                trigger: "manual",
                zIndex: 999999,
                onShow: function onShow(instance) {
                  clearTimeout(copy_hide_timeout);
                  copy_hide_timeout = setTimeout(function () {
                    return instance.hide();
                  }, 1500);
                }
              });
            }
            copy_tippy.show();
          },
          "title": "Copy"
        });
        _this16.inner.append(_this16.copy_button);
        var _iterator22 = _createForOfIteratorHelper(_this16.inputs),
          _step22;
        try {
          var _loop = function _loop() {
            var input = _step22.value;
            input.addEventListener("mousedown", function (e) {
              input.select();
              if (e.button == 0) e.preventDefault();
            });
          };
          for (_iterator22.s(); !(_step22 = _iterator22.n()).done;) {
            _loop();
          }
        } catch (err) {
          _iterator22.e(err);
        } finally {
          _iterator22.f();
        }
      }
      _this16.reset_button = new UI.Button("<i class=\"fas fa-undo\"></i>", {
        "click": function click() {
          return _this16.reset(true);
        },
        "title": "Reset",
        "hidden": function hidden() {
          return !_this16.get_setting("reset");
        }
      });
      _this16.inner.append(_this16.reset_button);

      /* requestAnimationFrame(()=>{
          this.update_inputs(true);
      }); */
      return _this16;
    }
    _inherits(Property, _UI12);
    return _createClass(Property, [{
      key: "content",
      get: function get() {
        return this.contents[0];
      }
    }, {
      key: "input",
      get: function get() {
        return this.inputs[0];
      }
    }, {
      key: "_value",
      get: function get() {
        return this._values[0];
      }
    }, {
      key: "value",
      get: function get() {
        return this.iterate_values().next().value;
      } // this.indeterminate ? UI.Indeterminate : 
    }, {
      key: "values",
      get: function get() {
        return Array.from(this.iterate_values());
      }
      /** @type {boolean} */
    }, {
      key: "is_indeterminate",
      get: function get() {
        return !all_equal(this.values);
      }
      /** @type {boolean} */
    }, {
      key: "is_default",
      get: function get() {
        var _this17 = this;
        if (this.nullify_defaults) return this._values.every(function (v) {
          return v == null;
        });
        return this.datas.every(function (item, i) {
          return JSON.stringify(_this17.get_setting("default", item)) === JSON.stringify(_this17.values[i]);
        }); // was this._values[i]
      }
      /** @type {boolean} */
    }, {
      key: "nullify_defaults",
      get: function get() {
        return this.get_setting("nullify_defaults");
      }
    }, {
      key: "data",
      get: function get() {
        return this.datas[0];
      }
    }, {
      key: "datas",
      get: function get() {
        var container = this.container;
        if ("data" in this.settings) return [this.get_setting("data")];
        return container ? container._datas : [null];
      }
      /** @type {UI.PropertyContainer} */
    }, {
      key: "container",
      get: function get() {
        return this._container;
        // return this.get_closest(UI.PropertyContainer);
      }
    }, {
      key: "hidden",
      get: function get() {
        var _this18 = this;
        return this.datas.some(function (item) {
          return _this18.get_setting("hidden", item);
        }); // (this.parent||{}).hidden || 
      }
    }, {
      key: "disabled",
      get: function get() {
        var _this19 = this;
        return this.datas.some(function (item) {
          return _this19.get_setting("disabled", item);
        }) || this.disabled_parent || !this.options_consistant;
      }
    }, {
      key: "valid",
      get: function get() {
        //return this.values_valid === true &&
        return this.inputs_valid === true;
      }
    }, {
      key: "setup_generic_input",
      value: function setup_generic_input(input) {
        var _this20 = this;
        input.setAttribute("id", this.name_id);
        // input.setAttribute("name", this.name);
        var input_events = ["change", "input"];
        input_events.forEach(function (ev_type) {
          input.addEventListener(ev_type, function (e, i) {
            if (ev_type == "input") _this20.emit("input", e);
            var value = get_value(input);
            value = _this20.apply_input_modifiers(value, input);
            _this20.set_value(value, {
              trigger_if_changed: e.type == "change"
            });
          });
        });
        input.addEventListener("blur", function (e) {
          _this20.update_next_frame();
        });
        input.addEventListener("focus", function (e) {
          _this20.update_next_frame();
        });
        if (input.nodeName === "INPUT") {
          input.addEventListener("keydown", function (e) {
            if (e.key === "Enter") {
              e.preventDefault();
              e.target.blur();
            }
            if (input.type !== "number" && _this20.is_numeric) {
              var new_value;
              if (e.key == "ArrowUp") new_value = _this20.value + _this20.get_setting("step");else if (e.key == "ArrowDown") new_value = _this20.value - _this20.get_setting("step");
              if (new_value !== undefined) {
                e.stopPropagation();
                e.preventDefault();
                // input._force_update_value = true;
                _this20.set_values(new_value, {
                  trigger_if_changed: true
                });
              }
            }
          });
        }
        input.addEventListener("dblclick", function (e) {
          if (_this20.get_setting("reset_on_dblclick")) {
            _this20.set_values(null, {
              trigger_if_changed: true
            });
          }
        });

        /* Object.defineProperty(input, 'value', {
            get () { return this.get_value(); },
            set (value) { this.set_value(value, false); }
        }); */
      }
    }, {
      key: "reset",
      value: function reset() {
        var trigger = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;
        this.set_values(null, {
          trigger_if_changed: trigger
        });
      }
    }, {
      key: "fix_value",
      value: function fix_value(value) {
        if (typeof value == "number") {
          var min = this.get_setting("min");
          var max = this.get_setting("max");
          var round = this.get_setting("round");
          var precision = this.get_setting("precision");
          if (max !== undefined) value = Math.min(value, +max);
          if (min !== undefined) value = Math.max(value, +min);
          if (round !== undefined) value = round_to_factor(value, round);
          if (precision !== undefined) value = +value.toFixed(precision);
          /* if (isNaN(value)) {
              debugger;
              value = 0
          } */
        }
        return value;
      }

      /** @typedef {{trigger:boolean, trigger_if_changed:boolean}} SetValueOptions */
      /** @param {SetValueOptions} options */
    }, {
      key: "set_value",
      value: function set_value(value, options) {
        return this.set_values(this.datas.map(function (_) {
          return value;
        }), options);
      }

      /** @param {SetValueOptions} options */
    }, {
      key: "set_values",
      value: function set_values(values, options) {
        var _this21 = this;
        options = Object.assign({
          trigger: false,
          trigger_if_changed: false
        }, options);
        // console.trace(this.name, values, trigger);
        // if (!Array.isArray(values)) throw new Error("Values must be array...");
        if (!Array.isArray(values)) values = this.datas.map(function (item) {
          return values;
        });
        if (values.length != this.datas.length) {
          throw new Error("Values length (".concat(values.length, ") mismatch datas length (").concat(this.datas.length, ")..."));
        }
        values = values.map(function (v) {
          return _this21.fix_value(v);
        });
        this._values = this.datas.map(function (data, i) {
          var default_value = _this21.fix_value(_this21.get_setting("default", data));
          if (_this21.nullify_defaults) return JSON.stringify(values[i]) === JSON.stringify(default_value) ? null : values[i];
          return values[i] == null ? default_value : values[i];
        });

        // --------------- DO NOT TOUCH ---------------
        // -------- THIS IS A DELICATE MACHINE --------

        var values_hash = JSON.stringify([this.values, this._values, options.trigger_if_changed, options.trigger]);
        var changed = values_hash !== this._last_changed_values_hash;
        if (changed) this._last_changed_values_hash = values_hash;
        var trigger = options.trigger || options.trigger_if_changed && changed;
        if (trigger) {
          this.inputs.forEach(function (input) {
            return input._force_update_value = true;
          });
        }

        // --------------------------------------------

        this.update_next_frame();
        var e = {
          "datas": _toConsumableArray$2(this.datas),
          "name": this.name,
          "_value": this._value,
          "_values": this._values,
          "value": this.value,
          "values": this.values,
          "trigger": trigger
        };
        var container = this.container;
        if (changed || trigger) {
          this.emit("change", e);
          if (container) container.emit("property-change", e);
        }
        return changed;
      }
    }, {
      key: "update",
      value: function update() {
        var _this22 = this;
        var is_default = this.is_default;
        var is_indeterminate = this.is_indeterminate;
        var default_value = this.get_setting("default", this.data);
        var readonly = this.get_setting("readonly");
        var disabled = this.disabled;
        var style_not_default = !!this.get_setting("reset");
        this.options_consistant = true;
        if (this.settings["options"] !== undefined) {
          var options = [];
          var items_options = this.datas.map(function (item) {
            return _this22.get_setting("options", item) || [];
          });
          this.options_consistant = function () {
            if (_this22.datas.length <= 1) return true;
            var last;
            var _iterator23 = _createForOfIteratorHelper(items_options),
              _step23;
            try {
              for (_iterator23.s(); !(_step23 = _iterator23.n()).done;) {
                var o = _step23.value;
                var curr = JSON.stringify(o);
                if (last && curr != last) return false;
                last = curr;
              }
            } catch (err) {
              _iterator23.e(err);
            } finally {
              _iterator23.f();
            }
            return true;
          }();
          if (!this.options_consistant) is_indeterminate = true;
          if (!this.options_consistant || is_indeterminate) options = [{
            value: "",
            text: "Multiple values",
            style: {
              "display": "none"
            }
          }];
          if (this.options_consistant) {
            var _options;
            (_options = options).push.apply(_options, _toConsumableArray$2(deep_copy(items_options[0])));
          }
          options = fix_options(options);
          if (style_not_default) {
            options.forEach(function (o) {
              if (String(o.value) === String(default_value)) o.text += " *";
            });
          }
          this.inputs.filter(function (e) {
            return e.nodeName === "SELECT";
          }).forEach(function (e) {
            return set_select_options(e, options);
          });
        }
        var valids = [];
        this.inputs.forEach(function (/**@type {HTMLInputElement|HTMLTextAreaElement|HTMLSelectElement}*/input, i) {
          // input.disabled = disabled;
          input.toggleAttribute("disabled", disabled === true);
          if (readonly !== undefined) {
            input.readOnly = readonly;
            // set_attribute(input, "readonly", readonly);
          }
          var is_focused = has_focus(input);
          var is_checkbox = input.nodeName === "INPUT" && input.type === "checkbox";
          input.classList.toggle("not-default", !is_default && style_not_default); // !is_focused && 

          if (is_checkbox) {
            input.indeterminate = is_indeterminate;
          }
          var value = _this22.value;
          if (is_indeterminate) {
            if (input.type == "color") value = "#000000";else value = "";
          } else {
            value = _this22.apply_output_modifiers(value, input);
            if (typeof value === "number" && _this22.settings["precision"] !== undefined) {
              value = value.toFixed(_this22.get_setting("precision"));
              if (value.includes(".")) value = value.replace(/\.?0+$/, "");
            }
          }
          // if ((input.nodeName === "INPUT" || input.nodeName === "TEXTAREA") && is_focused && !input.hasAttribute("readonly") && !input._force_update_value) {
          /* if ((input.nodeName === "INPUT" && (input.type == "date" || input.type == "time")) && is_focused) {
          } else {
          } */
          if (!is_focused || input._force_update_value) {
            set_value(input, value, false);
          }
          input._force_update_value = false;

          // set_value(input, value, false);

          /* if (blur) {
              input.blur();
          } */

          // set_attribute(input, "placeholder", placeholder);
          input.placeholder = is_indeterminate ? "Multiple values" : _this22.get_setting("placeholder");
          var title = is_indeterminate ? "Multiple values" : _this22.get_setting("title") || "";
          if (title) input.setAttribute("title", title);else input.removeAttribute("title");
          var valid = disabled || is_indeterminate || function () {
            var _iterator24 = _createForOfIteratorHelper(_this22.validators),
              _step24;
            try {
              for (_iterator24.s(); !(_step24 = _iterator24.n()).done;) {
                var validator = _step24.value;
                valid = validator.apply(_this22, [_this22.value, input]);
                if (valid !== true) return valid;
              }
            } catch (err) {
              _iterator24.e(err);
            } finally {
              _iterator24.f();
            }
            return true;
          }();
          valids.push(valid);
          var invalid_class = _this22.get_setting("invalid_class");
          if (invalid_class) input.classList.toggle(invalid_class, valid !== true);
          if (valid === false) valid = "Invalid input";
          if (input._last_valid !== valid) {
            if (typeof valid === "string") {
              if (!input._tooltip) new UI.Tooltip(input);
              input._tooltip.set_content(valid);
            } else {
              if (input._tooltip) input._tooltip.destroy();
            }
            input._last_valid = valid;
          }
        });
        this.inputs_valid = valids.every(function (v) {
          return v === true;
        });
        _superPropGet(Property, "update", this)([]);
      }
    }, {
      key: "add_validator",
      value: function add_validator() {
        var _this$validators;
        (_this$validators = this.validators).push.apply(_this$validators, arguments);
      }
    }, {
      key: "apply_input_modifiers",
      value: function apply_input_modifiers(v, input) {
        var _iterator25 = _createForOfIteratorHelper(this.input_modifiers),
          _step25;
        try {
          for (_iterator25.s(); !(_step25 = _iterator25.n()).done;) {
            var m = _step25.value;
            v = m.apply(this, [v, input]);
          }
        } catch (err) {
          _iterator25.e(err);
        } finally {
          _iterator25.f();
        }
        return v;
      }
    }, {
      key: "apply_output_modifiers",
      value: function apply_output_modifiers(v, input) {
        var v;
        var _iterator26 = _createForOfIteratorHelper(this.output_modifiers),
          _step26;
        try {
          for (_iterator26.s(); !(_step26 = _iterator26.n()).done;) {
            var m = _step26.value;
            v = m.apply(this, [v, input]);
            if (v === undefined) return;
          }
        } catch (err) {
          _iterator26.e(err);
        } finally {
          _iterator26.f();
        }
        return v;
      }
    }, {
      key: "iterate_values",
      value: /*#__PURE__*/_regeneratorRuntime().mark(function iterate_values() {
        var datas, i;
        return _regeneratorRuntime().wrap(function iterate_values$(_context9) {
          while (1) switch (_context9.prev = _context9.next) {
            case 0:
              datas = this.datas;
              i = 0;
            case 2:
              if (!(i < this._values.length)) {
                _context9.next = 8;
                break;
              }
              _context9.next = 5;
              return this._values[i] == null ? this.get_setting("default", datas[i]) : this._values[i];
            case 5:
              i++;
              _context9.next = 2;
              break;
            case 8:
            case "end":
              return _context9.stop();
          }
        }, iterate_values, this);
      })
      /* destroy() {
          if (this.container) this.container.unregister_properties(this);
          super.destroy();
      } */
    }]);
  }(UI);
  UI.MultiProperty = /*#__PURE__*/function (_UI$Property) {
    function MultiProperty(name, label, contents, settings) {
      var _this23;
      _classCallCheck(this, MultiProperty);
      _this23 = _callSuper(this, MultiProperty, [name, label, contents, settings]);
      _this23.input_modifiers.push(function (value, input) {
        if (Array.isArray(_this23.value)) {
          var i = _this23.inputs.indexOf(input);
          var v = _toConsumableArray$2(_this23.value);
          v[i] = value;
        }
        return v;
      });
      _this23.output_modifiers.push(function (value, input) {
        if (Array.isArray(_this23.value)) {
          var i = _this23.inputs.indexOf(input);
          value = value[i];
        }
        return value;
      });
      return _this23;
    }
    _inherits(MultiProperty, _UI$Property);
    return _createClass(MultiProperty);
  }(UI.Property);
  UI.DateTimeProperty = /*#__PURE__*/function (_UI$Property2) {
    function DateTimeProperty(name, label) {
      var _this24;
      var settings = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
      _classCallCheck(this, DateTimeProperty);
      var inputs = $$2("<input type=\"date\"><input type=\"time\">");
      var get_value = function get_value() {
        var values = inputs.map(function (i) {
          return i.value;
        });
        if (values.every(function (v) {
          return v === "";
        })) return NaN;
        if (!values[0]) values[0] = _this24.today_str;
        if (!values[1]) values[1] = "00:00";
        return join_datetime(values, _this24.get_setting("datetime.apply_timezone"));
      };
      _this24 = _callSuper(this, DateTimeProperty, [name, label, inputs, Object.assign({
        "datetime.apply_timezone": true,
        "default": null,
        "setup": function setup() {
          inputs.forEach(function (input) {
            input.addEventListener("blur", function (e) {
              var value = get_value();
              if (!isNaN(value)) {
                _this24.set_value(value, {
                  trigger_if_changed: true
                });
              }
            });
            input.addEventListener("keydown", function (e) {
              if (e.key === "Enter") {
                e.preventDefault();
                e.target.blur();
                if (e.target === inputs[0]) inputs[1].focus();
              }
            });
          });
          return inputs;
        }
      }, settings)]);
      _this24.add_validator(function (_, input) {
        if (_this24.get_setting("datetime.after_now")) {
          // inputs[0].min = utils.split_datetime(new Date())[0];
          if (!input.value) return true;
          var before_now = get_value() < Math.floor(new Date() / 1000) * 1000;
          var before_today = new Date(inputs[0].value) < new Date(_this24.today_str);
          if (before_today && input === inputs[0]) return "Scheduled date is in the past.";else if (!before_today && before_now && input === inputs[1]) return "Scheduled time is in the past.";
          return true;
        }
      });
      _this24.output_modifiers.push(function (value, input) {
        // if (isNaN(get_value()) && !v) return;
        var parts = ["", ""];
        if (value) {
          parts = split_datetime(value, _this24.get_setting("datetime.apply_timezone"));
        }
        if (input === inputs[0]) {
          return parts[0];
        } else {
          return parts[1].slice(0, 5);
        }
      });
      return _this24;
    }
    _inherits(DateTimeProperty, _UI$Property2);
    return _createClass(DateTimeProperty, [{
      key: "today_str",
      get: function get() {
        return new Date().toISOString().split("T")[0];
      }
    }]);
  }(UI.Property);
  UI.TimeSpanProperty = /*#__PURE__*/function (_UI$Property3) {
    function TimeSpanProperty(name, label) {
      var _this25;
      var settings = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
      _classCallCheck(this, TimeSpanProperty);
      var input = $$2("<input type=\"text\">")[0];
      _this25 = _callSuper(this, TimeSpanProperty, [name, label, input, Object.assign({
        "timespan.format": "hh:mm:ss",
        "timespan.zero_infinity": false,
        "step": 1.0,
        "min-step": 0.001,
        "default": 0
      }, settings)]);
      _this25.input_modifiers.push(function (v) {
        var zero_infinity = _this25.get_setting("timespan.zero_infinity");
        if (zero_infinity && v.toLowerCase() === "infinity") return 0;
        v = timespan_str_to_seconds(v, _this25.get_setting("timespan.format"));
        return v;
      });
      _this25.output_modifiers.push(function (v) {
        var zero_infinity = _this25.get_setting("timespan.zero_infinity");
        if (zero_infinity && v == 0) return "Infinity";
        return ms_to_timespan_str(v * 1000, _this25.get_setting("timespan.format"));
      });
      return _this25;
    }
    _inherits(TimeSpanProperty, _UI$Property3);
    return _createClass(TimeSpanProperty);
  }(UI.Property);
  UI.TextArea = /*#__PURE__*/function (_UI$Property4) {
    function TextArea(name, label) {
      var _this26;
      var settings = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
      _classCallCheck(this, TextArea);
      var input = $$2("<textarea style=\"resize:none\"></textarea>")[0];
      _this26 = _callSuper(this, TextArea, [name, label, input, Object.assign({
        "default": "",
        "textarea.rows": 4,
        "textarea.min_rows": null,
        "textarea.return_blur": false
      }, settings)]);
      /** @type {AutoSizeController} */
      var asc;
      var rows = _this26.get_setting("textarea.rows");
      var min_rows = _this26.get_setting("textarea.min_rows");
      if (min_rows) {
        asc = new AutoSizeController(input, min_rows, false);
      } else if (rows) {
        _this26.input.rows = rows;
      }
      var max_length = _this26.get_setting("textarea.max_length");
      if (max_length) input.maxLength = max_length;
      if (_this26.get_setting("textarea.show_count")) {
        textarea_input_events.forEach(function (ev) {
          return input.addEventListener(ev, function () {
            return _this26.update_char_count();
          });
        });
        _this26.char_count = $$2("<div style=\"text-align:right\"></div>")[0];
        _this26.append(_this26.char_count);
        _this26.update_char_count();
      }
      input.addEventListener("keydown", function (e) {
        if (e.key == "Enter") {
          if (_this26.get_setting("textarea.return_blur")) {
            e.preventDefault();
            input.blur();
          }
        }
      });
      _this26.on("update", function () {
        if (asc) asc.update();
      });
      return _this26;
    }
    _inherits(TextArea, _UI$Property4);
    return _createClass(TextArea, [{
      key: "update_char_count",
      value: function update_char_count() {
        this.char_count.innerHTML = "(".concat(this.input.value.length, "/").concat(this.get_setting("textarea.max_length") || "-", ")");
      }
    }]);
  }(UI.Property);
  UI.Tooltip = /*#__PURE__*/function () {
    function _class(elem, content) {
      _classCallCheck(this, _class);
      this._tippy = tippy(elem, {
        allowHTML: true,
        zIndex: 99999
        // appendTo: root,
      });
      this.elem = elem;
      if (content) this.set_content(content);
      elem._tooltip = this;
    }
    return _createClass(_class, [{
      key: "set_content",
      value: function set_content(content) {
        if (this._content === content) return;
        this._content = content;
        this._tippy.setContent(content);
      }
    }, {
      key: "destroy",
      value: function destroy() {
        if (!this._tippy) return;
        this._tippy.destroy();
        this._tippy = null;
        this.elem._tooltip = null;
      }
    }]);
  }();
  UI.VALIDATORS = {
    not_empty: function not_empty(v) {
      return !!v || "Field cannot be empty";
    },
    rtmp: function rtmp(v) {
      return is_valid_rtmp_url(v) || "Invalid RTMP URL";
    },
    url: function url(v) {
      return is_valid_url(v) || "Invalid URL";
    },
    json: function json(v) {
      try {
        JSON.parse(v);
        return true;
      } catch (_unused2) {
        return false;
      }
    }
  };
  function is_visible(elem) {
    if (!elem.isConnected) return false;
    if (elem.offsetHeight === 0 && elem.offsetWidth === 0) return false;
    return true;
    /* if (!elem.ownerDocument) return false;
    while(elem) {
        if (getComputedStyle(elem).display === "none") return false;
        elem = elem.parentElement;
    }
    return true; */
  }
  function select_text(elem) {
    elem.focus();
    var range = elem.ownerDocument.createRange();
    range.selectNodeContents(elem);
    var sel = window.getSelection();
    sel.removeAllRanges();
    sel.addRange(range);
  }
  function fetch(url) {
    return new Promise(function (resolve) {
      var xhr = new XMLHttpRequest();
      xhr.onreadystatechange = function () {
        if (xhr.readyState === 4 && xhr.status === 200) {
          resolve(xhr.responseText);
        }
      };
      xhr.open("GET", url, true);
      xhr.send();
    });
  }
  function parse_style(s) {
    _div2.setAttribute("style", s);
    var d = {};
    for (var i = 0; i < _div2.style.length; i++) {
      var k = _div2.style[i];
      d[k] = _div2.style.getPropertyValue(k);
    }
    return d;
  }
  function clone_document_head(from, to, opts) {
    opts = Object.assign({
      style: true,
      script: false,
      other: true,
      remove_media_rules: true
    }, opts);
    var promises = [];
    if (from instanceof Document) from = from.head;
    var _iterator27 = _createForOfIteratorHelper(from.children),
      _step27;
    try {
      for (_iterator27.s(); !(_step27 = _iterator27.n()).done;) {
        var c = _step27.value;
        var is_stylesheet = c.nodeName === "LINK" && c.rel === "stylesheet";
        if (c.nodeName === "SCRIPT") {
          if (!opts.script) continue;
        } else if (is_stylesheet || c.nodeName === "STYLE") {
          if (!opts.style) continue;
        } else {
          if (!opts.other) continue;
        }
        var clone = c.cloneNode(true);
        to.append(clone);
        if (is_stylesheet && opts.remove_media_rules) {
          var promise = on_stylesheet_load(clone);
          promise.then(function (ss) {
            // order.push([new Date()-t, clone, ss]);
            var rules = [];
            try {
              rules = ss.cssRules;
            } catch (_unused3) {}
            if (!rules) return;
            for (var j = rules.length - 1; j >= 0; j--) {
              if (rules[j].cssText.indexOf('@media') === 0) {
                ss.deleteRule(j);
              }
            }
          });
          promises.push(promise);
        }
      }
    } catch (err) {
      _iterator27.e(err);
    } finally {
      _iterator27.f();
    }
    return Promise.all(promises);
  }
  /* copy_stylesheets: async function(from, to, remove_media_queries = false) {
      if (from.ownerDocument === to.ownerDocument) {
          console.log(`copy_stylesheets: both ownerDocuments identical.`);
          return;
      }
      var style_nodes = new Set();
      function add_style(elem) {
          if (typeof elem === "string") elem = $(elem)[0];
          style_nodes.add(elem);
          to.append(elem);
      }
      var remote_stylesheets = 0;
      // var promises = [];
      for (let e of from.querySelectorAll("*")) {
          if (e instanceof HTMLStyleElement || (e instanceof HTMLLinkElement && e.rel === "stylesheet")) {
              // var cloneable = true;
              // try { var test_access = (e.sheet && e.sheet.cssRules) } catch { cloneable = false; }
              // if (cloneable) {
              //     add_style(e.cloneNode(true));
              // } else {
              //     var p = fetch(e.href).then((css)=>{
              //         add_style(`<style type=${e.type} media=${e.media}>${css}</style>`);
              //     });
              //     promises.push(p);
              // }
              if (e.href) {
                  var href = e.href;
                  if (href.startsWith("//")) href = "https:"+href
                  else if (href.startsWith("/")) href = location.origin+href;
                  try {
                      var url = new URL(href);
                      if (url.host !== location.host) remote_stylesheets++;
                  } catch {}
              }
              add_style(e.cloneNode(true));
          }
      }
      var num_stylesheets = style_nodes.size - remote_stylesheets;
      // await Promise.all(promises);
      
      return new Promise((resolve)=>{
          var check_interval = setInterval(()=>{
              for (var ss of to.ownerDocument.styleSheets) {
                  if (!style_nodes.has(ss.ownerNode)) continue;
                  style_nodes.delete(ss.ownerNode);
                  try {
                      if (!ss.cssRules) continue;
                  } catch {
                      continue;
                  }
                  if (remove_media_queries) {
                      for (var j = ss.cssRules.length-1; j >= 0; j--) {
                          if (ss.cssRules[j].cssText.indexOf('@media') === 0) {
                              ss.deleteRule(j);
                          }
                      }
                  }
              }
              if (style_nodes.size === 0 || to.ownerDocument.styleSheets.length >= num_stylesheets) {
                  clearInterval(check_interval);
                  resolve();
              }
          }, 1000/20);
      });
  }, */
  // get_all_css(from, ignore_media_queries = false) {
  //     var document = from instanceof Document ? from : from.ownerDocument;
  //     var rules = [];
  //     for (ss of document.styleSheets) {
  //         rules.push(`/* ------------- ${ss.href||"Local StyleSheet"} ------------- */`)
  //         try {
  //             var test = ss.cssRules;
  //         } catch {
  //             continue;
  //         }
  //         for (var i = 0; i < ss.cssRules.length; i++) {
  //             var css = ss.cssRules[i].cssText;
  //             if (ignore_media_queries && css.indexOf('@media') === 0) continue;
  //             css.replace(/url\(\"(.+?)\"\)/g, (...m)=>{
  //                 if (m[1].match(/^(?:data\:|#|https?\:\/\/|\/)/)) return m[0];
  //                 var url = utils.join_paths(utils.dirname(ss.href), m[1]);
  //                 return `url("${url}")`
  //             })
  //             rules.push(css);
  //         }
  //         rules.push(`/* ------------- END ------------- */`)
  //     }
  //     return rules.join("\n");
  // },
  function insert_at(container, element, index) {
    if (container.children[index] === element) return;
    index = Math.max(index, 0);
    if (index === 0) {
      container.prepend(element);
    } else {
      var after = container.children[index];
      if (after) container.insertBefore(element, after);else container.append(element);
    }
  }
  function insert_after(target, elem) {
    var parent = target.parentNode;
    if (parent.lastChild === target) {
      parent.appendChild(elem);
    } else {
      parent.insertBefore(elem, target.nextSibling);
    }
  }
  function move(elem) {
    var i = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;
    if (i == 0) return;
    var children = _toConsumableArray$2(elem.parentElement.children);
    var index = children.indexOf(elem);
    if (i > 0) index += 1;
    insert_at(elem.parentElement, elem, index + i);
  }
  function upload(contentType) {
    var multiple = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
    return new Promise(function (resolve) {
      var input = document.createElement('input');
      input.type = 'file';
      input.multiple = multiple;
      input.accept = contentType;
      input.onchange = function () {
        var files = _toConsumableArray$2(input.files);
        if (multiple) resolve(files);else resolve(files[0]);
      };
      input.click();
    });
  }
  function download(filename, text) {
    var element = document.createElement('a');
    element.href = 'data:text/plain;charset=utf-8,' + encodeURIComponent(text);
    element.download = filename;
    element.click();
  }
  /** @typedef {{multiple:boolean, accept:string, directories:boolean}} FileDialogOptions */
  /** @return {File[]} @param {FileDialogOptions} opts */
  function open_file_dialog(opts) {
    opts = Object.assign({}, opts);
    return new Promise(function (resolve) {
      var element = document.createElement("input");
      element.style.display = 'none';
      element.type = "file";
      if (opts.accept) element.accept = opts.accept;
      if (opts.multiple) element.multiple = true;
      if (opts.directories) element.webkitdirectory = true;
      document.body.appendChild(element);
      element.addEventListener("change", function () {
        resolve(_toConsumableArray$2(this.files));
      });
      element.dispatchEvent(new MouseEvent("click"));
      document.body.removeChild(element);
    });
  }
  function _empty(elem) {
    while (elem.firstChild) elem.removeChild(elem.firstChild);
  }
  function set_select_options(select, options) {
    // if (!Array.isArray(settings)) Object.entries(settings);
    options = fix_options(options);
    var hash = JSON.stringify(options);
    if (hash === select._options_hash) return;
    select._options_hash = hash;
    select.innerHTML = "";
    return options.map(function (o) {
      var e = $$2("<option></option>")[0];
      e.innerHTML = o.text;
      if (o.disabled) e.disabled = true;
      if (o.selected) e.selected = true;
      if (o.hidden) e.hidden = true;
      if (o["class"]) e["class"].forEach(function (c) {
        return e.classList.add(c);
      });
      if (o.style) Object.assign(e.style, o.style);
      if (o.value !== undefined) {
        e.value = o.value;
        e.dataset.value = JSON.stringify(o.value);
      }
      select.append(e);
      return e;
    });
  }
  function fix_options(options) {
    return options.map(function (o) {
      if (Array.isArray(o)) {
        var i = 0,
          new_o = {};
        for (var i = 0; i < o.length; i++) {
          if (_typeof$2(o[i]) === "object" && o[i] !== null) Object.assign(new_o, o[i]);else if (new_o.value === undefined) {
            var _ref7 = [o[i], o[i]];
            new_o.value = _ref7[0];
            new_o.text = _ref7[1];
          } else new_o.text = String(o[i]);
        }
        return new_o;
      } else if (_typeof$2(o) === "object" && o !== null) {
        if (o.name && !o.text) {
          o.text = o.name;
          delete o.name;
        }
        return o;
      } else return {
        value: o,
        text: String(o)
      };
    });
  }
  function read_file(file, options) {
    options = Object.assign({
      encoding: "utf-8"
    }, options);
    return new Promise(function (resolve) {
      var reader = new FileReader();
      reader.addEventListener('load', function (e) {
        resolve(e.target.result);
      });
      reader.readAsText(file, options.encoding);
    });
  }
  function render_html(htmlString) {
    if (typeof htmlString !== "string") return null;
    _temp_div.innerHTML = htmlString.trim();
    if (_temp_div.childNodes.length == 1) return _temp_div.childNodes[0];
    return Array.from(_temp_div.childNodes);
  }
  function get_value(elem) {
    if (elem.type === "checkbox") {
      return elem.checked;
    } else if (elem.nodeName === "SELECT") {
      var option = _toConsumableArray$2(elem.children).find(function (e) {
        return e.value == elem.value;
      });
      if (option && option.dataset.value !== undefined) return JSON.parse(option.dataset.value);else return elem.value;
    } else if (["number", "range"].includes(elem.type)) {
      return parseFloat(elem.value) || 0;
    } else {
      return elem.value;
    }
  }
  // sets value and triggers change (only if value is different to previous value)
  function set_value(elem, new_value) {
    var trigger_change = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;
    // var curr_val = get_value(elem);
    // if (curr_val === val) return;
    if (elem.type === "checkbox") {
      new_value = !!new_value;
      if (elem.checked === new_value) return false;
      elem.checked = !!new_value;
    } else {
      if (elem.nodeName === "SELECT") {
        var json = JSON.stringify(new_value);
        var option = _toConsumableArray$2(elem.children).find(function (e) {
          return e.dataset.value == json;
        });
        if (option) new_value = option.value;else new_value = "";
      }
      if (new_value === null || new_value === undefined) {
        new_value = "";
      } else {
        new_value = String(new_value);
      }
      var old_value = elem.value;
      if (old_value === new_value) return false;
      var position = elem.selectionStart;
      elem.value = new_value;
      if (position !== undefined && elem.selectionEnd != null) elem.selectionEnd = position;
    }
    if (trigger_change) elem.dispatchEvent(new Event("change"));
    return true;
  }
  function get_index(element) {
    if (!element.parentNode) return -1;
    return Array.from(element.parentNode.children).indexOf(element);
  }
  /** @template T @param {{selector:string, auto_insert:boolean, remove:function(Element):void, add:function(T,Element,Number):Element }} opts @param {T[]} items */
  function rebuild(container, items, opts) {
    if (!opts) opts = {};
    opts = Object.assign({
      selector: ":scope>*",
      auto_insert: true,
      remove: function remove(elem) {
        return elem.remove();
      },
      add: function add(elem) {},
      id_callback: null
    }, opts);
    var orig_elems = Array.from(container.querySelectorAll(opts.selector));
    var leftovers = new Set(orig_elems);
    for (var i = 0; i < items.length; i++) {
      var item = items[i];
      var id = opts.id_callback ? opts.id_callback.apply(item, [item]) : item.id;
      var elem = orig_elems.find(function (e) {
        return e.dataset.id == id;
      });
      elem = opts.add(item, elem, i) || elem;
      elem.dataset.id = id;
      if (opts.auto_insert) {
        insert_at(container, elem, i);
      }
      leftovers["delete"](elem);
    }
    var _iterator28 = _createForOfIteratorHelper(leftovers),
      _step28;
    try {
      for (_iterator28.s(); !(_step28 = _iterator28.n()).done;) {
        var elem = _step28.value;
        if (opts.remove) opts.remove(elem);else elem.remove();
      }
    } catch (err) {
      _iterator28.e(err);
    } finally {
      _iterator28.f();
    }
  }
  function is_html(str) {
    _temp_div.innerHTML = str;
    for (var c = _temp_div.childNodes, i = c.length; i--;) {
      if (c[i].nodeType == 1) return true;
    }
    return false;
  }
  function restart_animation(elem) {
    var parent = elem.parentElement;
    var i = get_index(elem);
    if (parent) {
      elem.remove();
      insert_at(parent, elem, i);
    }
  }
  function build_table(datas, opts) {
    opts = Object.assign({
      header: true,
      empty: "No Data"
    }, opts);
    var thead = "";
    var header = opts.header;
    if (typeof header == "boolean") {
      if (datas.length) header = Object.fromEntries(Object.keys(datas[0]).map(function (k) {
        return [k, k];
      }));else header = {};
    }
    header = Object.fromEntries(Object.entries(header).map(function (_ref8) {
      var _ref9 = _slicedToArray(_ref8, 2),
        k = _ref9[0],
        h = _ref9[1];
      return [k, typeof h === "string" ? {
        name: h
      } : h];
    }));
    thead = "<thead><tr>".concat(Object.values(header).map(function (h) {
      return "<th style=\"".concat(h.style || "", "\">").concat(h.name, "</th>");
    }).join(""), "</tr></thead>");
    var tbody = "<tbody>".concat(datas.length ? datas.map(function (d) {
      return "<tr>".concat(Object.keys(header).map(function (k) {
        return "<td style=\"".concat(header[k].style || "", "\">").concat(d[k], "</td>");
      }).join(""), "</tr>");
    }).join("") : "<td colspan=\"".concat(Object.keys(header).length, "\" style=\"text-align:center\">").concat(opts.empty, "</td>"), "</tbody>");
    var html = "<table>".concat(thead).concat(tbody, "</table>");
    return $$2(html)[0];
  }
  function scroll_percent(e, v) {
    if (v === undefined) {
      var x = e.scrollLeft / (e.scrollWidth - e.clientWidth);
      var y = e.scrollTop / (e.scrollHeight - e.clientHeight);
      return [isNaN(x) ? 1 : x, isNaN(y) ? 1 : y];
    } else {
      e.scrollLeft = (e.scrollWidth - e.clientWidth) * v[0];
      e.scrollTop = (e.scrollHeight - e.clientHeight) * v[1];
    }
  }
  function scroll_pos_from_bottom(e, v) {
    if (v === undefined) {
      return e.scrollHeight - e.clientHeight - e.scrollTop;
    } else {
      e.scrollTop = e.scrollHeight - e.clientHeight - v;
    }
  }
  /* scroll_into_view(e) {
      var p = e.parentElement;
      if ((e.offsetTop + e.offsetHeight) < p.scrollTop) p.scrollTop = e.offsetTop;
      else if (e.offsetTop > (p.scrollTop + p.offsetHeight)) p.scrollTop = e.offsetTop + e.offsetHeight - p.offsetHeight;
  }, */
  /** @param {Element} el @param {{block_offset:number, inline_offset:number, block:ScrollLogicalPosition, inline:ScrollLogicalPosition, behavior:ScrollBehavior }} options */
  function scroll_to(container, el, options) {
    var block_offset = options.block_offset,
      inline_offset = options.inline_offset,
      block = options.block,
      inline = options.inline,
      behavior = options.behavior;
    var rect = el.getBoundingClientRect();
    if (!block && !inline) block = "start";
    if (block && rect.height == 0) return;
    if (inline && rect.width == 0) return;
    var scroll_opts = {
      block: block,
      inline: inline,
      behavior: behavior
    };
    if (block) {
      var offset = rect.top - (block_offset || 0);
      if (block == "nearest" && nearest(0, rect.top, rect.bottom) == rect.bottom) block = "end";
      if (block == 'center') {
        var space = window.innerHeight - offset;
        if (rect.height < space) offset -= (space - rect.height) / 2;
      } else if (block == "end") {
        offset -= rect.height;
      }
      scroll_opts.top = offset;
    }
    if (inline) {
      var _offset = rect.left - (inline_offset || 0);
      if (block == "nearest" && nearest(0, rect.left, rect.right) == rect.right) block = "end";
      if (block == 'center') {
        var _space = window.innerWidth - _offset;
        if (rect.width < _space) _offset -= (_space - rect.width) / 2;
      } else if (block == "end") {
        _offset -= rect.width;
      }
      scroll_opts.left = _offset;
    }
    container.scrollBy(scroll_opts);
  }
  function set_text(elem, text) {
    text = String(text);
    if (elem.textContent != text) elem.textContent = text;
  }
  var inner_html_prop = "__inner_html_" + random_string(8);
  function set_inner_html(elem, html) {
    if (Array.isArray(html)) {
      set_children(elem, html);
    } else if (html instanceof Element) {
      if (elem.children[0] !== html) elem.prepend(html);
      for (var i = 1; i < elem.children.length; i++) elem.children[i].remove();
    } else {
      if (elem[inner_html_prop] !== html) {
        elem[inner_html_prop] = elem.innerHTML = html;
      }
      // _temp_div.innerHTML = html; // ugh. Needed for entities like & and whatnot
      // if (elem.innerHTML !== _temp_div.innerHTML) {
      //     elem.innerHTML = html;
      // }
    }
  }
  function set_children(elem, new_children) {
    var children = _toConsumableArray$2(elem.children);
    if (children.length && children.every(function (e, i) {
      return e === new_children[i];
    })) return;
    elem.replaceChildren.apply(elem, _toConsumableArray$2(new_children));
  }
  function encode_html_entities(str) {
    return String(str).replace(/[\u00A0-\u9999<>\&]/gim, function (i) {
      return "&#".concat(i.charCodeAt(0), ";");
    });
  }
  function decode_html_entities(str) {
    return String(str).replace(/&#\d+;/gm, function (s) {
      return String.fromCharCode(s.match(/\d+/)[0]);
    });
  }
  function toggle_class(elem, clazz, value) {
    if (elem.classList.contains(clazz) != value) {
      elem.classList.toggle(clazz, value);
    }
  }
  function set_attribute(elem, attr, value) {
    if (elem.getAttribute(attr) != value) {
      elem.setAttribute(attr, value);
    }
  }
  function toggle_attribute(elem, attr, value) {
    if (elem.hasAttribute(attr) != value) {
      elem.toggleAttribute(attr, value);
    }
  }
  function set_style_property(elem, prop, value) {
    if (elem.style.getPropertyValue(prop) != value) {
      elem.style.setProperty(prop, value);
    }
  }
  function escape_html_entities(text) {
    return text.replace(/[\u00A0-\u2666<>\&]/g, function (c) {
      return '&' + (entity_table[c.charCodeAt(0)] || '#' + c.charCodeAt(0)) + ';';
    });
  }
  function on_click_and_hold(elem, callback) {
    var delay = 0;
    var next_time = 0;
    var is_down = false;
    elem.addEventListener("mousedown", function (e) {
      next_time = 0;
      delay = 250;
      handleMouseDown(e);
    });
    document.addEventListener("mouseup", function (e) {
      handleMouseUp(e);
    });
    function handleMouseDown(e) {
      e.preventDefault();
      e.stopPropagation();
      is_down = true;
      requestAnimationFrame(watcher);
    }
    function handleMouseUp(e) {
      e.preventDefault();
      e.stopPropagation();
      is_down = false;
    }
    function watcher(time) {
      if (!is_down) return;
      if (time > next_time) {
        next_time = time + delay;
        delay = Math.max(50, delay - 50);
        callback.apply(elem);
      }
      requestAnimationFrame(watcher);
    }
  }
  function cycle_select(elem) {
    var trigger_change = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
    var value = elem.value;
    var options = Array.from(elem.options);
    var i = 0;
    for (; i < options.length; i++) {
      if (options[i].value == value) {
        i++;
        break;
      }
    }
    elem.value = options[i % options.length].value;
    if (trigger_change) elem.dispatchEvent(new Event("change"));
  }
  /** @return {Window} */
  function get_owner_window(node) {
    var doc = node.ownerDocument;
    return doc.defaultView ? doc.defaultView : doc.parentWindow;
  }

  // for textareas only
  function autosize(elem) {
    var min_rows = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 3;
    // var nearest_scrollable = closest(elem, (e)=>is_scrollbar_visible(e));
    // var scroll = [];
    // if (nearest_scrollable) {
    //     scroll = [nearest_scrollable.scrollLeft, nearest_scrollable.scrollTop];
    // }
    elem.setAttribute("rows", min_rows);
    elem.style.resize = "none";
    var style = getComputedStyle(elem, null);
    var heightOffset;
    if (style.boxSizing === 'content-box') {
      heightOffset = -(parseFloat(style.paddingTop) + parseFloat(style.paddingBottom));
    } else {
      heightOffset = parseFloat(style.borderTopWidth) + parseFloat(style.borderBottomWidth);
    }
    // Fix when a textarea is not on document body and heightOffset is Not a Number
    if (isNaN(heightOffset)) {
      heightOffset = 0;
    }
    elem.style.overflow = "hidden";
    elem.style.height = "auto";
    var h = Math.max(18 * min_rows, elem.scrollHeight) + heightOffset;
    if (h) elem.style.height = "".concat(h, "px");

    // if (nearest_scrollable) {
    //     nearest_scrollable.scrollTo(...scroll);
    // }
  }
  function has_focus(el) {
    var ancestors = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
    var active = el.getRootNode().activeElement;
    if (!ancestors) return active === el;
    return closest$2(el, function (e) {
      return e === active;
    });
  }
  function has_touch_screen() {
    if ("maxTouchPoints" in window.navigator) {
      return window.navigator.maxTouchPoints > 0;
    } else if ("msMaxTouchPoints" in window.navigator) {
      return window.navigator.msMaxTouchPoints > 0;
    } else {
      var mQ = window.matchMedia && window.matchMedia("(pointer:coarse)");
      if (mQ && mQ.media === "(pointer:coarse)") {
        return !!mQ.matches;
      } else if ('orientation' in window) {
        return true; // deprecated, but good fallback
      } else {
        // Only as a last resort, fall back to user agent sniffing
        var UA = window.navigator.userAgent;
        return /\b(BlackBerry|webOS|iPhone|IEMobile)\b/i.test(UA) || /\b(Android|Windows Phone|iPad|iPod)\b/i.test(UA);
      }
    }
  }
  function get_top_position(el) {
    var _el$getBoundingClient = el.getBoundingClientRect(),
      top = _el$getBoundingClient.top;
    var _window$getComputedSt = window.getComputedStyle(el),
      marginTop = _window$getComputedSt.marginTop;
    return top - parseInt(marginTop, 10);
  }
  function detect_wrapped_elements(parent, opts) {
    opts = Object.assign({
      isChildrenWrappedClassName: "is-wrapped",
      isSiblingWrappedClassName: "sibling-is-wrapped",
      isSelfWrappedClassName: "self-is-wrapped",
      nextIsWrappedClassName: "next-is-wrapped"
    }, opts);
    var any_wrapping = false;
    for (var i = 0; i < parent.children.length; i++) {
      var child = parent.children[i];
      var prev = parent.children[i - 1];
      var top = get_top_position(child);
      var prevTop = prev ? get_top_position(prev) : top;
      var is_wrapped = top > prevTop;
      child.classList.toggle(opts.isSelfWrappedClassName, is_wrapped);
      if (prev) prev.classList.toggle(opts.nextIsWrappedClassName, is_wrapped);
      if (is_wrapped) any_wrapping = true;
    }
    parent.classList.toggle(opts.isChildrenWrappedClassName, any_wrapping);
    _toConsumableArray$2(parent.children).forEach(function (e) {
      e.classList.toggle(opts.isSiblingWrappedClassName, !e.classList.contains(opts.isSelfWrappedClassName) && any_wrapping);
    });
  }
  function on_stylesheet_load(_x2) {
    return _on_stylesheet_load.apply(this, arguments);
  }
  function _on_stylesheet_load() {
    _on_stylesheet_load = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee5(elem) {
      var href, check_interval, resolve, i, check;
      return _regeneratorRuntime().wrap(function _callee5$(_context12) {
        while (1) switch (_context12.prev = _context12.next) {
          case 0:
            check = function _check2() {
              if (elem.sheet || ++i >= 100) return resolve(elem.sheet);
              var _iterator33 = _createForOfIteratorHelper(elem.ownerDocument.styleSheets),
                _step33;
              try {
                for (_iterator33.s(); !(_step33 = _iterator33.n()).done;) {
                  var ss = _step33.value;
                  if (ss.href === href) return resolve(ss);
                }
              } catch (err) {
                _iterator33.e(err);
              } finally {
                _iterator33.f();
              }
            };
            href = elem.href;
            if (href.startsWith("//")) href = location.protocol + href;else if (href.startsWith("/")) href = location.origin + href;
            if (!(elem.nodeName === "LINK" && elem.sheet)) {
              _context12.next = 5;
              break;
            }
            return _context12.abrupt("return", true);
          case 5:
            i = 0;
            return _context12.abrupt("return", new Promise(function (_resolve) {
              resolve = function resolve() {
                return _resolve(elem.sheet);
              };
              elem.addEventListener("load", resolve);
              check_interval = setInterval(check, 100);
              // setTimeout(check, 1);
            }).then(function (ss) {
              clearInterval(check_interval);
              elem.removeEventListener("load", resolve);
              return ss;
            }));
          case 7:
          case "end":
            return _context12.stop();
        }
      }, _callee5);
    }));
    return _on_stylesheet_load.apply(this, arguments);
  }
  function closest$2(elem, delegate) {
    var p = elem;
    while (p) {
      var r = delegate.apply(p, [p]);
      if (r) return p;
      p = p.parentElement;
    }
  }
  function is_scrollbar_visible(elem) {
    var doc = elem.ownerDocument;
    var win = doc.defaultView || doc.parentWindow;
    var scroll_lookup = {
      auto: true,
      scroll: true,
      visible: false,
      hidden: false
    };
    var styles = win.getComputedStyle(elem, null);
    var overflow_x = scroll_lookup[styles.overflowX.toLowerCase()] || false;
    var overflow_y = scroll_lookup[styles.overflowY.toLowerCase()] || false;
    return overflow_x || overflow_y;
  }
  function debounce_next_frame(func) {
    var timeout, args, context;
    var later = function later() {
      timeout = null;
      func.apply(context, args);
    };
    var debounced = function debounced() {
      context = this;
      for (var _len4 = arguments.length, p = new Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {
        p[_key4] = arguments[_key4];
      }
      args = p;
      if (!timeout) {
        timeout = requestAnimationFrame(later);
      }
    };
    debounced.cancel = function () {
      cancelAnimationFrame(timeout);
      timeout = args = context = null;
    };
    return debounced;
  }
  function uuid4() {
    return "".concat(1e7, "-", 1e3, "-", 4e3, "-", 8e3, "-", 1e11).replace(/[018]/g, function (c) {
      return (c ^ crypto.getRandomValues(new Uint8Array(1))[0] & 15 >> c / 4).toString(16);
    });
  }
  function uuidb64() {
    return btoa(uuid4());
  }
  // ignores text elements and whitespace
  /** @param {Element} dst @param {Element} src */
  function sync_attributes(dst, src) {
    var _iterator29 = _createForOfIteratorHelper(src.attributes),
      _step29;
    try {
      for (_iterator29.s(); !(_step29 = _iterator29.n()).done;) {
        var attr = _step29.value;
        if (src.getAttribute(attr.name) !== dst.getAttribute(attr.name)) dst.setAttribute(attr.name, attr.value);
      }
    } catch (err) {
      _iterator29.e(err);
    } finally {
      _iterator29.f();
    }
    var _iterator30 = _createForOfIteratorHelper(dst.attributes),
      _step30;
    try {
      for (_iterator30.s(); !(_step30 = _iterator30.n()).done;) {
        var attr = _step30.value;
        if (!src.hasAttribute(attr.name)) dst.removeAttribute(attr.name);
      }
    } catch (err) {
      _iterator30.e(err);
    } finally {
      _iterator30.f();
    }
  }
  // ignores text elements and whitespace
  /** @param {Element} dst @param {Element} src */
  function sync_dom(dst, src, opts) {
    opts = Object.assign({
      attrs: true
    }, opts);
    if (!(src && dst && src.nodeName === dst.nodeName)) throw new Error("src and dst must match nodeName to sync");
    if (opts.attrs) {
      sync_attributes(dst, src);
    }
    if (src.children.length == 0 && dst.children.length == 0) {
      set_inner_html(dst, src.innerHTML);
      return;
    }
    var get_id = function get_id(el) {
      return opts.get_id ? opts.get_id(el) : el.getAttribute("data-id") || el.id;
    };
    var dst_children = _toConsumableArray$2(dst.children);
    var i;
    for (i = 0; i < src.children.length; i++) {
      var src_c = src.children[i];
      var src_id = get_id(src_c);
      if (src_id) {
        var dst_c_index = dst_children.findIndex(function (c) {
          return get_id(c) === src_id;
        });
        if (dst_c_index != -1 && dst_c_index != i) {
          dst_children.splice(i, 0, dst_children.splice(dst_c_index, 1));
        }
      }
      var dst_c = dst_children[i];
      var same = src_c && dst_c && src_c.nodeName === dst_c.nodeName;
      if (!same) {
        if (dst_c) {
          dst_c.remove();
          dst_c = null;
        }
        if (src_c) dst_c = src_c.cloneNode(true);
      }
      if (dst_c) {
        if (!dst.children[i]) dst.append(dst_c);else if (dst.children[i] !== dst_c) dst.children[i].before(dst_c);
      }
      if (same) {
        sync_dom(dst_c, src_c);
      }
    }
    var leftovers = _toConsumableArray$2(dst.children).slice(i);
    var _iterator31 = _createForOfIteratorHelper(leftovers),
      _step31;
    try {
      for (_iterator31.s(); !(_step31 = _iterator31.n()).done;) {
        var dst_c = _step31.value;
        dst_c.remove();
      }
    } catch (err) {
      _iterator31.e(err);
    } finally {
      _iterator31.f();
    }
  }
  /* sync_contents(dst, src_children_or_inner_html) {
      if (typeof src_children_or_inner_html === "string") {
          set_inner_html(dst, src_children_or_inner_html);
          return;
      }
      var src_children = src_children_or_inner_html;
      if (!Array.isArray(src_children)) src_children = [src_children];
      for (var i=0; i<src_children.length; i++) {
          var dst_c = dst.children[i];
          var src_c = src_children[i];
          if (dst_c && src_c && dst_c.nodeName === src_c.nodeName) {
              sync_dom(dst_c, src_c);
          } else {
              if (dst_c) {
                  dst_c.before(src_c);
                  dst_c.remove();
              } else {
                  dst.append(src_c);
              }
          }
      }
      var leftovers = [...dst.children].slice(i);
      for (var e of leftovers) {
          e.remove();
      }
  } */

  /** @param {Element} el */
  function get_anchor_same_origin_hash(el) {
    var url = get_anchor_url(el);
    if (url && url.origin + url.pathname === window.location.origin + window.location.pathname && url.hash) return url.hash;
  }

  /** @param {Element} el */
  function get_anchor_url(el) {
    if (!el.matches("a")) return;
    /** @type {HTMLAnchorElement} */
    var anchor = el;
    return _try(function () {
      return new URL(anchor.href);
    });
  }

  /** @param {Element} el */
  function reset_style(el) {
    var props = [];
    for (var i = 0; i < el.style.length; i++) props[i] = el.style[i];
    for (var _i = 0, _props = props; _i < _props.length; _i++) {
      var k = _props[_i];
      el.style[k] = "";
    }
  }
  var _on_message = /*#__PURE__*/new WeakMap();
  var WindowCommunicator = /*#__PURE__*/function () {
    /** @param {Window} _window */
    function WindowCommunicator(_window) {
      var _this27 = this;
      _classCallCheck(this, WindowCommunicator);
      _defineProperty$2(this, "id", 0);
      _defineProperty$2(this, "requests", {});
      _defineProperty$2(this, "handlers", {});
      _classPrivateFieldInitSpec(this, _on_message, void 0);
      this.window = _window = _window || window;
      _window.addEventListener("message", _classPrivateFieldSet(_on_message, this, /*#__PURE__*/function () {
        var _ref10 = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee4(e) {
          var _e$data, request, data, id, response, payload, _e$data2;
          return _regeneratorRuntime().wrap(function _callee4$(_context10) {
            while (1) switch (_context10.prev = _context10.next) {
              case 0:
                if (!(e.data.event === "request")) {
                  _context10.next = 8;
                  break;
                }
                _e$data = e.data, request = _e$data.request, data = _e$data.data, id = _e$data.id;
                if (!_this27.handlers[request]) {
                  _context10.next = 6;
                  break;
                }
                _context10.next = 5;
                return Promise.resolve(_this27.handlers[request](data, e.source)).then(function (r) {
                  return response = r;
                });
              case 5:
                if (response !== undefined) {
                  payload = {
                    event: "response",
                    response: response,
                    id: id
                  };
                  e.source.postMessage(payload, "*");
                }
              case 6:
                _context10.next = 9;
                break;
              case 8:
                if (e.data.event === "response") {
                  // console.log(e.data)
                  _e$data2 = e.data, id = _e$data2.id, response = _e$data2.response;
                  if (id in _this27.requests) {
                    _this27.requests[id](response);
                    delete _this27.requests[id];
                  }
                }
              case 9:
              case "end":
                return _context10.stop();
            }
          }, _callee4);
        }));
        return function (_x3) {
          return _ref10.apply(this, arguments);
        };
      }()));
    }
    /** @param {string} request @param {function(any,Window):any} handler */
    return _createClass(WindowCommunicator, [{
      key: "on",
      value: function on(request, handler) {
        this.handlers[request] = handler;
      }
      /** @param {Window} window */
    }, {
      key: "request",
      value: function request(window, _request, data) {
        var _this28 = this;
        var timeout = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 10000;
        var id = ++this.id;
        var payload = {
          event: "request",
          request: _request,
          data: data,
          id: id
        };
        return new Promise(function (resolve, reject) {
          _this28.requests[id] = function (response) {
            resolve(response);
          };
          window.postMessage(payload, "*");
          setTimeout(function () {
            return reject("WindowCommunicator request ".concat(id, " timed out"));
          }, timeout);
        })["catch"](function (e) {
          return console.error(e);
        });
      }
    }, {
      key: "destroy",
      value: function destroy() {
        this.window.removeEventListener("message", _classPrivateFieldGet(_on_message, this));
      }
    }]);
  }();
  var ScrollOverlay = /*#__PURE__*/_createClass(function ScrollOverlay(el, opts) {
    _classCallCheck(this, ScrollOverlay);
    /** @type {import("overlayscrollbars").Options} */
    var os_opts = {};
    if (opts.hide) {
      os_opts.scrollbars = {};
      os_opts.scrollbars.autoHide = "move";
    }
    if (opts.x || opts.y) {
      os_opts.overflow = {};
      os_opts.overflow.x = opts.x ? "scroll" : "hidden";
      os_opts.overflow.y = opts.y ? "scroll" : "hidden";
    }
    this.overlayScrollbars = OverlayScrollbars(el, os_opts);
    this.viewport = this.overlayScrollbars.elements().viewport;
    if (opts.flex) this.viewport.style.display = "flex";
  });

  /** @param {HTMLIFrameElement} el */
  function iframe_ready(el) {
    return new Promise(function (resolve) {
      var _check = function check() {
        var doc = el.contentDocument || el.contentWindow.document;
        if (doc.readyState == 'complete') resolve();else setTimeout(_check, 100);
      };
      _check();
    });
  }

  /** @template T @param {Node} el @param {string} selector @param {new()=>T} type @returns {Iterable<T>} */
  function find$2(el, selector, type) {
    var _iterator32, _step32, c;
    return _regeneratorRuntime().wrap(function find$(_context11) {
      while (1) switch (_context11.prev = _context11.next) {
        case 0:
          if (el instanceof HTMLElement) {
            _context11.next = 2;
            break;
          }
          return _context11.abrupt("return");
        case 2:
          if (!el.matches(selector)) {
            _context11.next = 7;
            break;
          }
          _context11.next = 5;
          return el;
        case 5:
          _context11.next = 24;
          break;
        case 7:
          _iterator32 = _createForOfIteratorHelper(el.querySelectorAll(selector));
          _context11.prev = 8;
          _iterator32.s();
        case 10:
          if ((_step32 = _iterator32.n()).done) {
            _context11.next = 16;
            break;
          }
          c = _step32.value;
          _context11.next = 14;
          return c;
        case 14:
          _context11.next = 10;
          break;
        case 16:
          _context11.next = 21;
          break;
        case 18:
          _context11.prev = 18;
          _context11.t0 = _context11["catch"](8);
          _iterator32.e(_context11.t0);
        case 21:
          _context11.prev = 21;
          _iterator32.f();
          return _context11.finish(21);
        case 24:
        case "end":
          return _context11.stop();
      }
    }, _marked, null, [[8, 18, 21, 24]]);
  }

  var dom = /*#__PURE__*/Object.freeze({
    __proto__: null,
    AutoSizeController: AutoSizeController,
    ClickScrollPlugin: Dt,
    Cookie: api,
    LocalStorageBucket: LocalStorageBucket,
    OverlayScrollbars: OverlayScrollbars,
    ScrollOverlay: ScrollOverlay,
    ScrollbarsHidingPlugin: It,
    SizeObserverPlugin: Et,
    TouchListener: TouchListener,
    UI: UI,
    WebSocket: WebSocket2,
    WindowCommunicator: WindowCommunicator,
    autosize: autosize,
    build_table: build_table,
    clone_document_head: clone_document_head,
    closest: closest$2,
    cycle_select: cycle_select,
    debounce_next_frame: debounce_next_frame,
    decode_html_entities: decode_html_entities,
    detect_wrapped_elements: detect_wrapped_elements,
    download: download,
    empty: _empty,
    encode_html_entities: encode_html_entities,
    escape_html_entities: escape_html_entities,
    fetch: fetch,
    find: find$2,
    fix_options: fix_options,
    get_anchor_same_origin_hash: get_anchor_same_origin_hash,
    get_anchor_url: get_anchor_url,
    get_index: get_index,
    get_owner_window: get_owner_window,
    get_top_position: get_top_position,
    get_value: get_value,
    has_focus: has_focus,
    has_touch_screen: has_touch_screen,
    iframe_ready: iframe_ready,
    insert_after: insert_after,
    insert_at: insert_at,
    is_html: is_html,
    is_scrollbar_visible: is_scrollbar_visible,
    is_visible: is_visible,
    move: move,
    on_click_and_hold: on_click_and_hold,
    on_stylesheet_load: on_stylesheet_load,
    open_file_dialog: open_file_dialog,
    parse_style: parse_style,
    read_file: read_file,
    rebuild: rebuild,
    render_html: render_html,
    reset_style: reset_style,
    restart_animation: restart_animation,
    scroll_percent: scroll_percent,
    scroll_pos_from_bottom: scroll_pos_from_bottom,
    scroll_to: scroll_to,
    select_text: select_text,
    set_attribute: set_attribute,
    set_children: set_children,
    set_inner_html: set_inner_html,
    set_select_options: set_select_options,
    set_style_property: set_style_property,
    set_text: set_text,
    set_value: set_value,
    sync_attributes: sync_attributes,
    sync_dom: sync_dom,
    tippy: tippy,
    toggle_attribute: toggle_attribute,
    toggle_class: toggle_class,
    upload: upload,
    uuid4: uuid4,
    uuidb64: uuidb64
  });

  var commonjsGlobal = typeof globalThis !== 'undefined' ? globalThis : typeof window !== 'undefined' ? window : typeof global !== 'undefined' ? global : typeof self !== 'undefined' ? self : {};

  function getDefaultExportFromCjs (x) {
  	return x && x.__esModule && Object.prototype.hasOwnProperty.call(x, 'default') ? x['default'] : x;
  }

  var jquery$1 = {exports: {}};

  /*!
   * jQuery JavaScript Library v3.7.1
   * https://jquery.com/
   *
   * Copyright OpenJS Foundation and other contributors
   * Released under the MIT license
   * https://jquery.org/license
   *
   * Date: 2023-08-28T13:37Z
   */

  (function (module) {
  	( function( global, factory ) {

  		{

  			// For CommonJS and CommonJS-like environments where a proper `window`
  			// is present, execute the factory and get jQuery.
  			// For environments that do not have a `window` with a `document`
  			// (such as Node.js), expose a factory as module.exports.
  			// This accentuates the need for the creation of a real `window`.
  			// e.g. var jQuery = require("jquery")(window);
  			// See ticket trac-14549 for more info.
  			module.exports = global.document ?
  				factory( global, true ) :
  				function( w ) {
  					if ( !w.document ) {
  						throw new Error( "jQuery requires a window with a document" );
  					}
  					return factory( w );
  				};
  		}

  	// Pass this if window is not defined yet
  	} )( typeof window !== "undefined" ? window : commonjsGlobal, function( window, noGlobal ) {

  	var arr = [];

  	var getProto = Object.getPrototypeOf;

  	var slice = arr.slice;

  	var flat = arr.flat ? function( array ) {
  		return arr.flat.call( array );
  	} : function( array ) {
  		return arr.concat.apply( [], array );
  	};


  	var push = arr.push;

  	var indexOf = arr.indexOf;

  	var class2type = {};

  	var toString = class2type.toString;

  	var hasOwn = class2type.hasOwnProperty;

  	var fnToString = hasOwn.toString;

  	var ObjectFunctionString = fnToString.call( Object );

  	var support = {};

  	var isFunction = function isFunction( obj ) {

  			// Support: Chrome <=57, Firefox <=52
  			// In some browsers, typeof returns "function" for HTML <object> elements
  			// (i.e., `typeof document.createElement( "object" ) === "function"`).
  			// We don't want to classify *any* DOM node as a function.
  			// Support: QtWeb <=3.8.5, WebKit <=534.34, wkhtmltopdf tool <=0.12.5
  			// Plus for old WebKit, typeof returns "function" for HTML collections
  			// (e.g., `typeof document.getElementsByTagName("div") === "function"`). (gh-4756)
  			return typeof obj === "function" && typeof obj.nodeType !== "number" &&
  				typeof obj.item !== "function";
  		};


  	var isWindow = function isWindow( obj ) {
  			return obj != null && obj === obj.window;
  		};


  	var document = window.document;



  		var preservedScriptAttributes = {
  			type: true,
  			src: true,
  			nonce: true,
  			noModule: true
  		};

  		function DOMEval( code, node, doc ) {
  			doc = doc || document;

  			var i, val,
  				script = doc.createElement( "script" );

  			script.text = code;
  			if ( node ) {
  				for ( i in preservedScriptAttributes ) {

  					// Support: Firefox 64+, Edge 18+
  					// Some browsers don't support the "nonce" property on scripts.
  					// On the other hand, just using `getAttribute` is not enough as
  					// the `nonce` attribute is reset to an empty string whenever it
  					// becomes browsing-context connected.
  					// See https://github.com/whatwg/html/issues/2369
  					// See https://html.spec.whatwg.org/#nonce-attributes
  					// The `node.getAttribute` check was added for the sake of
  					// `jQuery.globalEval` so that it can fake a nonce-containing node
  					// via an object.
  					val = node[ i ] || node.getAttribute && node.getAttribute( i );
  					if ( val ) {
  						script.setAttribute( i, val );
  					}
  				}
  			}
  			doc.head.appendChild( script ).parentNode.removeChild( script );
  		}


  	function toType( obj ) {
  		if ( obj == null ) {
  			return obj + "";
  		}

  		// Support: Android <=2.3 only (functionish RegExp)
  		return typeof obj === "object" || typeof obj === "function" ?
  			class2type[ toString.call( obj ) ] || "object" :
  			typeof obj;
  	}
  	/* global Symbol */
  	// Defining this global in .eslintrc.json would create a danger of using the global
  	// unguarded in another place, it seems safer to define global only for this module



  	var version = "3.7.1",

  		rhtmlSuffix = /HTML$/i,

  		// Define a local copy of jQuery
  		jQuery = function( selector, context ) {

  			// The jQuery object is actually just the init constructor 'enhanced'
  			// Need init if jQuery is called (just allow error to be thrown if not included)
  			return new jQuery.fn.init( selector, context );
  		};

  	jQuery.fn = jQuery.prototype = {

  		// The current version of jQuery being used
  		jquery: version,

  		constructor: jQuery,

  		// The default length of a jQuery object is 0
  		length: 0,

  		toArray: function() {
  			return slice.call( this );
  		},

  		// Get the Nth element in the matched element set OR
  		// Get the whole matched element set as a clean array
  		get: function( num ) {

  			// Return all the elements in a clean array
  			if ( num == null ) {
  				return slice.call( this );
  			}

  			// Return just the one element from the set
  			return num < 0 ? this[ num + this.length ] : this[ num ];
  		},

  		// Take an array of elements and push it onto the stack
  		// (returning the new matched element set)
  		pushStack: function( elems ) {

  			// Build a new jQuery matched element set
  			var ret = jQuery.merge( this.constructor(), elems );

  			// Add the old object onto the stack (as a reference)
  			ret.prevObject = this;

  			// Return the newly-formed element set
  			return ret;
  		},

  		// Execute a callback for every element in the matched set.
  		each: function( callback ) {
  			return jQuery.each( this, callback );
  		},

  		map: function( callback ) {
  			return this.pushStack( jQuery.map( this, function( elem, i ) {
  				return callback.call( elem, i, elem );
  			} ) );
  		},

  		slice: function() {
  			return this.pushStack( slice.apply( this, arguments ) );
  		},

  		first: function() {
  			return this.eq( 0 );
  		},

  		last: function() {
  			return this.eq( -1 );
  		},

  		even: function() {
  			return this.pushStack( jQuery.grep( this, function( _elem, i ) {
  				return ( i + 1 ) % 2;
  			} ) );
  		},

  		odd: function() {
  			return this.pushStack( jQuery.grep( this, function( _elem, i ) {
  				return i % 2;
  			} ) );
  		},

  		eq: function( i ) {
  			var len = this.length,
  				j = +i + ( i < 0 ? len : 0 );
  			return this.pushStack( j >= 0 && j < len ? [ this[ j ] ] : [] );
  		},

  		end: function() {
  			return this.prevObject || this.constructor();
  		},

  		// For internal use only.
  		// Behaves like an Array's method, not like a jQuery method.
  		push: push,
  		sort: arr.sort,
  		splice: arr.splice
  	};

  	jQuery.extend = jQuery.fn.extend = function() {
  		var options, name, src, copy, copyIsArray, clone,
  			target = arguments[ 0 ] || {},
  			i = 1,
  			length = arguments.length,
  			deep = false;

  		// Handle a deep copy situation
  		if ( typeof target === "boolean" ) {
  			deep = target;

  			// Skip the boolean and the target
  			target = arguments[ i ] || {};
  			i++;
  		}

  		// Handle case when target is a string or something (possible in deep copy)
  		if ( typeof target !== "object" && !isFunction( target ) ) {
  			target = {};
  		}

  		// Extend jQuery itself if only one argument is passed
  		if ( i === length ) {
  			target = this;
  			i--;
  		}

  		for ( ; i < length; i++ ) {

  			// Only deal with non-null/undefined values
  			if ( ( options = arguments[ i ] ) != null ) {

  				// Extend the base object
  				for ( name in options ) {
  					copy = options[ name ];

  					// Prevent Object.prototype pollution
  					// Prevent never-ending loop
  					if ( name === "__proto__" || target === copy ) {
  						continue;
  					}

  					// Recurse if we're merging plain objects or arrays
  					if ( deep && copy && ( jQuery.isPlainObject( copy ) ||
  						( copyIsArray = Array.isArray( copy ) ) ) ) {
  						src = target[ name ];

  						// Ensure proper type for the source value
  						if ( copyIsArray && !Array.isArray( src ) ) {
  							clone = [];
  						} else if ( !copyIsArray && !jQuery.isPlainObject( src ) ) {
  							clone = {};
  						} else {
  							clone = src;
  						}
  						copyIsArray = false;

  						// Never move original objects, clone them
  						target[ name ] = jQuery.extend( deep, clone, copy );

  					// Don't bring in undefined values
  					} else if ( copy !== undefined ) {
  						target[ name ] = copy;
  					}
  				}
  			}
  		}

  		// Return the modified object
  		return target;
  	};

  	jQuery.extend( {

  		// Unique for each copy of jQuery on the page
  		expando: "jQuery" + ( version + Math.random() ).replace( /\D/g, "" ),

  		// Assume jQuery is ready without the ready module
  		isReady: true,

  		error: function( msg ) {
  			throw new Error( msg );
  		},

  		noop: function() {},

  		isPlainObject: function( obj ) {
  			var proto, Ctor;

  			// Detect obvious negatives
  			// Use toString instead of jQuery.type to catch host objects
  			if ( !obj || toString.call( obj ) !== "[object Object]" ) {
  				return false;
  			}

  			proto = getProto( obj );

  			// Objects with no prototype (e.g., `Object.create( null )`) are plain
  			if ( !proto ) {
  				return true;
  			}

  			// Objects with prototype are plain iff they were constructed by a global Object function
  			Ctor = hasOwn.call( proto, "constructor" ) && proto.constructor;
  			return typeof Ctor === "function" && fnToString.call( Ctor ) === ObjectFunctionString;
  		},

  		isEmptyObject: function( obj ) {
  			var name;

  			for ( name in obj ) {
  				return false;
  			}
  			return true;
  		},

  		// Evaluates a script in a provided context; falls back to the global one
  		// if not specified.
  		globalEval: function( code, options, doc ) {
  			DOMEval( code, { nonce: options && options.nonce }, doc );
  		},

  		each: function( obj, callback ) {
  			var length, i = 0;

  			if ( isArrayLike( obj ) ) {
  				length = obj.length;
  				for ( ; i < length; i++ ) {
  					if ( callback.call( obj[ i ], i, obj[ i ] ) === false ) {
  						break;
  					}
  				}
  			} else {
  				for ( i in obj ) {
  					if ( callback.call( obj[ i ], i, obj[ i ] ) === false ) {
  						break;
  					}
  				}
  			}

  			return obj;
  		},


  		// Retrieve the text value of an array of DOM nodes
  		text: function( elem ) {
  			var node,
  				ret = "",
  				i = 0,
  				nodeType = elem.nodeType;

  			if ( !nodeType ) {

  				// If no nodeType, this is expected to be an array
  				while ( ( node = elem[ i++ ] ) ) {

  					// Do not traverse comment nodes
  					ret += jQuery.text( node );
  				}
  			}
  			if ( nodeType === 1 || nodeType === 11 ) {
  				return elem.textContent;
  			}
  			if ( nodeType === 9 ) {
  				return elem.documentElement.textContent;
  			}
  			if ( nodeType === 3 || nodeType === 4 ) {
  				return elem.nodeValue;
  			}

  			// Do not include comment or processing instruction nodes

  			return ret;
  		},

  		// results is for internal usage only
  		makeArray: function( arr, results ) {
  			var ret = results || [];

  			if ( arr != null ) {
  				if ( isArrayLike( Object( arr ) ) ) {
  					jQuery.merge( ret,
  						typeof arr === "string" ?
  							[ arr ] : arr
  					);
  				} else {
  					push.call( ret, arr );
  				}
  			}

  			return ret;
  		},

  		inArray: function( elem, arr, i ) {
  			return arr == null ? -1 : indexOf.call( arr, elem, i );
  		},

  		isXMLDoc: function( elem ) {
  			var namespace = elem && elem.namespaceURI,
  				docElem = elem && ( elem.ownerDocument || elem ).documentElement;

  			// Assume HTML when documentElement doesn't yet exist, such as inside
  			// document fragments.
  			return !rhtmlSuffix.test( namespace || docElem && docElem.nodeName || "HTML" );
  		},

  		// Support: Android <=4.0 only, PhantomJS 1 only
  		// push.apply(_, arraylike) throws on ancient WebKit
  		merge: function( first, second ) {
  			var len = +second.length,
  				j = 0,
  				i = first.length;

  			for ( ; j < len; j++ ) {
  				first[ i++ ] = second[ j ];
  			}

  			first.length = i;

  			return first;
  		},

  		grep: function( elems, callback, invert ) {
  			var callbackInverse,
  				matches = [],
  				i = 0,
  				length = elems.length,
  				callbackExpect = !invert;

  			// Go through the array, only saving the items
  			// that pass the validator function
  			for ( ; i < length; i++ ) {
  				callbackInverse = !callback( elems[ i ], i );
  				if ( callbackInverse !== callbackExpect ) {
  					matches.push( elems[ i ] );
  				}
  			}

  			return matches;
  		},

  		// arg is for internal usage only
  		map: function( elems, callback, arg ) {
  			var length, value,
  				i = 0,
  				ret = [];

  			// Go through the array, translating each of the items to their new values
  			if ( isArrayLike( elems ) ) {
  				length = elems.length;
  				for ( ; i < length; i++ ) {
  					value = callback( elems[ i ], i, arg );

  					if ( value != null ) {
  						ret.push( value );
  					}
  				}

  			// Go through every key on the object,
  			} else {
  				for ( i in elems ) {
  					value = callback( elems[ i ], i, arg );

  					if ( value != null ) {
  						ret.push( value );
  					}
  				}
  			}

  			// Flatten any nested arrays
  			return flat( ret );
  		},

  		// A global GUID counter for objects
  		guid: 1,

  		// jQuery.support is not used in Core but other projects attach their
  		// properties to it so it needs to exist.
  		support: support
  	} );

  	if ( typeof Symbol === "function" ) {
  		jQuery.fn[ Symbol.iterator ] = arr[ Symbol.iterator ];
  	}

  	// Populate the class2type map
  	jQuery.each( "Boolean Number String Function Array Date RegExp Object Error Symbol".split( " " ),
  		function( _i, name ) {
  			class2type[ "[object " + name + "]" ] = name.toLowerCase();
  		} );

  	function isArrayLike( obj ) {

  		// Support: real iOS 8.2 only (not reproducible in simulator)
  		// `in` check used to prevent JIT error (gh-2145)
  		// hasOwn isn't used here due to false negatives
  		// regarding Nodelist length in IE
  		var length = !!obj && "length" in obj && obj.length,
  			type = toType( obj );

  		if ( isFunction( obj ) || isWindow( obj ) ) {
  			return false;
  		}

  		return type === "array" || length === 0 ||
  			typeof length === "number" && length > 0 && ( length - 1 ) in obj;
  	}


  	function nodeName( elem, name ) {

  		return elem.nodeName && elem.nodeName.toLowerCase() === name.toLowerCase();

  	}
  	var pop = arr.pop;


  	var sort = arr.sort;


  	var splice = arr.splice;


  	var whitespace = "[\\x20\\t\\r\\n\\f]";


  	var rtrimCSS = new RegExp(
  		"^" + whitespace + "+|((?:^|[^\\\\])(?:\\\\.)*)" + whitespace + "+$",
  		"g"
  	);




  	// Note: an element does not contain itself
  	jQuery.contains = function( a, b ) {
  		var bup = b && b.parentNode;

  		return a === bup || !!( bup && bup.nodeType === 1 && (

  			// Support: IE 9 - 11+
  			// IE doesn't have `contains` on SVG.
  			a.contains ?
  				a.contains( bup ) :
  				a.compareDocumentPosition && a.compareDocumentPosition( bup ) & 16
  		) );
  	};




  	// CSS string/identifier serialization
  	// https://drafts.csswg.org/cssom/#common-serializing-idioms
  	var rcssescape = /([\0-\x1f\x7f]|^-?\d)|^-$|[^\x80-\uFFFF\w-]/g;

  	function fcssescape( ch, asCodePoint ) {
  		if ( asCodePoint ) {

  			// U+0000 NULL becomes U+FFFD REPLACEMENT CHARACTER
  			if ( ch === "\0" ) {
  				return "\uFFFD";
  			}

  			// Control characters and (dependent upon position) numbers get escaped as code points
  			return ch.slice( 0, -1 ) + "\\" + ch.charCodeAt( ch.length - 1 ).toString( 16 ) + " ";
  		}

  		// Other potentially-special ASCII characters get backslash-escaped
  		return "\\" + ch;
  	}

  	jQuery.escapeSelector = function( sel ) {
  		return ( sel + "" ).replace( rcssescape, fcssescape );
  	};




  	var preferredDoc = document,
  		pushNative = push;

  	( function() {

  	var i,
  		Expr,
  		outermostContext,
  		sortInput,
  		hasDuplicate,
  		push = pushNative,

  		// Local document vars
  		document,
  		documentElement,
  		documentIsHTML,
  		rbuggyQSA,
  		matches,

  		// Instance-specific data
  		expando = jQuery.expando,
  		dirruns = 0,
  		done = 0,
  		classCache = createCache(),
  		tokenCache = createCache(),
  		compilerCache = createCache(),
  		nonnativeSelectorCache = createCache(),
  		sortOrder = function( a, b ) {
  			if ( a === b ) {
  				hasDuplicate = true;
  			}
  			return 0;
  		},

  		booleans = "checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|ismap|" +
  			"loop|multiple|open|readonly|required|scoped",

  		// Regular expressions

  		// https://www.w3.org/TR/css-syntax-3/#ident-token-diagram
  		identifier = "(?:\\\\[\\da-fA-F]{1,6}" + whitespace +
  			"?|\\\\[^\\r\\n\\f]|[\\w-]|[^\0-\\x7f])+",

  		// Attribute selectors: https://www.w3.org/TR/selectors/#attribute-selectors
  		attributes = "\\[" + whitespace + "*(" + identifier + ")(?:" + whitespace +

  			// Operator (capture 2)
  			"*([*^$|!~]?=)" + whitespace +

  			// "Attribute values must be CSS identifiers [capture 5] or strings [capture 3 or capture 4]"
  			"*(?:'((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\"|(" + identifier + "))|)" +
  			whitespace + "*\\]",

  		pseudos = ":(" + identifier + ")(?:\\((" +

  			// To reduce the number of selectors needing tokenize in the preFilter, prefer arguments:
  			// 1. quoted (capture 3; capture 4 or capture 5)
  			"('((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\")|" +

  			// 2. simple (capture 6)
  			"((?:\\\\.|[^\\\\()[\\]]|" + attributes + ")*)|" +

  			// 3. anything else (capture 2)
  			".*" +
  			")\\)|)",

  		// Leading and non-escaped trailing whitespace, capturing some non-whitespace characters preceding the latter
  		rwhitespace = new RegExp( whitespace + "+", "g" ),

  		rcomma = new RegExp( "^" + whitespace + "*," + whitespace + "*" ),
  		rleadingCombinator = new RegExp( "^" + whitespace + "*([>+~]|" + whitespace + ")" +
  			whitespace + "*" ),
  		rdescend = new RegExp( whitespace + "|>" ),

  		rpseudo = new RegExp( pseudos ),
  		ridentifier = new RegExp( "^" + identifier + "$" ),

  		matchExpr = {
  			ID: new RegExp( "^#(" + identifier + ")" ),
  			CLASS: new RegExp( "^\\.(" + identifier + ")" ),
  			TAG: new RegExp( "^(" + identifier + "|[*])" ),
  			ATTR: new RegExp( "^" + attributes ),
  			PSEUDO: new RegExp( "^" + pseudos ),
  			CHILD: new RegExp(
  				"^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\(" +
  					whitespace + "*(even|odd|(([+-]|)(\\d*)n|)" + whitespace + "*(?:([+-]|)" +
  					whitespace + "*(\\d+)|))" + whitespace + "*\\)|)", "i" ),
  			bool: new RegExp( "^(?:" + booleans + ")$", "i" ),

  			// For use in libraries implementing .is()
  			// We use this for POS matching in `select`
  			needsContext: new RegExp( "^" + whitespace +
  				"*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\(" + whitespace +
  				"*((?:-\\d)?\\d*)" + whitespace + "*\\)|)(?=[^-]|$)", "i" )
  		},

  		rinputs = /^(?:input|select|textarea|button)$/i,
  		rheader = /^h\d$/i,

  		// Easily-parseable/retrievable ID or TAG or CLASS selectors
  		rquickExpr = /^(?:#([\w-]+)|(\w+)|\.([\w-]+))$/,

  		rsibling = /[+~]/,

  		// CSS escapes
  		// https://www.w3.org/TR/CSS21/syndata.html#escaped-characters
  		runescape = new RegExp( "\\\\[\\da-fA-F]{1,6}" + whitespace +
  			"?|\\\\([^\\r\\n\\f])", "g" ),
  		funescape = function( escape, nonHex ) {
  			var high = "0x" + escape.slice( 1 ) - 0x10000;

  			if ( nonHex ) {

  				// Strip the backslash prefix from a non-hex escape sequence
  				return nonHex;
  			}

  			// Replace a hexadecimal escape sequence with the encoded Unicode code point
  			// Support: IE <=11+
  			// For values outside the Basic Multilingual Plane (BMP), manually construct a
  			// surrogate pair
  			return high < 0 ?
  				String.fromCharCode( high + 0x10000 ) :
  				String.fromCharCode( high >> 10 | 0xD800, high & 0x3FF | 0xDC00 );
  		},

  		// Used for iframes; see `setDocument`.
  		// Support: IE 9 - 11+, Edge 12 - 18+
  		// Removing the function wrapper causes a "Permission Denied"
  		// error in IE/Edge.
  		unloadHandler = function() {
  			setDocument();
  		},

  		inDisabledFieldset = addCombinator(
  			function( elem ) {
  				return elem.disabled === true && nodeName( elem, "fieldset" );
  			},
  			{ dir: "parentNode", next: "legend" }
  		);

  	// Support: IE <=9 only
  	// Accessing document.activeElement can throw unexpectedly
  	// https://bugs.jquery.com/ticket/13393
  	function safeActiveElement() {
  		try {
  			return document.activeElement;
  		} catch ( err ) { }
  	}

  	// Optimize for push.apply( _, NodeList )
  	try {
  		push.apply(
  			( arr = slice.call( preferredDoc.childNodes ) ),
  			preferredDoc.childNodes
  		);

  		// Support: Android <=4.0
  		// Detect silently failing push.apply
  		// eslint-disable-next-line no-unused-expressions
  		arr[ preferredDoc.childNodes.length ].nodeType;
  	} catch ( e ) {
  		push = {
  			apply: function( target, els ) {
  				pushNative.apply( target, slice.call( els ) );
  			},
  			call: function( target ) {
  				pushNative.apply( target, slice.call( arguments, 1 ) );
  			}
  		};
  	}

  	function find( selector, context, results, seed ) {
  		var m, i, elem, nid, match, groups, newSelector,
  			newContext = context && context.ownerDocument,

  			// nodeType defaults to 9, since context defaults to document
  			nodeType = context ? context.nodeType : 9;

  		results = results || [];

  		// Return early from calls with invalid selector or context
  		if ( typeof selector !== "string" || !selector ||
  			nodeType !== 1 && nodeType !== 9 && nodeType !== 11 ) {

  			return results;
  		}

  		// Try to shortcut find operations (as opposed to filters) in HTML documents
  		if ( !seed ) {
  			setDocument( context );
  			context = context || document;

  			if ( documentIsHTML ) {

  				// If the selector is sufficiently simple, try using a "get*By*" DOM method
  				// (excepting DocumentFragment context, where the methods don't exist)
  				if ( nodeType !== 11 && ( match = rquickExpr.exec( selector ) ) ) {

  					// ID selector
  					if ( ( m = match[ 1 ] ) ) {

  						// Document context
  						if ( nodeType === 9 ) {
  							if ( ( elem = context.getElementById( m ) ) ) {

  								// Support: IE 9 only
  								// getElementById can match elements by name instead of ID
  								if ( elem.id === m ) {
  									push.call( results, elem );
  									return results;
  								}
  							} else {
  								return results;
  							}

  						// Element context
  						} else {

  							// Support: IE 9 only
  							// getElementById can match elements by name instead of ID
  							if ( newContext && ( elem = newContext.getElementById( m ) ) &&
  								find.contains( context, elem ) &&
  								elem.id === m ) {

  								push.call( results, elem );
  								return results;
  							}
  						}

  					// Type selector
  					} else if ( match[ 2 ] ) {
  						push.apply( results, context.getElementsByTagName( selector ) );
  						return results;

  					// Class selector
  					} else if ( ( m = match[ 3 ] ) && context.getElementsByClassName ) {
  						push.apply( results, context.getElementsByClassName( m ) );
  						return results;
  					}
  				}

  				// Take advantage of querySelectorAll
  				if ( !nonnativeSelectorCache[ selector + " " ] &&
  					( !rbuggyQSA || !rbuggyQSA.test( selector ) ) ) {

  					newSelector = selector;
  					newContext = context;

  					// qSA considers elements outside a scoping root when evaluating child or
  					// descendant combinators, which is not what we want.
  					// In such cases, we work around the behavior by prefixing every selector in the
  					// list with an ID selector referencing the scope context.
  					// The technique has to be used as well when a leading combinator is used
  					// as such selectors are not recognized by querySelectorAll.
  					// Thanks to Andrew Dupont for this technique.
  					if ( nodeType === 1 &&
  						( rdescend.test( selector ) || rleadingCombinator.test( selector ) ) ) {

  						// Expand context for sibling selectors
  						newContext = rsibling.test( selector ) && testContext( context.parentNode ) ||
  							context;

  						// We can use :scope instead of the ID hack if the browser
  						// supports it & if we're not changing the context.
  						// Support: IE 11+, Edge 17 - 18+
  						// IE/Edge sometimes throw a "Permission denied" error when
  						// strict-comparing two documents; shallow comparisons work.
  						// eslint-disable-next-line eqeqeq
  						if ( newContext != context || !support.scope ) {

  							// Capture the context ID, setting it first if necessary
  							if ( ( nid = context.getAttribute( "id" ) ) ) {
  								nid = jQuery.escapeSelector( nid );
  							} else {
  								context.setAttribute( "id", ( nid = expando ) );
  							}
  						}

  						// Prefix every selector in the list
  						groups = tokenize( selector );
  						i = groups.length;
  						while ( i-- ) {
  							groups[ i ] = ( nid ? "#" + nid : ":scope" ) + " " +
  								toSelector( groups[ i ] );
  						}
  						newSelector = groups.join( "," );
  					}

  					try {
  						push.apply( results,
  							newContext.querySelectorAll( newSelector )
  						);
  						return results;
  					} catch ( qsaError ) {
  						nonnativeSelectorCache( selector, true );
  					} finally {
  						if ( nid === expando ) {
  							context.removeAttribute( "id" );
  						}
  					}
  				}
  			}
  		}

  		// All others
  		return select( selector.replace( rtrimCSS, "$1" ), context, results, seed );
  	}

  	/**
  	 * Create key-value caches of limited size
  	 * @returns {function(string, object)} Returns the Object data after storing it on itself with
  	 *	property name the (space-suffixed) string and (if the cache is larger than Expr.cacheLength)
  	 *	deleting the oldest entry
  	 */
  	function createCache() {
  		var keys = [];

  		function cache( key, value ) {

  			// Use (key + " ") to avoid collision with native prototype properties
  			// (see https://github.com/jquery/sizzle/issues/157)
  			if ( keys.push( key + " " ) > Expr.cacheLength ) {

  				// Only keep the most recent entries
  				delete cache[ keys.shift() ];
  			}
  			return ( cache[ key + " " ] = value );
  		}
  		return cache;
  	}

  	/**
  	 * Mark a function for special use by jQuery selector module
  	 * @param {Function} fn The function to mark
  	 */
  	function markFunction( fn ) {
  		fn[ expando ] = true;
  		return fn;
  	}

  	/**
  	 * Support testing using an element
  	 * @param {Function} fn Passed the created element and returns a boolean result
  	 */
  	function assert( fn ) {
  		var el = document.createElement( "fieldset" );

  		try {
  			return !!fn( el );
  		} catch ( e ) {
  			return false;
  		} finally {

  			// Remove from its parent by default
  			if ( el.parentNode ) {
  				el.parentNode.removeChild( el );
  			}

  			// release memory in IE
  			el = null;
  		}
  	}

  	/**
  	 * Returns a function to use in pseudos for input types
  	 * @param {String} type
  	 */
  	function createInputPseudo( type ) {
  		return function( elem ) {
  			return nodeName( elem, "input" ) && elem.type === type;
  		};
  	}

  	/**
  	 * Returns a function to use in pseudos for buttons
  	 * @param {String} type
  	 */
  	function createButtonPseudo( type ) {
  		return function( elem ) {
  			return ( nodeName( elem, "input" ) || nodeName( elem, "button" ) ) &&
  				elem.type === type;
  		};
  	}

  	/**
  	 * Returns a function to use in pseudos for :enabled/:disabled
  	 * @param {Boolean} disabled true for :disabled; false for :enabled
  	 */
  	function createDisabledPseudo( disabled ) {

  		// Known :disabled false positives: fieldset[disabled] > legend:nth-of-type(n+2) :can-disable
  		return function( elem ) {

  			// Only certain elements can match :enabled or :disabled
  			// https://html.spec.whatwg.org/multipage/scripting.html#selector-enabled
  			// https://html.spec.whatwg.org/multipage/scripting.html#selector-disabled
  			if ( "form" in elem ) {

  				// Check for inherited disabledness on relevant non-disabled elements:
  				// * listed form-associated elements in a disabled fieldset
  				//   https://html.spec.whatwg.org/multipage/forms.html#category-listed
  				//   https://html.spec.whatwg.org/multipage/forms.html#concept-fe-disabled
  				// * option elements in a disabled optgroup
  				//   https://html.spec.whatwg.org/multipage/forms.html#concept-option-disabled
  				// All such elements have a "form" property.
  				if ( elem.parentNode && elem.disabled === false ) {

  					// Option elements defer to a parent optgroup if present
  					if ( "label" in elem ) {
  						if ( "label" in elem.parentNode ) {
  							return elem.parentNode.disabled === disabled;
  						} else {
  							return elem.disabled === disabled;
  						}
  					}

  					// Support: IE 6 - 11+
  					// Use the isDisabled shortcut property to check for disabled fieldset ancestors
  					return elem.isDisabled === disabled ||

  						// Where there is no isDisabled, check manually
  						elem.isDisabled !== !disabled &&
  							inDisabledFieldset( elem ) === disabled;
  				}

  				return elem.disabled === disabled;

  			// Try to winnow out elements that can't be disabled before trusting the disabled property.
  			// Some victims get caught in our net (label, legend, menu, track), but it shouldn't
  			// even exist on them, let alone have a boolean value.
  			} else if ( "label" in elem ) {
  				return elem.disabled === disabled;
  			}

  			// Remaining elements are neither :enabled nor :disabled
  			return false;
  		};
  	}

  	/**
  	 * Returns a function to use in pseudos for positionals
  	 * @param {Function} fn
  	 */
  	function createPositionalPseudo( fn ) {
  		return markFunction( function( argument ) {
  			argument = +argument;
  			return markFunction( function( seed, matches ) {
  				var j,
  					matchIndexes = fn( [], seed.length, argument ),
  					i = matchIndexes.length;

  				// Match elements found at the specified indexes
  				while ( i-- ) {
  					if ( seed[ ( j = matchIndexes[ i ] ) ] ) {
  						seed[ j ] = !( matches[ j ] = seed[ j ] );
  					}
  				}
  			} );
  		} );
  	}

  	/**
  	 * Checks a node for validity as a jQuery selector context
  	 * @param {Element|Object=} context
  	 * @returns {Element|Object|Boolean} The input node if acceptable, otherwise a falsy value
  	 */
  	function testContext( context ) {
  		return context && typeof context.getElementsByTagName !== "undefined" && context;
  	}

  	/**
  	 * Sets document-related variables once based on the current document
  	 * @param {Element|Object} [node] An element or document object to use to set the document
  	 * @returns {Object} Returns the current document
  	 */
  	function setDocument( node ) {
  		var subWindow,
  			doc = node ? node.ownerDocument || node : preferredDoc;

  		// Return early if doc is invalid or already selected
  		// Support: IE 11+, Edge 17 - 18+
  		// IE/Edge sometimes throw a "Permission denied" error when strict-comparing
  		// two documents; shallow comparisons work.
  		// eslint-disable-next-line eqeqeq
  		if ( doc == document || doc.nodeType !== 9 || !doc.documentElement ) {
  			return document;
  		}

  		// Update global variables
  		document = doc;
  		documentElement = document.documentElement;
  		documentIsHTML = !jQuery.isXMLDoc( document );

  		// Support: iOS 7 only, IE 9 - 11+
  		// Older browsers didn't support unprefixed `matches`.
  		matches = documentElement.matches ||
  			documentElement.webkitMatchesSelector ||
  			documentElement.msMatchesSelector;

  		// Support: IE 9 - 11+, Edge 12 - 18+
  		// Accessing iframe documents after unload throws "permission denied" errors
  		// (see trac-13936).
  		// Limit the fix to IE & Edge Legacy; despite Edge 15+ implementing `matches`,
  		// all IE 9+ and Edge Legacy versions implement `msMatchesSelector` as well.
  		if ( documentElement.msMatchesSelector &&

  			// Support: IE 11+, Edge 17 - 18+
  			// IE/Edge sometimes throw a "Permission denied" error when strict-comparing
  			// two documents; shallow comparisons work.
  			// eslint-disable-next-line eqeqeq
  			preferredDoc != document &&
  			( subWindow = document.defaultView ) && subWindow.top !== subWindow ) {

  			// Support: IE 9 - 11+, Edge 12 - 18+
  			subWindow.addEventListener( "unload", unloadHandler );
  		}

  		// Support: IE <10
  		// Check if getElementById returns elements by name
  		// The broken getElementById methods don't pick up programmatically-set names,
  		// so use a roundabout getElementsByName test
  		support.getById = assert( function( el ) {
  			documentElement.appendChild( el ).id = jQuery.expando;
  			return !document.getElementsByName ||
  				!document.getElementsByName( jQuery.expando ).length;
  		} );

  		// Support: IE 9 only
  		// Check to see if it's possible to do matchesSelector
  		// on a disconnected node.
  		support.disconnectedMatch = assert( function( el ) {
  			return matches.call( el, "*" );
  		} );

  		// Support: IE 9 - 11+, Edge 12 - 18+
  		// IE/Edge don't support the :scope pseudo-class.
  		support.scope = assert( function() {
  			return document.querySelectorAll( ":scope" );
  		} );

  		// Support: Chrome 105 - 111 only, Safari 15.4 - 16.3 only
  		// Make sure the `:has()` argument is parsed unforgivingly.
  		// We include `*` in the test to detect buggy implementations that are
  		// _selectively_ forgiving (specifically when the list includes at least
  		// one valid selector).
  		// Note that we treat complete lack of support for `:has()` as if it were
  		// spec-compliant support, which is fine because use of `:has()` in such
  		// environments will fail in the qSA path and fall back to jQuery traversal
  		// anyway.
  		support.cssHas = assert( function() {
  			try {
  				document.querySelector( ":has(*,:jqfake)" );
  				return false;
  			} catch ( e ) {
  				return true;
  			}
  		} );

  		// ID filter and find
  		if ( support.getById ) {
  			Expr.filter.ID = function( id ) {
  				var attrId = id.replace( runescape, funescape );
  				return function( elem ) {
  					return elem.getAttribute( "id" ) === attrId;
  				};
  			};
  			Expr.find.ID = function( id, context ) {
  				if ( typeof context.getElementById !== "undefined" && documentIsHTML ) {
  					var elem = context.getElementById( id );
  					return elem ? [ elem ] : [];
  				}
  			};
  		} else {
  			Expr.filter.ID =  function( id ) {
  				var attrId = id.replace( runescape, funescape );
  				return function( elem ) {
  					var node = typeof elem.getAttributeNode !== "undefined" &&
  						elem.getAttributeNode( "id" );
  					return node && node.value === attrId;
  				};
  			};

  			// Support: IE 6 - 7 only
  			// getElementById is not reliable as a find shortcut
  			Expr.find.ID = function( id, context ) {
  				if ( typeof context.getElementById !== "undefined" && documentIsHTML ) {
  					var node, i, elems,
  						elem = context.getElementById( id );

  					if ( elem ) {

  						// Verify the id attribute
  						node = elem.getAttributeNode( "id" );
  						if ( node && node.value === id ) {
  							return [ elem ];
  						}

  						// Fall back on getElementsByName
  						elems = context.getElementsByName( id );
  						i = 0;
  						while ( ( elem = elems[ i++ ] ) ) {
  							node = elem.getAttributeNode( "id" );
  							if ( node && node.value === id ) {
  								return [ elem ];
  							}
  						}
  					}

  					return [];
  				}
  			};
  		}

  		// Tag
  		Expr.find.TAG = function( tag, context ) {
  			if ( typeof context.getElementsByTagName !== "undefined" ) {
  				return context.getElementsByTagName( tag );

  			// DocumentFragment nodes don't have gEBTN
  			} else {
  				return context.querySelectorAll( tag );
  			}
  		};

  		// Class
  		Expr.find.CLASS = function( className, context ) {
  			if ( typeof context.getElementsByClassName !== "undefined" && documentIsHTML ) {
  				return context.getElementsByClassName( className );
  			}
  		};

  		/* QSA/matchesSelector
  		---------------------------------------------------------------------- */

  		// QSA and matchesSelector support

  		rbuggyQSA = [];

  		// Build QSA regex
  		// Regex strategy adopted from Diego Perini
  		assert( function( el ) {

  			var input;

  			documentElement.appendChild( el ).innerHTML =
  				"<a id='" + expando + "' href='' disabled='disabled'></a>" +
  				"<select id='" + expando + "-\r\\' disabled='disabled'>" +
  				"<option selected=''></option></select>";

  			// Support: iOS <=7 - 8 only
  			// Boolean attributes and "value" are not treated correctly in some XML documents
  			if ( !el.querySelectorAll( "[selected]" ).length ) {
  				rbuggyQSA.push( "\\[" + whitespace + "*(?:value|" + booleans + ")" );
  			}

  			// Support: iOS <=7 - 8 only
  			if ( !el.querySelectorAll( "[id~=" + expando + "-]" ).length ) {
  				rbuggyQSA.push( "~=" );
  			}

  			// Support: iOS 8 only
  			// https://bugs.webkit.org/show_bug.cgi?id=136851
  			// In-page `selector#id sibling-combinator selector` fails
  			if ( !el.querySelectorAll( "a#" + expando + "+*" ).length ) {
  				rbuggyQSA.push( ".#.+[+~]" );
  			}

  			// Support: Chrome <=105+, Firefox <=104+, Safari <=15.4+
  			// In some of the document kinds, these selectors wouldn't work natively.
  			// This is probably OK but for backwards compatibility we want to maintain
  			// handling them through jQuery traversal in jQuery 3.x.
  			if ( !el.querySelectorAll( ":checked" ).length ) {
  				rbuggyQSA.push( ":checked" );
  			}

  			// Support: Windows 8 Native Apps
  			// The type and name attributes are restricted during .innerHTML assignment
  			input = document.createElement( "input" );
  			input.setAttribute( "type", "hidden" );
  			el.appendChild( input ).setAttribute( "name", "D" );

  			// Support: IE 9 - 11+
  			// IE's :disabled selector does not pick up the children of disabled fieldsets
  			// Support: Chrome <=105+, Firefox <=104+, Safari <=15.4+
  			// In some of the document kinds, these selectors wouldn't work natively.
  			// This is probably OK but for backwards compatibility we want to maintain
  			// handling them through jQuery traversal in jQuery 3.x.
  			documentElement.appendChild( el ).disabled = true;
  			if ( el.querySelectorAll( ":disabled" ).length !== 2 ) {
  				rbuggyQSA.push( ":enabled", ":disabled" );
  			}

  			// Support: IE 11+, Edge 15 - 18+
  			// IE 11/Edge don't find elements on a `[name='']` query in some cases.
  			// Adding a temporary attribute to the document before the selection works
  			// around the issue.
  			// Interestingly, IE 10 & older don't seem to have the issue.
  			input = document.createElement( "input" );
  			input.setAttribute( "name", "" );
  			el.appendChild( input );
  			if ( !el.querySelectorAll( "[name='']" ).length ) {
  				rbuggyQSA.push( "\\[" + whitespace + "*name" + whitespace + "*=" +
  					whitespace + "*(?:''|\"\")" );
  			}
  		} );

  		if ( !support.cssHas ) {

  			// Support: Chrome 105 - 110+, Safari 15.4 - 16.3+
  			// Our regular `try-catch` mechanism fails to detect natively-unsupported
  			// pseudo-classes inside `:has()` (such as `:has(:contains("Foo"))`)
  			// in browsers that parse the `:has()` argument as a forgiving selector list.
  			// https://drafts.csswg.org/selectors/#relational now requires the argument
  			// to be parsed unforgivingly, but browsers have not yet fully adjusted.
  			rbuggyQSA.push( ":has" );
  		}

  		rbuggyQSA = rbuggyQSA.length && new RegExp( rbuggyQSA.join( "|" ) );

  		/* Sorting
  		---------------------------------------------------------------------- */

  		// Document order sorting
  		sortOrder = function( a, b ) {

  			// Flag for duplicate removal
  			if ( a === b ) {
  				hasDuplicate = true;
  				return 0;
  			}

  			// Sort on method existence if only one input has compareDocumentPosition
  			var compare = !a.compareDocumentPosition - !b.compareDocumentPosition;
  			if ( compare ) {
  				return compare;
  			}

  			// Calculate position if both inputs belong to the same document
  			// Support: IE 11+, Edge 17 - 18+
  			// IE/Edge sometimes throw a "Permission denied" error when strict-comparing
  			// two documents; shallow comparisons work.
  			// eslint-disable-next-line eqeqeq
  			compare = ( a.ownerDocument || a ) == ( b.ownerDocument || b ) ?
  				a.compareDocumentPosition( b ) :

  				// Otherwise we know they are disconnected
  				1;

  			// Disconnected nodes
  			if ( compare & 1 ||
  				( !support.sortDetached && b.compareDocumentPosition( a ) === compare ) ) {

  				// Choose the first element that is related to our preferred document
  				// Support: IE 11+, Edge 17 - 18+
  				// IE/Edge sometimes throw a "Permission denied" error when strict-comparing
  				// two documents; shallow comparisons work.
  				// eslint-disable-next-line eqeqeq
  				if ( a === document || a.ownerDocument == preferredDoc &&
  					find.contains( preferredDoc, a ) ) {
  					return -1;
  				}

  				// Support: IE 11+, Edge 17 - 18+
  				// IE/Edge sometimes throw a "Permission denied" error when strict-comparing
  				// two documents; shallow comparisons work.
  				// eslint-disable-next-line eqeqeq
  				if ( b === document || b.ownerDocument == preferredDoc &&
  					find.contains( preferredDoc, b ) ) {
  					return 1;
  				}

  				// Maintain original order
  				return sortInput ?
  					( indexOf.call( sortInput, a ) - indexOf.call( sortInput, b ) ) :
  					0;
  			}

  			return compare & 4 ? -1 : 1;
  		};

  		return document;
  	}

  	find.matches = function( expr, elements ) {
  		return find( expr, null, null, elements );
  	};

  	find.matchesSelector = function( elem, expr ) {
  		setDocument( elem );

  		if ( documentIsHTML &&
  			!nonnativeSelectorCache[ expr + " " ] &&
  			( !rbuggyQSA || !rbuggyQSA.test( expr ) ) ) {

  			try {
  				var ret = matches.call( elem, expr );

  				// IE 9's matchesSelector returns false on disconnected nodes
  				if ( ret || support.disconnectedMatch ||

  						// As well, disconnected nodes are said to be in a document
  						// fragment in IE 9
  						elem.document && elem.document.nodeType !== 11 ) {
  					return ret;
  				}
  			} catch ( e ) {
  				nonnativeSelectorCache( expr, true );
  			}
  		}

  		return find( expr, document, null, [ elem ] ).length > 0;
  	};

  	find.contains = function( context, elem ) {

  		// Set document vars if needed
  		// Support: IE 11+, Edge 17 - 18+
  		// IE/Edge sometimes throw a "Permission denied" error when strict-comparing
  		// two documents; shallow comparisons work.
  		// eslint-disable-next-line eqeqeq
  		if ( ( context.ownerDocument || context ) != document ) {
  			setDocument( context );
  		}
  		return jQuery.contains( context, elem );
  	};


  	find.attr = function( elem, name ) {

  		// Set document vars if needed
  		// Support: IE 11+, Edge 17 - 18+
  		// IE/Edge sometimes throw a "Permission denied" error when strict-comparing
  		// two documents; shallow comparisons work.
  		// eslint-disable-next-line eqeqeq
  		if ( ( elem.ownerDocument || elem ) != document ) {
  			setDocument( elem );
  		}

  		var fn = Expr.attrHandle[ name.toLowerCase() ],

  			// Don't get fooled by Object.prototype properties (see trac-13807)
  			val = fn && hasOwn.call( Expr.attrHandle, name.toLowerCase() ) ?
  				fn( elem, name, !documentIsHTML ) :
  				undefined;

  		if ( val !== undefined ) {
  			return val;
  		}

  		return elem.getAttribute( name );
  	};

  	find.error = function( msg ) {
  		throw new Error( "Syntax error, unrecognized expression: " + msg );
  	};

  	/**
  	 * Document sorting and removing duplicates
  	 * @param {ArrayLike} results
  	 */
  	jQuery.uniqueSort = function( results ) {
  		var elem,
  			duplicates = [],
  			j = 0,
  			i = 0;

  		// Unless we *know* we can detect duplicates, assume their presence
  		//
  		// Support: Android <=4.0+
  		// Testing for detecting duplicates is unpredictable so instead assume we can't
  		// depend on duplicate detection in all browsers without a stable sort.
  		hasDuplicate = !support.sortStable;
  		sortInput = !support.sortStable && slice.call( results, 0 );
  		sort.call( results, sortOrder );

  		if ( hasDuplicate ) {
  			while ( ( elem = results[ i++ ] ) ) {
  				if ( elem === results[ i ] ) {
  					j = duplicates.push( i );
  				}
  			}
  			while ( j-- ) {
  				splice.call( results, duplicates[ j ], 1 );
  			}
  		}

  		// Clear input after sorting to release objects
  		// See https://github.com/jquery/sizzle/pull/225
  		sortInput = null;

  		return results;
  	};

  	jQuery.fn.uniqueSort = function() {
  		return this.pushStack( jQuery.uniqueSort( slice.apply( this ) ) );
  	};

  	Expr = jQuery.expr = {

  		// Can be adjusted by the user
  		cacheLength: 50,

  		createPseudo: markFunction,

  		match: matchExpr,

  		attrHandle: {},

  		find: {},

  		relative: {
  			">": { dir: "parentNode", first: true },
  			" ": { dir: "parentNode" },
  			"+": { dir: "previousSibling", first: true },
  			"~": { dir: "previousSibling" }
  		},

  		preFilter: {
  			ATTR: function( match ) {
  				match[ 1 ] = match[ 1 ].replace( runescape, funescape );

  				// Move the given value to match[3] whether quoted or unquoted
  				match[ 3 ] = ( match[ 3 ] || match[ 4 ] || match[ 5 ] || "" )
  					.replace( runescape, funescape );

  				if ( match[ 2 ] === "~=" ) {
  					match[ 3 ] = " " + match[ 3 ] + " ";
  				}

  				return match.slice( 0, 4 );
  			},

  			CHILD: function( match ) {

  				/* matches from matchExpr["CHILD"]
  					1 type (only|nth|...)
  					2 what (child|of-type)
  					3 argument (even|odd|\d*|\d*n([+-]\d+)?|...)
  					4 xn-component of xn+y argument ([+-]?\d*n|)
  					5 sign of xn-component
  					6 x of xn-component
  					7 sign of y-component
  					8 y of y-component
  				*/
  				match[ 1 ] = match[ 1 ].toLowerCase();

  				if ( match[ 1 ].slice( 0, 3 ) === "nth" ) {

  					// nth-* requires argument
  					if ( !match[ 3 ] ) {
  						find.error( match[ 0 ] );
  					}

  					// numeric x and y parameters for Expr.filter.CHILD
  					// remember that false/true cast respectively to 0/1
  					match[ 4 ] = +( match[ 4 ] ?
  						match[ 5 ] + ( match[ 6 ] || 1 ) :
  						2 * ( match[ 3 ] === "even" || match[ 3 ] === "odd" )
  					);
  					match[ 5 ] = +( ( match[ 7 ] + match[ 8 ] ) || match[ 3 ] === "odd" );

  				// other types prohibit arguments
  				} else if ( match[ 3 ] ) {
  					find.error( match[ 0 ] );
  				}

  				return match;
  			},

  			PSEUDO: function( match ) {
  				var excess,
  					unquoted = !match[ 6 ] && match[ 2 ];

  				if ( matchExpr.CHILD.test( match[ 0 ] ) ) {
  					return null;
  				}

  				// Accept quoted arguments as-is
  				if ( match[ 3 ] ) {
  					match[ 2 ] = match[ 4 ] || match[ 5 ] || "";

  				// Strip excess characters from unquoted arguments
  				} else if ( unquoted && rpseudo.test( unquoted ) &&

  					// Get excess from tokenize (recursively)
  					( excess = tokenize( unquoted, true ) ) &&

  					// advance to the next closing parenthesis
  					( excess = unquoted.indexOf( ")", unquoted.length - excess ) - unquoted.length ) ) {

  					// excess is a negative index
  					match[ 0 ] = match[ 0 ].slice( 0, excess );
  					match[ 2 ] = unquoted.slice( 0, excess );
  				}

  				// Return only captures needed by the pseudo filter method (type and argument)
  				return match.slice( 0, 3 );
  			}
  		},

  		filter: {

  			TAG: function( nodeNameSelector ) {
  				var expectedNodeName = nodeNameSelector.replace( runescape, funescape ).toLowerCase();
  				return nodeNameSelector === "*" ?
  					function() {
  						return true;
  					} :
  					function( elem ) {
  						return nodeName( elem, expectedNodeName );
  					};
  			},

  			CLASS: function( className ) {
  				var pattern = classCache[ className + " " ];

  				return pattern ||
  					( pattern = new RegExp( "(^|" + whitespace + ")" + className +
  						"(" + whitespace + "|$)" ) ) &&
  					classCache( className, function( elem ) {
  						return pattern.test(
  							typeof elem.className === "string" && elem.className ||
  								typeof elem.getAttribute !== "undefined" &&
  									elem.getAttribute( "class" ) ||
  								""
  						);
  					} );
  			},

  			ATTR: function( name, operator, check ) {
  				return function( elem ) {
  					var result = find.attr( elem, name );

  					if ( result == null ) {
  						return operator === "!=";
  					}
  					if ( !operator ) {
  						return true;
  					}

  					result += "";

  					if ( operator === "=" ) {
  						return result === check;
  					}
  					if ( operator === "!=" ) {
  						return result !== check;
  					}
  					if ( operator === "^=" ) {
  						return check && result.indexOf( check ) === 0;
  					}
  					if ( operator === "*=" ) {
  						return check && result.indexOf( check ) > -1;
  					}
  					if ( operator === "$=" ) {
  						return check && result.slice( -check.length ) === check;
  					}
  					if ( operator === "~=" ) {
  						return ( " " + result.replace( rwhitespace, " " ) + " " )
  							.indexOf( check ) > -1;
  					}
  					if ( operator === "|=" ) {
  						return result === check || result.slice( 0, check.length + 1 ) === check + "-";
  					}

  					return false;
  				};
  			},

  			CHILD: function( type, what, _argument, first, last ) {
  				var simple = type.slice( 0, 3 ) !== "nth",
  					forward = type.slice( -4 ) !== "last",
  					ofType = what === "of-type";

  				return first === 1 && last === 0 ?

  					// Shortcut for :nth-*(n)
  					function( elem ) {
  						return !!elem.parentNode;
  					} :

  					function( elem, _context, xml ) {
  						var cache, outerCache, node, nodeIndex, start,
  							dir = simple !== forward ? "nextSibling" : "previousSibling",
  							parent = elem.parentNode,
  							name = ofType && elem.nodeName.toLowerCase(),
  							useCache = !xml && !ofType,
  							diff = false;

  						if ( parent ) {

  							// :(first|last|only)-(child|of-type)
  							if ( simple ) {
  								while ( dir ) {
  									node = elem;
  									while ( ( node = node[ dir ] ) ) {
  										if ( ofType ?
  											nodeName( node, name ) :
  											node.nodeType === 1 ) {

  											return false;
  										}
  									}

  									// Reverse direction for :only-* (if we haven't yet done so)
  									start = dir = type === "only" && !start && "nextSibling";
  								}
  								return true;
  							}

  							start = [ forward ? parent.firstChild : parent.lastChild ];

  							// non-xml :nth-child(...) stores cache data on `parent`
  							if ( forward && useCache ) {

  								// Seek `elem` from a previously-cached index
  								outerCache = parent[ expando ] || ( parent[ expando ] = {} );
  								cache = outerCache[ type ] || [];
  								nodeIndex = cache[ 0 ] === dirruns && cache[ 1 ];
  								diff = nodeIndex && cache[ 2 ];
  								node = nodeIndex && parent.childNodes[ nodeIndex ];

  								while ( ( node = ++nodeIndex && node && node[ dir ] ||

  									// Fallback to seeking `elem` from the start
  									( diff = nodeIndex = 0 ) || start.pop() ) ) {

  									// When found, cache indexes on `parent` and break
  									if ( node.nodeType === 1 && ++diff && node === elem ) {
  										outerCache[ type ] = [ dirruns, nodeIndex, diff ];
  										break;
  									}
  								}

  							} else {

  								// Use previously-cached element index if available
  								if ( useCache ) {
  									outerCache = elem[ expando ] || ( elem[ expando ] = {} );
  									cache = outerCache[ type ] || [];
  									nodeIndex = cache[ 0 ] === dirruns && cache[ 1 ];
  									diff = nodeIndex;
  								}

  								// xml :nth-child(...)
  								// or :nth-last-child(...) or :nth(-last)?-of-type(...)
  								if ( diff === false ) {

  									// Use the same loop as above to seek `elem` from the start
  									while ( ( node = ++nodeIndex && node && node[ dir ] ||
  										( diff = nodeIndex = 0 ) || start.pop() ) ) {

  										if ( ( ofType ?
  											nodeName( node, name ) :
  											node.nodeType === 1 ) &&
  											++diff ) {

  											// Cache the index of each encountered element
  											if ( useCache ) {
  												outerCache = node[ expando ] ||
  													( node[ expando ] = {} );
  												outerCache[ type ] = [ dirruns, diff ];
  											}

  											if ( node === elem ) {
  												break;
  											}
  										}
  									}
  								}
  							}

  							// Incorporate the offset, then check against cycle size
  							diff -= last;
  							return diff === first || ( diff % first === 0 && diff / first >= 0 );
  						}
  					};
  			},

  			PSEUDO: function( pseudo, argument ) {

  				// pseudo-class names are case-insensitive
  				// https://www.w3.org/TR/selectors/#pseudo-classes
  				// Prioritize by case sensitivity in case custom pseudos are added with uppercase letters
  				// Remember that setFilters inherits from pseudos
  				var args,
  					fn = Expr.pseudos[ pseudo ] || Expr.setFilters[ pseudo.toLowerCase() ] ||
  						find.error( "unsupported pseudo: " + pseudo );

  				// The user may use createPseudo to indicate that
  				// arguments are needed to create the filter function
  				// just as jQuery does
  				if ( fn[ expando ] ) {
  					return fn( argument );
  				}

  				// But maintain support for old signatures
  				if ( fn.length > 1 ) {
  					args = [ pseudo, pseudo, "", argument ];
  					return Expr.setFilters.hasOwnProperty( pseudo.toLowerCase() ) ?
  						markFunction( function( seed, matches ) {
  							var idx,
  								matched = fn( seed, argument ),
  								i = matched.length;
  							while ( i-- ) {
  								idx = indexOf.call( seed, matched[ i ] );
  								seed[ idx ] = !( matches[ idx ] = matched[ i ] );
  							}
  						} ) :
  						function( elem ) {
  							return fn( elem, 0, args );
  						};
  				}

  				return fn;
  			}
  		},

  		pseudos: {

  			// Potentially complex pseudos
  			not: markFunction( function( selector ) {

  				// Trim the selector passed to compile
  				// to avoid treating leading and trailing
  				// spaces as combinators
  				var input = [],
  					results = [],
  					matcher = compile( selector.replace( rtrimCSS, "$1" ) );

  				return matcher[ expando ] ?
  					markFunction( function( seed, matches, _context, xml ) {
  						var elem,
  							unmatched = matcher( seed, null, xml, [] ),
  							i = seed.length;

  						// Match elements unmatched by `matcher`
  						while ( i-- ) {
  							if ( ( elem = unmatched[ i ] ) ) {
  								seed[ i ] = !( matches[ i ] = elem );
  							}
  						}
  					} ) :
  					function( elem, _context, xml ) {
  						input[ 0 ] = elem;
  						matcher( input, null, xml, results );

  						// Don't keep the element
  						// (see https://github.com/jquery/sizzle/issues/299)
  						input[ 0 ] = null;
  						return !results.pop();
  					};
  			} ),

  			has: markFunction( function( selector ) {
  				return function( elem ) {
  					return find( selector, elem ).length > 0;
  				};
  			} ),

  			contains: markFunction( function( text ) {
  				text = text.replace( runescape, funescape );
  				return function( elem ) {
  					return ( elem.textContent || jQuery.text( elem ) ).indexOf( text ) > -1;
  				};
  			} ),

  			// "Whether an element is represented by a :lang() selector
  			// is based solely on the element's language value
  			// being equal to the identifier C,
  			// or beginning with the identifier C immediately followed by "-".
  			// The matching of C against the element's language value is performed case-insensitively.
  			// The identifier C does not have to be a valid language name."
  			// https://www.w3.org/TR/selectors/#lang-pseudo
  			lang: markFunction( function( lang ) {

  				// lang value must be a valid identifier
  				if ( !ridentifier.test( lang || "" ) ) {
  					find.error( "unsupported lang: " + lang );
  				}
  				lang = lang.replace( runescape, funescape ).toLowerCase();
  				return function( elem ) {
  					var elemLang;
  					do {
  						if ( ( elemLang = documentIsHTML ?
  							elem.lang :
  							elem.getAttribute( "xml:lang" ) || elem.getAttribute( "lang" ) ) ) {

  							elemLang = elemLang.toLowerCase();
  							return elemLang === lang || elemLang.indexOf( lang + "-" ) === 0;
  						}
  					} while ( ( elem = elem.parentNode ) && elem.nodeType === 1 );
  					return false;
  				};
  			} ),

  			// Miscellaneous
  			target: function( elem ) {
  				var hash = window.location && window.location.hash;
  				return hash && hash.slice( 1 ) === elem.id;
  			},

  			root: function( elem ) {
  				return elem === documentElement;
  			},

  			focus: function( elem ) {
  				return elem === safeActiveElement() &&
  					document.hasFocus() &&
  					!!( elem.type || elem.href || ~elem.tabIndex );
  			},

  			// Boolean properties
  			enabled: createDisabledPseudo( false ),
  			disabled: createDisabledPseudo( true ),

  			checked: function( elem ) {

  				// In CSS3, :checked should return both checked and selected elements
  				// https://www.w3.org/TR/2011/REC-css3-selectors-20110929/#checked
  				return ( nodeName( elem, "input" ) && !!elem.checked ) ||
  					( nodeName( elem, "option" ) && !!elem.selected );
  			},

  			selected: function( elem ) {

  				// Support: IE <=11+
  				// Accessing the selectedIndex property
  				// forces the browser to treat the default option as
  				// selected when in an optgroup.
  				if ( elem.parentNode ) {
  					// eslint-disable-next-line no-unused-expressions
  					elem.parentNode.selectedIndex;
  				}

  				return elem.selected === true;
  			},

  			// Contents
  			empty: function( elem ) {

  				// https://www.w3.org/TR/selectors/#empty-pseudo
  				// :empty is negated by element (1) or content nodes (text: 3; cdata: 4; entity ref: 5),
  				//   but not by others (comment: 8; processing instruction: 7; etc.)
  				// nodeType < 6 works because attributes (2) do not appear as children
  				for ( elem = elem.firstChild; elem; elem = elem.nextSibling ) {
  					if ( elem.nodeType < 6 ) {
  						return false;
  					}
  				}
  				return true;
  			},

  			parent: function( elem ) {
  				return !Expr.pseudos.empty( elem );
  			},

  			// Element/input types
  			header: function( elem ) {
  				return rheader.test( elem.nodeName );
  			},

  			input: function( elem ) {
  				return rinputs.test( elem.nodeName );
  			},

  			button: function( elem ) {
  				return nodeName( elem, "input" ) && elem.type === "button" ||
  					nodeName( elem, "button" );
  			},

  			text: function( elem ) {
  				var attr;
  				return nodeName( elem, "input" ) && elem.type === "text" &&

  					// Support: IE <10 only
  					// New HTML5 attribute values (e.g., "search") appear
  					// with elem.type === "text"
  					( ( attr = elem.getAttribute( "type" ) ) == null ||
  						attr.toLowerCase() === "text" );
  			},

  			// Position-in-collection
  			first: createPositionalPseudo( function() {
  				return [ 0 ];
  			} ),

  			last: createPositionalPseudo( function( _matchIndexes, length ) {
  				return [ length - 1 ];
  			} ),

  			eq: createPositionalPseudo( function( _matchIndexes, length, argument ) {
  				return [ argument < 0 ? argument + length : argument ];
  			} ),

  			even: createPositionalPseudo( function( matchIndexes, length ) {
  				var i = 0;
  				for ( ; i < length; i += 2 ) {
  					matchIndexes.push( i );
  				}
  				return matchIndexes;
  			} ),

  			odd: createPositionalPseudo( function( matchIndexes, length ) {
  				var i = 1;
  				for ( ; i < length; i += 2 ) {
  					matchIndexes.push( i );
  				}
  				return matchIndexes;
  			} ),

  			lt: createPositionalPseudo( function( matchIndexes, length, argument ) {
  				var i;

  				if ( argument < 0 ) {
  					i = argument + length;
  				} else if ( argument > length ) {
  					i = length;
  				} else {
  					i = argument;
  				}

  				for ( ; --i >= 0; ) {
  					matchIndexes.push( i );
  				}
  				return matchIndexes;
  			} ),

  			gt: createPositionalPseudo( function( matchIndexes, length, argument ) {
  				var i = argument < 0 ? argument + length : argument;
  				for ( ; ++i < length; ) {
  					matchIndexes.push( i );
  				}
  				return matchIndexes;
  			} )
  		}
  	};

  	Expr.pseudos.nth = Expr.pseudos.eq;

  	// Add button/input type pseudos
  	for ( i in { radio: true, checkbox: true, file: true, password: true, image: true } ) {
  		Expr.pseudos[ i ] = createInputPseudo( i );
  	}
  	for ( i in { submit: true, reset: true } ) {
  		Expr.pseudos[ i ] = createButtonPseudo( i );
  	}

  	// Easy API for creating new setFilters
  	function setFilters() {}
  	setFilters.prototype = Expr.filters = Expr.pseudos;
  	Expr.setFilters = new setFilters();

  	function tokenize( selector, parseOnly ) {
  		var matched, match, tokens, type,
  			soFar, groups, preFilters,
  			cached = tokenCache[ selector + " " ];

  		if ( cached ) {
  			return parseOnly ? 0 : cached.slice( 0 );
  		}

  		soFar = selector;
  		groups = [];
  		preFilters = Expr.preFilter;

  		while ( soFar ) {

  			// Comma and first run
  			if ( !matched || ( match = rcomma.exec( soFar ) ) ) {
  				if ( match ) {

  					// Don't consume trailing commas as valid
  					soFar = soFar.slice( match[ 0 ].length ) || soFar;
  				}
  				groups.push( ( tokens = [] ) );
  			}

  			matched = false;

  			// Combinators
  			if ( ( match = rleadingCombinator.exec( soFar ) ) ) {
  				matched = match.shift();
  				tokens.push( {
  					value: matched,

  					// Cast descendant combinators to space
  					type: match[ 0 ].replace( rtrimCSS, " " )
  				} );
  				soFar = soFar.slice( matched.length );
  			}

  			// Filters
  			for ( type in Expr.filter ) {
  				if ( ( match = matchExpr[ type ].exec( soFar ) ) && ( !preFilters[ type ] ||
  					( match = preFilters[ type ]( match ) ) ) ) {
  					matched = match.shift();
  					tokens.push( {
  						value: matched,
  						type: type,
  						matches: match
  					} );
  					soFar = soFar.slice( matched.length );
  				}
  			}

  			if ( !matched ) {
  				break;
  			}
  		}

  		// Return the length of the invalid excess
  		// if we're just parsing
  		// Otherwise, throw an error or return tokens
  		if ( parseOnly ) {
  			return soFar.length;
  		}

  		return soFar ?
  			find.error( selector ) :

  			// Cache the tokens
  			tokenCache( selector, groups ).slice( 0 );
  	}

  	function toSelector( tokens ) {
  		var i = 0,
  			len = tokens.length,
  			selector = "";
  		for ( ; i < len; i++ ) {
  			selector += tokens[ i ].value;
  		}
  		return selector;
  	}

  	function addCombinator( matcher, combinator, base ) {
  		var dir = combinator.dir,
  			skip = combinator.next,
  			key = skip || dir,
  			checkNonElements = base && key === "parentNode",
  			doneName = done++;

  		return combinator.first ?

  			// Check against closest ancestor/preceding element
  			function( elem, context, xml ) {
  				while ( ( elem = elem[ dir ] ) ) {
  					if ( elem.nodeType === 1 || checkNonElements ) {
  						return matcher( elem, context, xml );
  					}
  				}
  				return false;
  			} :

  			// Check against all ancestor/preceding elements
  			function( elem, context, xml ) {
  				var oldCache, outerCache,
  					newCache = [ dirruns, doneName ];

  				// We can't set arbitrary data on XML nodes, so they don't benefit from combinator caching
  				if ( xml ) {
  					while ( ( elem = elem[ dir ] ) ) {
  						if ( elem.nodeType === 1 || checkNonElements ) {
  							if ( matcher( elem, context, xml ) ) {
  								return true;
  							}
  						}
  					}
  				} else {
  					while ( ( elem = elem[ dir ] ) ) {
  						if ( elem.nodeType === 1 || checkNonElements ) {
  							outerCache = elem[ expando ] || ( elem[ expando ] = {} );

  							if ( skip && nodeName( elem, skip ) ) {
  								elem = elem[ dir ] || elem;
  							} else if ( ( oldCache = outerCache[ key ] ) &&
  								oldCache[ 0 ] === dirruns && oldCache[ 1 ] === doneName ) {

  								// Assign to newCache so results back-propagate to previous elements
  								return ( newCache[ 2 ] = oldCache[ 2 ] );
  							} else {

  								// Reuse newcache so results back-propagate to previous elements
  								outerCache[ key ] = newCache;

  								// A match means we're done; a fail means we have to keep checking
  								if ( ( newCache[ 2 ] = matcher( elem, context, xml ) ) ) {
  									return true;
  								}
  							}
  						}
  					}
  				}
  				return false;
  			};
  	}

  	function elementMatcher( matchers ) {
  		return matchers.length > 1 ?
  			function( elem, context, xml ) {
  				var i = matchers.length;
  				while ( i-- ) {
  					if ( !matchers[ i ]( elem, context, xml ) ) {
  						return false;
  					}
  				}
  				return true;
  			} :
  			matchers[ 0 ];
  	}

  	function multipleContexts( selector, contexts, results ) {
  		var i = 0,
  			len = contexts.length;
  		for ( ; i < len; i++ ) {
  			find( selector, contexts[ i ], results );
  		}
  		return results;
  	}

  	function condense( unmatched, map, filter, context, xml ) {
  		var elem,
  			newUnmatched = [],
  			i = 0,
  			len = unmatched.length,
  			mapped = map != null;

  		for ( ; i < len; i++ ) {
  			if ( ( elem = unmatched[ i ] ) ) {
  				if ( !filter || filter( elem, context, xml ) ) {
  					newUnmatched.push( elem );
  					if ( mapped ) {
  						map.push( i );
  					}
  				}
  			}
  		}

  		return newUnmatched;
  	}

  	function setMatcher( preFilter, selector, matcher, postFilter, postFinder, postSelector ) {
  		if ( postFilter && !postFilter[ expando ] ) {
  			postFilter = setMatcher( postFilter );
  		}
  		if ( postFinder && !postFinder[ expando ] ) {
  			postFinder = setMatcher( postFinder, postSelector );
  		}
  		return markFunction( function( seed, results, context, xml ) {
  			var temp, i, elem, matcherOut,
  				preMap = [],
  				postMap = [],
  				preexisting = results.length,

  				// Get initial elements from seed or context
  				elems = seed ||
  					multipleContexts( selector || "*",
  						context.nodeType ? [ context ] : context, [] ),

  				// Prefilter to get matcher input, preserving a map for seed-results synchronization
  				matcherIn = preFilter && ( seed || !selector ) ?
  					condense( elems, preMap, preFilter, context, xml ) :
  					elems;

  			if ( matcher ) {

  				// If we have a postFinder, or filtered seed, or non-seed postFilter
  				// or preexisting results,
  				matcherOut = postFinder || ( seed ? preFilter : preexisting || postFilter ) ?

  					// ...intermediate processing is necessary
  					[] :

  					// ...otherwise use results directly
  					results;

  				// Find primary matches
  				matcher( matcherIn, matcherOut, context, xml );
  			} else {
  				matcherOut = matcherIn;
  			}

  			// Apply postFilter
  			if ( postFilter ) {
  				temp = condense( matcherOut, postMap );
  				postFilter( temp, [], context, xml );

  				// Un-match failing elements by moving them back to matcherIn
  				i = temp.length;
  				while ( i-- ) {
  					if ( ( elem = temp[ i ] ) ) {
  						matcherOut[ postMap[ i ] ] = !( matcherIn[ postMap[ i ] ] = elem );
  					}
  				}
  			}

  			if ( seed ) {
  				if ( postFinder || preFilter ) {
  					if ( postFinder ) {

  						// Get the final matcherOut by condensing this intermediate into postFinder contexts
  						temp = [];
  						i = matcherOut.length;
  						while ( i-- ) {
  							if ( ( elem = matcherOut[ i ] ) ) {

  								// Restore matcherIn since elem is not yet a final match
  								temp.push( ( matcherIn[ i ] = elem ) );
  							}
  						}
  						postFinder( null, ( matcherOut = [] ), temp, xml );
  					}

  					// Move matched elements from seed to results to keep them synchronized
  					i = matcherOut.length;
  					while ( i-- ) {
  						if ( ( elem = matcherOut[ i ] ) &&
  							( temp = postFinder ? indexOf.call( seed, elem ) : preMap[ i ] ) > -1 ) {

  							seed[ temp ] = !( results[ temp ] = elem );
  						}
  					}
  				}

  			// Add elements to results, through postFinder if defined
  			} else {
  				matcherOut = condense(
  					matcherOut === results ?
  						matcherOut.splice( preexisting, matcherOut.length ) :
  						matcherOut
  				);
  				if ( postFinder ) {
  					postFinder( null, results, matcherOut, xml );
  				} else {
  					push.apply( results, matcherOut );
  				}
  			}
  		} );
  	}

  	function matcherFromTokens( tokens ) {
  		var checkContext, matcher, j,
  			len = tokens.length,
  			leadingRelative = Expr.relative[ tokens[ 0 ].type ],
  			implicitRelative = leadingRelative || Expr.relative[ " " ],
  			i = leadingRelative ? 1 : 0,

  			// The foundational matcher ensures that elements are reachable from top-level context(s)
  			matchContext = addCombinator( function( elem ) {
  				return elem === checkContext;
  			}, implicitRelative, true ),
  			matchAnyContext = addCombinator( function( elem ) {
  				return indexOf.call( checkContext, elem ) > -1;
  			}, implicitRelative, true ),
  			matchers = [ function( elem, context, xml ) {

  				// Support: IE 11+, Edge 17 - 18+
  				// IE/Edge sometimes throw a "Permission denied" error when strict-comparing
  				// two documents; shallow comparisons work.
  				// eslint-disable-next-line eqeqeq
  				var ret = ( !leadingRelative && ( xml || context != outermostContext ) ) || (
  					( checkContext = context ).nodeType ?
  						matchContext( elem, context, xml ) :
  						matchAnyContext( elem, context, xml ) );

  				// Avoid hanging onto element
  				// (see https://github.com/jquery/sizzle/issues/299)
  				checkContext = null;
  				return ret;
  			} ];

  		for ( ; i < len; i++ ) {
  			if ( ( matcher = Expr.relative[ tokens[ i ].type ] ) ) {
  				matchers = [ addCombinator( elementMatcher( matchers ), matcher ) ];
  			} else {
  				matcher = Expr.filter[ tokens[ i ].type ].apply( null, tokens[ i ].matches );

  				// Return special upon seeing a positional matcher
  				if ( matcher[ expando ] ) {

  					// Find the next relative operator (if any) for proper handling
  					j = ++i;
  					for ( ; j < len; j++ ) {
  						if ( Expr.relative[ tokens[ j ].type ] ) {
  							break;
  						}
  					}
  					return setMatcher(
  						i > 1 && elementMatcher( matchers ),
  						i > 1 && toSelector(

  							// If the preceding token was a descendant combinator, insert an implicit any-element `*`
  							tokens.slice( 0, i - 1 )
  								.concat( { value: tokens[ i - 2 ].type === " " ? "*" : "" } )
  						).replace( rtrimCSS, "$1" ),
  						matcher,
  						i < j && matcherFromTokens( tokens.slice( i, j ) ),
  						j < len && matcherFromTokens( ( tokens = tokens.slice( j ) ) ),
  						j < len && toSelector( tokens )
  					);
  				}
  				matchers.push( matcher );
  			}
  		}

  		return elementMatcher( matchers );
  	}

  	function matcherFromGroupMatchers( elementMatchers, setMatchers ) {
  		var bySet = setMatchers.length > 0,
  			byElement = elementMatchers.length > 0,
  			superMatcher = function( seed, context, xml, results, outermost ) {
  				var elem, j, matcher,
  					matchedCount = 0,
  					i = "0",
  					unmatched = seed && [],
  					setMatched = [],
  					contextBackup = outermostContext,

  					// We must always have either seed elements or outermost context
  					elems = seed || byElement && Expr.find.TAG( "*", outermost ),

  					// Use integer dirruns iff this is the outermost matcher
  					dirrunsUnique = ( dirruns += contextBackup == null ? 1 : Math.random() || 0.1 ),
  					len = elems.length;

  				if ( outermost ) {

  					// Support: IE 11+, Edge 17 - 18+
  					// IE/Edge sometimes throw a "Permission denied" error when strict-comparing
  					// two documents; shallow comparisons work.
  					// eslint-disable-next-line eqeqeq
  					outermostContext = context == document || context || outermost;
  				}

  				// Add elements passing elementMatchers directly to results
  				// Support: iOS <=7 - 9 only
  				// Tolerate NodeList properties (IE: "length"; Safari: <number>) matching
  				// elements by id. (see trac-14142)
  				for ( ; i !== len && ( elem = elems[ i ] ) != null; i++ ) {
  					if ( byElement && elem ) {
  						j = 0;

  						// Support: IE 11+, Edge 17 - 18+
  						// IE/Edge sometimes throw a "Permission denied" error when strict-comparing
  						// two documents; shallow comparisons work.
  						// eslint-disable-next-line eqeqeq
  						if ( !context && elem.ownerDocument != document ) {
  							setDocument( elem );
  							xml = !documentIsHTML;
  						}
  						while ( ( matcher = elementMatchers[ j++ ] ) ) {
  							if ( matcher( elem, context || document, xml ) ) {
  								push.call( results, elem );
  								break;
  							}
  						}
  						if ( outermost ) {
  							dirruns = dirrunsUnique;
  						}
  					}

  					// Track unmatched elements for set filters
  					if ( bySet ) {

  						// They will have gone through all possible matchers
  						if ( ( elem = !matcher && elem ) ) {
  							matchedCount--;
  						}

  						// Lengthen the array for every element, matched or not
  						if ( seed ) {
  							unmatched.push( elem );
  						}
  					}
  				}

  				// `i` is now the count of elements visited above, and adding it to `matchedCount`
  				// makes the latter nonnegative.
  				matchedCount += i;

  				// Apply set filters to unmatched elements
  				// NOTE: This can be skipped if there are no unmatched elements (i.e., `matchedCount`
  				// equals `i`), unless we didn't visit _any_ elements in the above loop because we have
  				// no element matchers and no seed.
  				// Incrementing an initially-string "0" `i` allows `i` to remain a string only in that
  				// case, which will result in a "00" `matchedCount` that differs from `i` but is also
  				// numerically zero.
  				if ( bySet && i !== matchedCount ) {
  					j = 0;
  					while ( ( matcher = setMatchers[ j++ ] ) ) {
  						matcher( unmatched, setMatched, context, xml );
  					}

  					if ( seed ) {

  						// Reintegrate element matches to eliminate the need for sorting
  						if ( matchedCount > 0 ) {
  							while ( i-- ) {
  								if ( !( unmatched[ i ] || setMatched[ i ] ) ) {
  									setMatched[ i ] = pop.call( results );
  								}
  							}
  						}

  						// Discard index placeholder values to get only actual matches
  						setMatched = condense( setMatched );
  					}

  					// Add matches to results
  					push.apply( results, setMatched );

  					// Seedless set matches succeeding multiple successful matchers stipulate sorting
  					if ( outermost && !seed && setMatched.length > 0 &&
  						( matchedCount + setMatchers.length ) > 1 ) {

  						jQuery.uniqueSort( results );
  					}
  				}

  				// Override manipulation of globals by nested matchers
  				if ( outermost ) {
  					dirruns = dirrunsUnique;
  					outermostContext = contextBackup;
  				}

  				return unmatched;
  			};

  		return bySet ?
  			markFunction( superMatcher ) :
  			superMatcher;
  	}

  	function compile( selector, match /* Internal Use Only */ ) {
  		var i,
  			setMatchers = [],
  			elementMatchers = [],
  			cached = compilerCache[ selector + " " ];

  		if ( !cached ) {

  			// Generate a function of recursive functions that can be used to check each element
  			if ( !match ) {
  				match = tokenize( selector );
  			}
  			i = match.length;
  			while ( i-- ) {
  				cached = matcherFromTokens( match[ i ] );
  				if ( cached[ expando ] ) {
  					setMatchers.push( cached );
  				} else {
  					elementMatchers.push( cached );
  				}
  			}

  			// Cache the compiled function
  			cached = compilerCache( selector,
  				matcherFromGroupMatchers( elementMatchers, setMatchers ) );

  			// Save selector and tokenization
  			cached.selector = selector;
  		}
  		return cached;
  	}

  	/**
  	 * A low-level selection function that works with jQuery's compiled
  	 *  selector functions
  	 * @param {String|Function} selector A selector or a pre-compiled
  	 *  selector function built with jQuery selector compile
  	 * @param {Element} context
  	 * @param {Array} [results]
  	 * @param {Array} [seed] A set of elements to match against
  	 */
  	function select( selector, context, results, seed ) {
  		var i, tokens, token, type, find,
  			compiled = typeof selector === "function" && selector,
  			match = !seed && tokenize( ( selector = compiled.selector || selector ) );

  		results = results || [];

  		// Try to minimize operations if there is only one selector in the list and no seed
  		// (the latter of which guarantees us context)
  		if ( match.length === 1 ) {

  			// Reduce context if the leading compound selector is an ID
  			tokens = match[ 0 ] = match[ 0 ].slice( 0 );
  			if ( tokens.length > 2 && ( token = tokens[ 0 ] ).type === "ID" &&
  					context.nodeType === 9 && documentIsHTML && Expr.relative[ tokens[ 1 ].type ] ) {

  				context = ( Expr.find.ID(
  					token.matches[ 0 ].replace( runescape, funescape ),
  					context
  				) || [] )[ 0 ];
  				if ( !context ) {
  					return results;

  				// Precompiled matchers will still verify ancestry, so step up a level
  				} else if ( compiled ) {
  					context = context.parentNode;
  				}

  				selector = selector.slice( tokens.shift().value.length );
  			}

  			// Fetch a seed set for right-to-left matching
  			i = matchExpr.needsContext.test( selector ) ? 0 : tokens.length;
  			while ( i-- ) {
  				token = tokens[ i ];

  				// Abort if we hit a combinator
  				if ( Expr.relative[ ( type = token.type ) ] ) {
  					break;
  				}
  				if ( ( find = Expr.find[ type ] ) ) {

  					// Search, expanding context for leading sibling combinators
  					if ( ( seed = find(
  						token.matches[ 0 ].replace( runescape, funescape ),
  						rsibling.test( tokens[ 0 ].type ) &&
  							testContext( context.parentNode ) || context
  					) ) ) {

  						// If seed is empty or no tokens remain, we can return early
  						tokens.splice( i, 1 );
  						selector = seed.length && toSelector( tokens );
  						if ( !selector ) {
  							push.apply( results, seed );
  							return results;
  						}

  						break;
  					}
  				}
  			}
  		}

  		// Compile and execute a filtering function if one is not provided
  		// Provide `match` to avoid retokenization if we modified the selector above
  		( compiled || compile( selector, match ) )(
  			seed,
  			context,
  			!documentIsHTML,
  			results,
  			!context || rsibling.test( selector ) && testContext( context.parentNode ) || context
  		);
  		return results;
  	}

  	// One-time assignments

  	// Support: Android <=4.0 - 4.1+
  	// Sort stability
  	support.sortStable = expando.split( "" ).sort( sortOrder ).join( "" ) === expando;

  	// Initialize against the default document
  	setDocument();

  	// Support: Android <=4.0 - 4.1+
  	// Detached nodes confoundingly follow *each other*
  	support.sortDetached = assert( function( el ) {

  		// Should return 1, but returns 4 (following)
  		return el.compareDocumentPosition( document.createElement( "fieldset" ) ) & 1;
  	} );

  	jQuery.find = find;

  	// Deprecated
  	jQuery.expr[ ":" ] = jQuery.expr.pseudos;
  	jQuery.unique = jQuery.uniqueSort;

  	// These have always been private, but they used to be documented as part of
  	// Sizzle so let's maintain them for now for backwards compatibility purposes.
  	find.compile = compile;
  	find.select = select;
  	find.setDocument = setDocument;
  	find.tokenize = tokenize;

  	find.escape = jQuery.escapeSelector;
  	find.getText = jQuery.text;
  	find.isXML = jQuery.isXMLDoc;
  	find.selectors = jQuery.expr;
  	find.support = jQuery.support;
  	find.uniqueSort = jQuery.uniqueSort;

  		/* eslint-enable */

  	} )();


  	var dir = function( elem, dir, until ) {
  		var matched = [],
  			truncate = until !== undefined;

  		while ( ( elem = elem[ dir ] ) && elem.nodeType !== 9 ) {
  			if ( elem.nodeType === 1 ) {
  				if ( truncate && jQuery( elem ).is( until ) ) {
  					break;
  				}
  				matched.push( elem );
  			}
  		}
  		return matched;
  	};


  	var siblings = function( n, elem ) {
  		var matched = [];

  		for ( ; n; n = n.nextSibling ) {
  			if ( n.nodeType === 1 && n !== elem ) {
  				matched.push( n );
  			}
  		}

  		return matched;
  	};


  	var rneedsContext = jQuery.expr.match.needsContext;

  	var rsingleTag = ( /^<([a-z][^\/\0>:\x20\t\r\n\f]*)[\x20\t\r\n\f]*\/?>(?:<\/\1>|)$/i );



  	// Implement the identical functionality for filter and not
  	function winnow( elements, qualifier, not ) {
  		if ( isFunction( qualifier ) ) {
  			return jQuery.grep( elements, function( elem, i ) {
  				return !!qualifier.call( elem, i, elem ) !== not;
  			} );
  		}

  		// Single element
  		if ( qualifier.nodeType ) {
  			return jQuery.grep( elements, function( elem ) {
  				return ( elem === qualifier ) !== not;
  			} );
  		}

  		// Arraylike of elements (jQuery, arguments, Array)
  		if ( typeof qualifier !== "string" ) {
  			return jQuery.grep( elements, function( elem ) {
  				return ( indexOf.call( qualifier, elem ) > -1 ) !== not;
  			} );
  		}

  		// Filtered directly for both simple and complex selectors
  		return jQuery.filter( qualifier, elements, not );
  	}

  	jQuery.filter = function( expr, elems, not ) {
  		var elem = elems[ 0 ];

  		if ( not ) {
  			expr = ":not(" + expr + ")";
  		}

  		if ( elems.length === 1 && elem.nodeType === 1 ) {
  			return jQuery.find.matchesSelector( elem, expr ) ? [ elem ] : [];
  		}

  		return jQuery.find.matches( expr, jQuery.grep( elems, function( elem ) {
  			return elem.nodeType === 1;
  		} ) );
  	};

  	jQuery.fn.extend( {
  		find: function( selector ) {
  			var i, ret,
  				len = this.length,
  				self = this;

  			if ( typeof selector !== "string" ) {
  				return this.pushStack( jQuery( selector ).filter( function() {
  					for ( i = 0; i < len; i++ ) {
  						if ( jQuery.contains( self[ i ], this ) ) {
  							return true;
  						}
  					}
  				} ) );
  			}

  			ret = this.pushStack( [] );

  			for ( i = 0; i < len; i++ ) {
  				jQuery.find( selector, self[ i ], ret );
  			}

  			return len > 1 ? jQuery.uniqueSort( ret ) : ret;
  		},
  		filter: function( selector ) {
  			return this.pushStack( winnow( this, selector || [], false ) );
  		},
  		not: function( selector ) {
  			return this.pushStack( winnow( this, selector || [], true ) );
  		},
  		is: function( selector ) {
  			return !!winnow(
  				this,

  				// If this is a positional/relative selector, check membership in the returned set
  				// so $("p:first").is("p:last") won't return true for a doc with two "p".
  				typeof selector === "string" && rneedsContext.test( selector ) ?
  					jQuery( selector ) :
  					selector || [],
  				false
  			).length;
  		}
  	} );


  	// Initialize a jQuery object


  	// A central reference to the root jQuery(document)
  	var rootjQuery,

  		// A simple way to check for HTML strings
  		// Prioritize #id over <tag> to avoid XSS via location.hash (trac-9521)
  		// Strict HTML recognition (trac-11290: must start with <)
  		// Shortcut simple #id case for speed
  		rquickExpr = /^(?:\s*(<[\w\W]+>)[^>]*|#([\w-]+))$/,

  		init = jQuery.fn.init = function( selector, context, root ) {
  			var match, elem;

  			// HANDLE: $(""), $(null), $(undefined), $(false)
  			if ( !selector ) {
  				return this;
  			}

  			// Method init() accepts an alternate rootjQuery
  			// so migrate can support jQuery.sub (gh-2101)
  			root = root || rootjQuery;

  			// Handle HTML strings
  			if ( typeof selector === "string" ) {
  				if ( selector[ 0 ] === "<" &&
  					selector[ selector.length - 1 ] === ">" &&
  					selector.length >= 3 ) {

  					// Assume that strings that start and end with <> are HTML and skip the regex check
  					match = [ null, selector, null ];

  				} else {
  					match = rquickExpr.exec( selector );
  				}

  				// Match html or make sure no context is specified for #id
  				if ( match && ( match[ 1 ] || !context ) ) {

  					// HANDLE: $(html) -> $(array)
  					if ( match[ 1 ] ) {
  						context = context instanceof jQuery ? context[ 0 ] : context;

  						// Option to run scripts is true for back-compat
  						// Intentionally let the error be thrown if parseHTML is not present
  						jQuery.merge( this, jQuery.parseHTML(
  							match[ 1 ],
  							context && context.nodeType ? context.ownerDocument || context : document,
  							true
  						) );

  						// HANDLE: $(html, props)
  						if ( rsingleTag.test( match[ 1 ] ) && jQuery.isPlainObject( context ) ) {
  							for ( match in context ) {

  								// Properties of context are called as methods if possible
  								if ( isFunction( this[ match ] ) ) {
  									this[ match ]( context[ match ] );

  								// ...and otherwise set as attributes
  								} else {
  									this.attr( match, context[ match ] );
  								}
  							}
  						}

  						return this;

  					// HANDLE: $(#id)
  					} else {
  						elem = document.getElementById( match[ 2 ] );

  						if ( elem ) {

  							// Inject the element directly into the jQuery object
  							this[ 0 ] = elem;
  							this.length = 1;
  						}
  						return this;
  					}

  				// HANDLE: $(expr, $(...))
  				} else if ( !context || context.jquery ) {
  					return ( context || root ).find( selector );

  				// HANDLE: $(expr, context)
  				// (which is just equivalent to: $(context).find(expr)
  				} else {
  					return this.constructor( context ).find( selector );
  				}

  			// HANDLE: $(DOMElement)
  			} else if ( selector.nodeType ) {
  				this[ 0 ] = selector;
  				this.length = 1;
  				return this;

  			// HANDLE: $(function)
  			// Shortcut for document ready
  			} else if ( isFunction( selector ) ) {
  				return root.ready !== undefined ?
  					root.ready( selector ) :

  					// Execute immediately if ready is not present
  					selector( jQuery );
  			}

  			return jQuery.makeArray( selector, this );
  		};

  	// Give the init function the jQuery prototype for later instantiation
  	init.prototype = jQuery.fn;

  	// Initialize central reference
  	rootjQuery = jQuery( document );


  	var rparentsprev = /^(?:parents|prev(?:Until|All))/,

  		// Methods guaranteed to produce a unique set when starting from a unique set
  		guaranteedUnique = {
  			children: true,
  			contents: true,
  			next: true,
  			prev: true
  		};

  	jQuery.fn.extend( {
  		has: function( target ) {
  			var targets = jQuery( target, this ),
  				l = targets.length;

  			return this.filter( function() {
  				var i = 0;
  				for ( ; i < l; i++ ) {
  					if ( jQuery.contains( this, targets[ i ] ) ) {
  						return true;
  					}
  				}
  			} );
  		},

  		closest: function( selectors, context ) {
  			var cur,
  				i = 0,
  				l = this.length,
  				matched = [],
  				targets = typeof selectors !== "string" && jQuery( selectors );

  			// Positional selectors never match, since there's no _selection_ context
  			if ( !rneedsContext.test( selectors ) ) {
  				for ( ; i < l; i++ ) {
  					for ( cur = this[ i ]; cur && cur !== context; cur = cur.parentNode ) {

  						// Always skip document fragments
  						if ( cur.nodeType < 11 && ( targets ?
  							targets.index( cur ) > -1 :

  							// Don't pass non-elements to jQuery#find
  							cur.nodeType === 1 &&
  								jQuery.find.matchesSelector( cur, selectors ) ) ) {

  							matched.push( cur );
  							break;
  						}
  					}
  				}
  			}

  			return this.pushStack( matched.length > 1 ? jQuery.uniqueSort( matched ) : matched );
  		},

  		// Determine the position of an element within the set
  		index: function( elem ) {

  			// No argument, return index in parent
  			if ( !elem ) {
  				return ( this[ 0 ] && this[ 0 ].parentNode ) ? this.first().prevAll().length : -1;
  			}

  			// Index in selector
  			if ( typeof elem === "string" ) {
  				return indexOf.call( jQuery( elem ), this[ 0 ] );
  			}

  			// Locate the position of the desired element
  			return indexOf.call( this,

  				// If it receives a jQuery object, the first element is used
  				elem.jquery ? elem[ 0 ] : elem
  			);
  		},

  		add: function( selector, context ) {
  			return this.pushStack(
  				jQuery.uniqueSort(
  					jQuery.merge( this.get(), jQuery( selector, context ) )
  				)
  			);
  		},

  		addBack: function( selector ) {
  			return this.add( selector == null ?
  				this.prevObject : this.prevObject.filter( selector )
  			);
  		}
  	} );

  	function sibling( cur, dir ) {
  		while ( ( cur = cur[ dir ] ) && cur.nodeType !== 1 ) {}
  		return cur;
  	}

  	jQuery.each( {
  		parent: function( elem ) {
  			var parent = elem.parentNode;
  			return parent && parent.nodeType !== 11 ? parent : null;
  		},
  		parents: function( elem ) {
  			return dir( elem, "parentNode" );
  		},
  		parentsUntil: function( elem, _i, until ) {
  			return dir( elem, "parentNode", until );
  		},
  		next: function( elem ) {
  			return sibling( elem, "nextSibling" );
  		},
  		prev: function( elem ) {
  			return sibling( elem, "previousSibling" );
  		},
  		nextAll: function( elem ) {
  			return dir( elem, "nextSibling" );
  		},
  		prevAll: function( elem ) {
  			return dir( elem, "previousSibling" );
  		},
  		nextUntil: function( elem, _i, until ) {
  			return dir( elem, "nextSibling", until );
  		},
  		prevUntil: function( elem, _i, until ) {
  			return dir( elem, "previousSibling", until );
  		},
  		siblings: function( elem ) {
  			return siblings( ( elem.parentNode || {} ).firstChild, elem );
  		},
  		children: function( elem ) {
  			return siblings( elem.firstChild );
  		},
  		contents: function( elem ) {
  			if ( elem.contentDocument != null &&

  				// Support: IE 11+
  				// <object> elements with no `data` attribute has an object
  				// `contentDocument` with a `null` prototype.
  				getProto( elem.contentDocument ) ) {

  				return elem.contentDocument;
  			}

  			// Support: IE 9 - 11 only, iOS 7 only, Android Browser <=4.3 only
  			// Treat the template element as a regular one in browsers that
  			// don't support it.
  			if ( nodeName( elem, "template" ) ) {
  				elem = elem.content || elem;
  			}

  			return jQuery.merge( [], elem.childNodes );
  		}
  	}, function( name, fn ) {
  		jQuery.fn[ name ] = function( until, selector ) {
  			var matched = jQuery.map( this, fn, until );

  			if ( name.slice( -5 ) !== "Until" ) {
  				selector = until;
  			}

  			if ( selector && typeof selector === "string" ) {
  				matched = jQuery.filter( selector, matched );
  			}

  			if ( this.length > 1 ) {

  				// Remove duplicates
  				if ( !guaranteedUnique[ name ] ) {
  					jQuery.uniqueSort( matched );
  				}

  				// Reverse order for parents* and prev-derivatives
  				if ( rparentsprev.test( name ) ) {
  					matched.reverse();
  				}
  			}

  			return this.pushStack( matched );
  		};
  	} );
  	var rnothtmlwhite = ( /[^\x20\t\r\n\f]+/g );



  	// Convert String-formatted options into Object-formatted ones
  	function createOptions( options ) {
  		var object = {};
  		jQuery.each( options.match( rnothtmlwhite ) || [], function( _, flag ) {
  			object[ flag ] = true;
  		} );
  		return object;
  	}

  	/*
  	 * Create a callback list using the following parameters:
  	 *
  	 *	options: an optional list of space-separated options that will change how
  	 *			the callback list behaves or a more traditional option object
  	 *
  	 * By default a callback list will act like an event callback list and can be
  	 * "fired" multiple times.
  	 *
  	 * Possible options:
  	 *
  	 *	once:			will ensure the callback list can only be fired once (like a Deferred)
  	 *
  	 *	memory:			will keep track of previous values and will call any callback added
  	 *					after the list has been fired right away with the latest "memorized"
  	 *					values (like a Deferred)
  	 *
  	 *	unique:			will ensure a callback can only be added once (no duplicate in the list)
  	 *
  	 *	stopOnFalse:	interrupt callings when a callback returns false
  	 *
  	 */
  	jQuery.Callbacks = function( options ) {

  		// Convert options from String-formatted to Object-formatted if needed
  		// (we check in cache first)
  		options = typeof options === "string" ?
  			createOptions( options ) :
  			jQuery.extend( {}, options );

  		var // Flag to know if list is currently firing
  			firing,

  			// Last fire value for non-forgettable lists
  			memory,

  			// Flag to know if list was already fired
  			fired,

  			// Flag to prevent firing
  			locked,

  			// Actual callback list
  			list = [],

  			// Queue of execution data for repeatable lists
  			queue = [],

  			// Index of currently firing callback (modified by add/remove as needed)
  			firingIndex = -1,

  			// Fire callbacks
  			fire = function() {

  				// Enforce single-firing
  				locked = locked || options.once;

  				// Execute callbacks for all pending executions,
  				// respecting firingIndex overrides and runtime changes
  				fired = firing = true;
  				for ( ; queue.length; firingIndex = -1 ) {
  					memory = queue.shift();
  					while ( ++firingIndex < list.length ) {

  						// Run callback and check for early termination
  						if ( list[ firingIndex ].apply( memory[ 0 ], memory[ 1 ] ) === false &&
  							options.stopOnFalse ) {

  							// Jump to end and forget the data so .add doesn't re-fire
  							firingIndex = list.length;
  							memory = false;
  						}
  					}
  				}

  				// Forget the data if we're done with it
  				if ( !options.memory ) {
  					memory = false;
  				}

  				firing = false;

  				// Clean up if we're done firing for good
  				if ( locked ) {

  					// Keep an empty list if we have data for future add calls
  					if ( memory ) {
  						list = [];

  					// Otherwise, this object is spent
  					} else {
  						list = "";
  					}
  				}
  			},

  			// Actual Callbacks object
  			self = {

  				// Add a callback or a collection of callbacks to the list
  				add: function() {
  					if ( list ) {

  						// If we have memory from a past run, we should fire after adding
  						if ( memory && !firing ) {
  							firingIndex = list.length - 1;
  							queue.push( memory );
  						}

  						( function add( args ) {
  							jQuery.each( args, function( _, arg ) {
  								if ( isFunction( arg ) ) {
  									if ( !options.unique || !self.has( arg ) ) {
  										list.push( arg );
  									}
  								} else if ( arg && arg.length && toType( arg ) !== "string" ) {

  									// Inspect recursively
  									add( arg );
  								}
  							} );
  						} )( arguments );

  						if ( memory && !firing ) {
  							fire();
  						}
  					}
  					return this;
  				},

  				// Remove a callback from the list
  				remove: function() {
  					jQuery.each( arguments, function( _, arg ) {
  						var index;
  						while ( ( index = jQuery.inArray( arg, list, index ) ) > -1 ) {
  							list.splice( index, 1 );

  							// Handle firing indexes
  							if ( index <= firingIndex ) {
  								firingIndex--;
  							}
  						}
  					} );
  					return this;
  				},

  				// Check if a given callback is in the list.
  				// If no argument is given, return whether or not list has callbacks attached.
  				has: function( fn ) {
  					return fn ?
  						jQuery.inArray( fn, list ) > -1 :
  						list.length > 0;
  				},

  				// Remove all callbacks from the list
  				empty: function() {
  					if ( list ) {
  						list = [];
  					}
  					return this;
  				},

  				// Disable .fire and .add
  				// Abort any current/pending executions
  				// Clear all callbacks and values
  				disable: function() {
  					locked = queue = [];
  					list = memory = "";
  					return this;
  				},
  				disabled: function() {
  					return !list;
  				},

  				// Disable .fire
  				// Also disable .add unless we have memory (since it would have no effect)
  				// Abort any pending executions
  				lock: function() {
  					locked = queue = [];
  					if ( !memory && !firing ) {
  						list = memory = "";
  					}
  					return this;
  				},
  				locked: function() {
  					return !!locked;
  				},

  				// Call all callbacks with the given context and arguments
  				fireWith: function( context, args ) {
  					if ( !locked ) {
  						args = args || [];
  						args = [ context, args.slice ? args.slice() : args ];
  						queue.push( args );
  						if ( !firing ) {
  							fire();
  						}
  					}
  					return this;
  				},

  				// Call all the callbacks with the given arguments
  				fire: function() {
  					self.fireWith( this, arguments );
  					return this;
  				},

  				// To know if the callbacks have already been called at least once
  				fired: function() {
  					return !!fired;
  				}
  			};

  		return self;
  	};


  	function Identity( v ) {
  		return v;
  	}
  	function Thrower( ex ) {
  		throw ex;
  	}

  	function adoptValue( value, resolve, reject, noValue ) {
  		var method;

  		try {

  			// Check for promise aspect first to privilege synchronous behavior
  			if ( value && isFunction( ( method = value.promise ) ) ) {
  				method.call( value ).done( resolve ).fail( reject );

  			// Other thenables
  			} else if ( value && isFunction( ( method = value.then ) ) ) {
  				method.call( value, resolve, reject );

  			// Other non-thenables
  			} else {

  				// Control `resolve` arguments by letting Array#slice cast boolean `noValue` to integer:
  				// * false: [ value ].slice( 0 ) => resolve( value )
  				// * true: [ value ].slice( 1 ) => resolve()
  				resolve.apply( undefined, [ value ].slice( noValue ) );
  			}

  		// For Promises/A+, convert exceptions into rejections
  		// Since jQuery.when doesn't unwrap thenables, we can skip the extra checks appearing in
  		// Deferred#then to conditionally suppress rejection.
  		} catch ( value ) {

  			// Support: Android 4.0 only
  			// Strict mode functions invoked without .call/.apply get global-object context
  			reject.apply( undefined, [ value ] );
  		}
  	}

  	jQuery.extend( {

  		Deferred: function( func ) {
  			var tuples = [

  					// action, add listener, callbacks,
  					// ... .then handlers, argument index, [final state]
  					[ "notify", "progress", jQuery.Callbacks( "memory" ),
  						jQuery.Callbacks( "memory" ), 2 ],
  					[ "resolve", "done", jQuery.Callbacks( "once memory" ),
  						jQuery.Callbacks( "once memory" ), 0, "resolved" ],
  					[ "reject", "fail", jQuery.Callbacks( "once memory" ),
  						jQuery.Callbacks( "once memory" ), 1, "rejected" ]
  				],
  				state = "pending",
  				promise = {
  					state: function() {
  						return state;
  					},
  					always: function() {
  						deferred.done( arguments ).fail( arguments );
  						return this;
  					},
  					"catch": function( fn ) {
  						return promise.then( null, fn );
  					},

  					// Keep pipe for back-compat
  					pipe: function( /* fnDone, fnFail, fnProgress */ ) {
  						var fns = arguments;

  						return jQuery.Deferred( function( newDefer ) {
  							jQuery.each( tuples, function( _i, tuple ) {

  								// Map tuples (progress, done, fail) to arguments (done, fail, progress)
  								var fn = isFunction( fns[ tuple[ 4 ] ] ) && fns[ tuple[ 4 ] ];

  								// deferred.progress(function() { bind to newDefer or newDefer.notify })
  								// deferred.done(function() { bind to newDefer or newDefer.resolve })
  								// deferred.fail(function() { bind to newDefer or newDefer.reject })
  								deferred[ tuple[ 1 ] ]( function() {
  									var returned = fn && fn.apply( this, arguments );
  									if ( returned && isFunction( returned.promise ) ) {
  										returned.promise()
  											.progress( newDefer.notify )
  											.done( newDefer.resolve )
  											.fail( newDefer.reject );
  									} else {
  										newDefer[ tuple[ 0 ] + "With" ](
  											this,
  											fn ? [ returned ] : arguments
  										);
  									}
  								} );
  							} );
  							fns = null;
  						} ).promise();
  					},
  					then: function( onFulfilled, onRejected, onProgress ) {
  						var maxDepth = 0;
  						function resolve( depth, deferred, handler, special ) {
  							return function() {
  								var that = this,
  									args = arguments,
  									mightThrow = function() {
  										var returned, then;

  										// Support: Promises/A+ section 2.3.3.3.3
  										// https://promisesaplus.com/#point-59
  										// Ignore double-resolution attempts
  										if ( depth < maxDepth ) {
  											return;
  										}

  										returned = handler.apply( that, args );

  										// Support: Promises/A+ section 2.3.1
  										// https://promisesaplus.com/#point-48
  										if ( returned === deferred.promise() ) {
  											throw new TypeError( "Thenable self-resolution" );
  										}

  										// Support: Promises/A+ sections 2.3.3.1, 3.5
  										// https://promisesaplus.com/#point-54
  										// https://promisesaplus.com/#point-75
  										// Retrieve `then` only once
  										then = returned &&

  											// Support: Promises/A+ section 2.3.4
  											// https://promisesaplus.com/#point-64
  											// Only check objects and functions for thenability
  											( typeof returned === "object" ||
  												typeof returned === "function" ) &&
  											returned.then;

  										// Handle a returned thenable
  										if ( isFunction( then ) ) {

  											// Special processors (notify) just wait for resolution
  											if ( special ) {
  												then.call(
  													returned,
  													resolve( maxDepth, deferred, Identity, special ),
  													resolve( maxDepth, deferred, Thrower, special )
  												);

  											// Normal processors (resolve) also hook into progress
  											} else {

  												// ...and disregard older resolution values
  												maxDepth++;

  												then.call(
  													returned,
  													resolve( maxDepth, deferred, Identity, special ),
  													resolve( maxDepth, deferred, Thrower, special ),
  													resolve( maxDepth, deferred, Identity,
  														deferred.notifyWith )
  												);
  											}

  										// Handle all other returned values
  										} else {

  											// Only substitute handlers pass on context
  											// and multiple values (non-spec behavior)
  											if ( handler !== Identity ) {
  												that = undefined;
  												args = [ returned ];
  											}

  											// Process the value(s)
  											// Default process is resolve
  											( special || deferred.resolveWith )( that, args );
  										}
  									},

  									// Only normal processors (resolve) catch and reject exceptions
  									process = special ?
  										mightThrow :
  										function() {
  											try {
  												mightThrow();
  											} catch ( e ) {

  												if ( jQuery.Deferred.exceptionHook ) {
  													jQuery.Deferred.exceptionHook( e,
  														process.error );
  												}

  												// Support: Promises/A+ section 2.3.3.3.4.1
  												// https://promisesaplus.com/#point-61
  												// Ignore post-resolution exceptions
  												if ( depth + 1 >= maxDepth ) {

  													// Only substitute handlers pass on context
  													// and multiple values (non-spec behavior)
  													if ( handler !== Thrower ) {
  														that = undefined;
  														args = [ e ];
  													}

  													deferred.rejectWith( that, args );
  												}
  											}
  										};

  								// Support: Promises/A+ section 2.3.3.3.1
  								// https://promisesaplus.com/#point-57
  								// Re-resolve promises immediately to dodge false rejection from
  								// subsequent errors
  								if ( depth ) {
  									process();
  								} else {

  									// Call an optional hook to record the error, in case of exception
  									// since it's otherwise lost when execution goes async
  									if ( jQuery.Deferred.getErrorHook ) {
  										process.error = jQuery.Deferred.getErrorHook();

  									// The deprecated alias of the above. While the name suggests
  									// returning the stack, not an error instance, jQuery just passes
  									// it directly to `console.warn` so both will work; an instance
  									// just better cooperates with source maps.
  									} else if ( jQuery.Deferred.getStackHook ) {
  										process.error = jQuery.Deferred.getStackHook();
  									}
  									window.setTimeout( process );
  								}
  							};
  						}

  						return jQuery.Deferred( function( newDefer ) {

  							// progress_handlers.add( ... )
  							tuples[ 0 ][ 3 ].add(
  								resolve(
  									0,
  									newDefer,
  									isFunction( onProgress ) ?
  										onProgress :
  										Identity,
  									newDefer.notifyWith
  								)
  							);

  							// fulfilled_handlers.add( ... )
  							tuples[ 1 ][ 3 ].add(
  								resolve(
  									0,
  									newDefer,
  									isFunction( onFulfilled ) ?
  										onFulfilled :
  										Identity
  								)
  							);

  							// rejected_handlers.add( ... )
  							tuples[ 2 ][ 3 ].add(
  								resolve(
  									0,
  									newDefer,
  									isFunction( onRejected ) ?
  										onRejected :
  										Thrower
  								)
  							);
  						} ).promise();
  					},

  					// Get a promise for this deferred
  					// If obj is provided, the promise aspect is added to the object
  					promise: function( obj ) {
  						return obj != null ? jQuery.extend( obj, promise ) : promise;
  					}
  				},
  				deferred = {};

  			// Add list-specific methods
  			jQuery.each( tuples, function( i, tuple ) {
  				var list = tuple[ 2 ],
  					stateString = tuple[ 5 ];

  				// promise.progress = list.add
  				// promise.done = list.add
  				// promise.fail = list.add
  				promise[ tuple[ 1 ] ] = list.add;

  				// Handle state
  				if ( stateString ) {
  					list.add(
  						function() {

  							// state = "resolved" (i.e., fulfilled)
  							// state = "rejected"
  							state = stateString;
  						},

  						// rejected_callbacks.disable
  						// fulfilled_callbacks.disable
  						tuples[ 3 - i ][ 2 ].disable,

  						// rejected_handlers.disable
  						// fulfilled_handlers.disable
  						tuples[ 3 - i ][ 3 ].disable,

  						// progress_callbacks.lock
  						tuples[ 0 ][ 2 ].lock,

  						// progress_handlers.lock
  						tuples[ 0 ][ 3 ].lock
  					);
  				}

  				// progress_handlers.fire
  				// fulfilled_handlers.fire
  				// rejected_handlers.fire
  				list.add( tuple[ 3 ].fire );

  				// deferred.notify = function() { deferred.notifyWith(...) }
  				// deferred.resolve = function() { deferred.resolveWith(...) }
  				// deferred.reject = function() { deferred.rejectWith(...) }
  				deferred[ tuple[ 0 ] ] = function() {
  					deferred[ tuple[ 0 ] + "With" ]( this === deferred ? undefined : this, arguments );
  					return this;
  				};

  				// deferred.notifyWith = list.fireWith
  				// deferred.resolveWith = list.fireWith
  				// deferred.rejectWith = list.fireWith
  				deferred[ tuple[ 0 ] + "With" ] = list.fireWith;
  			} );

  			// Make the deferred a promise
  			promise.promise( deferred );

  			// Call given func if any
  			if ( func ) {
  				func.call( deferred, deferred );
  			}

  			// All done!
  			return deferred;
  		},

  		// Deferred helper
  		when: function( singleValue ) {
  			var

  				// count of uncompleted subordinates
  				remaining = arguments.length,

  				// count of unprocessed arguments
  				i = remaining,

  				// subordinate fulfillment data
  				resolveContexts = Array( i ),
  				resolveValues = slice.call( arguments ),

  				// the primary Deferred
  				primary = jQuery.Deferred(),

  				// subordinate callback factory
  				updateFunc = function( i ) {
  					return function( value ) {
  						resolveContexts[ i ] = this;
  						resolveValues[ i ] = arguments.length > 1 ? slice.call( arguments ) : value;
  						if ( !( --remaining ) ) {
  							primary.resolveWith( resolveContexts, resolveValues );
  						}
  					};
  				};

  			// Single- and empty arguments are adopted like Promise.resolve
  			if ( remaining <= 1 ) {
  				adoptValue( singleValue, primary.done( updateFunc( i ) ).resolve, primary.reject,
  					!remaining );

  				// Use .then() to unwrap secondary thenables (cf. gh-3000)
  				if ( primary.state() === "pending" ||
  					isFunction( resolveValues[ i ] && resolveValues[ i ].then ) ) {

  					return primary.then();
  				}
  			}

  			// Multiple arguments are aggregated like Promise.all array elements
  			while ( i-- ) {
  				adoptValue( resolveValues[ i ], updateFunc( i ), primary.reject );
  			}

  			return primary.promise();
  		}
  	} );


  	// These usually indicate a programmer mistake during development,
  	// warn about them ASAP rather than swallowing them by default.
  	var rerrorNames = /^(Eval|Internal|Range|Reference|Syntax|Type|URI)Error$/;

  	// If `jQuery.Deferred.getErrorHook` is defined, `asyncError` is an error
  	// captured before the async barrier to get the original error cause
  	// which may otherwise be hidden.
  	jQuery.Deferred.exceptionHook = function( error, asyncError ) {

  		// Support: IE 8 - 9 only
  		// Console exists when dev tools are open, which can happen at any time
  		if ( window.console && window.console.warn && error && rerrorNames.test( error.name ) ) {
  			window.console.warn( "jQuery.Deferred exception: " + error.message,
  				error.stack, asyncError );
  		}
  	};




  	jQuery.readyException = function( error ) {
  		window.setTimeout( function() {
  			throw error;
  		} );
  	};




  	// The deferred used on DOM ready
  	var readyList = jQuery.Deferred();

  	jQuery.fn.ready = function( fn ) {

  		readyList
  			.then( fn )

  			// Wrap jQuery.readyException in a function so that the lookup
  			// happens at the time of error handling instead of callback
  			// registration.
  			.catch( function( error ) {
  				jQuery.readyException( error );
  			} );

  		return this;
  	};

  	jQuery.extend( {

  		// Is the DOM ready to be used? Set to true once it occurs.
  		isReady: false,

  		// A counter to track how many items to wait for before
  		// the ready event fires. See trac-6781
  		readyWait: 1,

  		// Handle when the DOM is ready
  		ready: function( wait ) {

  			// Abort if there are pending holds or we're already ready
  			if ( wait === true ? --jQuery.readyWait : jQuery.isReady ) {
  				return;
  			}

  			// Remember that the DOM is ready
  			jQuery.isReady = true;

  			// If a normal DOM Ready event fired, decrement, and wait if need be
  			if ( wait !== true && --jQuery.readyWait > 0 ) {
  				return;
  			}

  			// If there are functions bound, to execute
  			readyList.resolveWith( document, [ jQuery ] );
  		}
  	} );

  	jQuery.ready.then = readyList.then;

  	// The ready event handler and self cleanup method
  	function completed() {
  		document.removeEventListener( "DOMContentLoaded", completed );
  		window.removeEventListener( "load", completed );
  		jQuery.ready();
  	}

  	// Catch cases where $(document).ready() is called
  	// after the browser event has already occurred.
  	// Support: IE <=9 - 10 only
  	// Older IE sometimes signals "interactive" too soon
  	if ( document.readyState === "complete" ||
  		( document.readyState !== "loading" && !document.documentElement.doScroll ) ) {

  		// Handle it asynchronously to allow scripts the opportunity to delay ready
  		window.setTimeout( jQuery.ready );

  	} else {

  		// Use the handy event callback
  		document.addEventListener( "DOMContentLoaded", completed );

  		// A fallback to window.onload, that will always work
  		window.addEventListener( "load", completed );
  	}




  	// Multifunctional method to get and set values of a collection
  	// The value/s can optionally be executed if it's a function
  	var access = function( elems, fn, key, value, chainable, emptyGet, raw ) {
  		var i = 0,
  			len = elems.length,
  			bulk = key == null;

  		// Sets many values
  		if ( toType( key ) === "object" ) {
  			chainable = true;
  			for ( i in key ) {
  				access( elems, fn, i, key[ i ], true, emptyGet, raw );
  			}

  		// Sets one value
  		} else if ( value !== undefined ) {
  			chainable = true;

  			if ( !isFunction( value ) ) {
  				raw = true;
  			}

  			if ( bulk ) {

  				// Bulk operations run against the entire set
  				if ( raw ) {
  					fn.call( elems, value );
  					fn = null;

  				// ...except when executing function values
  				} else {
  					bulk = fn;
  					fn = function( elem, _key, value ) {
  						return bulk.call( jQuery( elem ), value );
  					};
  				}
  			}

  			if ( fn ) {
  				for ( ; i < len; i++ ) {
  					fn(
  						elems[ i ], key, raw ?
  							value :
  							value.call( elems[ i ], i, fn( elems[ i ], key ) )
  					);
  				}
  			}
  		}

  		if ( chainable ) {
  			return elems;
  		}

  		// Gets
  		if ( bulk ) {
  			return fn.call( elems );
  		}

  		return len ? fn( elems[ 0 ], key ) : emptyGet;
  	};


  	// Matches dashed string for camelizing
  	var rmsPrefix = /^-ms-/,
  		rdashAlpha = /-([a-z])/g;

  	// Used by camelCase as callback to replace()
  	function fcamelCase( _all, letter ) {
  		return letter.toUpperCase();
  	}

  	// Convert dashed to camelCase; used by the css and data modules
  	// Support: IE <=9 - 11, Edge 12 - 15
  	// Microsoft forgot to hump their vendor prefix (trac-9572)
  	function camelCase( string ) {
  		return string.replace( rmsPrefix, "ms-" ).replace( rdashAlpha, fcamelCase );
  	}
  	var acceptData = function( owner ) {

  		// Accepts only:
  		//  - Node
  		//    - Node.ELEMENT_NODE
  		//    - Node.DOCUMENT_NODE
  		//  - Object
  		//    - Any
  		return owner.nodeType === 1 || owner.nodeType === 9 || !( +owner.nodeType );
  	};




  	function Data() {
  		this.expando = jQuery.expando + Data.uid++;
  	}

  	Data.uid = 1;

  	Data.prototype = {

  		cache: function( owner ) {

  			// Check if the owner object already has a cache
  			var value = owner[ this.expando ];

  			// If not, create one
  			if ( !value ) {
  				value = {};

  				// We can accept data for non-element nodes in modern browsers,
  				// but we should not, see trac-8335.
  				// Always return an empty object.
  				if ( acceptData( owner ) ) {

  					// If it is a node unlikely to be stringify-ed or looped over
  					// use plain assignment
  					if ( owner.nodeType ) {
  						owner[ this.expando ] = value;

  					// Otherwise secure it in a non-enumerable property
  					// configurable must be true to allow the property to be
  					// deleted when data is removed
  					} else {
  						Object.defineProperty( owner, this.expando, {
  							value: value,
  							configurable: true
  						} );
  					}
  				}
  			}

  			return value;
  		},
  		set: function( owner, data, value ) {
  			var prop,
  				cache = this.cache( owner );

  			// Handle: [ owner, key, value ] args
  			// Always use camelCase key (gh-2257)
  			if ( typeof data === "string" ) {
  				cache[ camelCase( data ) ] = value;

  			// Handle: [ owner, { properties } ] args
  			} else {

  				// Copy the properties one-by-one to the cache object
  				for ( prop in data ) {
  					cache[ camelCase( prop ) ] = data[ prop ];
  				}
  			}
  			return cache;
  		},
  		get: function( owner, key ) {
  			return key === undefined ?
  				this.cache( owner ) :

  				// Always use camelCase key (gh-2257)
  				owner[ this.expando ] && owner[ this.expando ][ camelCase( key ) ];
  		},
  		access: function( owner, key, value ) {

  			// In cases where either:
  			//
  			//   1. No key was specified
  			//   2. A string key was specified, but no value provided
  			//
  			// Take the "read" path and allow the get method to determine
  			// which value to return, respectively either:
  			//
  			//   1. The entire cache object
  			//   2. The data stored at the key
  			//
  			if ( key === undefined ||
  					( ( key && typeof key === "string" ) && value === undefined ) ) {

  				return this.get( owner, key );
  			}

  			// When the key is not a string, or both a key and value
  			// are specified, set or extend (existing objects) with either:
  			//
  			//   1. An object of properties
  			//   2. A key and value
  			//
  			this.set( owner, key, value );

  			// Since the "set" path can have two possible entry points
  			// return the expected data based on which path was taken[*]
  			return value !== undefined ? value : key;
  		},
  		remove: function( owner, key ) {
  			var i,
  				cache = owner[ this.expando ];

  			if ( cache === undefined ) {
  				return;
  			}

  			if ( key !== undefined ) {

  				// Support array or space separated string of keys
  				if ( Array.isArray( key ) ) {

  					// If key is an array of keys...
  					// We always set camelCase keys, so remove that.
  					key = key.map( camelCase );
  				} else {
  					key = camelCase( key );

  					// If a key with the spaces exists, use it.
  					// Otherwise, create an array by matching non-whitespace
  					key = key in cache ?
  						[ key ] :
  						( key.match( rnothtmlwhite ) || [] );
  				}

  				i = key.length;

  				while ( i-- ) {
  					delete cache[ key[ i ] ];
  				}
  			}

  			// Remove the expando if there's no more data
  			if ( key === undefined || jQuery.isEmptyObject( cache ) ) {

  				// Support: Chrome <=35 - 45
  				// Webkit & Blink performance suffers when deleting properties
  				// from DOM nodes, so set to undefined instead
  				// https://bugs.chromium.org/p/chromium/issues/detail?id=378607 (bug restricted)
  				if ( owner.nodeType ) {
  					owner[ this.expando ] = undefined;
  				} else {
  					delete owner[ this.expando ];
  				}
  			}
  		},
  		hasData: function( owner ) {
  			var cache = owner[ this.expando ];
  			return cache !== undefined && !jQuery.isEmptyObject( cache );
  		}
  	};
  	var dataPriv = new Data();

  	var dataUser = new Data();



  	//	Implementation Summary
  	//
  	//	1. Enforce API surface and semantic compatibility with 1.9.x branch
  	//	2. Improve the module's maintainability by reducing the storage
  	//		paths to a single mechanism.
  	//	3. Use the same single mechanism to support "private" and "user" data.
  	//	4. _Never_ expose "private" data to user code (TODO: Drop _data, _removeData)
  	//	5. Avoid exposing implementation details on user objects (eg. expando properties)
  	//	6. Provide a clear path for implementation upgrade to WeakMap in 2014

  	var rbrace = /^(?:\{[\w\W]*\}|\[[\w\W]*\])$/,
  		rmultiDash = /[A-Z]/g;

  	function getData( data ) {
  		if ( data === "true" ) {
  			return true;
  		}

  		if ( data === "false" ) {
  			return false;
  		}

  		if ( data === "null" ) {
  			return null;
  		}

  		// Only convert to a number if it doesn't change the string
  		if ( data === +data + "" ) {
  			return +data;
  		}

  		if ( rbrace.test( data ) ) {
  			return JSON.parse( data );
  		}

  		return data;
  	}

  	function dataAttr( elem, key, data ) {
  		var name;

  		// If nothing was found internally, try to fetch any
  		// data from the HTML5 data-* attribute
  		if ( data === undefined && elem.nodeType === 1 ) {
  			name = "data-" + key.replace( rmultiDash, "-$&" ).toLowerCase();
  			data = elem.getAttribute( name );

  			if ( typeof data === "string" ) {
  				try {
  					data = getData( data );
  				} catch ( e ) {}

  				// Make sure we set the data so it isn't changed later
  				dataUser.set( elem, key, data );
  			} else {
  				data = undefined;
  			}
  		}
  		return data;
  	}

  	jQuery.extend( {
  		hasData: function( elem ) {
  			return dataUser.hasData( elem ) || dataPriv.hasData( elem );
  		},

  		data: function( elem, name, data ) {
  			return dataUser.access( elem, name, data );
  		},

  		removeData: function( elem, name ) {
  			dataUser.remove( elem, name );
  		},

  		// TODO: Now that all calls to _data and _removeData have been replaced
  		// with direct calls to dataPriv methods, these can be deprecated.
  		_data: function( elem, name, data ) {
  			return dataPriv.access( elem, name, data );
  		},

  		_removeData: function( elem, name ) {
  			dataPriv.remove( elem, name );
  		}
  	} );

  	jQuery.fn.extend( {
  		data: function( key, value ) {
  			var i, name, data,
  				elem = this[ 0 ],
  				attrs = elem && elem.attributes;

  			// Gets all values
  			if ( key === undefined ) {
  				if ( this.length ) {
  					data = dataUser.get( elem );

  					if ( elem.nodeType === 1 && !dataPriv.get( elem, "hasDataAttrs" ) ) {
  						i = attrs.length;
  						while ( i-- ) {

  							// Support: IE 11 only
  							// The attrs elements can be null (trac-14894)
  							if ( attrs[ i ] ) {
  								name = attrs[ i ].name;
  								if ( name.indexOf( "data-" ) === 0 ) {
  									name = camelCase( name.slice( 5 ) );
  									dataAttr( elem, name, data[ name ] );
  								}
  							}
  						}
  						dataPriv.set( elem, "hasDataAttrs", true );
  					}
  				}

  				return data;
  			}

  			// Sets multiple values
  			if ( typeof key === "object" ) {
  				return this.each( function() {
  					dataUser.set( this, key );
  				} );
  			}

  			return access( this, function( value ) {
  				var data;

  				// The calling jQuery object (element matches) is not empty
  				// (and therefore has an element appears at this[ 0 ]) and the
  				// `value` parameter was not undefined. An empty jQuery object
  				// will result in `undefined` for elem = this[ 0 ] which will
  				// throw an exception if an attempt to read a data cache is made.
  				if ( elem && value === undefined ) {

  					// Attempt to get data from the cache
  					// The key will always be camelCased in Data
  					data = dataUser.get( elem, key );
  					if ( data !== undefined ) {
  						return data;
  					}

  					// Attempt to "discover" the data in
  					// HTML5 custom data-* attrs
  					data = dataAttr( elem, key );
  					if ( data !== undefined ) {
  						return data;
  					}

  					// We tried really hard, but the data doesn't exist.
  					return;
  				}

  				// Set the data...
  				this.each( function() {

  					// We always store the camelCased key
  					dataUser.set( this, key, value );
  				} );
  			}, null, value, arguments.length > 1, null, true );
  		},

  		removeData: function( key ) {
  			return this.each( function() {
  				dataUser.remove( this, key );
  			} );
  		}
  	} );


  	jQuery.extend( {
  		queue: function( elem, type, data ) {
  			var queue;

  			if ( elem ) {
  				type = ( type || "fx" ) + "queue";
  				queue = dataPriv.get( elem, type );

  				// Speed up dequeue by getting out quickly if this is just a lookup
  				if ( data ) {
  					if ( !queue || Array.isArray( data ) ) {
  						queue = dataPriv.access( elem, type, jQuery.makeArray( data ) );
  					} else {
  						queue.push( data );
  					}
  				}
  				return queue || [];
  			}
  		},

  		dequeue: function( elem, type ) {
  			type = type || "fx";

  			var queue = jQuery.queue( elem, type ),
  				startLength = queue.length,
  				fn = queue.shift(),
  				hooks = jQuery._queueHooks( elem, type ),
  				next = function() {
  					jQuery.dequeue( elem, type );
  				};

  			// If the fx queue is dequeued, always remove the progress sentinel
  			if ( fn === "inprogress" ) {
  				fn = queue.shift();
  				startLength--;
  			}

  			if ( fn ) {

  				// Add a progress sentinel to prevent the fx queue from being
  				// automatically dequeued
  				if ( type === "fx" ) {
  					queue.unshift( "inprogress" );
  				}

  				// Clear up the last queue stop function
  				delete hooks.stop;
  				fn.call( elem, next, hooks );
  			}

  			if ( !startLength && hooks ) {
  				hooks.empty.fire();
  			}
  		},

  		// Not public - generate a queueHooks object, or return the current one
  		_queueHooks: function( elem, type ) {
  			var key = type + "queueHooks";
  			return dataPriv.get( elem, key ) || dataPriv.access( elem, key, {
  				empty: jQuery.Callbacks( "once memory" ).add( function() {
  					dataPriv.remove( elem, [ type + "queue", key ] );
  				} )
  			} );
  		}
  	} );

  	jQuery.fn.extend( {
  		queue: function( type, data ) {
  			var setter = 2;

  			if ( typeof type !== "string" ) {
  				data = type;
  				type = "fx";
  				setter--;
  			}

  			if ( arguments.length < setter ) {
  				return jQuery.queue( this[ 0 ], type );
  			}

  			return data === undefined ?
  				this :
  				this.each( function() {
  					var queue = jQuery.queue( this, type, data );

  					// Ensure a hooks for this queue
  					jQuery._queueHooks( this, type );

  					if ( type === "fx" && queue[ 0 ] !== "inprogress" ) {
  						jQuery.dequeue( this, type );
  					}
  				} );
  		},
  		dequeue: function( type ) {
  			return this.each( function() {
  				jQuery.dequeue( this, type );
  			} );
  		},
  		clearQueue: function( type ) {
  			return this.queue( type || "fx", [] );
  		},

  		// Get a promise resolved when queues of a certain type
  		// are emptied (fx is the type by default)
  		promise: function( type, obj ) {
  			var tmp,
  				count = 1,
  				defer = jQuery.Deferred(),
  				elements = this,
  				i = this.length,
  				resolve = function() {
  					if ( !( --count ) ) {
  						defer.resolveWith( elements, [ elements ] );
  					}
  				};

  			if ( typeof type !== "string" ) {
  				obj = type;
  				type = undefined;
  			}
  			type = type || "fx";

  			while ( i-- ) {
  				tmp = dataPriv.get( elements[ i ], type + "queueHooks" );
  				if ( tmp && tmp.empty ) {
  					count++;
  					tmp.empty.add( resolve );
  				}
  			}
  			resolve();
  			return defer.promise( obj );
  		}
  	} );
  	var pnum = ( /[+-]?(?:\d*\.|)\d+(?:[eE][+-]?\d+|)/ ).source;

  	var rcssNum = new RegExp( "^(?:([+-])=|)(" + pnum + ")([a-z%]*)$", "i" );


  	var cssExpand = [ "Top", "Right", "Bottom", "Left" ];

  	var documentElement = document.documentElement;



  		var isAttached = function( elem ) {
  				return jQuery.contains( elem.ownerDocument, elem );
  			},
  			composed = { composed: true };

  		// Support: IE 9 - 11+, Edge 12 - 18+, iOS 10.0 - 10.2 only
  		// Check attachment across shadow DOM boundaries when possible (gh-3504)
  		// Support: iOS 10.0-10.2 only
  		// Early iOS 10 versions support `attachShadow` but not `getRootNode`,
  		// leading to errors. We need to check for `getRootNode`.
  		if ( documentElement.getRootNode ) {
  			isAttached = function( elem ) {
  				return jQuery.contains( elem.ownerDocument, elem ) ||
  					elem.getRootNode( composed ) === elem.ownerDocument;
  			};
  		}
  	var isHiddenWithinTree = function( elem, el ) {

  			// isHiddenWithinTree might be called from jQuery#filter function;
  			// in that case, element will be second argument
  			elem = el || elem;

  			// Inline style trumps all
  			return elem.style.display === "none" ||
  				elem.style.display === "" &&

  				// Otherwise, check computed style
  				// Support: Firefox <=43 - 45
  				// Disconnected elements can have computed display: none, so first confirm that elem is
  				// in the document.
  				isAttached( elem ) &&

  				jQuery.css( elem, "display" ) === "none";
  		};



  	function adjustCSS( elem, prop, valueParts, tween ) {
  		var adjusted, scale,
  			maxIterations = 20,
  			currentValue = tween ?
  				function() {
  					return tween.cur();
  				} :
  				function() {
  					return jQuery.css( elem, prop, "" );
  				},
  			initial = currentValue(),
  			unit = valueParts && valueParts[ 3 ] || ( jQuery.cssNumber[ prop ] ? "" : "px" ),

  			// Starting value computation is required for potential unit mismatches
  			initialInUnit = elem.nodeType &&
  				( jQuery.cssNumber[ prop ] || unit !== "px" && +initial ) &&
  				rcssNum.exec( jQuery.css( elem, prop ) );

  		if ( initialInUnit && initialInUnit[ 3 ] !== unit ) {

  			// Support: Firefox <=54
  			// Halve the iteration target value to prevent interference from CSS upper bounds (gh-2144)
  			initial = initial / 2;

  			// Trust units reported by jQuery.css
  			unit = unit || initialInUnit[ 3 ];

  			// Iteratively approximate from a nonzero starting point
  			initialInUnit = +initial || 1;

  			while ( maxIterations-- ) {

  				// Evaluate and update our best guess (doubling guesses that zero out).
  				// Finish if the scale equals or crosses 1 (making the old*new product non-positive).
  				jQuery.style( elem, prop, initialInUnit + unit );
  				if ( ( 1 - scale ) * ( 1 - ( scale = currentValue() / initial || 0.5 ) ) <= 0 ) {
  					maxIterations = 0;
  				}
  				initialInUnit = initialInUnit / scale;

  			}

  			initialInUnit = initialInUnit * 2;
  			jQuery.style( elem, prop, initialInUnit + unit );

  			// Make sure we update the tween properties later on
  			valueParts = valueParts || [];
  		}

  		if ( valueParts ) {
  			initialInUnit = +initialInUnit || +initial || 0;

  			// Apply relative offset (+=/-=) if specified
  			adjusted = valueParts[ 1 ] ?
  				initialInUnit + ( valueParts[ 1 ] + 1 ) * valueParts[ 2 ] :
  				+valueParts[ 2 ];
  			if ( tween ) {
  				tween.unit = unit;
  				tween.start = initialInUnit;
  				tween.end = adjusted;
  			}
  		}
  		return adjusted;
  	}


  	var defaultDisplayMap = {};

  	function getDefaultDisplay( elem ) {
  		var temp,
  			doc = elem.ownerDocument,
  			nodeName = elem.nodeName,
  			display = defaultDisplayMap[ nodeName ];

  		if ( display ) {
  			return display;
  		}

  		temp = doc.body.appendChild( doc.createElement( nodeName ) );
  		display = jQuery.css( temp, "display" );

  		temp.parentNode.removeChild( temp );

  		if ( display === "none" ) {
  			display = "block";
  		}
  		defaultDisplayMap[ nodeName ] = display;

  		return display;
  	}

  	function showHide( elements, show ) {
  		var display, elem,
  			values = [],
  			index = 0,
  			length = elements.length;

  		// Determine new display value for elements that need to change
  		for ( ; index < length; index++ ) {
  			elem = elements[ index ];
  			if ( !elem.style ) {
  				continue;
  			}

  			display = elem.style.display;
  			if ( show ) {

  				// Since we force visibility upon cascade-hidden elements, an immediate (and slow)
  				// check is required in this first loop unless we have a nonempty display value (either
  				// inline or about-to-be-restored)
  				if ( display === "none" ) {
  					values[ index ] = dataPriv.get( elem, "display" ) || null;
  					if ( !values[ index ] ) {
  						elem.style.display = "";
  					}
  				}
  				if ( elem.style.display === "" && isHiddenWithinTree( elem ) ) {
  					values[ index ] = getDefaultDisplay( elem );
  				}
  			} else {
  				if ( display !== "none" ) {
  					values[ index ] = "none";

  					// Remember what we're overwriting
  					dataPriv.set( elem, "display", display );
  				}
  			}
  		}

  		// Set the display of the elements in a second loop to avoid constant reflow
  		for ( index = 0; index < length; index++ ) {
  			if ( values[ index ] != null ) {
  				elements[ index ].style.display = values[ index ];
  			}
  		}

  		return elements;
  	}

  	jQuery.fn.extend( {
  		show: function() {
  			return showHide( this, true );
  		},
  		hide: function() {
  			return showHide( this );
  		},
  		toggle: function( state ) {
  			if ( typeof state === "boolean" ) {
  				return state ? this.show() : this.hide();
  			}

  			return this.each( function() {
  				if ( isHiddenWithinTree( this ) ) {
  					jQuery( this ).show();
  				} else {
  					jQuery( this ).hide();
  				}
  			} );
  		}
  	} );
  	var rcheckableType = ( /^(?:checkbox|radio)$/i );

  	var rtagName = ( /<([a-z][^\/\0>\x20\t\r\n\f]*)/i );

  	var rscriptType = ( /^$|^module$|\/(?:java|ecma)script/i );



  	( function() {
  		var fragment = document.createDocumentFragment(),
  			div = fragment.appendChild( document.createElement( "div" ) ),
  			input = document.createElement( "input" );

  		// Support: Android 4.0 - 4.3 only
  		// Check state lost if the name is set (trac-11217)
  		// Support: Windows Web Apps (WWA)
  		// `name` and `type` must use .setAttribute for WWA (trac-14901)
  		input.setAttribute( "type", "radio" );
  		input.setAttribute( "checked", "checked" );
  		input.setAttribute( "name", "t" );

  		div.appendChild( input );

  		// Support: Android <=4.1 only
  		// Older WebKit doesn't clone checked state correctly in fragments
  		support.checkClone = div.cloneNode( true ).cloneNode( true ).lastChild.checked;

  		// Support: IE <=11 only
  		// Make sure textarea (and checkbox) defaultValue is properly cloned
  		div.innerHTML = "<textarea>x</textarea>";
  		support.noCloneChecked = !!div.cloneNode( true ).lastChild.defaultValue;

  		// Support: IE <=9 only
  		// IE <=9 replaces <option> tags with their contents when inserted outside of
  		// the select element.
  		div.innerHTML = "<option></option>";
  		support.option = !!div.lastChild;
  	} )();


  	// We have to close these tags to support XHTML (trac-13200)
  	var wrapMap = {

  		// XHTML parsers do not magically insert elements in the
  		// same way that tag soup parsers do. So we cannot shorten
  		// this by omitting <tbody> or other required elements.
  		thead: [ 1, "<table>", "</table>" ],
  		col: [ 2, "<table><colgroup>", "</colgroup></table>" ],
  		tr: [ 2, "<table><tbody>", "</tbody></table>" ],
  		td: [ 3, "<table><tbody><tr>", "</tr></tbody></table>" ],

  		_default: [ 0, "", "" ]
  	};

  	wrapMap.tbody = wrapMap.tfoot = wrapMap.colgroup = wrapMap.caption = wrapMap.thead;
  	wrapMap.th = wrapMap.td;

  	// Support: IE <=9 only
  	if ( !support.option ) {
  		wrapMap.optgroup = wrapMap.option = [ 1, "<select multiple='multiple'>", "</select>" ];
  	}


  	function getAll( context, tag ) {

  		// Support: IE <=9 - 11 only
  		// Use typeof to avoid zero-argument method invocation on host objects (trac-15151)
  		var ret;

  		if ( typeof context.getElementsByTagName !== "undefined" ) {
  			ret = context.getElementsByTagName( tag || "*" );

  		} else if ( typeof context.querySelectorAll !== "undefined" ) {
  			ret = context.querySelectorAll( tag || "*" );

  		} else {
  			ret = [];
  		}

  		if ( tag === undefined || tag && nodeName( context, tag ) ) {
  			return jQuery.merge( [ context ], ret );
  		}

  		return ret;
  	}


  	// Mark scripts as having already been evaluated
  	function setGlobalEval( elems, refElements ) {
  		var i = 0,
  			l = elems.length;

  		for ( ; i < l; i++ ) {
  			dataPriv.set(
  				elems[ i ],
  				"globalEval",
  				!refElements || dataPriv.get( refElements[ i ], "globalEval" )
  			);
  		}
  	}


  	var rhtml = /<|&#?\w+;/;

  	function buildFragment( elems, context, scripts, selection, ignored ) {
  		var elem, tmp, tag, wrap, attached, j,
  			fragment = context.createDocumentFragment(),
  			nodes = [],
  			i = 0,
  			l = elems.length;

  		for ( ; i < l; i++ ) {
  			elem = elems[ i ];

  			if ( elem || elem === 0 ) {

  				// Add nodes directly
  				if ( toType( elem ) === "object" ) {

  					// Support: Android <=4.0 only, PhantomJS 1 only
  					// push.apply(_, arraylike) throws on ancient WebKit
  					jQuery.merge( nodes, elem.nodeType ? [ elem ] : elem );

  				// Convert non-html into a text node
  				} else if ( !rhtml.test( elem ) ) {
  					nodes.push( context.createTextNode( elem ) );

  				// Convert html into DOM nodes
  				} else {
  					tmp = tmp || fragment.appendChild( context.createElement( "div" ) );

  					// Deserialize a standard representation
  					tag = ( rtagName.exec( elem ) || [ "", "" ] )[ 1 ].toLowerCase();
  					wrap = wrapMap[ tag ] || wrapMap._default;
  					tmp.innerHTML = wrap[ 1 ] + jQuery.htmlPrefilter( elem ) + wrap[ 2 ];

  					// Descend through wrappers to the right content
  					j = wrap[ 0 ];
  					while ( j-- ) {
  						tmp = tmp.lastChild;
  					}

  					// Support: Android <=4.0 only, PhantomJS 1 only
  					// push.apply(_, arraylike) throws on ancient WebKit
  					jQuery.merge( nodes, tmp.childNodes );

  					// Remember the top-level container
  					tmp = fragment.firstChild;

  					// Ensure the created nodes are orphaned (trac-12392)
  					tmp.textContent = "";
  				}
  			}
  		}

  		// Remove wrapper from fragment
  		fragment.textContent = "";

  		i = 0;
  		while ( ( elem = nodes[ i++ ] ) ) {

  			// Skip elements already in the context collection (trac-4087)
  			if ( selection && jQuery.inArray( elem, selection ) > -1 ) {
  				if ( ignored ) {
  					ignored.push( elem );
  				}
  				continue;
  			}

  			attached = isAttached( elem );

  			// Append to fragment
  			tmp = getAll( fragment.appendChild( elem ), "script" );

  			// Preserve script evaluation history
  			if ( attached ) {
  				setGlobalEval( tmp );
  			}

  			// Capture executables
  			if ( scripts ) {
  				j = 0;
  				while ( ( elem = tmp[ j++ ] ) ) {
  					if ( rscriptType.test( elem.type || "" ) ) {
  						scripts.push( elem );
  					}
  				}
  			}
  		}

  		return fragment;
  	}


  	var rtypenamespace = /^([^.]*)(?:\.(.+)|)/;

  	function returnTrue() {
  		return true;
  	}

  	function returnFalse() {
  		return false;
  	}

  	function on( elem, types, selector, data, fn, one ) {
  		var origFn, type;

  		// Types can be a map of types/handlers
  		if ( typeof types === "object" ) {

  			// ( types-Object, selector, data )
  			if ( typeof selector !== "string" ) {

  				// ( types-Object, data )
  				data = data || selector;
  				selector = undefined;
  			}
  			for ( type in types ) {
  				on( elem, type, selector, data, types[ type ], one );
  			}
  			return elem;
  		}

  		if ( data == null && fn == null ) {

  			// ( types, fn )
  			fn = selector;
  			data = selector = undefined;
  		} else if ( fn == null ) {
  			if ( typeof selector === "string" ) {

  				// ( types, selector, fn )
  				fn = data;
  				data = undefined;
  			} else {

  				// ( types, data, fn )
  				fn = data;
  				data = selector;
  				selector = undefined;
  			}
  		}
  		if ( fn === false ) {
  			fn = returnFalse;
  		} else if ( !fn ) {
  			return elem;
  		}

  		if ( one === 1 ) {
  			origFn = fn;
  			fn = function( event ) {

  				// Can use an empty set, since event contains the info
  				jQuery().off( event );
  				return origFn.apply( this, arguments );
  			};

  			// Use same guid so caller can remove using origFn
  			fn.guid = origFn.guid || ( origFn.guid = jQuery.guid++ );
  		}
  		return elem.each( function() {
  			jQuery.event.add( this, types, fn, data, selector );
  		} );
  	}

  	/*
  	 * Helper functions for managing events -- not part of the public interface.
  	 * Props to Dean Edwards' addEvent library for many of the ideas.
  	 */
  	jQuery.event = {

  		global: {},

  		add: function( elem, types, handler, data, selector ) {

  			var handleObjIn, eventHandle, tmp,
  				events, t, handleObj,
  				special, handlers, type, namespaces, origType,
  				elemData = dataPriv.get( elem );

  			// Only attach events to objects that accept data
  			if ( !acceptData( elem ) ) {
  				return;
  			}

  			// Caller can pass in an object of custom data in lieu of the handler
  			if ( handler.handler ) {
  				handleObjIn = handler;
  				handler = handleObjIn.handler;
  				selector = handleObjIn.selector;
  			}

  			// Ensure that invalid selectors throw exceptions at attach time
  			// Evaluate against documentElement in case elem is a non-element node (e.g., document)
  			if ( selector ) {
  				jQuery.find.matchesSelector( documentElement, selector );
  			}

  			// Make sure that the handler has a unique ID, used to find/remove it later
  			if ( !handler.guid ) {
  				handler.guid = jQuery.guid++;
  			}

  			// Init the element's event structure and main handler, if this is the first
  			if ( !( events = elemData.events ) ) {
  				events = elemData.events = Object.create( null );
  			}
  			if ( !( eventHandle = elemData.handle ) ) {
  				eventHandle = elemData.handle = function( e ) {

  					// Discard the second event of a jQuery.event.trigger() and
  					// when an event is called after a page has unloaded
  					return typeof jQuery !== "undefined" && jQuery.event.triggered !== e.type ?
  						jQuery.event.dispatch.apply( elem, arguments ) : undefined;
  				};
  			}

  			// Handle multiple events separated by a space
  			types = ( types || "" ).match( rnothtmlwhite ) || [ "" ];
  			t = types.length;
  			while ( t-- ) {
  				tmp = rtypenamespace.exec( types[ t ] ) || [];
  				type = origType = tmp[ 1 ];
  				namespaces = ( tmp[ 2 ] || "" ).split( "." ).sort();

  				// There *must* be a type, no attaching namespace-only handlers
  				if ( !type ) {
  					continue;
  				}

  				// If event changes its type, use the special event handlers for the changed type
  				special = jQuery.event.special[ type ] || {};

  				// If selector defined, determine special event api type, otherwise given type
  				type = ( selector ? special.delegateType : special.bindType ) || type;

  				// Update special based on newly reset type
  				special = jQuery.event.special[ type ] || {};

  				// handleObj is passed to all event handlers
  				handleObj = jQuery.extend( {
  					type: type,
  					origType: origType,
  					data: data,
  					handler: handler,
  					guid: handler.guid,
  					selector: selector,
  					needsContext: selector && jQuery.expr.match.needsContext.test( selector ),
  					namespace: namespaces.join( "." )
  				}, handleObjIn );

  				// Init the event handler queue if we're the first
  				if ( !( handlers = events[ type ] ) ) {
  					handlers = events[ type ] = [];
  					handlers.delegateCount = 0;

  					// Only use addEventListener if the special events handler returns false
  					if ( !special.setup ||
  						special.setup.call( elem, data, namespaces, eventHandle ) === false ) {

  						if ( elem.addEventListener ) {
  							elem.addEventListener( type, eventHandle );
  						}
  					}
  				}

  				if ( special.add ) {
  					special.add.call( elem, handleObj );

  					if ( !handleObj.handler.guid ) {
  						handleObj.handler.guid = handler.guid;
  					}
  				}

  				// Add to the element's handler list, delegates in front
  				if ( selector ) {
  					handlers.splice( handlers.delegateCount++, 0, handleObj );
  				} else {
  					handlers.push( handleObj );
  				}

  				// Keep track of which events have ever been used, for event optimization
  				jQuery.event.global[ type ] = true;
  			}

  		},

  		// Detach an event or set of events from an element
  		remove: function( elem, types, handler, selector, mappedTypes ) {

  			var j, origCount, tmp,
  				events, t, handleObj,
  				special, handlers, type, namespaces, origType,
  				elemData = dataPriv.hasData( elem ) && dataPriv.get( elem );

  			if ( !elemData || !( events = elemData.events ) ) {
  				return;
  			}

  			// Once for each type.namespace in types; type may be omitted
  			types = ( types || "" ).match( rnothtmlwhite ) || [ "" ];
  			t = types.length;
  			while ( t-- ) {
  				tmp = rtypenamespace.exec( types[ t ] ) || [];
  				type = origType = tmp[ 1 ];
  				namespaces = ( tmp[ 2 ] || "" ).split( "." ).sort();

  				// Unbind all events (on this namespace, if provided) for the element
  				if ( !type ) {
  					for ( type in events ) {
  						jQuery.event.remove( elem, type + types[ t ], handler, selector, true );
  					}
  					continue;
  				}

  				special = jQuery.event.special[ type ] || {};
  				type = ( selector ? special.delegateType : special.bindType ) || type;
  				handlers = events[ type ] || [];
  				tmp = tmp[ 2 ] &&
  					new RegExp( "(^|\\.)" + namespaces.join( "\\.(?:.*\\.|)" ) + "(\\.|$)" );

  				// Remove matching events
  				origCount = j = handlers.length;
  				while ( j-- ) {
  					handleObj = handlers[ j ];

  					if ( ( mappedTypes || origType === handleObj.origType ) &&
  						( !handler || handler.guid === handleObj.guid ) &&
  						( !tmp || tmp.test( handleObj.namespace ) ) &&
  						( !selector || selector === handleObj.selector ||
  							selector === "**" && handleObj.selector ) ) {
  						handlers.splice( j, 1 );

  						if ( handleObj.selector ) {
  							handlers.delegateCount--;
  						}
  						if ( special.remove ) {
  							special.remove.call( elem, handleObj );
  						}
  					}
  				}

  				// Remove generic event handler if we removed something and no more handlers exist
  				// (avoids potential for endless recursion during removal of special event handlers)
  				if ( origCount && !handlers.length ) {
  					if ( !special.teardown ||
  						special.teardown.call( elem, namespaces, elemData.handle ) === false ) {

  						jQuery.removeEvent( elem, type, elemData.handle );
  					}

  					delete events[ type ];
  				}
  			}

  			// Remove data and the expando if it's no longer used
  			if ( jQuery.isEmptyObject( events ) ) {
  				dataPriv.remove( elem, "handle events" );
  			}
  		},

  		dispatch: function( nativeEvent ) {

  			var i, j, ret, matched, handleObj, handlerQueue,
  				args = new Array( arguments.length ),

  				// Make a writable jQuery.Event from the native event object
  				event = jQuery.event.fix( nativeEvent ),

  				handlers = (
  					dataPriv.get( this, "events" ) || Object.create( null )
  				)[ event.type ] || [],
  				special = jQuery.event.special[ event.type ] || {};

  			// Use the fix-ed jQuery.Event rather than the (read-only) native event
  			args[ 0 ] = event;

  			for ( i = 1; i < arguments.length; i++ ) {
  				args[ i ] = arguments[ i ];
  			}

  			event.delegateTarget = this;

  			// Call the preDispatch hook for the mapped type, and let it bail if desired
  			if ( special.preDispatch && special.preDispatch.call( this, event ) === false ) {
  				return;
  			}

  			// Determine handlers
  			handlerQueue = jQuery.event.handlers.call( this, event, handlers );

  			// Run delegates first; they may want to stop propagation beneath us
  			i = 0;
  			while ( ( matched = handlerQueue[ i++ ] ) && !event.isPropagationStopped() ) {
  				event.currentTarget = matched.elem;

  				j = 0;
  				while ( ( handleObj = matched.handlers[ j++ ] ) &&
  					!event.isImmediatePropagationStopped() ) {

  					// If the event is namespaced, then each handler is only invoked if it is
  					// specially universal or its namespaces are a superset of the event's.
  					if ( !event.rnamespace || handleObj.namespace === false ||
  						event.rnamespace.test( handleObj.namespace ) ) {

  						event.handleObj = handleObj;
  						event.data = handleObj.data;

  						ret = ( ( jQuery.event.special[ handleObj.origType ] || {} ).handle ||
  							handleObj.handler ).apply( matched.elem, args );

  						if ( ret !== undefined ) {
  							if ( ( event.result = ret ) === false ) {
  								event.preventDefault();
  								event.stopPropagation();
  							}
  						}
  					}
  				}
  			}

  			// Call the postDispatch hook for the mapped type
  			if ( special.postDispatch ) {
  				special.postDispatch.call( this, event );
  			}

  			return event.result;
  		},

  		handlers: function( event, handlers ) {
  			var i, handleObj, sel, matchedHandlers, matchedSelectors,
  				handlerQueue = [],
  				delegateCount = handlers.delegateCount,
  				cur = event.target;

  			// Find delegate handlers
  			if ( delegateCount &&

  				// Support: IE <=9
  				// Black-hole SVG <use> instance trees (trac-13180)
  				cur.nodeType &&

  				// Support: Firefox <=42
  				// Suppress spec-violating clicks indicating a non-primary pointer button (trac-3861)
  				// https://www.w3.org/TR/DOM-Level-3-Events/#event-type-click
  				// Support: IE 11 only
  				// ...but not arrow key "clicks" of radio inputs, which can have `button` -1 (gh-2343)
  				!( event.type === "click" && event.button >= 1 ) ) {

  				for ( ; cur !== this; cur = cur.parentNode || this ) {

  					// Don't check non-elements (trac-13208)
  					// Don't process clicks on disabled elements (trac-6911, trac-8165, trac-11382, trac-11764)
  					if ( cur.nodeType === 1 && !( event.type === "click" && cur.disabled === true ) ) {
  						matchedHandlers = [];
  						matchedSelectors = {};
  						for ( i = 0; i < delegateCount; i++ ) {
  							handleObj = handlers[ i ];

  							// Don't conflict with Object.prototype properties (trac-13203)
  							sel = handleObj.selector + " ";

  							if ( matchedSelectors[ sel ] === undefined ) {
  								matchedSelectors[ sel ] = handleObj.needsContext ?
  									jQuery( sel, this ).index( cur ) > -1 :
  									jQuery.find( sel, this, null, [ cur ] ).length;
  							}
  							if ( matchedSelectors[ sel ] ) {
  								matchedHandlers.push( handleObj );
  							}
  						}
  						if ( matchedHandlers.length ) {
  							handlerQueue.push( { elem: cur, handlers: matchedHandlers } );
  						}
  					}
  				}
  			}

  			// Add the remaining (directly-bound) handlers
  			cur = this;
  			if ( delegateCount < handlers.length ) {
  				handlerQueue.push( { elem: cur, handlers: handlers.slice( delegateCount ) } );
  			}

  			return handlerQueue;
  		},

  		addProp: function( name, hook ) {
  			Object.defineProperty( jQuery.Event.prototype, name, {
  				enumerable: true,
  				configurable: true,

  				get: isFunction( hook ) ?
  					function() {
  						if ( this.originalEvent ) {
  							return hook( this.originalEvent );
  						}
  					} :
  					function() {
  						if ( this.originalEvent ) {
  							return this.originalEvent[ name ];
  						}
  					},

  				set: function( value ) {
  					Object.defineProperty( this, name, {
  						enumerable: true,
  						configurable: true,
  						writable: true,
  						value: value
  					} );
  				}
  			} );
  		},

  		fix: function( originalEvent ) {
  			return originalEvent[ jQuery.expando ] ?
  				originalEvent :
  				new jQuery.Event( originalEvent );
  		},

  		special: {
  			load: {

  				// Prevent triggered image.load events from bubbling to window.load
  				noBubble: true
  			},
  			click: {

  				// Utilize native event to ensure correct state for checkable inputs
  				setup: function( data ) {

  					// For mutual compressibility with _default, replace `this` access with a local var.
  					// `|| data` is dead code meant only to preserve the variable through minification.
  					var el = this || data;

  					// Claim the first handler
  					if ( rcheckableType.test( el.type ) &&
  						el.click && nodeName( el, "input" ) ) {

  						// dataPriv.set( el, "click", ... )
  						leverageNative( el, "click", true );
  					}

  					// Return false to allow normal processing in the caller
  					return false;
  				},
  				trigger: function( data ) {

  					// For mutual compressibility with _default, replace `this` access with a local var.
  					// `|| data` is dead code meant only to preserve the variable through minification.
  					var el = this || data;

  					// Force setup before triggering a click
  					if ( rcheckableType.test( el.type ) &&
  						el.click && nodeName( el, "input" ) ) {

  						leverageNative( el, "click" );
  					}

  					// Return non-false to allow normal event-path propagation
  					return true;
  				},

  				// For cross-browser consistency, suppress native .click() on links
  				// Also prevent it if we're currently inside a leveraged native-event stack
  				_default: function( event ) {
  					var target = event.target;
  					return rcheckableType.test( target.type ) &&
  						target.click && nodeName( target, "input" ) &&
  						dataPriv.get( target, "click" ) ||
  						nodeName( target, "a" );
  				}
  			},

  			beforeunload: {
  				postDispatch: function( event ) {

  					// Support: Firefox 20+
  					// Firefox doesn't alert if the returnValue field is not set.
  					if ( event.result !== undefined && event.originalEvent ) {
  						event.originalEvent.returnValue = event.result;
  					}
  				}
  			}
  		}
  	};

  	// Ensure the presence of an event listener that handles manually-triggered
  	// synthetic events by interrupting progress until reinvoked in response to
  	// *native* events that it fires directly, ensuring that state changes have
  	// already occurred before other listeners are invoked.
  	function leverageNative( el, type, isSetup ) {

  		// Missing `isSetup` indicates a trigger call, which must force setup through jQuery.event.add
  		if ( !isSetup ) {
  			if ( dataPriv.get( el, type ) === undefined ) {
  				jQuery.event.add( el, type, returnTrue );
  			}
  			return;
  		}

  		// Register the controller as a special universal handler for all event namespaces
  		dataPriv.set( el, type, false );
  		jQuery.event.add( el, type, {
  			namespace: false,
  			handler: function( event ) {
  				var result,
  					saved = dataPriv.get( this, type );

  				if ( ( event.isTrigger & 1 ) && this[ type ] ) {

  					// Interrupt processing of the outer synthetic .trigger()ed event
  					if ( !saved ) {

  						// Store arguments for use when handling the inner native event
  						// There will always be at least one argument (an event object), so this array
  						// will not be confused with a leftover capture object.
  						saved = slice.call( arguments );
  						dataPriv.set( this, type, saved );

  						// Trigger the native event and capture its result
  						this[ type ]();
  						result = dataPriv.get( this, type );
  						dataPriv.set( this, type, false );

  						if ( saved !== result ) {

  							// Cancel the outer synthetic event
  							event.stopImmediatePropagation();
  							event.preventDefault();

  							return result;
  						}

  					// If this is an inner synthetic event for an event with a bubbling surrogate
  					// (focus or blur), assume that the surrogate already propagated from triggering
  					// the native event and prevent that from happening again here.
  					// This technically gets the ordering wrong w.r.t. to `.trigger()` (in which the
  					// bubbling surrogate propagates *after* the non-bubbling base), but that seems
  					// less bad than duplication.
  					} else if ( ( jQuery.event.special[ type ] || {} ).delegateType ) {
  						event.stopPropagation();
  					}

  				// If this is a native event triggered above, everything is now in order
  				// Fire an inner synthetic event with the original arguments
  				} else if ( saved ) {

  					// ...and capture the result
  					dataPriv.set( this, type, jQuery.event.trigger(
  						saved[ 0 ],
  						saved.slice( 1 ),
  						this
  					) );

  					// Abort handling of the native event by all jQuery handlers while allowing
  					// native handlers on the same element to run. On target, this is achieved
  					// by stopping immediate propagation just on the jQuery event. However,
  					// the native event is re-wrapped by a jQuery one on each level of the
  					// propagation so the only way to stop it for jQuery is to stop it for
  					// everyone via native `stopPropagation()`. This is not a problem for
  					// focus/blur which don't bubble, but it does also stop click on checkboxes
  					// and radios. We accept this limitation.
  					event.stopPropagation();
  					event.isImmediatePropagationStopped = returnTrue;
  				}
  			}
  		} );
  	}

  	jQuery.removeEvent = function( elem, type, handle ) {

  		// This "if" is needed for plain objects
  		if ( elem.removeEventListener ) {
  			elem.removeEventListener( type, handle );
  		}
  	};

  	jQuery.Event = function( src, props ) {

  		// Allow instantiation without the 'new' keyword
  		if ( !( this instanceof jQuery.Event ) ) {
  			return new jQuery.Event( src, props );
  		}

  		// Event object
  		if ( src && src.type ) {
  			this.originalEvent = src;
  			this.type = src.type;

  			// Events bubbling up the document may have been marked as prevented
  			// by a handler lower down the tree; reflect the correct value.
  			this.isDefaultPrevented = src.defaultPrevented ||
  					src.defaultPrevented === undefined &&

  					// Support: Android <=2.3 only
  					src.returnValue === false ?
  				returnTrue :
  				returnFalse;

  			// Create target properties
  			// Support: Safari <=6 - 7 only
  			// Target should not be a text node (trac-504, trac-13143)
  			this.target = ( src.target && src.target.nodeType === 3 ) ?
  				src.target.parentNode :
  				src.target;

  			this.currentTarget = src.currentTarget;
  			this.relatedTarget = src.relatedTarget;

  		// Event type
  		} else {
  			this.type = src;
  		}

  		// Put explicitly provided properties onto the event object
  		if ( props ) {
  			jQuery.extend( this, props );
  		}

  		// Create a timestamp if incoming event doesn't have one
  		this.timeStamp = src && src.timeStamp || Date.now();

  		// Mark it as fixed
  		this[ jQuery.expando ] = true;
  	};

  	// jQuery.Event is based on DOM3 Events as specified by the ECMAScript Language Binding
  	// https://www.w3.org/TR/2003/WD-DOM-Level-3-Events-20030331/ecma-script-binding.html
  	jQuery.Event.prototype = {
  		constructor: jQuery.Event,
  		isDefaultPrevented: returnFalse,
  		isPropagationStopped: returnFalse,
  		isImmediatePropagationStopped: returnFalse,
  		isSimulated: false,

  		preventDefault: function() {
  			var e = this.originalEvent;

  			this.isDefaultPrevented = returnTrue;

  			if ( e && !this.isSimulated ) {
  				e.preventDefault();
  			}
  		},
  		stopPropagation: function() {
  			var e = this.originalEvent;

  			this.isPropagationStopped = returnTrue;

  			if ( e && !this.isSimulated ) {
  				e.stopPropagation();
  			}
  		},
  		stopImmediatePropagation: function() {
  			var e = this.originalEvent;

  			this.isImmediatePropagationStopped = returnTrue;

  			if ( e && !this.isSimulated ) {
  				e.stopImmediatePropagation();
  			}

  			this.stopPropagation();
  		}
  	};

  	// Includes all common event props including KeyEvent and MouseEvent specific props
  	jQuery.each( {
  		altKey: true,
  		bubbles: true,
  		cancelable: true,
  		changedTouches: true,
  		ctrlKey: true,
  		detail: true,
  		eventPhase: true,
  		metaKey: true,
  		pageX: true,
  		pageY: true,
  		shiftKey: true,
  		view: true,
  		"char": true,
  		code: true,
  		charCode: true,
  		key: true,
  		keyCode: true,
  		button: true,
  		buttons: true,
  		clientX: true,
  		clientY: true,
  		offsetX: true,
  		offsetY: true,
  		pointerId: true,
  		pointerType: true,
  		screenX: true,
  		screenY: true,
  		targetTouches: true,
  		toElement: true,
  		touches: true,
  		which: true
  	}, jQuery.event.addProp );

  	jQuery.each( { focus: "focusin", blur: "focusout" }, function( type, delegateType ) {

  		function focusMappedHandler( nativeEvent ) {
  			if ( document.documentMode ) {

  				// Support: IE 11+
  				// Attach a single focusin/focusout handler on the document while someone wants
  				// focus/blur. This is because the former are synchronous in IE while the latter
  				// are async. In other browsers, all those handlers are invoked synchronously.

  				// `handle` from private data would already wrap the event, but we need
  				// to change the `type` here.
  				var handle = dataPriv.get( this, "handle" ),
  					event = jQuery.event.fix( nativeEvent );
  				event.type = nativeEvent.type === "focusin" ? "focus" : "blur";
  				event.isSimulated = true;

  				// First, handle focusin/focusout
  				handle( nativeEvent );

  				// ...then, handle focus/blur
  				//
  				// focus/blur don't bubble while focusin/focusout do; simulate the former by only
  				// invoking the handler at the lower level.
  				if ( event.target === event.currentTarget ) {

  					// The setup part calls `leverageNative`, which, in turn, calls
  					// `jQuery.event.add`, so event handle will already have been set
  					// by this point.
  					handle( event );
  				}
  			} else {

  				// For non-IE browsers, attach a single capturing handler on the document
  				// while someone wants focusin/focusout.
  				jQuery.event.simulate( delegateType, nativeEvent.target,
  					jQuery.event.fix( nativeEvent ) );
  			}
  		}

  		jQuery.event.special[ type ] = {

  			// Utilize native event if possible so blur/focus sequence is correct
  			setup: function() {

  				var attaches;

  				// Claim the first handler
  				// dataPriv.set( this, "focus", ... )
  				// dataPriv.set( this, "blur", ... )
  				leverageNative( this, type, true );

  				if ( document.documentMode ) {

  					// Support: IE 9 - 11+
  					// We use the same native handler for focusin & focus (and focusout & blur)
  					// so we need to coordinate setup & teardown parts between those events.
  					// Use `delegateType` as the key as `type` is already used by `leverageNative`.
  					attaches = dataPriv.get( this, delegateType );
  					if ( !attaches ) {
  						this.addEventListener( delegateType, focusMappedHandler );
  					}
  					dataPriv.set( this, delegateType, ( attaches || 0 ) + 1 );
  				} else {

  					// Return false to allow normal processing in the caller
  					return false;
  				}
  			},
  			trigger: function() {

  				// Force setup before trigger
  				leverageNative( this, type );

  				// Return non-false to allow normal event-path propagation
  				return true;
  			},

  			teardown: function() {
  				var attaches;

  				if ( document.documentMode ) {
  					attaches = dataPriv.get( this, delegateType ) - 1;
  					if ( !attaches ) {
  						this.removeEventListener( delegateType, focusMappedHandler );
  						dataPriv.remove( this, delegateType );
  					} else {
  						dataPriv.set( this, delegateType, attaches );
  					}
  				} else {

  					// Return false to indicate standard teardown should be applied
  					return false;
  				}
  			},

  			// Suppress native focus or blur if we're currently inside
  			// a leveraged native-event stack
  			_default: function( event ) {
  				return dataPriv.get( event.target, type );
  			},

  			delegateType: delegateType
  		};

  		// Support: Firefox <=44
  		// Firefox doesn't have focus(in | out) events
  		// Related ticket - https://bugzilla.mozilla.org/show_bug.cgi?id=687787
  		//
  		// Support: Chrome <=48 - 49, Safari <=9.0 - 9.1
  		// focus(in | out) events fire after focus & blur events,
  		// which is spec violation - http://www.w3.org/TR/DOM-Level-3-Events/#events-focusevent-event-order
  		// Related ticket - https://bugs.chromium.org/p/chromium/issues/detail?id=449857
  		//
  		// Support: IE 9 - 11+
  		// To preserve relative focusin/focus & focusout/blur event order guaranteed on the 3.x branch,
  		// attach a single handler for both events in IE.
  		jQuery.event.special[ delegateType ] = {
  			setup: function() {

  				// Handle: regular nodes (via `this.ownerDocument`), window
  				// (via `this.document`) & document (via `this`).
  				var doc = this.ownerDocument || this.document || this,
  					dataHolder = document.documentMode ? this : doc,
  					attaches = dataPriv.get( dataHolder, delegateType );

  				// Support: IE 9 - 11+
  				// We use the same native handler for focusin & focus (and focusout & blur)
  				// so we need to coordinate setup & teardown parts between those events.
  				// Use `delegateType` as the key as `type` is already used by `leverageNative`.
  				if ( !attaches ) {
  					if ( document.documentMode ) {
  						this.addEventListener( delegateType, focusMappedHandler );
  					} else {
  						doc.addEventListener( type, focusMappedHandler, true );
  					}
  				}
  				dataPriv.set( dataHolder, delegateType, ( attaches || 0 ) + 1 );
  			},
  			teardown: function() {
  				var doc = this.ownerDocument || this.document || this,
  					dataHolder = document.documentMode ? this : doc,
  					attaches = dataPriv.get( dataHolder, delegateType ) - 1;

  				if ( !attaches ) {
  					if ( document.documentMode ) {
  						this.removeEventListener( delegateType, focusMappedHandler );
  					} else {
  						doc.removeEventListener( type, focusMappedHandler, true );
  					}
  					dataPriv.remove( dataHolder, delegateType );
  				} else {
  					dataPriv.set( dataHolder, delegateType, attaches );
  				}
  			}
  		};
  	} );

  	// Create mouseenter/leave events using mouseover/out and event-time checks
  	// so that event delegation works in jQuery.
  	// Do the same for pointerenter/pointerleave and pointerover/pointerout
  	//
  	// Support: Safari 7 only
  	// Safari sends mouseenter too often; see:
  	// https://bugs.chromium.org/p/chromium/issues/detail?id=470258
  	// for the description of the bug (it existed in older Chrome versions as well).
  	jQuery.each( {
  		mouseenter: "mouseover",
  		mouseleave: "mouseout",
  		pointerenter: "pointerover",
  		pointerleave: "pointerout"
  	}, function( orig, fix ) {
  		jQuery.event.special[ orig ] = {
  			delegateType: fix,
  			bindType: fix,

  			handle: function( event ) {
  				var ret,
  					target = this,
  					related = event.relatedTarget,
  					handleObj = event.handleObj;

  				// For mouseenter/leave call the handler if related is outside the target.
  				// NB: No relatedTarget if the mouse left/entered the browser window
  				if ( !related || ( related !== target && !jQuery.contains( target, related ) ) ) {
  					event.type = handleObj.origType;
  					ret = handleObj.handler.apply( this, arguments );
  					event.type = fix;
  				}
  				return ret;
  			}
  		};
  	} );

  	jQuery.fn.extend( {

  		on: function( types, selector, data, fn ) {
  			return on( this, types, selector, data, fn );
  		},
  		one: function( types, selector, data, fn ) {
  			return on( this, types, selector, data, fn, 1 );
  		},
  		off: function( types, selector, fn ) {
  			var handleObj, type;
  			if ( types && types.preventDefault && types.handleObj ) {

  				// ( event )  dispatched jQuery.Event
  				handleObj = types.handleObj;
  				jQuery( types.delegateTarget ).off(
  					handleObj.namespace ?
  						handleObj.origType + "." + handleObj.namespace :
  						handleObj.origType,
  					handleObj.selector,
  					handleObj.handler
  				);
  				return this;
  			}
  			if ( typeof types === "object" ) {

  				// ( types-object [, selector] )
  				for ( type in types ) {
  					this.off( type, selector, types[ type ] );
  				}
  				return this;
  			}
  			if ( selector === false || typeof selector === "function" ) {

  				// ( types [, fn] )
  				fn = selector;
  				selector = undefined;
  			}
  			if ( fn === false ) {
  				fn = returnFalse;
  			}
  			return this.each( function() {
  				jQuery.event.remove( this, types, fn, selector );
  			} );
  		}
  	} );


  	var

  		// Support: IE <=10 - 11, Edge 12 - 13 only
  		// In IE/Edge using regex groups here causes severe slowdowns.
  		// See https://connect.microsoft.com/IE/feedback/details/1736512/
  		rnoInnerhtml = /<script|<style|<link/i,

  		// checked="checked" or checked
  		rchecked = /checked\s*(?:[^=]|=\s*.checked.)/i,

  		rcleanScript = /^\s*<!\[CDATA\[|\]\]>\s*$/g;

  	// Prefer a tbody over its parent table for containing new rows
  	function manipulationTarget( elem, content ) {
  		if ( nodeName( elem, "table" ) &&
  			nodeName( content.nodeType !== 11 ? content : content.firstChild, "tr" ) ) {

  			return jQuery( elem ).children( "tbody" )[ 0 ] || elem;
  		}

  		return elem;
  	}

  	// Replace/restore the type attribute of script elements for safe DOM manipulation
  	function disableScript( elem ) {
  		elem.type = ( elem.getAttribute( "type" ) !== null ) + "/" + elem.type;
  		return elem;
  	}
  	function restoreScript( elem ) {
  		if ( ( elem.type || "" ).slice( 0, 5 ) === "true/" ) {
  			elem.type = elem.type.slice( 5 );
  		} else {
  			elem.removeAttribute( "type" );
  		}

  		return elem;
  	}

  	function cloneCopyEvent( src, dest ) {
  		var i, l, type, pdataOld, udataOld, udataCur, events;

  		if ( dest.nodeType !== 1 ) {
  			return;
  		}

  		// 1. Copy private data: events, handlers, etc.
  		if ( dataPriv.hasData( src ) ) {
  			pdataOld = dataPriv.get( src );
  			events = pdataOld.events;

  			if ( events ) {
  				dataPriv.remove( dest, "handle events" );

  				for ( type in events ) {
  					for ( i = 0, l = events[ type ].length; i < l; i++ ) {
  						jQuery.event.add( dest, type, events[ type ][ i ] );
  					}
  				}
  			}
  		}

  		// 2. Copy user data
  		if ( dataUser.hasData( src ) ) {
  			udataOld = dataUser.access( src );
  			udataCur = jQuery.extend( {}, udataOld );

  			dataUser.set( dest, udataCur );
  		}
  	}

  	// Fix IE bugs, see support tests
  	function fixInput( src, dest ) {
  		var nodeName = dest.nodeName.toLowerCase();

  		// Fails to persist the checked state of a cloned checkbox or radio button.
  		if ( nodeName === "input" && rcheckableType.test( src.type ) ) {
  			dest.checked = src.checked;

  		// Fails to return the selected option to the default selected state when cloning options
  		} else if ( nodeName === "input" || nodeName === "textarea" ) {
  			dest.defaultValue = src.defaultValue;
  		}
  	}

  	function domManip( collection, args, callback, ignored ) {

  		// Flatten any nested arrays
  		args = flat( args );

  		var fragment, first, scripts, hasScripts, node, doc,
  			i = 0,
  			l = collection.length,
  			iNoClone = l - 1,
  			value = args[ 0 ],
  			valueIsFunction = isFunction( value );

  		// We can't cloneNode fragments that contain checked, in WebKit
  		if ( valueIsFunction ||
  				( l > 1 && typeof value === "string" &&
  					!support.checkClone && rchecked.test( value ) ) ) {
  			return collection.each( function( index ) {
  				var self = collection.eq( index );
  				if ( valueIsFunction ) {
  					args[ 0 ] = value.call( this, index, self.html() );
  				}
  				domManip( self, args, callback, ignored );
  			} );
  		}

  		if ( l ) {
  			fragment = buildFragment( args, collection[ 0 ].ownerDocument, false, collection, ignored );
  			first = fragment.firstChild;

  			if ( fragment.childNodes.length === 1 ) {
  				fragment = first;
  			}

  			// Require either new content or an interest in ignored elements to invoke the callback
  			if ( first || ignored ) {
  				scripts = jQuery.map( getAll( fragment, "script" ), disableScript );
  				hasScripts = scripts.length;

  				// Use the original fragment for the last item
  				// instead of the first because it can end up
  				// being emptied incorrectly in certain situations (trac-8070).
  				for ( ; i < l; i++ ) {
  					node = fragment;

  					if ( i !== iNoClone ) {
  						node = jQuery.clone( node, true, true );

  						// Keep references to cloned scripts for later restoration
  						if ( hasScripts ) {

  							// Support: Android <=4.0 only, PhantomJS 1 only
  							// push.apply(_, arraylike) throws on ancient WebKit
  							jQuery.merge( scripts, getAll( node, "script" ) );
  						}
  					}

  					callback.call( collection[ i ], node, i );
  				}

  				if ( hasScripts ) {
  					doc = scripts[ scripts.length - 1 ].ownerDocument;

  					// Re-enable scripts
  					jQuery.map( scripts, restoreScript );

  					// Evaluate executable scripts on first document insertion
  					for ( i = 0; i < hasScripts; i++ ) {
  						node = scripts[ i ];
  						if ( rscriptType.test( node.type || "" ) &&
  							!dataPriv.access( node, "globalEval" ) &&
  							jQuery.contains( doc, node ) ) {

  							if ( node.src && ( node.type || "" ).toLowerCase()  !== "module" ) {

  								// Optional AJAX dependency, but won't run scripts if not present
  								if ( jQuery._evalUrl && !node.noModule ) {
  									jQuery._evalUrl( node.src, {
  										nonce: node.nonce || node.getAttribute( "nonce" )
  									}, doc );
  								}
  							} else {

  								// Unwrap a CDATA section containing script contents. This shouldn't be
  								// needed as in XML documents they're already not visible when
  								// inspecting element contents and in HTML documents they have no
  								// meaning but we're preserving that logic for backwards compatibility.
  								// This will be removed completely in 4.0. See gh-4904.
  								DOMEval( node.textContent.replace( rcleanScript, "" ), node, doc );
  							}
  						}
  					}
  				}
  			}
  		}

  		return collection;
  	}

  	function remove( elem, selector, keepData ) {
  		var node,
  			nodes = selector ? jQuery.filter( selector, elem ) : elem,
  			i = 0;

  		for ( ; ( node = nodes[ i ] ) != null; i++ ) {
  			if ( !keepData && node.nodeType === 1 ) {
  				jQuery.cleanData( getAll( node ) );
  			}

  			if ( node.parentNode ) {
  				if ( keepData && isAttached( node ) ) {
  					setGlobalEval( getAll( node, "script" ) );
  				}
  				node.parentNode.removeChild( node );
  			}
  		}

  		return elem;
  	}

  	jQuery.extend( {
  		htmlPrefilter: function( html ) {
  			return html;
  		},

  		clone: function( elem, dataAndEvents, deepDataAndEvents ) {
  			var i, l, srcElements, destElements,
  				clone = elem.cloneNode( true ),
  				inPage = isAttached( elem );

  			// Fix IE cloning issues
  			if ( !support.noCloneChecked && ( elem.nodeType === 1 || elem.nodeType === 11 ) &&
  					!jQuery.isXMLDoc( elem ) ) {

  				// We eschew jQuery#find here for performance reasons:
  				// https://jsperf.com/getall-vs-sizzle/2
  				destElements = getAll( clone );
  				srcElements = getAll( elem );

  				for ( i = 0, l = srcElements.length; i < l; i++ ) {
  					fixInput( srcElements[ i ], destElements[ i ] );
  				}
  			}

  			// Copy the events from the original to the clone
  			if ( dataAndEvents ) {
  				if ( deepDataAndEvents ) {
  					srcElements = srcElements || getAll( elem );
  					destElements = destElements || getAll( clone );

  					for ( i = 0, l = srcElements.length; i < l; i++ ) {
  						cloneCopyEvent( srcElements[ i ], destElements[ i ] );
  					}
  				} else {
  					cloneCopyEvent( elem, clone );
  				}
  			}

  			// Preserve script evaluation history
  			destElements = getAll( clone, "script" );
  			if ( destElements.length > 0 ) {
  				setGlobalEval( destElements, !inPage && getAll( elem, "script" ) );
  			}

  			// Return the cloned set
  			return clone;
  		},

  		cleanData: function( elems ) {
  			var data, elem, type,
  				special = jQuery.event.special,
  				i = 0;

  			for ( ; ( elem = elems[ i ] ) !== undefined; i++ ) {
  				if ( acceptData( elem ) ) {
  					if ( ( data = elem[ dataPriv.expando ] ) ) {
  						if ( data.events ) {
  							for ( type in data.events ) {
  								if ( special[ type ] ) {
  									jQuery.event.remove( elem, type );

  								// This is a shortcut to avoid jQuery.event.remove's overhead
  								} else {
  									jQuery.removeEvent( elem, type, data.handle );
  								}
  							}
  						}

  						// Support: Chrome <=35 - 45+
  						// Assign undefined instead of using delete, see Data#remove
  						elem[ dataPriv.expando ] = undefined;
  					}
  					if ( elem[ dataUser.expando ] ) {

  						// Support: Chrome <=35 - 45+
  						// Assign undefined instead of using delete, see Data#remove
  						elem[ dataUser.expando ] = undefined;
  					}
  				}
  			}
  		}
  	} );

  	jQuery.fn.extend( {
  		detach: function( selector ) {
  			return remove( this, selector, true );
  		},

  		remove: function( selector ) {
  			return remove( this, selector );
  		},

  		text: function( value ) {
  			return access( this, function( value ) {
  				return value === undefined ?
  					jQuery.text( this ) :
  					this.empty().each( function() {
  						if ( this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9 ) {
  							this.textContent = value;
  						}
  					} );
  			}, null, value, arguments.length );
  		},

  		append: function() {
  			return domManip( this, arguments, function( elem ) {
  				if ( this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9 ) {
  					var target = manipulationTarget( this, elem );
  					target.appendChild( elem );
  				}
  			} );
  		},

  		prepend: function() {
  			return domManip( this, arguments, function( elem ) {
  				if ( this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9 ) {
  					var target = manipulationTarget( this, elem );
  					target.insertBefore( elem, target.firstChild );
  				}
  			} );
  		},

  		before: function() {
  			return domManip( this, arguments, function( elem ) {
  				if ( this.parentNode ) {
  					this.parentNode.insertBefore( elem, this );
  				}
  			} );
  		},

  		after: function() {
  			return domManip( this, arguments, function( elem ) {
  				if ( this.parentNode ) {
  					this.parentNode.insertBefore( elem, this.nextSibling );
  				}
  			} );
  		},

  		empty: function() {
  			var elem,
  				i = 0;

  			for ( ; ( elem = this[ i ] ) != null; i++ ) {
  				if ( elem.nodeType === 1 ) {

  					// Prevent memory leaks
  					jQuery.cleanData( getAll( elem, false ) );

  					// Remove any remaining nodes
  					elem.textContent = "";
  				}
  			}

  			return this;
  		},

  		clone: function( dataAndEvents, deepDataAndEvents ) {
  			dataAndEvents = dataAndEvents == null ? false : dataAndEvents;
  			deepDataAndEvents = deepDataAndEvents == null ? dataAndEvents : deepDataAndEvents;

  			return this.map( function() {
  				return jQuery.clone( this, dataAndEvents, deepDataAndEvents );
  			} );
  		},

  		html: function( value ) {
  			return access( this, function( value ) {
  				var elem = this[ 0 ] || {},
  					i = 0,
  					l = this.length;

  				if ( value === undefined && elem.nodeType === 1 ) {
  					return elem.innerHTML;
  				}

  				// See if we can take a shortcut and just use innerHTML
  				if ( typeof value === "string" && !rnoInnerhtml.test( value ) &&
  					!wrapMap[ ( rtagName.exec( value ) || [ "", "" ] )[ 1 ].toLowerCase() ] ) {

  					value = jQuery.htmlPrefilter( value );

  					try {
  						for ( ; i < l; i++ ) {
  							elem = this[ i ] || {};

  							// Remove element nodes and prevent memory leaks
  							if ( elem.nodeType === 1 ) {
  								jQuery.cleanData( getAll( elem, false ) );
  								elem.innerHTML = value;
  							}
  						}

  						elem = 0;

  					// If using innerHTML throws an exception, use the fallback method
  					} catch ( e ) {}
  				}

  				if ( elem ) {
  					this.empty().append( value );
  				}
  			}, null, value, arguments.length );
  		},

  		replaceWith: function() {
  			var ignored = [];

  			// Make the changes, replacing each non-ignored context element with the new content
  			return domManip( this, arguments, function( elem ) {
  				var parent = this.parentNode;

  				if ( jQuery.inArray( this, ignored ) < 0 ) {
  					jQuery.cleanData( getAll( this ) );
  					if ( parent ) {
  						parent.replaceChild( elem, this );
  					}
  				}

  			// Force callback invocation
  			}, ignored );
  		}
  	} );

  	jQuery.each( {
  		appendTo: "append",
  		prependTo: "prepend",
  		insertBefore: "before",
  		insertAfter: "after",
  		replaceAll: "replaceWith"
  	}, function( name, original ) {
  		jQuery.fn[ name ] = function( selector ) {
  			var elems,
  				ret = [],
  				insert = jQuery( selector ),
  				last = insert.length - 1,
  				i = 0;

  			for ( ; i <= last; i++ ) {
  				elems = i === last ? this : this.clone( true );
  				jQuery( insert[ i ] )[ original ]( elems );

  				// Support: Android <=4.0 only, PhantomJS 1 only
  				// .get() because push.apply(_, arraylike) throws on ancient WebKit
  				push.apply( ret, elems.get() );
  			}

  			return this.pushStack( ret );
  		};
  	} );
  	var rnumnonpx = new RegExp( "^(" + pnum + ")(?!px)[a-z%]+$", "i" );

  	var rcustomProp = /^--/;


  	var getStyles = function( elem ) {

  			// Support: IE <=11 only, Firefox <=30 (trac-15098, trac-14150)
  			// IE throws on elements created in popups
  			// FF meanwhile throws on frame elements through "defaultView.getComputedStyle"
  			var view = elem.ownerDocument.defaultView;

  			if ( !view || !view.opener ) {
  				view = window;
  			}

  			return view.getComputedStyle( elem );
  		};

  	var swap = function( elem, options, callback ) {
  		var ret, name,
  			old = {};

  		// Remember the old values, and insert the new ones
  		for ( name in options ) {
  			old[ name ] = elem.style[ name ];
  			elem.style[ name ] = options[ name ];
  		}

  		ret = callback.call( elem );

  		// Revert the old values
  		for ( name in options ) {
  			elem.style[ name ] = old[ name ];
  		}

  		return ret;
  	};


  	var rboxStyle = new RegExp( cssExpand.join( "|" ), "i" );



  	( function() {

  		// Executing both pixelPosition & boxSizingReliable tests require only one layout
  		// so they're executed at the same time to save the second computation.
  		function computeStyleTests() {

  			// This is a singleton, we need to execute it only once
  			if ( !div ) {
  				return;
  			}

  			container.style.cssText = "position:absolute;left:-11111px;width:60px;" +
  				"margin-top:1px;padding:0;border:0";
  			div.style.cssText =
  				"position:relative;display:block;box-sizing:border-box;overflow:scroll;" +
  				"margin:auto;border:1px;padding:1px;" +
  				"width:60%;top:1%";
  			documentElement.appendChild( container ).appendChild( div );

  			var divStyle = window.getComputedStyle( div );
  			pixelPositionVal = divStyle.top !== "1%";

  			// Support: Android 4.0 - 4.3 only, Firefox <=3 - 44
  			reliableMarginLeftVal = roundPixelMeasures( divStyle.marginLeft ) === 12;

  			// Support: Android 4.0 - 4.3 only, Safari <=9.1 - 10.1, iOS <=7.0 - 9.3
  			// Some styles come back with percentage values, even though they shouldn't
  			div.style.right = "60%";
  			pixelBoxStylesVal = roundPixelMeasures( divStyle.right ) === 36;

  			// Support: IE 9 - 11 only
  			// Detect misreporting of content dimensions for box-sizing:border-box elements
  			boxSizingReliableVal = roundPixelMeasures( divStyle.width ) === 36;

  			// Support: IE 9 only
  			// Detect overflow:scroll screwiness (gh-3699)
  			// Support: Chrome <=64
  			// Don't get tricked when zoom affects offsetWidth (gh-4029)
  			div.style.position = "absolute";
  			scrollboxSizeVal = roundPixelMeasures( div.offsetWidth / 3 ) === 12;

  			documentElement.removeChild( container );

  			// Nullify the div so it wouldn't be stored in the memory and
  			// it will also be a sign that checks already performed
  			div = null;
  		}

  		function roundPixelMeasures( measure ) {
  			return Math.round( parseFloat( measure ) );
  		}

  		var pixelPositionVal, boxSizingReliableVal, scrollboxSizeVal, pixelBoxStylesVal,
  			reliableTrDimensionsVal, reliableMarginLeftVal,
  			container = document.createElement( "div" ),
  			div = document.createElement( "div" );

  		// Finish early in limited (non-browser) environments
  		if ( !div.style ) {
  			return;
  		}

  		// Support: IE <=9 - 11 only
  		// Style of cloned element affects source element cloned (trac-8908)
  		div.style.backgroundClip = "content-box";
  		div.cloneNode( true ).style.backgroundClip = "";
  		support.clearCloneStyle = div.style.backgroundClip === "content-box";

  		jQuery.extend( support, {
  			boxSizingReliable: function() {
  				computeStyleTests();
  				return boxSizingReliableVal;
  			},
  			pixelBoxStyles: function() {
  				computeStyleTests();
  				return pixelBoxStylesVal;
  			},
  			pixelPosition: function() {
  				computeStyleTests();
  				return pixelPositionVal;
  			},
  			reliableMarginLeft: function() {
  				computeStyleTests();
  				return reliableMarginLeftVal;
  			},
  			scrollboxSize: function() {
  				computeStyleTests();
  				return scrollboxSizeVal;
  			},

  			// Support: IE 9 - 11+, Edge 15 - 18+
  			// IE/Edge misreport `getComputedStyle` of table rows with width/height
  			// set in CSS while `offset*` properties report correct values.
  			// Behavior in IE 9 is more subtle than in newer versions & it passes
  			// some versions of this test; make sure not to make it pass there!
  			//
  			// Support: Firefox 70+
  			// Only Firefox includes border widths
  			// in computed dimensions. (gh-4529)
  			reliableTrDimensions: function() {
  				var table, tr, trChild, trStyle;
  				if ( reliableTrDimensionsVal == null ) {
  					table = document.createElement( "table" );
  					tr = document.createElement( "tr" );
  					trChild = document.createElement( "div" );

  					table.style.cssText = "position:absolute;left:-11111px;border-collapse:separate";
  					tr.style.cssText = "box-sizing:content-box;border:1px solid";

  					// Support: Chrome 86+
  					// Height set through cssText does not get applied.
  					// Computed height then comes back as 0.
  					tr.style.height = "1px";
  					trChild.style.height = "9px";

  					// Support: Android 8 Chrome 86+
  					// In our bodyBackground.html iframe,
  					// display for all div elements is set to "inline",
  					// which causes a problem only in Android 8 Chrome 86.
  					// Ensuring the div is `display: block`
  					// gets around this issue.
  					trChild.style.display = "block";

  					documentElement
  						.appendChild( table )
  						.appendChild( tr )
  						.appendChild( trChild );

  					trStyle = window.getComputedStyle( tr );
  					reliableTrDimensionsVal = ( parseInt( trStyle.height, 10 ) +
  						parseInt( trStyle.borderTopWidth, 10 ) +
  						parseInt( trStyle.borderBottomWidth, 10 ) ) === tr.offsetHeight;

  					documentElement.removeChild( table );
  				}
  				return reliableTrDimensionsVal;
  			}
  		} );
  	} )();


  	function curCSS( elem, name, computed ) {
  		var width, minWidth, maxWidth, ret,
  			isCustomProp = rcustomProp.test( name ),

  			// Support: Firefox 51+
  			// Retrieving style before computed somehow
  			// fixes an issue with getting wrong values
  			// on detached elements
  			style = elem.style;

  		computed = computed || getStyles( elem );

  		// getPropertyValue is needed for:
  		//   .css('filter') (IE 9 only, trac-12537)
  		//   .css('--customProperty) (gh-3144)
  		if ( computed ) {

  			// Support: IE <=9 - 11+
  			// IE only supports `"float"` in `getPropertyValue`; in computed styles
  			// it's only available as `"cssFloat"`. We no longer modify properties
  			// sent to `.css()` apart from camelCasing, so we need to check both.
  			// Normally, this would create difference in behavior: if
  			// `getPropertyValue` returns an empty string, the value returned
  			// by `.css()` would be `undefined`. This is usually the case for
  			// disconnected elements. However, in IE even disconnected elements
  			// with no styles return `"none"` for `getPropertyValue( "float" )`
  			ret = computed.getPropertyValue( name ) || computed[ name ];

  			if ( isCustomProp && ret ) {

  				// Support: Firefox 105+, Chrome <=105+
  				// Spec requires trimming whitespace for custom properties (gh-4926).
  				// Firefox only trims leading whitespace. Chrome just collapses
  				// both leading & trailing whitespace to a single space.
  				//
  				// Fall back to `undefined` if empty string returned.
  				// This collapses a missing definition with property defined
  				// and set to an empty string but there's no standard API
  				// allowing us to differentiate them without a performance penalty
  				// and returning `undefined` aligns with older jQuery.
  				//
  				// rtrimCSS treats U+000D CARRIAGE RETURN and U+000C FORM FEED
  				// as whitespace while CSS does not, but this is not a problem
  				// because CSS preprocessing replaces them with U+000A LINE FEED
  				// (which *is* CSS whitespace)
  				// https://www.w3.org/TR/css-syntax-3/#input-preprocessing
  				ret = ret.replace( rtrimCSS, "$1" ) || undefined;
  			}

  			if ( ret === "" && !isAttached( elem ) ) {
  				ret = jQuery.style( elem, name );
  			}

  			// A tribute to the "awesome hack by Dean Edwards"
  			// Android Browser returns percentage for some values,
  			// but width seems to be reliably pixels.
  			// This is against the CSSOM draft spec:
  			// https://drafts.csswg.org/cssom/#resolved-values
  			if ( !support.pixelBoxStyles() && rnumnonpx.test( ret ) && rboxStyle.test( name ) ) {

  				// Remember the original values
  				width = style.width;
  				minWidth = style.minWidth;
  				maxWidth = style.maxWidth;

  				// Put in the new values to get a computed value out
  				style.minWidth = style.maxWidth = style.width = ret;
  				ret = computed.width;

  				// Revert the changed values
  				style.width = width;
  				style.minWidth = minWidth;
  				style.maxWidth = maxWidth;
  			}
  		}

  		return ret !== undefined ?

  			// Support: IE <=9 - 11 only
  			// IE returns zIndex value as an integer.
  			ret + "" :
  			ret;
  	}


  	function addGetHookIf( conditionFn, hookFn ) {

  		// Define the hook, we'll check on the first run if it's really needed.
  		return {
  			get: function() {
  				if ( conditionFn() ) {

  					// Hook not needed (or it's not possible to use it due
  					// to missing dependency), remove it.
  					delete this.get;
  					return;
  				}

  				// Hook needed; redefine it so that the support test is not executed again.
  				return ( this.get = hookFn ).apply( this, arguments );
  			}
  		};
  	}


  	var cssPrefixes = [ "Webkit", "Moz", "ms" ],
  		emptyStyle = document.createElement( "div" ).style,
  		vendorProps = {};

  	// Return a vendor-prefixed property or undefined
  	function vendorPropName( name ) {

  		// Check for vendor prefixed names
  		var capName = name[ 0 ].toUpperCase() + name.slice( 1 ),
  			i = cssPrefixes.length;

  		while ( i-- ) {
  			name = cssPrefixes[ i ] + capName;
  			if ( name in emptyStyle ) {
  				return name;
  			}
  		}
  	}

  	// Return a potentially-mapped jQuery.cssProps or vendor prefixed property
  	function finalPropName( name ) {
  		var final = jQuery.cssProps[ name ] || vendorProps[ name ];

  		if ( final ) {
  			return final;
  		}
  		if ( name in emptyStyle ) {
  			return name;
  		}
  		return vendorProps[ name ] = vendorPropName( name ) || name;
  	}


  	var

  		// Swappable if display is none or starts with table
  		// except "table", "table-cell", or "table-caption"
  		// See here for display values: https://developer.mozilla.org/en-US/docs/CSS/display
  		rdisplayswap = /^(none|table(?!-c[ea]).+)/,
  		cssShow = { position: "absolute", visibility: "hidden", display: "block" },
  		cssNormalTransform = {
  			letterSpacing: "0",
  			fontWeight: "400"
  		};

  	function setPositiveNumber( _elem, value, subtract ) {

  		// Any relative (+/-) values have already been
  		// normalized at this point
  		var matches = rcssNum.exec( value );
  		return matches ?

  			// Guard against undefined "subtract", e.g., when used as in cssHooks
  			Math.max( 0, matches[ 2 ] - ( subtract || 0 ) ) + ( matches[ 3 ] || "px" ) :
  			value;
  	}

  	function boxModelAdjustment( elem, dimension, box, isBorderBox, styles, computedVal ) {
  		var i = dimension === "width" ? 1 : 0,
  			extra = 0,
  			delta = 0,
  			marginDelta = 0;

  		// Adjustment may not be necessary
  		if ( box === ( isBorderBox ? "border" : "content" ) ) {
  			return 0;
  		}

  		for ( ; i < 4; i += 2 ) {

  			// Both box models exclude margin
  			// Count margin delta separately to only add it after scroll gutter adjustment.
  			// This is needed to make negative margins work with `outerHeight( true )` (gh-3982).
  			if ( box === "margin" ) {
  				marginDelta += jQuery.css( elem, box + cssExpand[ i ], true, styles );
  			}

  			// If we get here with a content-box, we're seeking "padding" or "border" or "margin"
  			if ( !isBorderBox ) {

  				// Add padding
  				delta += jQuery.css( elem, "padding" + cssExpand[ i ], true, styles );

  				// For "border" or "margin", add border
  				if ( box !== "padding" ) {
  					delta += jQuery.css( elem, "border" + cssExpand[ i ] + "Width", true, styles );

  				// But still keep track of it otherwise
  				} else {
  					extra += jQuery.css( elem, "border" + cssExpand[ i ] + "Width", true, styles );
  				}

  			// If we get here with a border-box (content + padding + border), we're seeking "content" or
  			// "padding" or "margin"
  			} else {

  				// For "content", subtract padding
  				if ( box === "content" ) {
  					delta -= jQuery.css( elem, "padding" + cssExpand[ i ], true, styles );
  				}

  				// For "content" or "padding", subtract border
  				if ( box !== "margin" ) {
  					delta -= jQuery.css( elem, "border" + cssExpand[ i ] + "Width", true, styles );
  				}
  			}
  		}

  		// Account for positive content-box scroll gutter when requested by providing computedVal
  		if ( !isBorderBox && computedVal >= 0 ) {

  			// offsetWidth/offsetHeight is a rounded sum of content, padding, scroll gutter, and border
  			// Assuming integer scroll gutter, subtract the rest and round down
  			delta += Math.max( 0, Math.ceil(
  				elem[ "offset" + dimension[ 0 ].toUpperCase() + dimension.slice( 1 ) ] -
  				computedVal -
  				delta -
  				extra -
  				0.5

  			// If offsetWidth/offsetHeight is unknown, then we can't determine content-box scroll gutter
  			// Use an explicit zero to avoid NaN (gh-3964)
  			) ) || 0;
  		}

  		return delta + marginDelta;
  	}

  	function getWidthOrHeight( elem, dimension, extra ) {

  		// Start with computed style
  		var styles = getStyles( elem ),

  			// To avoid forcing a reflow, only fetch boxSizing if we need it (gh-4322).
  			// Fake content-box until we know it's needed to know the true value.
  			boxSizingNeeded = !support.boxSizingReliable() || extra,
  			isBorderBox = boxSizingNeeded &&
  				jQuery.css( elem, "boxSizing", false, styles ) === "border-box",
  			valueIsBorderBox = isBorderBox,

  			val = curCSS( elem, dimension, styles ),
  			offsetProp = "offset" + dimension[ 0 ].toUpperCase() + dimension.slice( 1 );

  		// Support: Firefox <=54
  		// Return a confounding non-pixel value or feign ignorance, as appropriate.
  		if ( rnumnonpx.test( val ) ) {
  			if ( !extra ) {
  				return val;
  			}
  			val = "auto";
  		}


  		// Support: IE 9 - 11 only
  		// Use offsetWidth/offsetHeight for when box sizing is unreliable.
  		// In those cases, the computed value can be trusted to be border-box.
  		if ( ( !support.boxSizingReliable() && isBorderBox ||

  			// Support: IE 10 - 11+, Edge 15 - 18+
  			// IE/Edge misreport `getComputedStyle` of table rows with width/height
  			// set in CSS while `offset*` properties report correct values.
  			// Interestingly, in some cases IE 9 doesn't suffer from this issue.
  			!support.reliableTrDimensions() && nodeName( elem, "tr" ) ||

  			// Fall back to offsetWidth/offsetHeight when value is "auto"
  			// This happens for inline elements with no explicit setting (gh-3571)
  			val === "auto" ||

  			// Support: Android <=4.1 - 4.3 only
  			// Also use offsetWidth/offsetHeight for misreported inline dimensions (gh-3602)
  			!parseFloat( val ) && jQuery.css( elem, "display", false, styles ) === "inline" ) &&

  			// Make sure the element is visible & connected
  			elem.getClientRects().length ) {

  			isBorderBox = jQuery.css( elem, "boxSizing", false, styles ) === "border-box";

  			// Where available, offsetWidth/offsetHeight approximate border box dimensions.
  			// Where not available (e.g., SVG), assume unreliable box-sizing and interpret the
  			// retrieved value as a content box dimension.
  			valueIsBorderBox = offsetProp in elem;
  			if ( valueIsBorderBox ) {
  				val = elem[ offsetProp ];
  			}
  		}

  		// Normalize "" and auto
  		val = parseFloat( val ) || 0;

  		// Adjust for the element's box model
  		return ( val +
  			boxModelAdjustment(
  				elem,
  				dimension,
  				extra || ( isBorderBox ? "border" : "content" ),
  				valueIsBorderBox,
  				styles,

  				// Provide the current computed size to request scroll gutter calculation (gh-3589)
  				val
  			)
  		) + "px";
  	}

  	jQuery.extend( {

  		// Add in style property hooks for overriding the default
  		// behavior of getting and setting a style property
  		cssHooks: {
  			opacity: {
  				get: function( elem, computed ) {
  					if ( computed ) {

  						// We should always get a number back from opacity
  						var ret = curCSS( elem, "opacity" );
  						return ret === "" ? "1" : ret;
  					}
  				}
  			}
  		},

  		// Don't automatically add "px" to these possibly-unitless properties
  		cssNumber: {
  			animationIterationCount: true,
  			aspectRatio: true,
  			borderImageSlice: true,
  			columnCount: true,
  			flexGrow: true,
  			flexShrink: true,
  			fontWeight: true,
  			gridArea: true,
  			gridColumn: true,
  			gridColumnEnd: true,
  			gridColumnStart: true,
  			gridRow: true,
  			gridRowEnd: true,
  			gridRowStart: true,
  			lineHeight: true,
  			opacity: true,
  			order: true,
  			orphans: true,
  			scale: true,
  			widows: true,
  			zIndex: true,
  			zoom: true,

  			// SVG-related
  			fillOpacity: true,
  			floodOpacity: true,
  			stopOpacity: true,
  			strokeMiterlimit: true,
  			strokeOpacity: true
  		},

  		// Add in properties whose names you wish to fix before
  		// setting or getting the value
  		cssProps: {},

  		// Get and set the style property on a DOM Node
  		style: function( elem, name, value, extra ) {

  			// Don't set styles on text and comment nodes
  			if ( !elem || elem.nodeType === 3 || elem.nodeType === 8 || !elem.style ) {
  				return;
  			}

  			// Make sure that we're working with the right name
  			var ret, type, hooks,
  				origName = camelCase( name ),
  				isCustomProp = rcustomProp.test( name ),
  				style = elem.style;

  			// Make sure that we're working with the right name. We don't
  			// want to query the value if it is a CSS custom property
  			// since they are user-defined.
  			if ( !isCustomProp ) {
  				name = finalPropName( origName );
  			}

  			// Gets hook for the prefixed version, then unprefixed version
  			hooks = jQuery.cssHooks[ name ] || jQuery.cssHooks[ origName ];

  			// Check if we're setting a value
  			if ( value !== undefined ) {
  				type = typeof value;

  				// Convert "+=" or "-=" to relative numbers (trac-7345)
  				if ( type === "string" && ( ret = rcssNum.exec( value ) ) && ret[ 1 ] ) {
  					value = adjustCSS( elem, name, ret );

  					// Fixes bug trac-9237
  					type = "number";
  				}

  				// Make sure that null and NaN values aren't set (trac-7116)
  				if ( value == null || value !== value ) {
  					return;
  				}

  				// If a number was passed in, add the unit (except for certain CSS properties)
  				// The isCustomProp check can be removed in jQuery 4.0 when we only auto-append
  				// "px" to a few hardcoded values.
  				if ( type === "number" && !isCustomProp ) {
  					value += ret && ret[ 3 ] || ( jQuery.cssNumber[ origName ] ? "" : "px" );
  				}

  				// background-* props affect original clone's values
  				if ( !support.clearCloneStyle && value === "" && name.indexOf( "background" ) === 0 ) {
  					style[ name ] = "inherit";
  				}

  				// If a hook was provided, use that value, otherwise just set the specified value
  				if ( !hooks || !( "set" in hooks ) ||
  					( value = hooks.set( elem, value, extra ) ) !== undefined ) {

  					if ( isCustomProp ) {
  						style.setProperty( name, value );
  					} else {
  						style[ name ] = value;
  					}
  				}

  			} else {

  				// If a hook was provided get the non-computed value from there
  				if ( hooks && "get" in hooks &&
  					( ret = hooks.get( elem, false, extra ) ) !== undefined ) {

  					return ret;
  				}

  				// Otherwise just get the value from the style object
  				return style[ name ];
  			}
  		},

  		css: function( elem, name, extra, styles ) {
  			var val, num, hooks,
  				origName = camelCase( name ),
  				isCustomProp = rcustomProp.test( name );

  			// Make sure that we're working with the right name. We don't
  			// want to modify the value if it is a CSS custom property
  			// since they are user-defined.
  			if ( !isCustomProp ) {
  				name = finalPropName( origName );
  			}

  			// Try prefixed name followed by the unprefixed name
  			hooks = jQuery.cssHooks[ name ] || jQuery.cssHooks[ origName ];

  			// If a hook was provided get the computed value from there
  			if ( hooks && "get" in hooks ) {
  				val = hooks.get( elem, true, extra );
  			}

  			// Otherwise, if a way to get the computed value exists, use that
  			if ( val === undefined ) {
  				val = curCSS( elem, name, styles );
  			}

  			// Convert "normal" to computed value
  			if ( val === "normal" && name in cssNormalTransform ) {
  				val = cssNormalTransform[ name ];
  			}

  			// Make numeric if forced or a qualifier was provided and val looks numeric
  			if ( extra === "" || extra ) {
  				num = parseFloat( val );
  				return extra === true || isFinite( num ) ? num || 0 : val;
  			}

  			return val;
  		}
  	} );

  	jQuery.each( [ "height", "width" ], function( _i, dimension ) {
  		jQuery.cssHooks[ dimension ] = {
  			get: function( elem, computed, extra ) {
  				if ( computed ) {

  					// Certain elements can have dimension info if we invisibly show them
  					// but it must have a current display style that would benefit
  					return rdisplayswap.test( jQuery.css( elem, "display" ) ) &&

  						// Support: Safari 8+
  						// Table columns in Safari have non-zero offsetWidth & zero
  						// getBoundingClientRect().width unless display is changed.
  						// Support: IE <=11 only
  						// Running getBoundingClientRect on a disconnected node
  						// in IE throws an error.
  						( !elem.getClientRects().length || !elem.getBoundingClientRect().width ) ?
  						swap( elem, cssShow, function() {
  							return getWidthOrHeight( elem, dimension, extra );
  						} ) :
  						getWidthOrHeight( elem, dimension, extra );
  				}
  			},

  			set: function( elem, value, extra ) {
  				var matches,
  					styles = getStyles( elem ),

  					// Only read styles.position if the test has a chance to fail
  					// to avoid forcing a reflow.
  					scrollboxSizeBuggy = !support.scrollboxSize() &&
  						styles.position === "absolute",

  					// To avoid forcing a reflow, only fetch boxSizing if we need it (gh-3991)
  					boxSizingNeeded = scrollboxSizeBuggy || extra,
  					isBorderBox = boxSizingNeeded &&
  						jQuery.css( elem, "boxSizing", false, styles ) === "border-box",
  					subtract = extra ?
  						boxModelAdjustment(
  							elem,
  							dimension,
  							extra,
  							isBorderBox,
  							styles
  						) :
  						0;

  				// Account for unreliable border-box dimensions by comparing offset* to computed and
  				// faking a content-box to get border and padding (gh-3699)
  				if ( isBorderBox && scrollboxSizeBuggy ) {
  					subtract -= Math.ceil(
  						elem[ "offset" + dimension[ 0 ].toUpperCase() + dimension.slice( 1 ) ] -
  						parseFloat( styles[ dimension ] ) -
  						boxModelAdjustment( elem, dimension, "border", false, styles ) -
  						0.5
  					);
  				}

  				// Convert to pixels if value adjustment is needed
  				if ( subtract && ( matches = rcssNum.exec( value ) ) &&
  					( matches[ 3 ] || "px" ) !== "px" ) {

  					elem.style[ dimension ] = value;
  					value = jQuery.css( elem, dimension );
  				}

  				return setPositiveNumber( elem, value, subtract );
  			}
  		};
  	} );

  	jQuery.cssHooks.marginLeft = addGetHookIf( support.reliableMarginLeft,
  		function( elem, computed ) {
  			if ( computed ) {
  				return ( parseFloat( curCSS( elem, "marginLeft" ) ) ||
  					elem.getBoundingClientRect().left -
  						swap( elem, { marginLeft: 0 }, function() {
  							return elem.getBoundingClientRect().left;
  						} )
  				) + "px";
  			}
  		}
  	);

  	// These hooks are used by animate to expand properties
  	jQuery.each( {
  		margin: "",
  		padding: "",
  		border: "Width"
  	}, function( prefix, suffix ) {
  		jQuery.cssHooks[ prefix + suffix ] = {
  			expand: function( value ) {
  				var i = 0,
  					expanded = {},

  					// Assumes a single number if not a string
  					parts = typeof value === "string" ? value.split( " " ) : [ value ];

  				for ( ; i < 4; i++ ) {
  					expanded[ prefix + cssExpand[ i ] + suffix ] =
  						parts[ i ] || parts[ i - 2 ] || parts[ 0 ];
  				}

  				return expanded;
  			}
  		};

  		if ( prefix !== "margin" ) {
  			jQuery.cssHooks[ prefix + suffix ].set = setPositiveNumber;
  		}
  	} );

  	jQuery.fn.extend( {
  		css: function( name, value ) {
  			return access( this, function( elem, name, value ) {
  				var styles, len,
  					map = {},
  					i = 0;

  				if ( Array.isArray( name ) ) {
  					styles = getStyles( elem );
  					len = name.length;

  					for ( ; i < len; i++ ) {
  						map[ name[ i ] ] = jQuery.css( elem, name[ i ], false, styles );
  					}

  					return map;
  				}

  				return value !== undefined ?
  					jQuery.style( elem, name, value ) :
  					jQuery.css( elem, name );
  			}, name, value, arguments.length > 1 );
  		}
  	} );


  	function Tween( elem, options, prop, end, easing ) {
  		return new Tween.prototype.init( elem, options, prop, end, easing );
  	}
  	jQuery.Tween = Tween;

  	Tween.prototype = {
  		constructor: Tween,
  		init: function( elem, options, prop, end, easing, unit ) {
  			this.elem = elem;
  			this.prop = prop;
  			this.easing = easing || jQuery.easing._default;
  			this.options = options;
  			this.start = this.now = this.cur();
  			this.end = end;
  			this.unit = unit || ( jQuery.cssNumber[ prop ] ? "" : "px" );
  		},
  		cur: function() {
  			var hooks = Tween.propHooks[ this.prop ];

  			return hooks && hooks.get ?
  				hooks.get( this ) :
  				Tween.propHooks._default.get( this );
  		},
  		run: function( percent ) {
  			var eased,
  				hooks = Tween.propHooks[ this.prop ];

  			if ( this.options.duration ) {
  				this.pos = eased = jQuery.easing[ this.easing ](
  					percent, this.options.duration * percent, 0, 1, this.options.duration
  				);
  			} else {
  				this.pos = eased = percent;
  			}
  			this.now = ( this.end - this.start ) * eased + this.start;

  			if ( this.options.step ) {
  				this.options.step.call( this.elem, this.now, this );
  			}

  			if ( hooks && hooks.set ) {
  				hooks.set( this );
  			} else {
  				Tween.propHooks._default.set( this );
  			}
  			return this;
  		}
  	};

  	Tween.prototype.init.prototype = Tween.prototype;

  	Tween.propHooks = {
  		_default: {
  			get: function( tween ) {
  				var result;

  				// Use a property on the element directly when it is not a DOM element,
  				// or when there is no matching style property that exists.
  				if ( tween.elem.nodeType !== 1 ||
  					tween.elem[ tween.prop ] != null && tween.elem.style[ tween.prop ] == null ) {
  					return tween.elem[ tween.prop ];
  				}

  				// Passing an empty string as a 3rd parameter to .css will automatically
  				// attempt a parseFloat and fallback to a string if the parse fails.
  				// Simple values such as "10px" are parsed to Float;
  				// complex values such as "rotate(1rad)" are returned as-is.
  				result = jQuery.css( tween.elem, tween.prop, "" );

  				// Empty strings, null, undefined and "auto" are converted to 0.
  				return !result || result === "auto" ? 0 : result;
  			},
  			set: function( tween ) {

  				// Use step hook for back compat.
  				// Use cssHook if its there.
  				// Use .style if available and use plain properties where available.
  				if ( jQuery.fx.step[ tween.prop ] ) {
  					jQuery.fx.step[ tween.prop ]( tween );
  				} else if ( tween.elem.nodeType === 1 && (
  					jQuery.cssHooks[ tween.prop ] ||
  						tween.elem.style[ finalPropName( tween.prop ) ] != null ) ) {
  					jQuery.style( tween.elem, tween.prop, tween.now + tween.unit );
  				} else {
  					tween.elem[ tween.prop ] = tween.now;
  				}
  			}
  		}
  	};

  	// Support: IE <=9 only
  	// Panic based approach to setting things on disconnected nodes
  	Tween.propHooks.scrollTop = Tween.propHooks.scrollLeft = {
  		set: function( tween ) {
  			if ( tween.elem.nodeType && tween.elem.parentNode ) {
  				tween.elem[ tween.prop ] = tween.now;
  			}
  		}
  	};

  	jQuery.easing = {
  		linear: function( p ) {
  			return p;
  		},
  		swing: function( p ) {
  			return 0.5 - Math.cos( p * Math.PI ) / 2;
  		},
  		_default: "swing"
  	};

  	jQuery.fx = Tween.prototype.init;

  	// Back compat <1.8 extension point
  	jQuery.fx.step = {};




  	var
  		fxNow, inProgress,
  		rfxtypes = /^(?:toggle|show|hide)$/,
  		rrun = /queueHooks$/;

  	function schedule() {
  		if ( inProgress ) {
  			if ( document.hidden === false && window.requestAnimationFrame ) {
  				window.requestAnimationFrame( schedule );
  			} else {
  				window.setTimeout( schedule, jQuery.fx.interval );
  			}

  			jQuery.fx.tick();
  		}
  	}

  	// Animations created synchronously will run synchronously
  	function createFxNow() {
  		window.setTimeout( function() {
  			fxNow = undefined;
  		} );
  		return ( fxNow = Date.now() );
  	}

  	// Generate parameters to create a standard animation
  	function genFx( type, includeWidth ) {
  		var which,
  			i = 0,
  			attrs = { height: type };

  		// If we include width, step value is 1 to do all cssExpand values,
  		// otherwise step value is 2 to skip over Left and Right
  		includeWidth = includeWidth ? 1 : 0;
  		for ( ; i < 4; i += 2 - includeWidth ) {
  			which = cssExpand[ i ];
  			attrs[ "margin" + which ] = attrs[ "padding" + which ] = type;
  		}

  		if ( includeWidth ) {
  			attrs.opacity = attrs.width = type;
  		}

  		return attrs;
  	}

  	function createTween( value, prop, animation ) {
  		var tween,
  			collection = ( Animation.tweeners[ prop ] || [] ).concat( Animation.tweeners[ "*" ] ),
  			index = 0,
  			length = collection.length;
  		for ( ; index < length; index++ ) {
  			if ( ( tween = collection[ index ].call( animation, prop, value ) ) ) {

  				// We're done with this property
  				return tween;
  			}
  		}
  	}

  	function defaultPrefilter( elem, props, opts ) {
  		var prop, value, toggle, hooks, oldfire, propTween, restoreDisplay, display,
  			isBox = "width" in props || "height" in props,
  			anim = this,
  			orig = {},
  			style = elem.style,
  			hidden = elem.nodeType && isHiddenWithinTree( elem ),
  			dataShow = dataPriv.get( elem, "fxshow" );

  		// Queue-skipping animations hijack the fx hooks
  		if ( !opts.queue ) {
  			hooks = jQuery._queueHooks( elem, "fx" );
  			if ( hooks.unqueued == null ) {
  				hooks.unqueued = 0;
  				oldfire = hooks.empty.fire;
  				hooks.empty.fire = function() {
  					if ( !hooks.unqueued ) {
  						oldfire();
  					}
  				};
  			}
  			hooks.unqueued++;

  			anim.always( function() {

  				// Ensure the complete handler is called before this completes
  				anim.always( function() {
  					hooks.unqueued--;
  					if ( !jQuery.queue( elem, "fx" ).length ) {
  						hooks.empty.fire();
  					}
  				} );
  			} );
  		}

  		// Detect show/hide animations
  		for ( prop in props ) {
  			value = props[ prop ];
  			if ( rfxtypes.test( value ) ) {
  				delete props[ prop ];
  				toggle = toggle || value === "toggle";
  				if ( value === ( hidden ? "hide" : "show" ) ) {

  					// Pretend to be hidden if this is a "show" and
  					// there is still data from a stopped show/hide
  					if ( value === "show" && dataShow && dataShow[ prop ] !== undefined ) {
  						hidden = true;

  					// Ignore all other no-op show/hide data
  					} else {
  						continue;
  					}
  				}
  				orig[ prop ] = dataShow && dataShow[ prop ] || jQuery.style( elem, prop );
  			}
  		}

  		// Bail out if this is a no-op like .hide().hide()
  		propTween = !jQuery.isEmptyObject( props );
  		if ( !propTween && jQuery.isEmptyObject( orig ) ) {
  			return;
  		}

  		// Restrict "overflow" and "display" styles during box animations
  		if ( isBox && elem.nodeType === 1 ) {

  			// Support: IE <=9 - 11, Edge 12 - 15
  			// Record all 3 overflow attributes because IE does not infer the shorthand
  			// from identically-valued overflowX and overflowY and Edge just mirrors
  			// the overflowX value there.
  			opts.overflow = [ style.overflow, style.overflowX, style.overflowY ];

  			// Identify a display type, preferring old show/hide data over the CSS cascade
  			restoreDisplay = dataShow && dataShow.display;
  			if ( restoreDisplay == null ) {
  				restoreDisplay = dataPriv.get( elem, "display" );
  			}
  			display = jQuery.css( elem, "display" );
  			if ( display === "none" ) {
  				if ( restoreDisplay ) {
  					display = restoreDisplay;
  				} else {

  					// Get nonempty value(s) by temporarily forcing visibility
  					showHide( [ elem ], true );
  					restoreDisplay = elem.style.display || restoreDisplay;
  					display = jQuery.css( elem, "display" );
  					showHide( [ elem ] );
  				}
  			}

  			// Animate inline elements as inline-block
  			if ( display === "inline" || display === "inline-block" && restoreDisplay != null ) {
  				if ( jQuery.css( elem, "float" ) === "none" ) {

  					// Restore the original display value at the end of pure show/hide animations
  					if ( !propTween ) {
  						anim.done( function() {
  							style.display = restoreDisplay;
  						} );
  						if ( restoreDisplay == null ) {
  							display = style.display;
  							restoreDisplay = display === "none" ? "" : display;
  						}
  					}
  					style.display = "inline-block";
  				}
  			}
  		}

  		if ( opts.overflow ) {
  			style.overflow = "hidden";
  			anim.always( function() {
  				style.overflow = opts.overflow[ 0 ];
  				style.overflowX = opts.overflow[ 1 ];
  				style.overflowY = opts.overflow[ 2 ];
  			} );
  		}

  		// Implement show/hide animations
  		propTween = false;
  		for ( prop in orig ) {

  			// General show/hide setup for this element animation
  			if ( !propTween ) {
  				if ( dataShow ) {
  					if ( "hidden" in dataShow ) {
  						hidden = dataShow.hidden;
  					}
  				} else {
  					dataShow = dataPriv.access( elem, "fxshow", { display: restoreDisplay } );
  				}

  				// Store hidden/visible for toggle so `.stop().toggle()` "reverses"
  				if ( toggle ) {
  					dataShow.hidden = !hidden;
  				}

  				// Show elements before animating them
  				if ( hidden ) {
  					showHide( [ elem ], true );
  				}

  				/* eslint-disable no-loop-func */

  				anim.done( function() {

  					/* eslint-enable no-loop-func */

  					// The final step of a "hide" animation is actually hiding the element
  					if ( !hidden ) {
  						showHide( [ elem ] );
  					}
  					dataPriv.remove( elem, "fxshow" );
  					for ( prop in orig ) {
  						jQuery.style( elem, prop, orig[ prop ] );
  					}
  				} );
  			}

  			// Per-property setup
  			propTween = createTween( hidden ? dataShow[ prop ] : 0, prop, anim );
  			if ( !( prop in dataShow ) ) {
  				dataShow[ prop ] = propTween.start;
  				if ( hidden ) {
  					propTween.end = propTween.start;
  					propTween.start = 0;
  				}
  			}
  		}
  	}

  	function propFilter( props, specialEasing ) {
  		var index, name, easing, value, hooks;

  		// camelCase, specialEasing and expand cssHook pass
  		for ( index in props ) {
  			name = camelCase( index );
  			easing = specialEasing[ name ];
  			value = props[ index ];
  			if ( Array.isArray( value ) ) {
  				easing = value[ 1 ];
  				value = props[ index ] = value[ 0 ];
  			}

  			if ( index !== name ) {
  				props[ name ] = value;
  				delete props[ index ];
  			}

  			hooks = jQuery.cssHooks[ name ];
  			if ( hooks && "expand" in hooks ) {
  				value = hooks.expand( value );
  				delete props[ name ];

  				// Not quite $.extend, this won't overwrite existing keys.
  				// Reusing 'index' because we have the correct "name"
  				for ( index in value ) {
  					if ( !( index in props ) ) {
  						props[ index ] = value[ index ];
  						specialEasing[ index ] = easing;
  					}
  				}
  			} else {
  				specialEasing[ name ] = easing;
  			}
  		}
  	}

  	function Animation( elem, properties, options ) {
  		var result,
  			stopped,
  			index = 0,
  			length = Animation.prefilters.length,
  			deferred = jQuery.Deferred().always( function() {

  				// Don't match elem in the :animated selector
  				delete tick.elem;
  			} ),
  			tick = function() {
  				if ( stopped ) {
  					return false;
  				}
  				var currentTime = fxNow || createFxNow(),
  					remaining = Math.max( 0, animation.startTime + animation.duration - currentTime ),

  					// Support: Android 2.3 only
  					// Archaic crash bug won't allow us to use `1 - ( 0.5 || 0 )` (trac-12497)
  					temp = remaining / animation.duration || 0,
  					percent = 1 - temp,
  					index = 0,
  					length = animation.tweens.length;

  				for ( ; index < length; index++ ) {
  					animation.tweens[ index ].run( percent );
  				}

  				deferred.notifyWith( elem, [ animation, percent, remaining ] );

  				// If there's more to do, yield
  				if ( percent < 1 && length ) {
  					return remaining;
  				}

  				// If this was an empty animation, synthesize a final progress notification
  				if ( !length ) {
  					deferred.notifyWith( elem, [ animation, 1, 0 ] );
  				}

  				// Resolve the animation and report its conclusion
  				deferred.resolveWith( elem, [ animation ] );
  				return false;
  			},
  			animation = deferred.promise( {
  				elem: elem,
  				props: jQuery.extend( {}, properties ),
  				opts: jQuery.extend( true, {
  					specialEasing: {},
  					easing: jQuery.easing._default
  				}, options ),
  				originalProperties: properties,
  				originalOptions: options,
  				startTime: fxNow || createFxNow(),
  				duration: options.duration,
  				tweens: [],
  				createTween: function( prop, end ) {
  					var tween = jQuery.Tween( elem, animation.opts, prop, end,
  						animation.opts.specialEasing[ prop ] || animation.opts.easing );
  					animation.tweens.push( tween );
  					return tween;
  				},
  				stop: function( gotoEnd ) {
  					var index = 0,

  						// If we are going to the end, we want to run all the tweens
  						// otherwise we skip this part
  						length = gotoEnd ? animation.tweens.length : 0;
  					if ( stopped ) {
  						return this;
  					}
  					stopped = true;
  					for ( ; index < length; index++ ) {
  						animation.tweens[ index ].run( 1 );
  					}

  					// Resolve when we played the last frame; otherwise, reject
  					if ( gotoEnd ) {
  						deferred.notifyWith( elem, [ animation, 1, 0 ] );
  						deferred.resolveWith( elem, [ animation, gotoEnd ] );
  					} else {
  						deferred.rejectWith( elem, [ animation, gotoEnd ] );
  					}
  					return this;
  				}
  			} ),
  			props = animation.props;

  		propFilter( props, animation.opts.specialEasing );

  		for ( ; index < length; index++ ) {
  			result = Animation.prefilters[ index ].call( animation, elem, props, animation.opts );
  			if ( result ) {
  				if ( isFunction( result.stop ) ) {
  					jQuery._queueHooks( animation.elem, animation.opts.queue ).stop =
  						result.stop.bind( result );
  				}
  				return result;
  			}
  		}

  		jQuery.map( props, createTween, animation );

  		if ( isFunction( animation.opts.start ) ) {
  			animation.opts.start.call( elem, animation );
  		}

  		// Attach callbacks from options
  		animation
  			.progress( animation.opts.progress )
  			.done( animation.opts.done, animation.opts.complete )
  			.fail( animation.opts.fail )
  			.always( animation.opts.always );

  		jQuery.fx.timer(
  			jQuery.extend( tick, {
  				elem: elem,
  				anim: animation,
  				queue: animation.opts.queue
  			} )
  		);

  		return animation;
  	}

  	jQuery.Animation = jQuery.extend( Animation, {

  		tweeners: {
  			"*": [ function( prop, value ) {
  				var tween = this.createTween( prop, value );
  				adjustCSS( tween.elem, prop, rcssNum.exec( value ), tween );
  				return tween;
  			} ]
  		},

  		tweener: function( props, callback ) {
  			if ( isFunction( props ) ) {
  				callback = props;
  				props = [ "*" ];
  			} else {
  				props = props.match( rnothtmlwhite );
  			}

  			var prop,
  				index = 0,
  				length = props.length;

  			for ( ; index < length; index++ ) {
  				prop = props[ index ];
  				Animation.tweeners[ prop ] = Animation.tweeners[ prop ] || [];
  				Animation.tweeners[ prop ].unshift( callback );
  			}
  		},

  		prefilters: [ defaultPrefilter ],

  		prefilter: function( callback, prepend ) {
  			if ( prepend ) {
  				Animation.prefilters.unshift( callback );
  			} else {
  				Animation.prefilters.push( callback );
  			}
  		}
  	} );

  	jQuery.speed = function( speed, easing, fn ) {
  		var opt = speed && typeof speed === "object" ? jQuery.extend( {}, speed ) : {
  			complete: fn || !fn && easing ||
  				isFunction( speed ) && speed,
  			duration: speed,
  			easing: fn && easing || easing && !isFunction( easing ) && easing
  		};

  		// Go to the end state if fx are off
  		if ( jQuery.fx.off ) {
  			opt.duration = 0;

  		} else {
  			if ( typeof opt.duration !== "number" ) {
  				if ( opt.duration in jQuery.fx.speeds ) {
  					opt.duration = jQuery.fx.speeds[ opt.duration ];

  				} else {
  					opt.duration = jQuery.fx.speeds._default;
  				}
  			}
  		}

  		// Normalize opt.queue - true/undefined/null -> "fx"
  		if ( opt.queue == null || opt.queue === true ) {
  			opt.queue = "fx";
  		}

  		// Queueing
  		opt.old = opt.complete;

  		opt.complete = function() {
  			if ( isFunction( opt.old ) ) {
  				opt.old.call( this );
  			}

  			if ( opt.queue ) {
  				jQuery.dequeue( this, opt.queue );
  			}
  		};

  		return opt;
  	};

  	jQuery.fn.extend( {
  		fadeTo: function( speed, to, easing, callback ) {

  			// Show any hidden elements after setting opacity to 0
  			return this.filter( isHiddenWithinTree ).css( "opacity", 0 ).show()

  				// Animate to the value specified
  				.end().animate( { opacity: to }, speed, easing, callback );
  		},
  		animate: function( prop, speed, easing, callback ) {
  			var empty = jQuery.isEmptyObject( prop ),
  				optall = jQuery.speed( speed, easing, callback ),
  				doAnimation = function() {

  					// Operate on a copy of prop so per-property easing won't be lost
  					var anim = Animation( this, jQuery.extend( {}, prop ), optall );

  					// Empty animations, or finishing resolves immediately
  					if ( empty || dataPriv.get( this, "finish" ) ) {
  						anim.stop( true );
  					}
  				};

  			doAnimation.finish = doAnimation;

  			return empty || optall.queue === false ?
  				this.each( doAnimation ) :
  				this.queue( optall.queue, doAnimation );
  		},
  		stop: function( type, clearQueue, gotoEnd ) {
  			var stopQueue = function( hooks ) {
  				var stop = hooks.stop;
  				delete hooks.stop;
  				stop( gotoEnd );
  			};

  			if ( typeof type !== "string" ) {
  				gotoEnd = clearQueue;
  				clearQueue = type;
  				type = undefined;
  			}
  			if ( clearQueue ) {
  				this.queue( type || "fx", [] );
  			}

  			return this.each( function() {
  				var dequeue = true,
  					index = type != null && type + "queueHooks",
  					timers = jQuery.timers,
  					data = dataPriv.get( this );

  				if ( index ) {
  					if ( data[ index ] && data[ index ].stop ) {
  						stopQueue( data[ index ] );
  					}
  				} else {
  					for ( index in data ) {
  						if ( data[ index ] && data[ index ].stop && rrun.test( index ) ) {
  							stopQueue( data[ index ] );
  						}
  					}
  				}

  				for ( index = timers.length; index--; ) {
  					if ( timers[ index ].elem === this &&
  						( type == null || timers[ index ].queue === type ) ) {

  						timers[ index ].anim.stop( gotoEnd );
  						dequeue = false;
  						timers.splice( index, 1 );
  					}
  				}

  				// Start the next in the queue if the last step wasn't forced.
  				// Timers currently will call their complete callbacks, which
  				// will dequeue but only if they were gotoEnd.
  				if ( dequeue || !gotoEnd ) {
  					jQuery.dequeue( this, type );
  				}
  			} );
  		},
  		finish: function( type ) {
  			if ( type !== false ) {
  				type = type || "fx";
  			}
  			return this.each( function() {
  				var index,
  					data = dataPriv.get( this ),
  					queue = data[ type + "queue" ],
  					hooks = data[ type + "queueHooks" ],
  					timers = jQuery.timers,
  					length = queue ? queue.length : 0;

  				// Enable finishing flag on private data
  				data.finish = true;

  				// Empty the queue first
  				jQuery.queue( this, type, [] );

  				if ( hooks && hooks.stop ) {
  					hooks.stop.call( this, true );
  				}

  				// Look for any active animations, and finish them
  				for ( index = timers.length; index--; ) {
  					if ( timers[ index ].elem === this && timers[ index ].queue === type ) {
  						timers[ index ].anim.stop( true );
  						timers.splice( index, 1 );
  					}
  				}

  				// Look for any animations in the old queue and finish them
  				for ( index = 0; index < length; index++ ) {
  					if ( queue[ index ] && queue[ index ].finish ) {
  						queue[ index ].finish.call( this );
  					}
  				}

  				// Turn off finishing flag
  				delete data.finish;
  			} );
  		}
  	} );

  	jQuery.each( [ "toggle", "show", "hide" ], function( _i, name ) {
  		var cssFn = jQuery.fn[ name ];
  		jQuery.fn[ name ] = function( speed, easing, callback ) {
  			return speed == null || typeof speed === "boolean" ?
  				cssFn.apply( this, arguments ) :
  				this.animate( genFx( name, true ), speed, easing, callback );
  		};
  	} );

  	// Generate shortcuts for custom animations
  	jQuery.each( {
  		slideDown: genFx( "show" ),
  		slideUp: genFx( "hide" ),
  		slideToggle: genFx( "toggle" ),
  		fadeIn: { opacity: "show" },
  		fadeOut: { opacity: "hide" },
  		fadeToggle: { opacity: "toggle" }
  	}, function( name, props ) {
  		jQuery.fn[ name ] = function( speed, easing, callback ) {
  			return this.animate( props, speed, easing, callback );
  		};
  	} );

  	jQuery.timers = [];
  	jQuery.fx.tick = function() {
  		var timer,
  			i = 0,
  			timers = jQuery.timers;

  		fxNow = Date.now();

  		for ( ; i < timers.length; i++ ) {
  			timer = timers[ i ];

  			// Run the timer and safely remove it when done (allowing for external removal)
  			if ( !timer() && timers[ i ] === timer ) {
  				timers.splice( i--, 1 );
  			}
  		}

  		if ( !timers.length ) {
  			jQuery.fx.stop();
  		}
  		fxNow = undefined;
  	};

  	jQuery.fx.timer = function( timer ) {
  		jQuery.timers.push( timer );
  		jQuery.fx.start();
  	};

  	jQuery.fx.interval = 13;
  	jQuery.fx.start = function() {
  		if ( inProgress ) {
  			return;
  		}

  		inProgress = true;
  		schedule();
  	};

  	jQuery.fx.stop = function() {
  		inProgress = null;
  	};

  	jQuery.fx.speeds = {
  		slow: 600,
  		fast: 200,

  		// Default speed
  		_default: 400
  	};


  	// Based off of the plugin by Clint Helfers, with permission.
  	jQuery.fn.delay = function( time, type ) {
  		time = jQuery.fx ? jQuery.fx.speeds[ time ] || time : time;
  		type = type || "fx";

  		return this.queue( type, function( next, hooks ) {
  			var timeout = window.setTimeout( next, time );
  			hooks.stop = function() {
  				window.clearTimeout( timeout );
  			};
  		} );
  	};


  	( function() {
  		var input = document.createElement( "input" ),
  			select = document.createElement( "select" ),
  			opt = select.appendChild( document.createElement( "option" ) );

  		input.type = "checkbox";

  		// Support: Android <=4.3 only
  		// Default value for a checkbox should be "on"
  		support.checkOn = input.value !== "";

  		// Support: IE <=11 only
  		// Must access selectedIndex to make default options select
  		support.optSelected = opt.selected;

  		// Support: IE <=11 only
  		// An input loses its value after becoming a radio
  		input = document.createElement( "input" );
  		input.value = "t";
  		input.type = "radio";
  		support.radioValue = input.value === "t";
  	} )();


  	var boolHook,
  		attrHandle = jQuery.expr.attrHandle;

  	jQuery.fn.extend( {
  		attr: function( name, value ) {
  			return access( this, jQuery.attr, name, value, arguments.length > 1 );
  		},

  		removeAttr: function( name ) {
  			return this.each( function() {
  				jQuery.removeAttr( this, name );
  			} );
  		}
  	} );

  	jQuery.extend( {
  		attr: function( elem, name, value ) {
  			var ret, hooks,
  				nType = elem.nodeType;

  			// Don't get/set attributes on text, comment and attribute nodes
  			if ( nType === 3 || nType === 8 || nType === 2 ) {
  				return;
  			}

  			// Fallback to prop when attributes are not supported
  			if ( typeof elem.getAttribute === "undefined" ) {
  				return jQuery.prop( elem, name, value );
  			}

  			// Attribute hooks are determined by the lowercase version
  			// Grab necessary hook if one is defined
  			if ( nType !== 1 || !jQuery.isXMLDoc( elem ) ) {
  				hooks = jQuery.attrHooks[ name.toLowerCase() ] ||
  					( jQuery.expr.match.bool.test( name ) ? boolHook : undefined );
  			}

  			if ( value !== undefined ) {
  				if ( value === null ) {
  					jQuery.removeAttr( elem, name );
  					return;
  				}

  				if ( hooks && "set" in hooks &&
  					( ret = hooks.set( elem, value, name ) ) !== undefined ) {
  					return ret;
  				}

  				elem.setAttribute( name, value + "" );
  				return value;
  			}

  			if ( hooks && "get" in hooks && ( ret = hooks.get( elem, name ) ) !== null ) {
  				return ret;
  			}

  			ret = jQuery.find.attr( elem, name );

  			// Non-existent attributes return null, we normalize to undefined
  			return ret == null ? undefined : ret;
  		},

  		attrHooks: {
  			type: {
  				set: function( elem, value ) {
  					if ( !support.radioValue && value === "radio" &&
  						nodeName( elem, "input" ) ) {
  						var val = elem.value;
  						elem.setAttribute( "type", value );
  						if ( val ) {
  							elem.value = val;
  						}
  						return value;
  					}
  				}
  			}
  		},

  		removeAttr: function( elem, value ) {
  			var name,
  				i = 0,

  				// Attribute names can contain non-HTML whitespace characters
  				// https://html.spec.whatwg.org/multipage/syntax.html#attributes-2
  				attrNames = value && value.match( rnothtmlwhite );

  			if ( attrNames && elem.nodeType === 1 ) {
  				while ( ( name = attrNames[ i++ ] ) ) {
  					elem.removeAttribute( name );
  				}
  			}
  		}
  	} );

  	// Hooks for boolean attributes
  	boolHook = {
  		set: function( elem, value, name ) {
  			if ( value === false ) {

  				// Remove boolean attributes when set to false
  				jQuery.removeAttr( elem, name );
  			} else {
  				elem.setAttribute( name, name );
  			}
  			return name;
  		}
  	};

  	jQuery.each( jQuery.expr.match.bool.source.match( /\w+/g ), function( _i, name ) {
  		var getter = attrHandle[ name ] || jQuery.find.attr;

  		attrHandle[ name ] = function( elem, name, isXML ) {
  			var ret, handle,
  				lowercaseName = name.toLowerCase();

  			if ( !isXML ) {

  				// Avoid an infinite loop by temporarily removing this function from the getter
  				handle = attrHandle[ lowercaseName ];
  				attrHandle[ lowercaseName ] = ret;
  				ret = getter( elem, name, isXML ) != null ?
  					lowercaseName :
  					null;
  				attrHandle[ lowercaseName ] = handle;
  			}
  			return ret;
  		};
  	} );




  	var rfocusable = /^(?:input|select|textarea|button)$/i,
  		rclickable = /^(?:a|area)$/i;

  	jQuery.fn.extend( {
  		prop: function( name, value ) {
  			return access( this, jQuery.prop, name, value, arguments.length > 1 );
  		},

  		removeProp: function( name ) {
  			return this.each( function() {
  				delete this[ jQuery.propFix[ name ] || name ];
  			} );
  		}
  	} );

  	jQuery.extend( {
  		prop: function( elem, name, value ) {
  			var ret, hooks,
  				nType = elem.nodeType;

  			// Don't get/set properties on text, comment and attribute nodes
  			if ( nType === 3 || nType === 8 || nType === 2 ) {
  				return;
  			}

  			if ( nType !== 1 || !jQuery.isXMLDoc( elem ) ) {

  				// Fix name and attach hooks
  				name = jQuery.propFix[ name ] || name;
  				hooks = jQuery.propHooks[ name ];
  			}

  			if ( value !== undefined ) {
  				if ( hooks && "set" in hooks &&
  					( ret = hooks.set( elem, value, name ) ) !== undefined ) {
  					return ret;
  				}

  				return ( elem[ name ] = value );
  			}

  			if ( hooks && "get" in hooks && ( ret = hooks.get( elem, name ) ) !== null ) {
  				return ret;
  			}

  			return elem[ name ];
  		},

  		propHooks: {
  			tabIndex: {
  				get: function( elem ) {

  					// Support: IE <=9 - 11 only
  					// elem.tabIndex doesn't always return the
  					// correct value when it hasn't been explicitly set
  					// Use proper attribute retrieval (trac-12072)
  					var tabindex = jQuery.find.attr( elem, "tabindex" );

  					if ( tabindex ) {
  						return parseInt( tabindex, 10 );
  					}

  					if (
  						rfocusable.test( elem.nodeName ) ||
  						rclickable.test( elem.nodeName ) &&
  						elem.href
  					) {
  						return 0;
  					}

  					return -1;
  				}
  			}
  		},

  		propFix: {
  			"for": "htmlFor",
  			"class": "className"
  		}
  	} );

  	// Support: IE <=11 only
  	// Accessing the selectedIndex property
  	// forces the browser to respect setting selected
  	// on the option
  	// The getter ensures a default option is selected
  	// when in an optgroup
  	// eslint rule "no-unused-expressions" is disabled for this code
  	// since it considers such accessions noop
  	if ( !support.optSelected ) {
  		jQuery.propHooks.selected = {
  			get: function( elem ) {

  				/* eslint no-unused-expressions: "off" */

  				var parent = elem.parentNode;
  				if ( parent && parent.parentNode ) {
  					parent.parentNode.selectedIndex;
  				}
  				return null;
  			},
  			set: function( elem ) {

  				/* eslint no-unused-expressions: "off" */

  				var parent = elem.parentNode;
  				if ( parent ) {
  					parent.selectedIndex;

  					if ( parent.parentNode ) {
  						parent.parentNode.selectedIndex;
  					}
  				}
  			}
  		};
  	}

  	jQuery.each( [
  		"tabIndex",
  		"readOnly",
  		"maxLength",
  		"cellSpacing",
  		"cellPadding",
  		"rowSpan",
  		"colSpan",
  		"useMap",
  		"frameBorder",
  		"contentEditable"
  	], function() {
  		jQuery.propFix[ this.toLowerCase() ] = this;
  	} );




  		// Strip and collapse whitespace according to HTML spec
  		// https://infra.spec.whatwg.org/#strip-and-collapse-ascii-whitespace
  		function stripAndCollapse( value ) {
  			var tokens = value.match( rnothtmlwhite ) || [];
  			return tokens.join( " " );
  		}


  	function getClass( elem ) {
  		return elem.getAttribute && elem.getAttribute( "class" ) || "";
  	}

  	function classesToArray( value ) {
  		if ( Array.isArray( value ) ) {
  			return value;
  		}
  		if ( typeof value === "string" ) {
  			return value.match( rnothtmlwhite ) || [];
  		}
  		return [];
  	}

  	jQuery.fn.extend( {
  		addClass: function( value ) {
  			var classNames, cur, curValue, className, i, finalValue;

  			if ( isFunction( value ) ) {
  				return this.each( function( j ) {
  					jQuery( this ).addClass( value.call( this, j, getClass( this ) ) );
  				} );
  			}

  			classNames = classesToArray( value );

  			if ( classNames.length ) {
  				return this.each( function() {
  					curValue = getClass( this );
  					cur = this.nodeType === 1 && ( " " + stripAndCollapse( curValue ) + " " );

  					if ( cur ) {
  						for ( i = 0; i < classNames.length; i++ ) {
  							className = classNames[ i ];
  							if ( cur.indexOf( " " + className + " " ) < 0 ) {
  								cur += className + " ";
  							}
  						}

  						// Only assign if different to avoid unneeded rendering.
  						finalValue = stripAndCollapse( cur );
  						if ( curValue !== finalValue ) {
  							this.setAttribute( "class", finalValue );
  						}
  					}
  				} );
  			}

  			return this;
  		},

  		removeClass: function( value ) {
  			var classNames, cur, curValue, className, i, finalValue;

  			if ( isFunction( value ) ) {
  				return this.each( function( j ) {
  					jQuery( this ).removeClass( value.call( this, j, getClass( this ) ) );
  				} );
  			}

  			if ( !arguments.length ) {
  				return this.attr( "class", "" );
  			}

  			classNames = classesToArray( value );

  			if ( classNames.length ) {
  				return this.each( function() {
  					curValue = getClass( this );

  					// This expression is here for better compressibility (see addClass)
  					cur = this.nodeType === 1 && ( " " + stripAndCollapse( curValue ) + " " );

  					if ( cur ) {
  						for ( i = 0; i < classNames.length; i++ ) {
  							className = classNames[ i ];

  							// Remove *all* instances
  							while ( cur.indexOf( " " + className + " " ) > -1 ) {
  								cur = cur.replace( " " + className + " ", " " );
  							}
  						}

  						// Only assign if different to avoid unneeded rendering.
  						finalValue = stripAndCollapse( cur );
  						if ( curValue !== finalValue ) {
  							this.setAttribute( "class", finalValue );
  						}
  					}
  				} );
  			}

  			return this;
  		},

  		toggleClass: function( value, stateVal ) {
  			var classNames, className, i, self,
  				type = typeof value,
  				isValidValue = type === "string" || Array.isArray( value );

  			if ( isFunction( value ) ) {
  				return this.each( function( i ) {
  					jQuery( this ).toggleClass(
  						value.call( this, i, getClass( this ), stateVal ),
  						stateVal
  					);
  				} );
  			}

  			if ( typeof stateVal === "boolean" && isValidValue ) {
  				return stateVal ? this.addClass( value ) : this.removeClass( value );
  			}

  			classNames = classesToArray( value );

  			return this.each( function() {
  				if ( isValidValue ) {

  					// Toggle individual class names
  					self = jQuery( this );

  					for ( i = 0; i < classNames.length; i++ ) {
  						className = classNames[ i ];

  						// Check each className given, space separated list
  						if ( self.hasClass( className ) ) {
  							self.removeClass( className );
  						} else {
  							self.addClass( className );
  						}
  					}

  				// Toggle whole class name
  				} else if ( value === undefined || type === "boolean" ) {
  					className = getClass( this );
  					if ( className ) {

  						// Store className if set
  						dataPriv.set( this, "__className__", className );
  					}

  					// If the element has a class name or if we're passed `false`,
  					// then remove the whole classname (if there was one, the above saved it).
  					// Otherwise bring back whatever was previously saved (if anything),
  					// falling back to the empty string if nothing was stored.
  					if ( this.setAttribute ) {
  						this.setAttribute( "class",
  							className || value === false ?
  								"" :
  								dataPriv.get( this, "__className__" ) || ""
  						);
  					}
  				}
  			} );
  		},

  		hasClass: function( selector ) {
  			var className, elem,
  				i = 0;

  			className = " " + selector + " ";
  			while ( ( elem = this[ i++ ] ) ) {
  				if ( elem.nodeType === 1 &&
  					( " " + stripAndCollapse( getClass( elem ) ) + " " ).indexOf( className ) > -1 ) {
  					return true;
  				}
  			}

  			return false;
  		}
  	} );




  	var rreturn = /\r/g;

  	jQuery.fn.extend( {
  		val: function( value ) {
  			var hooks, ret, valueIsFunction,
  				elem = this[ 0 ];

  			if ( !arguments.length ) {
  				if ( elem ) {
  					hooks = jQuery.valHooks[ elem.type ] ||
  						jQuery.valHooks[ elem.nodeName.toLowerCase() ];

  					if ( hooks &&
  						"get" in hooks &&
  						( ret = hooks.get( elem, "value" ) ) !== undefined
  					) {
  						return ret;
  					}

  					ret = elem.value;

  					// Handle most common string cases
  					if ( typeof ret === "string" ) {
  						return ret.replace( rreturn, "" );
  					}

  					// Handle cases where value is null/undef or number
  					return ret == null ? "" : ret;
  				}

  				return;
  			}

  			valueIsFunction = isFunction( value );

  			return this.each( function( i ) {
  				var val;

  				if ( this.nodeType !== 1 ) {
  					return;
  				}

  				if ( valueIsFunction ) {
  					val = value.call( this, i, jQuery( this ).val() );
  				} else {
  					val = value;
  				}

  				// Treat null/undefined as ""; convert numbers to string
  				if ( val == null ) {
  					val = "";

  				} else if ( typeof val === "number" ) {
  					val += "";

  				} else if ( Array.isArray( val ) ) {
  					val = jQuery.map( val, function( value ) {
  						return value == null ? "" : value + "";
  					} );
  				}

  				hooks = jQuery.valHooks[ this.type ] || jQuery.valHooks[ this.nodeName.toLowerCase() ];

  				// If set returns undefined, fall back to normal setting
  				if ( !hooks || !( "set" in hooks ) || hooks.set( this, val, "value" ) === undefined ) {
  					this.value = val;
  				}
  			} );
  		}
  	} );

  	jQuery.extend( {
  		valHooks: {
  			option: {
  				get: function( elem ) {

  					var val = jQuery.find.attr( elem, "value" );
  					return val != null ?
  						val :

  						// Support: IE <=10 - 11 only
  						// option.text throws exceptions (trac-14686, trac-14858)
  						// Strip and collapse whitespace
  						// https://html.spec.whatwg.org/#strip-and-collapse-whitespace
  						stripAndCollapse( jQuery.text( elem ) );
  				}
  			},
  			select: {
  				get: function( elem ) {
  					var value, option, i,
  						options = elem.options,
  						index = elem.selectedIndex,
  						one = elem.type === "select-one",
  						values = one ? null : [],
  						max = one ? index + 1 : options.length;

  					if ( index < 0 ) {
  						i = max;

  					} else {
  						i = one ? index : 0;
  					}

  					// Loop through all the selected options
  					for ( ; i < max; i++ ) {
  						option = options[ i ];

  						// Support: IE <=9 only
  						// IE8-9 doesn't update selected after form reset (trac-2551)
  						if ( ( option.selected || i === index ) &&

  								// Don't return options that are disabled or in a disabled optgroup
  								!option.disabled &&
  								( !option.parentNode.disabled ||
  									!nodeName( option.parentNode, "optgroup" ) ) ) {

  							// Get the specific value for the option
  							value = jQuery( option ).val();

  							// We don't need an array for one selects
  							if ( one ) {
  								return value;
  							}

  							// Multi-Selects return an array
  							values.push( value );
  						}
  					}

  					return values;
  				},

  				set: function( elem, value ) {
  					var optionSet, option,
  						options = elem.options,
  						values = jQuery.makeArray( value ),
  						i = options.length;

  					while ( i-- ) {
  						option = options[ i ];

  						/* eslint-disable no-cond-assign */

  						if ( option.selected =
  							jQuery.inArray( jQuery.valHooks.option.get( option ), values ) > -1
  						) {
  							optionSet = true;
  						}

  						/* eslint-enable no-cond-assign */
  					}

  					// Force browsers to behave consistently when non-matching value is set
  					if ( !optionSet ) {
  						elem.selectedIndex = -1;
  					}
  					return values;
  				}
  			}
  		}
  	} );

  	// Radios and checkboxes getter/setter
  	jQuery.each( [ "radio", "checkbox" ], function() {
  		jQuery.valHooks[ this ] = {
  			set: function( elem, value ) {
  				if ( Array.isArray( value ) ) {
  					return ( elem.checked = jQuery.inArray( jQuery( elem ).val(), value ) > -1 );
  				}
  			}
  		};
  		if ( !support.checkOn ) {
  			jQuery.valHooks[ this ].get = function( elem ) {
  				return elem.getAttribute( "value" ) === null ? "on" : elem.value;
  			};
  		}
  	} );




  	// Return jQuery for attributes-only inclusion
  	var location = window.location;

  	var nonce = { guid: Date.now() };

  	var rquery = ( /\?/ );



  	// Cross-browser xml parsing
  	jQuery.parseXML = function( data ) {
  		var xml, parserErrorElem;
  		if ( !data || typeof data !== "string" ) {
  			return null;
  		}

  		// Support: IE 9 - 11 only
  		// IE throws on parseFromString with invalid input.
  		try {
  			xml = ( new window.DOMParser() ).parseFromString( data, "text/xml" );
  		} catch ( e ) {}

  		parserErrorElem = xml && xml.getElementsByTagName( "parsererror" )[ 0 ];
  		if ( !xml || parserErrorElem ) {
  			jQuery.error( "Invalid XML: " + (
  				parserErrorElem ?
  					jQuery.map( parserErrorElem.childNodes, function( el ) {
  						return el.textContent;
  					} ).join( "\n" ) :
  					data
  			) );
  		}
  		return xml;
  	};


  	var rfocusMorph = /^(?:focusinfocus|focusoutblur)$/,
  		stopPropagationCallback = function( e ) {
  			e.stopPropagation();
  		};

  	jQuery.extend( jQuery.event, {

  		trigger: function( event, data, elem, onlyHandlers ) {

  			var i, cur, tmp, bubbleType, ontype, handle, special, lastElement,
  				eventPath = [ elem || document ],
  				type = hasOwn.call( event, "type" ) ? event.type : event,
  				namespaces = hasOwn.call( event, "namespace" ) ? event.namespace.split( "." ) : [];

  			cur = lastElement = tmp = elem = elem || document;

  			// Don't do events on text and comment nodes
  			if ( elem.nodeType === 3 || elem.nodeType === 8 ) {
  				return;
  			}

  			// focus/blur morphs to focusin/out; ensure we're not firing them right now
  			if ( rfocusMorph.test( type + jQuery.event.triggered ) ) {
  				return;
  			}

  			if ( type.indexOf( "." ) > -1 ) {

  				// Namespaced trigger; create a regexp to match event type in handle()
  				namespaces = type.split( "." );
  				type = namespaces.shift();
  				namespaces.sort();
  			}
  			ontype = type.indexOf( ":" ) < 0 && "on" + type;

  			// Caller can pass in a jQuery.Event object, Object, or just an event type string
  			event = event[ jQuery.expando ] ?
  				event :
  				new jQuery.Event( type, typeof event === "object" && event );

  			// Trigger bitmask: & 1 for native handlers; & 2 for jQuery (always true)
  			event.isTrigger = onlyHandlers ? 2 : 3;
  			event.namespace = namespaces.join( "." );
  			event.rnamespace = event.namespace ?
  				new RegExp( "(^|\\.)" + namespaces.join( "\\.(?:.*\\.|)" ) + "(\\.|$)" ) :
  				null;

  			// Clean up the event in case it is being reused
  			event.result = undefined;
  			if ( !event.target ) {
  				event.target = elem;
  			}

  			// Clone any incoming data and prepend the event, creating the handler arg list
  			data = data == null ?
  				[ event ] :
  				jQuery.makeArray( data, [ event ] );

  			// Allow special events to draw outside the lines
  			special = jQuery.event.special[ type ] || {};
  			if ( !onlyHandlers && special.trigger && special.trigger.apply( elem, data ) === false ) {
  				return;
  			}

  			// Determine event propagation path in advance, per W3C events spec (trac-9951)
  			// Bubble up to document, then to window; watch for a global ownerDocument var (trac-9724)
  			if ( !onlyHandlers && !special.noBubble && !isWindow( elem ) ) {

  				bubbleType = special.delegateType || type;
  				if ( !rfocusMorph.test( bubbleType + type ) ) {
  					cur = cur.parentNode;
  				}
  				for ( ; cur; cur = cur.parentNode ) {
  					eventPath.push( cur );
  					tmp = cur;
  				}

  				// Only add window if we got to document (e.g., not plain obj or detached DOM)
  				if ( tmp === ( elem.ownerDocument || document ) ) {
  					eventPath.push( tmp.defaultView || tmp.parentWindow || window );
  				}
  			}

  			// Fire handlers on the event path
  			i = 0;
  			while ( ( cur = eventPath[ i++ ] ) && !event.isPropagationStopped() ) {
  				lastElement = cur;
  				event.type = i > 1 ?
  					bubbleType :
  					special.bindType || type;

  				// jQuery handler
  				handle = ( dataPriv.get( cur, "events" ) || Object.create( null ) )[ event.type ] &&
  					dataPriv.get( cur, "handle" );
  				if ( handle ) {
  					handle.apply( cur, data );
  				}

  				// Native handler
  				handle = ontype && cur[ ontype ];
  				if ( handle && handle.apply && acceptData( cur ) ) {
  					event.result = handle.apply( cur, data );
  					if ( event.result === false ) {
  						event.preventDefault();
  					}
  				}
  			}
  			event.type = type;

  			// If nobody prevented the default action, do it now
  			if ( !onlyHandlers && !event.isDefaultPrevented() ) {

  				if ( ( !special._default ||
  					special._default.apply( eventPath.pop(), data ) === false ) &&
  					acceptData( elem ) ) {

  					// Call a native DOM method on the target with the same name as the event.
  					// Don't do default actions on window, that's where global variables be (trac-6170)
  					if ( ontype && isFunction( elem[ type ] ) && !isWindow( elem ) ) {

  						// Don't re-trigger an onFOO event when we call its FOO() method
  						tmp = elem[ ontype ];

  						if ( tmp ) {
  							elem[ ontype ] = null;
  						}

  						// Prevent re-triggering of the same event, since we already bubbled it above
  						jQuery.event.triggered = type;

  						if ( event.isPropagationStopped() ) {
  							lastElement.addEventListener( type, stopPropagationCallback );
  						}

  						elem[ type ]();

  						if ( event.isPropagationStopped() ) {
  							lastElement.removeEventListener( type, stopPropagationCallback );
  						}

  						jQuery.event.triggered = undefined;

  						if ( tmp ) {
  							elem[ ontype ] = tmp;
  						}
  					}
  				}
  			}

  			return event.result;
  		},

  		// Piggyback on a donor event to simulate a different one
  		// Used only for `focus(in | out)` events
  		simulate: function( type, elem, event ) {
  			var e = jQuery.extend(
  				new jQuery.Event(),
  				event,
  				{
  					type: type,
  					isSimulated: true
  				}
  			);

  			jQuery.event.trigger( e, null, elem );
  		}

  	} );

  	jQuery.fn.extend( {

  		trigger: function( type, data ) {
  			return this.each( function() {
  				jQuery.event.trigger( type, data, this );
  			} );
  		},
  		triggerHandler: function( type, data ) {
  			var elem = this[ 0 ];
  			if ( elem ) {
  				return jQuery.event.trigger( type, data, elem, true );
  			}
  		}
  	} );


  	var
  		rbracket = /\[\]$/,
  		rCRLF = /\r?\n/g,
  		rsubmitterTypes = /^(?:submit|button|image|reset|file)$/i,
  		rsubmittable = /^(?:input|select|textarea|keygen)/i;

  	function buildParams( prefix, obj, traditional, add ) {
  		var name;

  		if ( Array.isArray( obj ) ) {

  			// Serialize array item.
  			jQuery.each( obj, function( i, v ) {
  				if ( traditional || rbracket.test( prefix ) ) {

  					// Treat each array item as a scalar.
  					add( prefix, v );

  				} else {

  					// Item is non-scalar (array or object), encode its numeric index.
  					buildParams(
  						prefix + "[" + ( typeof v === "object" && v != null ? i : "" ) + "]",
  						v,
  						traditional,
  						add
  					);
  				}
  			} );

  		} else if ( !traditional && toType( obj ) === "object" ) {

  			// Serialize object item.
  			for ( name in obj ) {
  				buildParams( prefix + "[" + name + "]", obj[ name ], traditional, add );
  			}

  		} else {

  			// Serialize scalar item.
  			add( prefix, obj );
  		}
  	}

  	// Serialize an array of form elements or a set of
  	// key/values into a query string
  	jQuery.param = function( a, traditional ) {
  		var prefix,
  			s = [],
  			add = function( key, valueOrFunction ) {

  				// If value is a function, invoke it and use its return value
  				var value = isFunction( valueOrFunction ) ?
  					valueOrFunction() :
  					valueOrFunction;

  				s[ s.length ] = encodeURIComponent( key ) + "=" +
  					encodeURIComponent( value == null ? "" : value );
  			};

  		if ( a == null ) {
  			return "";
  		}

  		// If an array was passed in, assume that it is an array of form elements.
  		if ( Array.isArray( a ) || ( a.jquery && !jQuery.isPlainObject( a ) ) ) {

  			// Serialize the form elements
  			jQuery.each( a, function() {
  				add( this.name, this.value );
  			} );

  		} else {

  			// If traditional, encode the "old" way (the way 1.3.2 or older
  			// did it), otherwise encode params recursively.
  			for ( prefix in a ) {
  				buildParams( prefix, a[ prefix ], traditional, add );
  			}
  		}

  		// Return the resulting serialization
  		return s.join( "&" );
  	};

  	jQuery.fn.extend( {
  		serialize: function() {
  			return jQuery.param( this.serializeArray() );
  		},
  		serializeArray: function() {
  			return this.map( function() {

  				// Can add propHook for "elements" to filter or add form elements
  				var elements = jQuery.prop( this, "elements" );
  				return elements ? jQuery.makeArray( elements ) : this;
  			} ).filter( function() {
  				var type = this.type;

  				// Use .is( ":disabled" ) so that fieldset[disabled] works
  				return this.name && !jQuery( this ).is( ":disabled" ) &&
  					rsubmittable.test( this.nodeName ) && !rsubmitterTypes.test( type ) &&
  					( this.checked || !rcheckableType.test( type ) );
  			} ).map( function( _i, elem ) {
  				var val = jQuery( this ).val();

  				if ( val == null ) {
  					return null;
  				}

  				if ( Array.isArray( val ) ) {
  					return jQuery.map( val, function( val ) {
  						return { name: elem.name, value: val.replace( rCRLF, "\r\n" ) };
  					} );
  				}

  				return { name: elem.name, value: val.replace( rCRLF, "\r\n" ) };
  			} ).get();
  		}
  	} );


  	var
  		r20 = /%20/g,
  		rhash = /#.*$/,
  		rantiCache = /([?&])_=[^&]*/,
  		rheaders = /^(.*?):[ \t]*([^\r\n]*)$/mg,

  		// trac-7653, trac-8125, trac-8152: local protocol detection
  		rlocalProtocol = /^(?:about|app|app-storage|.+-extension|file|res|widget):$/,
  		rnoContent = /^(?:GET|HEAD)$/,
  		rprotocol = /^\/\//,

  		/* Prefilters
  		 * 1) They are useful to introduce custom dataTypes (see ajax/jsonp.js for an example)
  		 * 2) These are called:
  		 *    - BEFORE asking for a transport
  		 *    - AFTER param serialization (s.data is a string if s.processData is true)
  		 * 3) key is the dataType
  		 * 4) the catchall symbol "*" can be used
  		 * 5) execution will start with transport dataType and THEN continue down to "*" if needed
  		 */
  		prefilters = {},

  		/* Transports bindings
  		 * 1) key is the dataType
  		 * 2) the catchall symbol "*" can be used
  		 * 3) selection will start with transport dataType and THEN go to "*" if needed
  		 */
  		transports = {},

  		// Avoid comment-prolog char sequence (trac-10098); must appease lint and evade compression
  		allTypes = "*/".concat( "*" ),

  		// Anchor tag for parsing the document origin
  		originAnchor = document.createElement( "a" );

  	originAnchor.href = location.href;

  	// Base "constructor" for jQuery.ajaxPrefilter and jQuery.ajaxTransport
  	function addToPrefiltersOrTransports( structure ) {

  		// dataTypeExpression is optional and defaults to "*"
  		return function( dataTypeExpression, func ) {

  			if ( typeof dataTypeExpression !== "string" ) {
  				func = dataTypeExpression;
  				dataTypeExpression = "*";
  			}

  			var dataType,
  				i = 0,
  				dataTypes = dataTypeExpression.toLowerCase().match( rnothtmlwhite ) || [];

  			if ( isFunction( func ) ) {

  				// For each dataType in the dataTypeExpression
  				while ( ( dataType = dataTypes[ i++ ] ) ) {

  					// Prepend if requested
  					if ( dataType[ 0 ] === "+" ) {
  						dataType = dataType.slice( 1 ) || "*";
  						( structure[ dataType ] = structure[ dataType ] || [] ).unshift( func );

  					// Otherwise append
  					} else {
  						( structure[ dataType ] = structure[ dataType ] || [] ).push( func );
  					}
  				}
  			}
  		};
  	}

  	// Base inspection function for prefilters and transports
  	function inspectPrefiltersOrTransports( structure, options, originalOptions, jqXHR ) {

  		var inspected = {},
  			seekingTransport = ( structure === transports );

  		function inspect( dataType ) {
  			var selected;
  			inspected[ dataType ] = true;
  			jQuery.each( structure[ dataType ] || [], function( _, prefilterOrFactory ) {
  				var dataTypeOrTransport = prefilterOrFactory( options, originalOptions, jqXHR );
  				if ( typeof dataTypeOrTransport === "string" &&
  					!seekingTransport && !inspected[ dataTypeOrTransport ] ) {

  					options.dataTypes.unshift( dataTypeOrTransport );
  					inspect( dataTypeOrTransport );
  					return false;
  				} else if ( seekingTransport ) {
  					return !( selected = dataTypeOrTransport );
  				}
  			} );
  			return selected;
  		}

  		return inspect( options.dataTypes[ 0 ] ) || !inspected[ "*" ] && inspect( "*" );
  	}

  	// A special extend for ajax options
  	// that takes "flat" options (not to be deep extended)
  	// Fixes trac-9887
  	function ajaxExtend( target, src ) {
  		var key, deep,
  			flatOptions = jQuery.ajaxSettings.flatOptions || {};

  		for ( key in src ) {
  			if ( src[ key ] !== undefined ) {
  				( flatOptions[ key ] ? target : ( deep || ( deep = {} ) ) )[ key ] = src[ key ];
  			}
  		}
  		if ( deep ) {
  			jQuery.extend( true, target, deep );
  		}

  		return target;
  	}

  	/* Handles responses to an ajax request:
  	 * - finds the right dataType (mediates between content-type and expected dataType)
  	 * - returns the corresponding response
  	 */
  	function ajaxHandleResponses( s, jqXHR, responses ) {

  		var ct, type, finalDataType, firstDataType,
  			contents = s.contents,
  			dataTypes = s.dataTypes;

  		// Remove auto dataType and get content-type in the process
  		while ( dataTypes[ 0 ] === "*" ) {
  			dataTypes.shift();
  			if ( ct === undefined ) {
  				ct = s.mimeType || jqXHR.getResponseHeader( "Content-Type" );
  			}
  		}

  		// Check if we're dealing with a known content-type
  		if ( ct ) {
  			for ( type in contents ) {
  				if ( contents[ type ] && contents[ type ].test( ct ) ) {
  					dataTypes.unshift( type );
  					break;
  				}
  			}
  		}

  		// Check to see if we have a response for the expected dataType
  		if ( dataTypes[ 0 ] in responses ) {
  			finalDataType = dataTypes[ 0 ];
  		} else {

  			// Try convertible dataTypes
  			for ( type in responses ) {
  				if ( !dataTypes[ 0 ] || s.converters[ type + " " + dataTypes[ 0 ] ] ) {
  					finalDataType = type;
  					break;
  				}
  				if ( !firstDataType ) {
  					firstDataType = type;
  				}
  			}

  			// Or just use first one
  			finalDataType = finalDataType || firstDataType;
  		}

  		// If we found a dataType
  		// We add the dataType to the list if needed
  		// and return the corresponding response
  		if ( finalDataType ) {
  			if ( finalDataType !== dataTypes[ 0 ] ) {
  				dataTypes.unshift( finalDataType );
  			}
  			return responses[ finalDataType ];
  		}
  	}

  	/* Chain conversions given the request and the original response
  	 * Also sets the responseXXX fields on the jqXHR instance
  	 */
  	function ajaxConvert( s, response, jqXHR, isSuccess ) {
  		var conv2, current, conv, tmp, prev,
  			converters = {},

  			// Work with a copy of dataTypes in case we need to modify it for conversion
  			dataTypes = s.dataTypes.slice();

  		// Create converters map with lowercased keys
  		if ( dataTypes[ 1 ] ) {
  			for ( conv in s.converters ) {
  				converters[ conv.toLowerCase() ] = s.converters[ conv ];
  			}
  		}

  		current = dataTypes.shift();

  		// Convert to each sequential dataType
  		while ( current ) {

  			if ( s.responseFields[ current ] ) {
  				jqXHR[ s.responseFields[ current ] ] = response;
  			}

  			// Apply the dataFilter if provided
  			if ( !prev && isSuccess && s.dataFilter ) {
  				response = s.dataFilter( response, s.dataType );
  			}

  			prev = current;
  			current = dataTypes.shift();

  			if ( current ) {

  				// There's only work to do if current dataType is non-auto
  				if ( current === "*" ) {

  					current = prev;

  				// Convert response if prev dataType is non-auto and differs from current
  				} else if ( prev !== "*" && prev !== current ) {

  					// Seek a direct converter
  					conv = converters[ prev + " " + current ] || converters[ "* " + current ];

  					// If none found, seek a pair
  					if ( !conv ) {
  						for ( conv2 in converters ) {

  							// If conv2 outputs current
  							tmp = conv2.split( " " );
  							if ( tmp[ 1 ] === current ) {

  								// If prev can be converted to accepted input
  								conv = converters[ prev + " " + tmp[ 0 ] ] ||
  									converters[ "* " + tmp[ 0 ] ];
  								if ( conv ) {

  									// Condense equivalence converters
  									if ( conv === true ) {
  										conv = converters[ conv2 ];

  									// Otherwise, insert the intermediate dataType
  									} else if ( converters[ conv2 ] !== true ) {
  										current = tmp[ 0 ];
  										dataTypes.unshift( tmp[ 1 ] );
  									}
  									break;
  								}
  							}
  						}
  					}

  					// Apply converter (if not an equivalence)
  					if ( conv !== true ) {

  						// Unless errors are allowed to bubble, catch and return them
  						if ( conv && s.throws ) {
  							response = conv( response );
  						} else {
  							try {
  								response = conv( response );
  							} catch ( e ) {
  								return {
  									state: "parsererror",
  									error: conv ? e : "No conversion from " + prev + " to " + current
  								};
  							}
  						}
  					}
  				}
  			}
  		}

  		return { state: "success", data: response };
  	}

  	jQuery.extend( {

  		// Counter for holding the number of active queries
  		active: 0,

  		// Last-Modified header cache for next request
  		lastModified: {},
  		etag: {},

  		ajaxSettings: {
  			url: location.href,
  			type: "GET",
  			isLocal: rlocalProtocol.test( location.protocol ),
  			global: true,
  			processData: true,
  			async: true,
  			contentType: "application/x-www-form-urlencoded; charset=UTF-8",

  			/*
  			timeout: 0,
  			data: null,
  			dataType: null,
  			username: null,
  			password: null,
  			cache: null,
  			throws: false,
  			traditional: false,
  			headers: {},
  			*/

  			accepts: {
  				"*": allTypes,
  				text: "text/plain",
  				html: "text/html",
  				xml: "application/xml, text/xml",
  				json: "application/json, text/javascript"
  			},

  			contents: {
  				xml: /\bxml\b/,
  				html: /\bhtml/,
  				json: /\bjson\b/
  			},

  			responseFields: {
  				xml: "responseXML",
  				text: "responseText",
  				json: "responseJSON"
  			},

  			// Data converters
  			// Keys separate source (or catchall "*") and destination types with a single space
  			converters: {

  				// Convert anything to text
  				"* text": String,

  				// Text to html (true = no transformation)
  				"text html": true,

  				// Evaluate text as a json expression
  				"text json": JSON.parse,

  				// Parse text as xml
  				"text xml": jQuery.parseXML
  			},

  			// For options that shouldn't be deep extended:
  			// you can add your own custom options here if
  			// and when you create one that shouldn't be
  			// deep extended (see ajaxExtend)
  			flatOptions: {
  				url: true,
  				context: true
  			}
  		},

  		// Creates a full fledged settings object into target
  		// with both ajaxSettings and settings fields.
  		// If target is omitted, writes into ajaxSettings.
  		ajaxSetup: function( target, settings ) {
  			return settings ?

  				// Building a settings object
  				ajaxExtend( ajaxExtend( target, jQuery.ajaxSettings ), settings ) :

  				// Extending ajaxSettings
  				ajaxExtend( jQuery.ajaxSettings, target );
  		},

  		ajaxPrefilter: addToPrefiltersOrTransports( prefilters ),
  		ajaxTransport: addToPrefiltersOrTransports( transports ),

  		// Main method
  		ajax: function( url, options ) {

  			// If url is an object, simulate pre-1.5 signature
  			if ( typeof url === "object" ) {
  				options = url;
  				url = undefined;
  			}

  			// Force options to be an object
  			options = options || {};

  			var transport,

  				// URL without anti-cache param
  				cacheURL,

  				// Response headers
  				responseHeadersString,
  				responseHeaders,

  				// timeout handle
  				timeoutTimer,

  				// Url cleanup var
  				urlAnchor,

  				// Request state (becomes false upon send and true upon completion)
  				completed,

  				// To know if global events are to be dispatched
  				fireGlobals,

  				// Loop variable
  				i,

  				// uncached part of the url
  				uncached,

  				// Create the final options object
  				s = jQuery.ajaxSetup( {}, options ),

  				// Callbacks context
  				callbackContext = s.context || s,

  				// Context for global events is callbackContext if it is a DOM node or jQuery collection
  				globalEventContext = s.context &&
  					( callbackContext.nodeType || callbackContext.jquery ) ?
  					jQuery( callbackContext ) :
  					jQuery.event,

  				// Deferreds
  				deferred = jQuery.Deferred(),
  				completeDeferred = jQuery.Callbacks( "once memory" ),

  				// Status-dependent callbacks
  				statusCode = s.statusCode || {},

  				// Headers (they are sent all at once)
  				requestHeaders = {},
  				requestHeadersNames = {},

  				// Default abort message
  				strAbort = "canceled",

  				// Fake xhr
  				jqXHR = {
  					readyState: 0,

  					// Builds headers hashtable if needed
  					getResponseHeader: function( key ) {
  						var match;
  						if ( completed ) {
  							if ( !responseHeaders ) {
  								responseHeaders = {};
  								while ( ( match = rheaders.exec( responseHeadersString ) ) ) {
  									responseHeaders[ match[ 1 ].toLowerCase() + " " ] =
  										( responseHeaders[ match[ 1 ].toLowerCase() + " " ] || [] )
  											.concat( match[ 2 ] );
  								}
  							}
  							match = responseHeaders[ key.toLowerCase() + " " ];
  						}
  						return match == null ? null : match.join( ", " );
  					},

  					// Raw string
  					getAllResponseHeaders: function() {
  						return completed ? responseHeadersString : null;
  					},

  					// Caches the header
  					setRequestHeader: function( name, value ) {
  						if ( completed == null ) {
  							name = requestHeadersNames[ name.toLowerCase() ] =
  								requestHeadersNames[ name.toLowerCase() ] || name;
  							requestHeaders[ name ] = value;
  						}
  						return this;
  					},

  					// Overrides response content-type header
  					overrideMimeType: function( type ) {
  						if ( completed == null ) {
  							s.mimeType = type;
  						}
  						return this;
  					},

  					// Status-dependent callbacks
  					statusCode: function( map ) {
  						var code;
  						if ( map ) {
  							if ( completed ) {

  								// Execute the appropriate callbacks
  								jqXHR.always( map[ jqXHR.status ] );
  							} else {

  								// Lazy-add the new callbacks in a way that preserves old ones
  								for ( code in map ) {
  									statusCode[ code ] = [ statusCode[ code ], map[ code ] ];
  								}
  							}
  						}
  						return this;
  					},

  					// Cancel the request
  					abort: function( statusText ) {
  						var finalText = statusText || strAbort;
  						if ( transport ) {
  							transport.abort( finalText );
  						}
  						done( 0, finalText );
  						return this;
  					}
  				};

  			// Attach deferreds
  			deferred.promise( jqXHR );

  			// Add protocol if not provided (prefilters might expect it)
  			// Handle falsy url in the settings object (trac-10093: consistency with old signature)
  			// We also use the url parameter if available
  			s.url = ( ( url || s.url || location.href ) + "" )
  				.replace( rprotocol, location.protocol + "//" );

  			// Alias method option to type as per ticket trac-12004
  			s.type = options.method || options.type || s.method || s.type;

  			// Extract dataTypes list
  			s.dataTypes = ( s.dataType || "*" ).toLowerCase().match( rnothtmlwhite ) || [ "" ];

  			// A cross-domain request is in order when the origin doesn't match the current origin.
  			if ( s.crossDomain == null ) {
  				urlAnchor = document.createElement( "a" );

  				// Support: IE <=8 - 11, Edge 12 - 15
  				// IE throws exception on accessing the href property if url is malformed,
  				// e.g. http://example.com:80x/
  				try {
  					urlAnchor.href = s.url;

  					// Support: IE <=8 - 11 only
  					// Anchor's host property isn't correctly set when s.url is relative
  					urlAnchor.href = urlAnchor.href;
  					s.crossDomain = originAnchor.protocol + "//" + originAnchor.host !==
  						urlAnchor.protocol + "//" + urlAnchor.host;
  				} catch ( e ) {

  					// If there is an error parsing the URL, assume it is crossDomain,
  					// it can be rejected by the transport if it is invalid
  					s.crossDomain = true;
  				}
  			}

  			// Convert data if not already a string
  			if ( s.data && s.processData && typeof s.data !== "string" ) {
  				s.data = jQuery.param( s.data, s.traditional );
  			}

  			// Apply prefilters
  			inspectPrefiltersOrTransports( prefilters, s, options, jqXHR );

  			// If request was aborted inside a prefilter, stop there
  			if ( completed ) {
  				return jqXHR;
  			}

  			// We can fire global events as of now if asked to
  			// Don't fire events if jQuery.event is undefined in an AMD-usage scenario (trac-15118)
  			fireGlobals = jQuery.event && s.global;

  			// Watch for a new set of requests
  			if ( fireGlobals && jQuery.active++ === 0 ) {
  				jQuery.event.trigger( "ajaxStart" );
  			}

  			// Uppercase the type
  			s.type = s.type.toUpperCase();

  			// Determine if request has content
  			s.hasContent = !rnoContent.test( s.type );

  			// Save the URL in case we're toying with the If-Modified-Since
  			// and/or If-None-Match header later on
  			// Remove hash to simplify url manipulation
  			cacheURL = s.url.replace( rhash, "" );

  			// More options handling for requests with no content
  			if ( !s.hasContent ) {

  				// Remember the hash so we can put it back
  				uncached = s.url.slice( cacheURL.length );

  				// If data is available and should be processed, append data to url
  				if ( s.data && ( s.processData || typeof s.data === "string" ) ) {
  					cacheURL += ( rquery.test( cacheURL ) ? "&" : "?" ) + s.data;

  					// trac-9682: remove data so that it's not used in an eventual retry
  					delete s.data;
  				}

  				// Add or update anti-cache param if needed
  				if ( s.cache === false ) {
  					cacheURL = cacheURL.replace( rantiCache, "$1" );
  					uncached = ( rquery.test( cacheURL ) ? "&" : "?" ) + "_=" + ( nonce.guid++ ) +
  						uncached;
  				}

  				// Put hash and anti-cache on the URL that will be requested (gh-1732)
  				s.url = cacheURL + uncached;

  			// Change '%20' to '+' if this is encoded form body content (gh-2658)
  			} else if ( s.data && s.processData &&
  				( s.contentType || "" ).indexOf( "application/x-www-form-urlencoded" ) === 0 ) {
  				s.data = s.data.replace( r20, "+" );
  			}

  			// Set the If-Modified-Since and/or If-None-Match header, if in ifModified mode.
  			if ( s.ifModified ) {
  				if ( jQuery.lastModified[ cacheURL ] ) {
  					jqXHR.setRequestHeader( "If-Modified-Since", jQuery.lastModified[ cacheURL ] );
  				}
  				if ( jQuery.etag[ cacheURL ] ) {
  					jqXHR.setRequestHeader( "If-None-Match", jQuery.etag[ cacheURL ] );
  				}
  			}

  			// Set the correct header, if data is being sent
  			if ( s.data && s.hasContent && s.contentType !== false || options.contentType ) {
  				jqXHR.setRequestHeader( "Content-Type", s.contentType );
  			}

  			// Set the Accepts header for the server, depending on the dataType
  			jqXHR.setRequestHeader(
  				"Accept",
  				s.dataTypes[ 0 ] && s.accepts[ s.dataTypes[ 0 ] ] ?
  					s.accepts[ s.dataTypes[ 0 ] ] +
  						( s.dataTypes[ 0 ] !== "*" ? ", " + allTypes + "; q=0.01" : "" ) :
  					s.accepts[ "*" ]
  			);

  			// Check for headers option
  			for ( i in s.headers ) {
  				jqXHR.setRequestHeader( i, s.headers[ i ] );
  			}

  			// Allow custom headers/mimetypes and early abort
  			if ( s.beforeSend &&
  				( s.beforeSend.call( callbackContext, jqXHR, s ) === false || completed ) ) {

  				// Abort if not done already and return
  				return jqXHR.abort();
  			}

  			// Aborting is no longer a cancellation
  			strAbort = "abort";

  			// Install callbacks on deferreds
  			completeDeferred.add( s.complete );
  			jqXHR.done( s.success );
  			jqXHR.fail( s.error );

  			// Get transport
  			transport = inspectPrefiltersOrTransports( transports, s, options, jqXHR );

  			// If no transport, we auto-abort
  			if ( !transport ) {
  				done( -1, "No Transport" );
  			} else {
  				jqXHR.readyState = 1;

  				// Send global event
  				if ( fireGlobals ) {
  					globalEventContext.trigger( "ajaxSend", [ jqXHR, s ] );
  				}

  				// If request was aborted inside ajaxSend, stop there
  				if ( completed ) {
  					return jqXHR;
  				}

  				// Timeout
  				if ( s.async && s.timeout > 0 ) {
  					timeoutTimer = window.setTimeout( function() {
  						jqXHR.abort( "timeout" );
  					}, s.timeout );
  				}

  				try {
  					completed = false;
  					transport.send( requestHeaders, done );
  				} catch ( e ) {

  					// Rethrow post-completion exceptions
  					if ( completed ) {
  						throw e;
  					}

  					// Propagate others as results
  					done( -1, e );
  				}
  			}

  			// Callback for when everything is done
  			function done( status, nativeStatusText, responses, headers ) {
  				var isSuccess, success, error, response, modified,
  					statusText = nativeStatusText;

  				// Ignore repeat invocations
  				if ( completed ) {
  					return;
  				}

  				completed = true;

  				// Clear timeout if it exists
  				if ( timeoutTimer ) {
  					window.clearTimeout( timeoutTimer );
  				}

  				// Dereference transport for early garbage collection
  				// (no matter how long the jqXHR object will be used)
  				transport = undefined;

  				// Cache response headers
  				responseHeadersString = headers || "";

  				// Set readyState
  				jqXHR.readyState = status > 0 ? 4 : 0;

  				// Determine if successful
  				isSuccess = status >= 200 && status < 300 || status === 304;

  				// Get response data
  				if ( responses ) {
  					response = ajaxHandleResponses( s, jqXHR, responses );
  				}

  				// Use a noop converter for missing script but not if jsonp
  				if ( !isSuccess &&
  					jQuery.inArray( "script", s.dataTypes ) > -1 &&
  					jQuery.inArray( "json", s.dataTypes ) < 0 ) {
  					s.converters[ "text script" ] = function() {};
  				}

  				// Convert no matter what (that way responseXXX fields are always set)
  				response = ajaxConvert( s, response, jqXHR, isSuccess );

  				// If successful, handle type chaining
  				if ( isSuccess ) {

  					// Set the If-Modified-Since and/or If-None-Match header, if in ifModified mode.
  					if ( s.ifModified ) {
  						modified = jqXHR.getResponseHeader( "Last-Modified" );
  						if ( modified ) {
  							jQuery.lastModified[ cacheURL ] = modified;
  						}
  						modified = jqXHR.getResponseHeader( "etag" );
  						if ( modified ) {
  							jQuery.etag[ cacheURL ] = modified;
  						}
  					}

  					// if no content
  					if ( status === 204 || s.type === "HEAD" ) {
  						statusText = "nocontent";

  					// if not modified
  					} else if ( status === 304 ) {
  						statusText = "notmodified";

  					// If we have data, let's convert it
  					} else {
  						statusText = response.state;
  						success = response.data;
  						error = response.error;
  						isSuccess = !error;
  					}
  				} else {

  					// Extract error from statusText and normalize for non-aborts
  					error = statusText;
  					if ( status || !statusText ) {
  						statusText = "error";
  						if ( status < 0 ) {
  							status = 0;
  						}
  					}
  				}

  				// Set data for the fake xhr object
  				jqXHR.status = status;
  				jqXHR.statusText = ( nativeStatusText || statusText ) + "";

  				// Success/Error
  				if ( isSuccess ) {
  					deferred.resolveWith( callbackContext, [ success, statusText, jqXHR ] );
  				} else {
  					deferred.rejectWith( callbackContext, [ jqXHR, statusText, error ] );
  				}

  				// Status-dependent callbacks
  				jqXHR.statusCode( statusCode );
  				statusCode = undefined;

  				if ( fireGlobals ) {
  					globalEventContext.trigger( isSuccess ? "ajaxSuccess" : "ajaxError",
  						[ jqXHR, s, isSuccess ? success : error ] );
  				}

  				// Complete
  				completeDeferred.fireWith( callbackContext, [ jqXHR, statusText ] );

  				if ( fireGlobals ) {
  					globalEventContext.trigger( "ajaxComplete", [ jqXHR, s ] );

  					// Handle the global AJAX counter
  					if ( !( --jQuery.active ) ) {
  						jQuery.event.trigger( "ajaxStop" );
  					}
  				}
  			}

  			return jqXHR;
  		},

  		getJSON: function( url, data, callback ) {
  			return jQuery.get( url, data, callback, "json" );
  		},

  		getScript: function( url, callback ) {
  			return jQuery.get( url, undefined, callback, "script" );
  		}
  	} );

  	jQuery.each( [ "get", "post" ], function( _i, method ) {
  		jQuery[ method ] = function( url, data, callback, type ) {

  			// Shift arguments if data argument was omitted
  			if ( isFunction( data ) ) {
  				type = type || callback;
  				callback = data;
  				data = undefined;
  			}

  			// The url can be an options object (which then must have .url)
  			return jQuery.ajax( jQuery.extend( {
  				url: url,
  				type: method,
  				dataType: type,
  				data: data,
  				success: callback
  			}, jQuery.isPlainObject( url ) && url ) );
  		};
  	} );

  	jQuery.ajaxPrefilter( function( s ) {
  		var i;
  		for ( i in s.headers ) {
  			if ( i.toLowerCase() === "content-type" ) {
  				s.contentType = s.headers[ i ] || "";
  			}
  		}
  	} );


  	jQuery._evalUrl = function( url, options, doc ) {
  		return jQuery.ajax( {
  			url: url,

  			// Make this explicit, since user can override this through ajaxSetup (trac-11264)
  			type: "GET",
  			dataType: "script",
  			cache: true,
  			async: false,
  			global: false,

  			// Only evaluate the response if it is successful (gh-4126)
  			// dataFilter is not invoked for failure responses, so using it instead
  			// of the default converter is kludgy but it works.
  			converters: {
  				"text script": function() {}
  			},
  			dataFilter: function( response ) {
  				jQuery.globalEval( response, options, doc );
  			}
  		} );
  	};


  	jQuery.fn.extend( {
  		wrapAll: function( html ) {
  			var wrap;

  			if ( this[ 0 ] ) {
  				if ( isFunction( html ) ) {
  					html = html.call( this[ 0 ] );
  				}

  				// The elements to wrap the target around
  				wrap = jQuery( html, this[ 0 ].ownerDocument ).eq( 0 ).clone( true );

  				if ( this[ 0 ].parentNode ) {
  					wrap.insertBefore( this[ 0 ] );
  				}

  				wrap.map( function() {
  					var elem = this;

  					while ( elem.firstElementChild ) {
  						elem = elem.firstElementChild;
  					}

  					return elem;
  				} ).append( this );
  			}

  			return this;
  		},

  		wrapInner: function( html ) {
  			if ( isFunction( html ) ) {
  				return this.each( function( i ) {
  					jQuery( this ).wrapInner( html.call( this, i ) );
  				} );
  			}

  			return this.each( function() {
  				var self = jQuery( this ),
  					contents = self.contents();

  				if ( contents.length ) {
  					contents.wrapAll( html );

  				} else {
  					self.append( html );
  				}
  			} );
  		},

  		wrap: function( html ) {
  			var htmlIsFunction = isFunction( html );

  			return this.each( function( i ) {
  				jQuery( this ).wrapAll( htmlIsFunction ? html.call( this, i ) : html );
  			} );
  		},

  		unwrap: function( selector ) {
  			this.parent( selector ).not( "body" ).each( function() {
  				jQuery( this ).replaceWith( this.childNodes );
  			} );
  			return this;
  		}
  	} );


  	jQuery.expr.pseudos.hidden = function( elem ) {
  		return !jQuery.expr.pseudos.visible( elem );
  	};
  	jQuery.expr.pseudos.visible = function( elem ) {
  		return !!( elem.offsetWidth || elem.offsetHeight || elem.getClientRects().length );
  	};




  	jQuery.ajaxSettings.xhr = function() {
  		try {
  			return new window.XMLHttpRequest();
  		} catch ( e ) {}
  	};

  	var xhrSuccessStatus = {

  			// File protocol always yields status code 0, assume 200
  			0: 200,

  			// Support: IE <=9 only
  			// trac-1450: sometimes IE returns 1223 when it should be 204
  			1223: 204
  		},
  		xhrSupported = jQuery.ajaxSettings.xhr();

  	support.cors = !!xhrSupported && ( "withCredentials" in xhrSupported );
  	support.ajax = xhrSupported = !!xhrSupported;

  	jQuery.ajaxTransport( function( options ) {
  		var callback, errorCallback;

  		// Cross domain only allowed if supported through XMLHttpRequest
  		if ( support.cors || xhrSupported && !options.crossDomain ) {
  			return {
  				send: function( headers, complete ) {
  					var i,
  						xhr = options.xhr();

  					xhr.open(
  						options.type,
  						options.url,
  						options.async,
  						options.username,
  						options.password
  					);

  					// Apply custom fields if provided
  					if ( options.xhrFields ) {
  						for ( i in options.xhrFields ) {
  							xhr[ i ] = options.xhrFields[ i ];
  						}
  					}

  					// Override mime type if needed
  					if ( options.mimeType && xhr.overrideMimeType ) {
  						xhr.overrideMimeType( options.mimeType );
  					}

  					// X-Requested-With header
  					// For cross-domain requests, seeing as conditions for a preflight are
  					// akin to a jigsaw puzzle, we simply never set it to be sure.
  					// (it can always be set on a per-request basis or even using ajaxSetup)
  					// For same-domain requests, won't change header if already provided.
  					if ( !options.crossDomain && !headers[ "X-Requested-With" ] ) {
  						headers[ "X-Requested-With" ] = "XMLHttpRequest";
  					}

  					// Set headers
  					for ( i in headers ) {
  						xhr.setRequestHeader( i, headers[ i ] );
  					}

  					// Callback
  					callback = function( type ) {
  						return function() {
  							if ( callback ) {
  								callback = errorCallback = xhr.onload =
  									xhr.onerror = xhr.onabort = xhr.ontimeout =
  										xhr.onreadystatechange = null;

  								if ( type === "abort" ) {
  									xhr.abort();
  								} else if ( type === "error" ) {

  									// Support: IE <=9 only
  									// On a manual native abort, IE9 throws
  									// errors on any property access that is not readyState
  									if ( typeof xhr.status !== "number" ) {
  										complete( 0, "error" );
  									} else {
  										complete(

  											// File: protocol always yields status 0; see trac-8605, trac-14207
  											xhr.status,
  											xhr.statusText
  										);
  									}
  								} else {
  									complete(
  										xhrSuccessStatus[ xhr.status ] || xhr.status,
  										xhr.statusText,

  										// Support: IE <=9 only
  										// IE9 has no XHR2 but throws on binary (trac-11426)
  										// For XHR2 non-text, let the caller handle it (gh-2498)
  										( xhr.responseType || "text" ) !== "text"  ||
  										typeof xhr.responseText !== "string" ?
  											{ binary: xhr.response } :
  											{ text: xhr.responseText },
  										xhr.getAllResponseHeaders()
  									);
  								}
  							}
  						};
  					};

  					// Listen to events
  					xhr.onload = callback();
  					errorCallback = xhr.onerror = xhr.ontimeout = callback( "error" );

  					// Support: IE 9 only
  					// Use onreadystatechange to replace onabort
  					// to handle uncaught aborts
  					if ( xhr.onabort !== undefined ) {
  						xhr.onabort = errorCallback;
  					} else {
  						xhr.onreadystatechange = function() {

  							// Check readyState before timeout as it changes
  							if ( xhr.readyState === 4 ) {

  								// Allow onerror to be called first,
  								// but that will not handle a native abort
  								// Also, save errorCallback to a variable
  								// as xhr.onerror cannot be accessed
  								window.setTimeout( function() {
  									if ( callback ) {
  										errorCallback();
  									}
  								} );
  							}
  						};
  					}

  					// Create the abort callback
  					callback = callback( "abort" );

  					try {

  						// Do send the request (this may raise an exception)
  						xhr.send( options.hasContent && options.data || null );
  					} catch ( e ) {

  						// trac-14683: Only rethrow if this hasn't been notified as an error yet
  						if ( callback ) {
  							throw e;
  						}
  					}
  				},

  				abort: function() {
  					if ( callback ) {
  						callback();
  					}
  				}
  			};
  		}
  	} );




  	// Prevent auto-execution of scripts when no explicit dataType was provided (See gh-2432)
  	jQuery.ajaxPrefilter( function( s ) {
  		if ( s.crossDomain ) {
  			s.contents.script = false;
  		}
  	} );

  	// Install script dataType
  	jQuery.ajaxSetup( {
  		accepts: {
  			script: "text/javascript, application/javascript, " +
  				"application/ecmascript, application/x-ecmascript"
  		},
  		contents: {
  			script: /\b(?:java|ecma)script\b/
  		},
  		converters: {
  			"text script": function( text ) {
  				jQuery.globalEval( text );
  				return text;
  			}
  		}
  	} );

  	// Handle cache's special case and crossDomain
  	jQuery.ajaxPrefilter( "script", function( s ) {
  		if ( s.cache === undefined ) {
  			s.cache = false;
  		}
  		if ( s.crossDomain ) {
  			s.type = "GET";
  		}
  	} );

  	// Bind script tag hack transport
  	jQuery.ajaxTransport( "script", function( s ) {

  		// This transport only deals with cross domain or forced-by-attrs requests
  		if ( s.crossDomain || s.scriptAttrs ) {
  			var script, callback;
  			return {
  				send: function( _, complete ) {
  					script = jQuery( "<script>" )
  						.attr( s.scriptAttrs || {} )
  						.prop( { charset: s.scriptCharset, src: s.url } )
  						.on( "load error", callback = function( evt ) {
  							script.remove();
  							callback = null;
  							if ( evt ) {
  								complete( evt.type === "error" ? 404 : 200, evt.type );
  							}
  						} );

  					// Use native DOM manipulation to avoid our domManip AJAX trickery
  					document.head.appendChild( script[ 0 ] );
  				},
  				abort: function() {
  					if ( callback ) {
  						callback();
  					}
  				}
  			};
  		}
  	} );




  	var oldCallbacks = [],
  		rjsonp = /(=)\?(?=&|$)|\?\?/;

  	// Default jsonp settings
  	jQuery.ajaxSetup( {
  		jsonp: "callback",
  		jsonpCallback: function() {
  			var callback = oldCallbacks.pop() || ( jQuery.expando + "_" + ( nonce.guid++ ) );
  			this[ callback ] = true;
  			return callback;
  		}
  	} );

  	// Detect, normalize options and install callbacks for jsonp requests
  	jQuery.ajaxPrefilter( "json jsonp", function( s, originalSettings, jqXHR ) {

  		var callbackName, overwritten, responseContainer,
  			jsonProp = s.jsonp !== false && ( rjsonp.test( s.url ) ?
  				"url" :
  				typeof s.data === "string" &&
  					( s.contentType || "" )
  						.indexOf( "application/x-www-form-urlencoded" ) === 0 &&
  					rjsonp.test( s.data ) && "data"
  			);

  		// Handle iff the expected data type is "jsonp" or we have a parameter to set
  		if ( jsonProp || s.dataTypes[ 0 ] === "jsonp" ) {

  			// Get callback name, remembering preexisting value associated with it
  			callbackName = s.jsonpCallback = isFunction( s.jsonpCallback ) ?
  				s.jsonpCallback() :
  				s.jsonpCallback;

  			// Insert callback into url or form data
  			if ( jsonProp ) {
  				s[ jsonProp ] = s[ jsonProp ].replace( rjsonp, "$1" + callbackName );
  			} else if ( s.jsonp !== false ) {
  				s.url += ( rquery.test( s.url ) ? "&" : "?" ) + s.jsonp + "=" + callbackName;
  			}

  			// Use data converter to retrieve json after script execution
  			s.converters[ "script json" ] = function() {
  				if ( !responseContainer ) {
  					jQuery.error( callbackName + " was not called" );
  				}
  				return responseContainer[ 0 ];
  			};

  			// Force json dataType
  			s.dataTypes[ 0 ] = "json";

  			// Install callback
  			overwritten = window[ callbackName ];
  			window[ callbackName ] = function() {
  				responseContainer = arguments;
  			};

  			// Clean-up function (fires after converters)
  			jqXHR.always( function() {

  				// If previous value didn't exist - remove it
  				if ( overwritten === undefined ) {
  					jQuery( window ).removeProp( callbackName );

  				// Otherwise restore preexisting value
  				} else {
  					window[ callbackName ] = overwritten;
  				}

  				// Save back as free
  				if ( s[ callbackName ] ) {

  					// Make sure that re-using the options doesn't screw things around
  					s.jsonpCallback = originalSettings.jsonpCallback;

  					// Save the callback name for future use
  					oldCallbacks.push( callbackName );
  				}

  				// Call if it was a function and we have a response
  				if ( responseContainer && isFunction( overwritten ) ) {
  					overwritten( responseContainer[ 0 ] );
  				}

  				responseContainer = overwritten = undefined;
  			} );

  			// Delegate to script
  			return "script";
  		}
  	} );




  	// Support: Safari 8 only
  	// In Safari 8 documents created via document.implementation.createHTMLDocument
  	// collapse sibling forms: the second one becomes a child of the first one.
  	// Because of that, this security measure has to be disabled in Safari 8.
  	// https://bugs.webkit.org/show_bug.cgi?id=137337
  	support.createHTMLDocument = ( function() {
  		var body = document.implementation.createHTMLDocument( "" ).body;
  		body.innerHTML = "<form></form><form></form>";
  		return body.childNodes.length === 2;
  	} )();


  	// Argument "data" should be string of html
  	// context (optional): If specified, the fragment will be created in this context,
  	// defaults to document
  	// keepScripts (optional): If true, will include scripts passed in the html string
  	jQuery.parseHTML = function( data, context, keepScripts ) {
  		if ( typeof data !== "string" ) {
  			return [];
  		}
  		if ( typeof context === "boolean" ) {
  			keepScripts = context;
  			context = false;
  		}

  		var base, parsed, scripts;

  		if ( !context ) {

  			// Stop scripts or inline event handlers from being executed immediately
  			// by using document.implementation
  			if ( support.createHTMLDocument ) {
  				context = document.implementation.createHTMLDocument( "" );

  				// Set the base href for the created document
  				// so any parsed elements with URLs
  				// are based on the document's URL (gh-2965)
  				base = context.createElement( "base" );
  				base.href = document.location.href;
  				context.head.appendChild( base );
  			} else {
  				context = document;
  			}
  		}

  		parsed = rsingleTag.exec( data );
  		scripts = !keepScripts && [];

  		// Single tag
  		if ( parsed ) {
  			return [ context.createElement( parsed[ 1 ] ) ];
  		}

  		parsed = buildFragment( [ data ], context, scripts );

  		if ( scripts && scripts.length ) {
  			jQuery( scripts ).remove();
  		}

  		return jQuery.merge( [], parsed.childNodes );
  	};


  	/**
  	 * Load a url into a page
  	 */
  	jQuery.fn.load = function( url, params, callback ) {
  		var selector, type, response,
  			self = this,
  			off = url.indexOf( " " );

  		if ( off > -1 ) {
  			selector = stripAndCollapse( url.slice( off ) );
  			url = url.slice( 0, off );
  		}

  		// If it's a function
  		if ( isFunction( params ) ) {

  			// We assume that it's the callback
  			callback = params;
  			params = undefined;

  		// Otherwise, build a param string
  		} else if ( params && typeof params === "object" ) {
  			type = "POST";
  		}

  		// If we have elements to modify, make the request
  		if ( self.length > 0 ) {
  			jQuery.ajax( {
  				url: url,

  				// If "type" variable is undefined, then "GET" method will be used.
  				// Make value of this field explicit since
  				// user can override it through ajaxSetup method
  				type: type || "GET",
  				dataType: "html",
  				data: params
  			} ).done( function( responseText ) {

  				// Save response for use in complete callback
  				response = arguments;

  				self.html( selector ?

  					// If a selector was specified, locate the right elements in a dummy div
  					// Exclude scripts to avoid IE 'Permission Denied' errors
  					jQuery( "<div>" ).append( jQuery.parseHTML( responseText ) ).find( selector ) :

  					// Otherwise use the full result
  					responseText );

  			// If the request succeeds, this function gets "data", "status", "jqXHR"
  			// but they are ignored because response was set above.
  			// If it fails, this function gets "jqXHR", "status", "error"
  			} ).always( callback && function( jqXHR, status ) {
  				self.each( function() {
  					callback.apply( this, response || [ jqXHR.responseText, status, jqXHR ] );
  				} );
  			} );
  		}

  		return this;
  	};




  	jQuery.expr.pseudos.animated = function( elem ) {
  		return jQuery.grep( jQuery.timers, function( fn ) {
  			return elem === fn.elem;
  		} ).length;
  	};




  	jQuery.offset = {
  		setOffset: function( elem, options, i ) {
  			var curPosition, curLeft, curCSSTop, curTop, curOffset, curCSSLeft, calculatePosition,
  				position = jQuery.css( elem, "position" ),
  				curElem = jQuery( elem ),
  				props = {};

  			// Set position first, in-case top/left are set even on static elem
  			if ( position === "static" ) {
  				elem.style.position = "relative";
  			}

  			curOffset = curElem.offset();
  			curCSSTop = jQuery.css( elem, "top" );
  			curCSSLeft = jQuery.css( elem, "left" );
  			calculatePosition = ( position === "absolute" || position === "fixed" ) &&
  				( curCSSTop + curCSSLeft ).indexOf( "auto" ) > -1;

  			// Need to be able to calculate position if either
  			// top or left is auto and position is either absolute or fixed
  			if ( calculatePosition ) {
  				curPosition = curElem.position();
  				curTop = curPosition.top;
  				curLeft = curPosition.left;

  			} else {
  				curTop = parseFloat( curCSSTop ) || 0;
  				curLeft = parseFloat( curCSSLeft ) || 0;
  			}

  			if ( isFunction( options ) ) {

  				// Use jQuery.extend here to allow modification of coordinates argument (gh-1848)
  				options = options.call( elem, i, jQuery.extend( {}, curOffset ) );
  			}

  			if ( options.top != null ) {
  				props.top = ( options.top - curOffset.top ) + curTop;
  			}
  			if ( options.left != null ) {
  				props.left = ( options.left - curOffset.left ) + curLeft;
  			}

  			if ( "using" in options ) {
  				options.using.call( elem, props );

  			} else {
  				curElem.css( props );
  			}
  		}
  	};

  	jQuery.fn.extend( {

  		// offset() relates an element's border box to the document origin
  		offset: function( options ) {

  			// Preserve chaining for setter
  			if ( arguments.length ) {
  				return options === undefined ?
  					this :
  					this.each( function( i ) {
  						jQuery.offset.setOffset( this, options, i );
  					} );
  			}

  			var rect, win,
  				elem = this[ 0 ];

  			if ( !elem ) {
  				return;
  			}

  			// Return zeros for disconnected and hidden (display: none) elements (gh-2310)
  			// Support: IE <=11 only
  			// Running getBoundingClientRect on a
  			// disconnected node in IE throws an error
  			if ( !elem.getClientRects().length ) {
  				return { top: 0, left: 0 };
  			}

  			// Get document-relative position by adding viewport scroll to viewport-relative gBCR
  			rect = elem.getBoundingClientRect();
  			win = elem.ownerDocument.defaultView;
  			return {
  				top: rect.top + win.pageYOffset,
  				left: rect.left + win.pageXOffset
  			};
  		},

  		// position() relates an element's margin box to its offset parent's padding box
  		// This corresponds to the behavior of CSS absolute positioning
  		position: function() {
  			if ( !this[ 0 ] ) {
  				return;
  			}

  			var offsetParent, offset, doc,
  				elem = this[ 0 ],
  				parentOffset = { top: 0, left: 0 };

  			// position:fixed elements are offset from the viewport, which itself always has zero offset
  			if ( jQuery.css( elem, "position" ) === "fixed" ) {

  				// Assume position:fixed implies availability of getBoundingClientRect
  				offset = elem.getBoundingClientRect();

  			} else {
  				offset = this.offset();

  				// Account for the *real* offset parent, which can be the document or its root element
  				// when a statically positioned element is identified
  				doc = elem.ownerDocument;
  				offsetParent = elem.offsetParent || doc.documentElement;
  				while ( offsetParent &&
  					( offsetParent === doc.body || offsetParent === doc.documentElement ) &&
  					jQuery.css( offsetParent, "position" ) === "static" ) {

  					offsetParent = offsetParent.parentNode;
  				}
  				if ( offsetParent && offsetParent !== elem && offsetParent.nodeType === 1 ) {

  					// Incorporate borders into its offset, since they are outside its content origin
  					parentOffset = jQuery( offsetParent ).offset();
  					parentOffset.top += jQuery.css( offsetParent, "borderTopWidth", true );
  					parentOffset.left += jQuery.css( offsetParent, "borderLeftWidth", true );
  				}
  			}

  			// Subtract parent offsets and element margins
  			return {
  				top: offset.top - parentOffset.top - jQuery.css( elem, "marginTop", true ),
  				left: offset.left - parentOffset.left - jQuery.css( elem, "marginLeft", true )
  			};
  		},

  		// This method will return documentElement in the following cases:
  		// 1) For the element inside the iframe without offsetParent, this method will return
  		//    documentElement of the parent window
  		// 2) For the hidden or detached element
  		// 3) For body or html element, i.e. in case of the html node - it will return itself
  		//
  		// but those exceptions were never presented as a real life use-cases
  		// and might be considered as more preferable results.
  		//
  		// This logic, however, is not guaranteed and can change at any point in the future
  		offsetParent: function() {
  			return this.map( function() {
  				var offsetParent = this.offsetParent;

  				while ( offsetParent && jQuery.css( offsetParent, "position" ) === "static" ) {
  					offsetParent = offsetParent.offsetParent;
  				}

  				return offsetParent || documentElement;
  			} );
  		}
  	} );

  	// Create scrollLeft and scrollTop methods
  	jQuery.each( { scrollLeft: "pageXOffset", scrollTop: "pageYOffset" }, function( method, prop ) {
  		var top = "pageYOffset" === prop;

  		jQuery.fn[ method ] = function( val ) {
  			return access( this, function( elem, method, val ) {

  				// Coalesce documents and windows
  				var win;
  				if ( isWindow( elem ) ) {
  					win = elem;
  				} else if ( elem.nodeType === 9 ) {
  					win = elem.defaultView;
  				}

  				if ( val === undefined ) {
  					return win ? win[ prop ] : elem[ method ];
  				}

  				if ( win ) {
  					win.scrollTo(
  						!top ? val : win.pageXOffset,
  						top ? val : win.pageYOffset
  					);

  				} else {
  					elem[ method ] = val;
  				}
  			}, method, val, arguments.length );
  		};
  	} );

  	// Support: Safari <=7 - 9.1, Chrome <=37 - 49
  	// Add the top/left cssHooks using jQuery.fn.position
  	// Webkit bug: https://bugs.webkit.org/show_bug.cgi?id=29084
  	// Blink bug: https://bugs.chromium.org/p/chromium/issues/detail?id=589347
  	// getComputedStyle returns percent when specified for top/left/bottom/right;
  	// rather than make the css module depend on the offset module, just check for it here
  	jQuery.each( [ "top", "left" ], function( _i, prop ) {
  		jQuery.cssHooks[ prop ] = addGetHookIf( support.pixelPosition,
  			function( elem, computed ) {
  				if ( computed ) {
  					computed = curCSS( elem, prop );

  					// If curCSS returns percentage, fallback to offset
  					return rnumnonpx.test( computed ) ?
  						jQuery( elem ).position()[ prop ] + "px" :
  						computed;
  				}
  			}
  		);
  	} );


  	// Create innerHeight, innerWidth, height, width, outerHeight and outerWidth methods
  	jQuery.each( { Height: "height", Width: "width" }, function( name, type ) {
  		jQuery.each( {
  			padding: "inner" + name,
  			content: type,
  			"": "outer" + name
  		}, function( defaultExtra, funcName ) {

  			// Margin is only for outerHeight, outerWidth
  			jQuery.fn[ funcName ] = function( margin, value ) {
  				var chainable = arguments.length && ( defaultExtra || typeof margin !== "boolean" ),
  					extra = defaultExtra || ( margin === true || value === true ? "margin" : "border" );

  				return access( this, function( elem, type, value ) {
  					var doc;

  					if ( isWindow( elem ) ) {

  						// $( window ).outerWidth/Height return w/h including scrollbars (gh-1729)
  						return funcName.indexOf( "outer" ) === 0 ?
  							elem[ "inner" + name ] :
  							elem.document.documentElement[ "client" + name ];
  					}

  					// Get document width or height
  					if ( elem.nodeType === 9 ) {
  						doc = elem.documentElement;

  						// Either scroll[Width/Height] or offset[Width/Height] or client[Width/Height],
  						// whichever is greatest
  						return Math.max(
  							elem.body[ "scroll" + name ], doc[ "scroll" + name ],
  							elem.body[ "offset" + name ], doc[ "offset" + name ],
  							doc[ "client" + name ]
  						);
  					}

  					return value === undefined ?

  						// Get width or height on the element, requesting but not forcing parseFloat
  						jQuery.css( elem, type, extra ) :

  						// Set width or height on the element
  						jQuery.style( elem, type, value, extra );
  				}, type, chainable ? margin : undefined, chainable );
  			};
  		} );
  	} );


  	jQuery.each( [
  		"ajaxStart",
  		"ajaxStop",
  		"ajaxComplete",
  		"ajaxError",
  		"ajaxSuccess",
  		"ajaxSend"
  	], function( _i, type ) {
  		jQuery.fn[ type ] = function( fn ) {
  			return this.on( type, fn );
  		};
  	} );




  	jQuery.fn.extend( {

  		bind: function( types, data, fn ) {
  			return this.on( types, null, data, fn );
  		},
  		unbind: function( types, fn ) {
  			return this.off( types, null, fn );
  		},

  		delegate: function( selector, types, data, fn ) {
  			return this.on( types, selector, data, fn );
  		},
  		undelegate: function( selector, types, fn ) {

  			// ( namespace ) or ( selector, types [, fn] )
  			return arguments.length === 1 ?
  				this.off( selector, "**" ) :
  				this.off( types, selector || "**", fn );
  		},

  		hover: function( fnOver, fnOut ) {
  			return this
  				.on( "mouseenter", fnOver )
  				.on( "mouseleave", fnOut || fnOver );
  		}
  	} );

  	jQuery.each(
  		( "blur focus focusin focusout resize scroll click dblclick " +
  		"mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave " +
  		"change select submit keydown keypress keyup contextmenu" ).split( " " ),
  		function( _i, name ) {

  			// Handle event binding
  			jQuery.fn[ name ] = function( data, fn ) {
  				return arguments.length > 0 ?
  					this.on( name, null, data, fn ) :
  					this.trigger( name );
  			};
  		}
  	);




  	// Support: Android <=4.0 only
  	// Make sure we trim BOM and NBSP
  	// Require that the "whitespace run" starts from a non-whitespace
  	// to avoid O(N^2) behavior when the engine would try matching "\s+$" at each space position.
  	var rtrim = /^[\s\uFEFF\xA0]+|([^\s\uFEFF\xA0])[\s\uFEFF\xA0]+$/g;

  	// Bind a function to a context, optionally partially applying any
  	// arguments.
  	// jQuery.proxy is deprecated to promote standards (specifically Function#bind)
  	// However, it is not slated for removal any time soon
  	jQuery.proxy = function( fn, context ) {
  		var tmp, args, proxy;

  		if ( typeof context === "string" ) {
  			tmp = fn[ context ];
  			context = fn;
  			fn = tmp;
  		}

  		// Quick check to determine if target is callable, in the spec
  		// this throws a TypeError, but we will just return undefined.
  		if ( !isFunction( fn ) ) {
  			return undefined;
  		}

  		// Simulated bind
  		args = slice.call( arguments, 2 );
  		proxy = function() {
  			return fn.apply( context || this, args.concat( slice.call( arguments ) ) );
  		};

  		// Set the guid of unique handler to the same of original handler, so it can be removed
  		proxy.guid = fn.guid = fn.guid || jQuery.guid++;

  		return proxy;
  	};

  	jQuery.holdReady = function( hold ) {
  		if ( hold ) {
  			jQuery.readyWait++;
  		} else {
  			jQuery.ready( true );
  		}
  	};
  	jQuery.isArray = Array.isArray;
  	jQuery.parseJSON = JSON.parse;
  	jQuery.nodeName = nodeName;
  	jQuery.isFunction = isFunction;
  	jQuery.isWindow = isWindow;
  	jQuery.camelCase = camelCase;
  	jQuery.type = toType;

  	jQuery.now = Date.now;

  	jQuery.isNumeric = function( obj ) {

  		// As of jQuery 3.0, isNumeric is limited to
  		// strings and numbers (primitives or objects)
  		// that can be coerced to finite numbers (gh-2662)
  		var type = jQuery.type( obj );
  		return ( type === "number" || type === "string" ) &&

  			// parseFloat NaNs numeric-cast false positives ("")
  			// ...but misinterprets leading-number strings, particularly hex literals ("0x...")
  			// subtraction forces infinities to NaN
  			!isNaN( obj - parseFloat( obj ) );
  	};

  	jQuery.trim = function( text ) {
  		return text == null ?
  			"" :
  			( text + "" ).replace( rtrim, "$1" );
  	};




  	var

  		// Map over jQuery in case of overwrite
  		_jQuery = window.jQuery,

  		// Map over the $ in case of overwrite
  		_$ = window.$;

  	jQuery.noConflict = function( deep ) {
  		if ( window.$ === jQuery ) {
  			window.$ = _$;
  		}

  		if ( deep && window.jQuery === jQuery ) {
  			window.jQuery = _jQuery;
  		}

  		return jQuery;
  	};

  	// Expose jQuery and $ identifiers, even in AMD
  	// (trac-7102#comment:10, https://github.com/jquery/jquery/pull/557)
  	// and CommonJS for browser emulators (trac-13566)
  	if ( typeof noGlobal === "undefined" ) {
  		window.jQuery = window.$ = jQuery;
  	}




  	return jQuery;
  	} ); 
  } (jquery$1));

  var jqueryExports = jquery$1.exports;
  var jquery = /*@__PURE__*/getDefaultExportFromCjs(jqueryExports);

  window.jQuery = window.$ = jquery;

  /*! jQuery UI - v1.14.0 - 2024-08-05
  * https://jqueryui.com
  * Includes: widget.js, position.js, data.js, disable-selection.js, effect.js, effects/effect-blind.js, effects/effect-bounce.js, effects/effect-clip.js, effects/effect-drop.js, effects/effect-explode.js, effects/effect-fade.js, effects/effect-fold.js, effects/effect-highlight.js, effects/effect-puff.js, effects/effect-pulsate.js, effects/effect-scale.js, effects/effect-shake.js, effects/effect-size.js, effects/effect-slide.js, effects/effect-transfer.js, focusable.js, form-reset-mixin.js, jquery-patch.js, keycode.js, labels.js, scroll-parent.js, tabbable.js, unique-id.js, widgets/accordion.js, widgets/autocomplete.js, widgets/button.js, widgets/checkboxradio.js, widgets/controlgroup.js, widgets/datepicker.js, widgets/dialog.js, widgets/draggable.js, widgets/droppable.js, widgets/menu.js, widgets/mouse.js, widgets/progressbar.js, widgets/resizable.js, widgets/selectable.js, widgets/selectmenu.js, widgets/slider.js, widgets/sortable.js, widgets/spinner.js, widgets/tabs.js, widgets/tooltip.js
  * Copyright OpenJS Foundation and other contributors; Licensed MIT */

  ( function( factory ) {

  	if ( typeof define === "function" && define.amd ) {

  		// AMD. Register as an anonymous module.
  		define( [ "jquery" ], factory );
  	} else {

  		// Browser globals
  		factory( jQuery );
  	}
  } )( function( $ ) {

  $.ui = $.ui || {};

  $.ui.version = "1.14.0";


  /*!
   * jQuery UI Widget 1.14.0
   * https://jqueryui.com
   *
   * Copyright OpenJS Foundation and other contributors
   * Released under the MIT license.
   * https://jquery.org/license
   */

  //>>label: Widget
  //>>group: Core
  //>>description: Provides a factory for creating stateful widgets with a common API.
  //>>docs: https://api.jqueryui.com/jQuery.widget/
  //>>demos: https://jqueryui.com/widget/


  var widgetUuid = 0;
  var widgetHasOwnProperty = Array.prototype.hasOwnProperty;
  var widgetSlice = Array.prototype.slice;

  $.cleanData = ( function( orig ) {
  	return function( elems ) {
  		var events, elem, i;
  		for ( i = 0; ( elem = elems[ i ] ) != null; i++ ) {

  			// Only trigger remove when necessary to save time
  			events = $._data( elem, "events" );
  			if ( events && events.remove ) {
  				$( elem ).triggerHandler( "remove" );
  			}
  		}
  		orig( elems );
  	};
  } )( $.cleanData );

  $.widget = function( name, base, prototype ) {
  	var existingConstructor, constructor, basePrototype;

  	// ProxiedPrototype allows the provided prototype to remain unmodified
  	// so that it can be used as a mixin for multiple widgets (#8876)
  	var proxiedPrototype = {};

  	var namespace = name.split( "." )[ 0 ];
  	name = name.split( "." )[ 1 ];
  	var fullName = namespace + "-" + name;

  	if ( !prototype ) {
  		prototype = base;
  		base = $.Widget;
  	}

  	if ( Array.isArray( prototype ) ) {
  		prototype = $.extend.apply( null, [ {} ].concat( prototype ) );
  	}

  	// Create selector for plugin
  	$.expr.pseudos[ fullName.toLowerCase() ] = function( elem ) {
  		return !!$.data( elem, fullName );
  	};

  	$[ namespace ] = $[ namespace ] || {};
  	existingConstructor = $[ namespace ][ name ];
  	constructor = $[ namespace ][ name ] = function( options, element ) {

  		// Allow instantiation without "new" keyword
  		if ( !this || !this._createWidget ) {
  			return new constructor( options, element );
  		}

  		// Allow instantiation without initializing for simple inheritance
  		// must use "new" keyword (the code above always passes args)
  		if ( arguments.length ) {
  			this._createWidget( options, element );
  		}
  	};

  	// Extend with the existing constructor to carry over any static properties
  	$.extend( constructor, existingConstructor, {
  		version: prototype.version,

  		// Copy the object used to create the prototype in case we need to
  		// redefine the widget later
  		_proto: $.extend( {}, prototype ),

  		// Track widgets that inherit from this widget in case this widget is
  		// redefined after a widget inherits from it
  		_childConstructors: []
  	} );

  	basePrototype = new base();

  	// We need to make the options hash a property directly on the new instance
  	// otherwise we'll modify the options hash on the prototype that we're
  	// inheriting from
  	basePrototype.options = $.widget.extend( {}, basePrototype.options );
  	$.each( prototype, function( prop, value ) {
  		if ( typeof value !== "function" ) {
  			proxiedPrototype[ prop ] = value;
  			return;
  		}
  		proxiedPrototype[ prop ] = ( function() {
  			function _super() {
  				return base.prototype[ prop ].apply( this, arguments );
  			}

  			function _superApply( args ) {
  				return base.prototype[ prop ].apply( this, args );
  			}

  			return function() {
  				var __super = this._super;
  				var __superApply = this._superApply;
  				var returnValue;

  				this._super = _super;
  				this._superApply = _superApply;

  				returnValue = value.apply( this, arguments );

  				this._super = __super;
  				this._superApply = __superApply;

  				return returnValue;
  			};
  		} )();
  	} );
  	constructor.prototype = $.widget.extend( basePrototype, {

  		// TODO: remove support for widgetEventPrefix
  		// always use the name + a colon as the prefix, e.g., draggable:start
  		// don't prefix for widgets that aren't DOM-based
  		widgetEventPrefix: existingConstructor ? ( basePrototype.widgetEventPrefix || name ) : name
  	}, proxiedPrototype, {
  		constructor: constructor,
  		namespace: namespace,
  		widgetName: name,
  		widgetFullName: fullName
  	} );

  	// If this widget is being redefined then we need to find all widgets that
  	// are inheriting from it and redefine all of them so that they inherit from
  	// the new version of this widget. We're essentially trying to replace one
  	// level in the prototype chain.
  	if ( existingConstructor ) {
  		$.each( existingConstructor._childConstructors, function( i, child ) {
  			var childPrototype = child.prototype;

  			// Redefine the child widget using the same prototype that was
  			// originally used, but inherit from the new version of the base
  			$.widget( childPrototype.namespace + "." + childPrototype.widgetName, constructor,
  				child._proto );
  		} );

  		// Remove the list of existing child constructors from the old constructor
  		// so the old child constructors can be garbage collected
  		delete existingConstructor._childConstructors;
  	} else {
  		base._childConstructors.push( constructor );
  	}

  	$.widget.bridge( name, constructor );

  	return constructor;
  };

  $.widget.extend = function( target ) {
  	var input = widgetSlice.call( arguments, 1 );
  	var inputIndex = 0;
  	var inputLength = input.length;
  	var key;
  	var value;

  	for ( ; inputIndex < inputLength; inputIndex++ ) {
  		for ( key in input[ inputIndex ] ) {
  			value = input[ inputIndex ][ key ];
  			if ( widgetHasOwnProperty.call( input[ inputIndex ], key ) && value !== undefined ) {

  				// Clone objects
  				if ( $.isPlainObject( value ) ) {
  					target[ key ] = $.isPlainObject( target[ key ] ) ?
  						$.widget.extend( {}, target[ key ], value ) :

  						// Don't extend strings, arrays, etc. with objects
  						$.widget.extend( {}, value );

  				// Copy everything else by reference
  				} else {
  					target[ key ] = value;
  				}
  			}
  		}
  	}
  	return target;
  };

  $.widget.bridge = function( name, object ) {
  	var fullName = object.prototype.widgetFullName || name;
  	$.fn[ name ] = function( options ) {
  		var isMethodCall = typeof options === "string";
  		var args = widgetSlice.call( arguments, 1 );
  		var returnValue = this;

  		if ( isMethodCall ) {

  			// If this is an empty collection, we need to have the instance method
  			// return undefined instead of the jQuery instance
  			if ( !this.length && options === "instance" ) {
  				returnValue = undefined;
  			} else {
  				this.each( function() {
  					var methodValue;
  					var instance = $.data( this, fullName );

  					if ( options === "instance" ) {
  						returnValue = instance;
  						return false;
  					}

  					if ( !instance ) {
  						return $.error( "cannot call methods on " + name +
  							" prior to initialization; " +
  							"attempted to call method '" + options + "'" );
  					}

  					if ( typeof instance[ options ] !== "function" ||
  						options.charAt( 0 ) === "_" ) {
  						return $.error( "no such method '" + options + "' for " + name +
  							" widget instance" );
  					}

  					methodValue = instance[ options ].apply( instance, args );

  					if ( methodValue !== instance && methodValue !== undefined ) {
  						returnValue = methodValue && methodValue.jquery ?
  							returnValue.pushStack( methodValue.get() ) :
  							methodValue;
  						return false;
  					}
  				} );
  			}
  		} else {

  			// Allow multiple hashes to be passed on init
  			if ( args.length ) {
  				options = $.widget.extend.apply( null, [ options ].concat( args ) );
  			}

  			this.each( function() {
  				var instance = $.data( this, fullName );
  				if ( instance ) {
  					instance.option( options || {} );
  					if ( instance._init ) {
  						instance._init();
  					}
  				} else {
  					$.data( this, fullName, new object( options, this ) );
  				}
  			} );
  		}

  		return returnValue;
  	};
  };

  $.Widget = function( /* options, element */ ) {};
  $.Widget._childConstructors = [];

  $.Widget.prototype = {
  	widgetName: "widget",
  	widgetEventPrefix: "",
  	defaultElement: "<div>",

  	options: {
  		classes: {},
  		disabled: false,

  		// Callbacks
  		create: null
  	},

  	_createWidget: function( options, element ) {
  		element = $( element || this.defaultElement || this )[ 0 ];
  		this.element = $( element );
  		this.uuid = widgetUuid++;
  		this.eventNamespace = "." + this.widgetName + this.uuid;

  		this.bindings = $();
  		this.hoverable = $();
  		this.focusable = $();
  		this.classesElementLookup = {};

  		if ( element !== this ) {
  			$.data( element, this.widgetFullName, this );
  			this._on( true, this.element, {
  				remove: function( event ) {
  					if ( event.target === element ) {
  						this.destroy();
  					}
  				}
  			} );
  			this.document = $( element.style ?

  				// Element within the document
  				element.ownerDocument :

  				// Element is window or document
  				element.document || element );
  			this.window = $( this.document[ 0 ].defaultView || this.document[ 0 ].parentWindow );
  		}

  		this.options = $.widget.extend( {},
  			this.options,
  			this._getCreateOptions(),
  			options );

  		this._create();

  		if ( this.options.disabled ) {
  			this._setOptionDisabled( this.options.disabled );
  		}

  		this._trigger( "create", null, this._getCreateEventData() );
  		this._init();
  	},

  	_getCreateOptions: function() {
  		return {};
  	},

  	_getCreateEventData: $.noop,

  	_create: $.noop,

  	_init: $.noop,

  	destroy: function() {
  		var that = this;

  		this._destroy();
  		$.each( this.classesElementLookup, function( key, value ) {
  			that._removeClass( value, key );
  		} );

  		// We can probably remove the unbind calls in 2.0
  		// all event bindings should go through this._on()
  		this.element
  			.off( this.eventNamespace )
  			.removeData( this.widgetFullName );
  		this.widget()
  			.off( this.eventNamespace )
  			.removeAttr( "aria-disabled" );

  		// Clean up events and states
  		this.bindings.off( this.eventNamespace );
  	},

  	_destroy: $.noop,

  	widget: function() {
  		return this.element;
  	},

  	option: function( key, value ) {
  		var options = key;
  		var parts;
  		var curOption;
  		var i;

  		if ( arguments.length === 0 ) {

  			// Don't return a reference to the internal hash
  			return $.widget.extend( {}, this.options );
  		}

  		if ( typeof key === "string" ) {

  			// Handle nested keys, e.g., "foo.bar" => { foo: { bar: ___ } }
  			options = {};
  			parts = key.split( "." );
  			key = parts.shift();
  			if ( parts.length ) {
  				curOption = options[ key ] = $.widget.extend( {}, this.options[ key ] );
  				for ( i = 0; i < parts.length - 1; i++ ) {
  					curOption[ parts[ i ] ] = curOption[ parts[ i ] ] || {};
  					curOption = curOption[ parts[ i ] ];
  				}
  				key = parts.pop();
  				if ( arguments.length === 1 ) {
  					return curOption[ key ] === undefined ? null : curOption[ key ];
  				}
  				curOption[ key ] = value;
  			} else {
  				if ( arguments.length === 1 ) {
  					return this.options[ key ] === undefined ? null : this.options[ key ];
  				}
  				options[ key ] = value;
  			}
  		}

  		this._setOptions( options );

  		return this;
  	},

  	_setOptions: function( options ) {
  		var key;

  		for ( key in options ) {
  			this._setOption( key, options[ key ] );
  		}

  		return this;
  	},

  	_setOption: function( key, value ) {
  		if ( key === "classes" ) {
  			this._setOptionClasses( value );
  		}

  		this.options[ key ] = value;

  		if ( key === "disabled" ) {
  			this._setOptionDisabled( value );
  		}

  		return this;
  	},

  	_setOptionClasses: function( value ) {
  		var classKey, elements, currentElements;

  		for ( classKey in value ) {
  			currentElements = this.classesElementLookup[ classKey ];
  			if ( value[ classKey ] === this.options.classes[ classKey ] ||
  					!currentElements ||
  					!currentElements.length ) {
  				continue;
  			}

  			// We are doing this to create a new jQuery object because the _removeClass() call
  			// on the next line is going to destroy the reference to the current elements being
  			// tracked. We need to save a copy of this collection so that we can add the new classes
  			// below.
  			elements = $( currentElements.get() );
  			this._removeClass( currentElements, classKey );

  			// We don't use _addClass() here, because that uses this.options.classes
  			// for generating the string of classes. We want to use the value passed in from
  			// _setOption(), this is the new value of the classes option which was passed to
  			// _setOption(). We pass this value directly to _classes().
  			elements.addClass( this._classes( {
  				element: elements,
  				keys: classKey,
  				classes: value,
  				add: true
  			} ) );
  		}
  	},

  	_setOptionDisabled: function( value ) {
  		this._toggleClass( this.widget(), this.widgetFullName + "-disabled", null, !!value );

  		// If the widget is becoming disabled, then nothing is interactive
  		if ( value ) {
  			this._removeClass( this.hoverable, null, "ui-state-hover" );
  			this._removeClass( this.focusable, null, "ui-state-focus" );
  		}
  	},

  	enable: function() {
  		return this._setOptions( { disabled: false } );
  	},

  	disable: function() {
  		return this._setOptions( { disabled: true } );
  	},

  	_classes: function( options ) {
  		var full = [];
  		var that = this;

  		options = $.extend( {
  			element: this.element,
  			classes: this.options.classes || {}
  		}, options );

  		function bindRemoveEvent() {
  			var nodesToBind = [];

  			options.element.each( function( _, element ) {
  				var isTracked = $.map( that.classesElementLookup, function( elements ) {
  					return elements;
  				} )
  					.some( function( elements ) {
  						return elements.is( element );
  					} );

  				if ( !isTracked ) {
  					nodesToBind.push( element );
  				}
  			} );

  			that._on( $( nodesToBind ), {
  				remove: "_untrackClassesElement"
  			} );
  		}

  		function processClassString( classes, checkOption ) {
  			var current, i;
  			for ( i = 0; i < classes.length; i++ ) {
  				current = that.classesElementLookup[ classes[ i ] ] || $();
  				if ( options.add ) {
  					bindRemoveEvent();
  					current = $( $.uniqueSort( current.get().concat( options.element.get() ) ) );
  				} else {
  					current = $( current.not( options.element ).get() );
  				}
  				that.classesElementLookup[ classes[ i ] ] = current;
  				full.push( classes[ i ] );
  				if ( checkOption && options.classes[ classes[ i ] ] ) {
  					full.push( options.classes[ classes[ i ] ] );
  				}
  			}
  		}

  		if ( options.keys ) {
  			processClassString( options.keys.match( /\S+/g ) || [], true );
  		}
  		if ( options.extra ) {
  			processClassString( options.extra.match( /\S+/g ) || [] );
  		}

  		return full.join( " " );
  	},

  	_untrackClassesElement: function( event ) {
  		var that = this;
  		$.each( that.classesElementLookup, function( key, value ) {
  			if ( $.inArray( event.target, value ) !== -1 ) {
  				that.classesElementLookup[ key ] = $( value.not( event.target ).get() );
  			}
  		} );

  		this._off( $( event.target ) );
  	},

  	_removeClass: function( element, keys, extra ) {
  		return this._toggleClass( element, keys, extra, false );
  	},

  	_addClass: function( element, keys, extra ) {
  		return this._toggleClass( element, keys, extra, true );
  	},

  	_toggleClass: function( element, keys, extra, add ) {
  		add = ( typeof add === "boolean" ) ? add : extra;
  		var shift = ( typeof element === "string" || element === null ),
  			options = {
  				extra: shift ? keys : extra,
  				keys: shift ? element : keys,
  				element: shift ? this.element : element,
  				add: add
  			};
  		options.element.toggleClass( this._classes( options ), add );
  		return this;
  	},

  	_on: function( suppressDisabledCheck, element, handlers ) {
  		var delegateElement;
  		var instance = this;

  		// No suppressDisabledCheck flag, shuffle arguments
  		if ( typeof suppressDisabledCheck !== "boolean" ) {
  			handlers = element;
  			element = suppressDisabledCheck;
  			suppressDisabledCheck = false;
  		}

  		// No element argument, shuffle and use this.element
  		if ( !handlers ) {
  			handlers = element;
  			element = this.element;
  			delegateElement = this.widget();
  		} else {
  			element = delegateElement = $( element );
  			this.bindings = this.bindings.add( element );
  		}

  		$.each( handlers, function( event, handler ) {
  			function handlerProxy() {

  				// Allow widgets to customize the disabled handling
  				// - disabled as an array instead of boolean
  				// - disabled class as method for disabling individual parts
  				if ( !suppressDisabledCheck &&
  						( instance.options.disabled === true ||
  						$( this ).hasClass( "ui-state-disabled" ) ) ) {
  					return;
  				}
  				return ( typeof handler === "string" ? instance[ handler ] : handler )
  					.apply( instance, arguments );
  			}

  			// Copy the guid so direct unbinding works
  			if ( typeof handler !== "string" ) {
  				handlerProxy.guid = handler.guid =
  					handler.guid || handlerProxy.guid || $.guid++;
  			}

  			var match = event.match( /^([\w:-]*)\s*(.*)$/ );
  			var eventName = match[ 1 ] + instance.eventNamespace;
  			var selector = match[ 2 ];

  			if ( selector ) {
  				delegateElement.on( eventName, selector, handlerProxy );
  			} else {
  				element.on( eventName, handlerProxy );
  			}
  		} );
  	},

  	_off: function( element, eventName ) {
  		eventName = ( eventName || "" ).split( " " ).join( this.eventNamespace + " " ) +
  			this.eventNamespace;
  		element.off( eventName );

  		// Clear the stack to avoid memory leaks (#10056)
  		this.bindings = $( this.bindings.not( element ).get() );
  		this.focusable = $( this.focusable.not( element ).get() );
  		this.hoverable = $( this.hoverable.not( element ).get() );
  	},

  	_delay: function( handler, delay ) {
  		function handlerProxy() {
  			return ( typeof handler === "string" ? instance[ handler ] : handler )
  				.apply( instance, arguments );
  		}
  		var instance = this;
  		return setTimeout( handlerProxy, delay || 0 );
  	},

  	_hoverable: function( element ) {
  		this.hoverable = this.hoverable.add( element );
  		this._on( element, {
  			mouseenter: function( event ) {
  				this._addClass( $( event.currentTarget ), null, "ui-state-hover" );
  			},
  			mouseleave: function( event ) {
  				this._removeClass( $( event.currentTarget ), null, "ui-state-hover" );
  			}
  		} );
  	},

  	_focusable: function( element ) {
  		this.focusable = this.focusable.add( element );
  		this._on( element, {
  			focusin: function( event ) {
  				this._addClass( $( event.currentTarget ), null, "ui-state-focus" );
  			},
  			focusout: function( event ) {
  				this._removeClass( $( event.currentTarget ), null, "ui-state-focus" );
  			}
  		} );
  	},

  	_trigger: function( type, event, data ) {
  		var prop, orig;
  		var callback = this.options[ type ];

  		data = data || {};
  		event = $.Event( event );
  		event.type = ( type === this.widgetEventPrefix ?
  			type :
  			this.widgetEventPrefix + type ).toLowerCase();

  		// The original event may come from any element
  		// so we need to reset the target on the new event
  		event.target = this.element[ 0 ];

  		// Copy original event properties over to the new event
  		orig = event.originalEvent;
  		if ( orig ) {
  			for ( prop in orig ) {
  				if ( !( prop in event ) ) {
  					event[ prop ] = orig[ prop ];
  				}
  			}
  		}

  		this.element.trigger( event, data );
  		return !( typeof callback === "function" &&
  			callback.apply( this.element[ 0 ], [ event ].concat( data ) ) === false ||
  			event.isDefaultPrevented() );
  	}
  };

  $.each( { show: "fadeIn", hide: "fadeOut" }, function( method, defaultEffect ) {
  	$.Widget.prototype[ "_" + method ] = function( element, options, callback ) {
  		if ( typeof options === "string" ) {
  			options = { effect: options };
  		}

  		var hasOptions;
  		var effectName = !options ?
  			method :
  			options === true || typeof options === "number" ?
  				defaultEffect :
  				options.effect || defaultEffect;

  		options = options || {};
  		if ( typeof options === "number" ) {
  			options = { duration: options };
  		} else if ( options === true ) {
  			options = {};
  		}

  		hasOptions = !$.isEmptyObject( options );
  		options.complete = callback;

  		if ( options.delay ) {
  			element.delay( options.delay );
  		}

  		if ( hasOptions && $.effects && $.effects.effect[ effectName ] ) {
  			element[ method ]( options );
  		} else if ( effectName !== method && element[ effectName ] ) {
  			element[ effectName ]( options.duration, options.easing, callback );
  		} else {
  			element.queue( function( next ) {
  				$( this )[ method ]();
  				if ( callback ) {
  					callback.call( element[ 0 ] );
  				}
  				next();
  			} );
  		}
  	};
  } );

  $.widget;


  /*!
   * jQuery UI Position 1.14.0
   * https://jqueryui.com
   *
   * Copyright OpenJS Foundation and other contributors
   * Released under the MIT license.
   * https://jquery.org/license
   *
   * https://api.jqueryui.com/position/
   */

  //>>label: Position
  //>>group: Core
  //>>description: Positions elements relative to other elements.
  //>>docs: https://api.jqueryui.com/position/
  //>>demos: https://jqueryui.com/position/


  ( function() {
  var cachedScrollbarWidth,
  	max = Math.max,
  	abs = Math.abs,
  	rhorizontal = /left|center|right/,
  	rvertical = /top|center|bottom/,
  	roffset = /[\+\-]\d+(\.[\d]+)?%?/,
  	rposition = /^\w+/,
  	rpercent = /%$/,
  	_position = $.fn.position;

  function getOffsets( offsets, width, height ) {
  	return [
  		parseFloat( offsets[ 0 ] ) * ( rpercent.test( offsets[ 0 ] ) ? width / 100 : 1 ),
  		parseFloat( offsets[ 1 ] ) * ( rpercent.test( offsets[ 1 ] ) ? height / 100 : 1 )
  	];
  }

  function parseCss( element, property ) {
  	return parseInt( $.css( element, property ), 10 ) || 0;
  }

  function isWindow( obj ) {
  	return obj != null && obj === obj.window;
  }

  function getDimensions( elem ) {
  	var raw = elem[ 0 ];
  	if ( raw.nodeType === 9 ) {
  		return {
  			width: elem.width(),
  			height: elem.height(),
  			offset: { top: 0, left: 0 }
  		};
  	}
  	if ( isWindow( raw ) ) {
  		return {
  			width: elem.width(),
  			height: elem.height(),
  			offset: { top: elem.scrollTop(), left: elem.scrollLeft() }
  		};
  	}
  	if ( raw.preventDefault ) {
  		return {
  			width: 0,
  			height: 0,
  			offset: { top: raw.pageY, left: raw.pageX }
  		};
  	}
  	return {
  		width: elem.outerWidth(),
  		height: elem.outerHeight(),
  		offset: elem.offset()
  	};
  }

  $.position = {
  	scrollbarWidth: function() {
  		if ( cachedScrollbarWidth !== undefined ) {
  			return cachedScrollbarWidth;
  		}
  		var w1, w2,
  			div = $( "<div style=" +
  				"'display:block;position:absolute;width:200px;height:200px;overflow:hidden;'>" +
  				"<div style='height:300px;width:auto;'></div></div>" ),
  			innerDiv = div.children()[ 0 ];

  		$( "body" ).append( div );
  		w1 = innerDiv.offsetWidth;
  		div.css( "overflow", "scroll" );

  		w2 = innerDiv.offsetWidth;

  		if ( w1 === w2 ) {
  			w2 = div[ 0 ].clientWidth;
  		}

  		div.remove();

  		return ( cachedScrollbarWidth = w1 - w2 );
  	},
  	getScrollInfo: function( within ) {
  		var overflowX = within.isWindow || within.isDocument ? "" :
  				within.element.css( "overflow-x" ),
  			overflowY = within.isWindow || within.isDocument ? "" :
  				within.element.css( "overflow-y" ),
  			hasOverflowX = overflowX === "scroll" ||
  				( overflowX === "auto" && within.width < within.element[ 0 ].scrollWidth ),
  			hasOverflowY = overflowY === "scroll" ||
  				( overflowY === "auto" && within.height < within.element[ 0 ].scrollHeight );
  		return {
  			width: hasOverflowY ? $.position.scrollbarWidth() : 0,
  			height: hasOverflowX ? $.position.scrollbarWidth() : 0
  		};
  	},
  	getWithinInfo: function( element ) {
  		var withinElement = $( element || window ),
  			isElemWindow = isWindow( withinElement[ 0 ] ),
  			isDocument = !!withinElement[ 0 ] && withinElement[ 0 ].nodeType === 9,
  			hasOffset = !isElemWindow && !isDocument;
  		return {
  			element: withinElement,
  			isWindow: isElemWindow,
  			isDocument: isDocument,
  			offset: hasOffset ? $( element ).offset() : { left: 0, top: 0 },
  			scrollLeft: withinElement.scrollLeft(),
  			scrollTop: withinElement.scrollTop(),
  			width: withinElement.outerWidth(),
  			height: withinElement.outerHeight()
  		};
  	}
  };

  $.fn.position = function( options ) {
  	if ( !options || !options.of ) {
  		return _position.apply( this, arguments );
  	}

  	// Make a copy, we don't want to modify arguments
  	options = $.extend( {}, options );

  	var atOffset, targetWidth, targetHeight, targetOffset, basePosition, dimensions,

  		// Make sure string options are treated as CSS selectors
  		target = typeof options.of === "string" ?
  			$( document ).find( options.of ) :
  			$( options.of ),

  		within = $.position.getWithinInfo( options.within ),
  		scrollInfo = $.position.getScrollInfo( within ),
  		collision = ( options.collision || "flip" ).split( " " ),
  		offsets = {};

  	dimensions = getDimensions( target );
  	if ( target[ 0 ].preventDefault ) {

  		// Force left top to allow flipping
  		options.at = "left top";
  	}
  	targetWidth = dimensions.width;
  	targetHeight = dimensions.height;
  	targetOffset = dimensions.offset;

  	// Clone to reuse original targetOffset later
  	basePosition = $.extend( {}, targetOffset );

  	// Force my and at to have valid horizontal and vertical positions
  	// if a value is missing or invalid, it will be converted to center
  	$.each( [ "my", "at" ], function() {
  		var pos = ( options[ this ] || "" ).split( " " ),
  			horizontalOffset,
  			verticalOffset;

  		if ( pos.length === 1 ) {
  			pos = rhorizontal.test( pos[ 0 ] ) ?
  				pos.concat( [ "center" ] ) :
  				rvertical.test( pos[ 0 ] ) ?
  					[ "center" ].concat( pos ) :
  					[ "center", "center" ];
  		}
  		pos[ 0 ] = rhorizontal.test( pos[ 0 ] ) ? pos[ 0 ] : "center";
  		pos[ 1 ] = rvertical.test( pos[ 1 ] ) ? pos[ 1 ] : "center";

  		// Calculate offsets
  		horizontalOffset = roffset.exec( pos[ 0 ] );
  		verticalOffset = roffset.exec( pos[ 1 ] );
  		offsets[ this ] = [
  			horizontalOffset ? horizontalOffset[ 0 ] : 0,
  			verticalOffset ? verticalOffset[ 0 ] : 0
  		];

  		// Reduce to just the positions without the offsets
  		options[ this ] = [
  			rposition.exec( pos[ 0 ] )[ 0 ],
  			rposition.exec( pos[ 1 ] )[ 0 ]
  		];
  	} );

  	// Normalize collision option
  	if ( collision.length === 1 ) {
  		collision[ 1 ] = collision[ 0 ];
  	}

  	if ( options.at[ 0 ] === "right" ) {
  		basePosition.left += targetWidth;
  	} else if ( options.at[ 0 ] === "center" ) {
  		basePosition.left += targetWidth / 2;
  	}

  	if ( options.at[ 1 ] === "bottom" ) {
  		basePosition.top += targetHeight;
  	} else if ( options.at[ 1 ] === "center" ) {
  		basePosition.top += targetHeight / 2;
  	}

  	atOffset = getOffsets( offsets.at, targetWidth, targetHeight );
  	basePosition.left += atOffset[ 0 ];
  	basePosition.top += atOffset[ 1 ];

  	return this.each( function() {
  		var collisionPosition, using,
  			elem = $( this ),
  			elemWidth = elem.outerWidth(),
  			elemHeight = elem.outerHeight(),
  			marginLeft = parseCss( this, "marginLeft" ),
  			marginTop = parseCss( this, "marginTop" ),
  			collisionWidth = elemWidth + marginLeft + parseCss( this, "marginRight" ) +
  				scrollInfo.width,
  			collisionHeight = elemHeight + marginTop + parseCss( this, "marginBottom" ) +
  				scrollInfo.height,
  			position = $.extend( {}, basePosition ),
  			myOffset = getOffsets( offsets.my, elem.outerWidth(), elem.outerHeight() );

  		if ( options.my[ 0 ] === "right" ) {
  			position.left -= elemWidth;
  		} else if ( options.my[ 0 ] === "center" ) {
  			position.left -= elemWidth / 2;
  		}

  		if ( options.my[ 1 ] === "bottom" ) {
  			position.top -= elemHeight;
  		} else if ( options.my[ 1 ] === "center" ) {
  			position.top -= elemHeight / 2;
  		}

  		position.left += myOffset[ 0 ];
  		position.top += myOffset[ 1 ];

  		collisionPosition = {
  			marginLeft: marginLeft,
  			marginTop: marginTop
  		};

  		$.each( [ "left", "top" ], function( i, dir ) {
  			if ( $.ui.position[ collision[ i ] ] ) {
  				$.ui.position[ collision[ i ] ][ dir ]( position, {
  					targetWidth: targetWidth,
  					targetHeight: targetHeight,
  					elemWidth: elemWidth,
  					elemHeight: elemHeight,
  					collisionPosition: collisionPosition,
  					collisionWidth: collisionWidth,
  					collisionHeight: collisionHeight,
  					offset: [ atOffset[ 0 ] + myOffset[ 0 ], atOffset [ 1 ] + myOffset[ 1 ] ],
  					my: options.my,
  					at: options.at,
  					within: within,
  					elem: elem
  				} );
  			}
  		} );

  		if ( options.using ) {

  			// Adds feedback as second argument to using callback, if present
  			using = function( props ) {
  				var left = targetOffset.left - position.left,
  					right = left + targetWidth - elemWidth,
  					top = targetOffset.top - position.top,
  					bottom = top + targetHeight - elemHeight,
  					feedback = {
  						target: {
  							element: target,
  							left: targetOffset.left,
  							top: targetOffset.top,
  							width: targetWidth,
  							height: targetHeight
  						},
  						element: {
  							element: elem,
  							left: position.left,
  							top: position.top,
  							width: elemWidth,
  							height: elemHeight
  						},
  						horizontal: right < 0 ? "left" : left > 0 ? "right" : "center",
  						vertical: bottom < 0 ? "top" : top > 0 ? "bottom" : "middle"
  					};
  				if ( targetWidth < elemWidth && abs( left + right ) < targetWidth ) {
  					feedback.horizontal = "center";
  				}
  				if ( targetHeight < elemHeight && abs( top + bottom ) < targetHeight ) {
  					feedback.vertical = "middle";
  				}
  				if ( max( abs( left ), abs( right ) ) > max( abs( top ), abs( bottom ) ) ) {
  					feedback.important = "horizontal";
  				} else {
  					feedback.important = "vertical";
  				}
  				options.using.call( this, props, feedback );
  			};
  		}

  		elem.offset( $.extend( position, { using: using } ) );
  	} );
  };

  $.ui.position = {
  	fit: {
  		left: function( position, data ) {
  			var within = data.within,
  				withinOffset = within.isWindow ? within.scrollLeft : within.offset.left,
  				outerWidth = within.width,
  				collisionPosLeft = position.left - data.collisionPosition.marginLeft,
  				overLeft = withinOffset - collisionPosLeft,
  				overRight = collisionPosLeft + data.collisionWidth - outerWidth - withinOffset,
  				newOverRight;

  			// Element is wider than within
  			if ( data.collisionWidth > outerWidth ) {

  				// Element is initially over the left side of within
  				if ( overLeft > 0 && overRight <= 0 ) {
  					newOverRight = position.left + overLeft + data.collisionWidth - outerWidth -
  						withinOffset;
  					position.left += overLeft - newOverRight;

  				// Element is initially over right side of within
  				} else if ( overRight > 0 && overLeft <= 0 ) {
  					position.left = withinOffset;

  				// Element is initially over both left and right sides of within
  				} else {
  					if ( overLeft > overRight ) {
  						position.left = withinOffset + outerWidth - data.collisionWidth;
  					} else {
  						position.left = withinOffset;
  					}
  				}

  			// Too far left -> align with left edge
  			} else if ( overLeft > 0 ) {
  				position.left += overLeft;

  			// Too far right -> align with right edge
  			} else if ( overRight > 0 ) {
  				position.left -= overRight;

  			// Adjust based on position and margin
  			} else {
  				position.left = max( position.left - collisionPosLeft, position.left );
  			}
  		},
  		top: function( position, data ) {
  			var within = data.within,
  				withinOffset = within.isWindow ? within.scrollTop : within.offset.top,
  				outerHeight = data.within.height,
  				collisionPosTop = position.top - data.collisionPosition.marginTop,
  				overTop = withinOffset - collisionPosTop,
  				overBottom = collisionPosTop + data.collisionHeight - outerHeight - withinOffset,
  				newOverBottom;

  			// Element is taller than within
  			if ( data.collisionHeight > outerHeight ) {

  				// Element is initially over the top of within
  				if ( overTop > 0 && overBottom <= 0 ) {
  					newOverBottom = position.top + overTop + data.collisionHeight - outerHeight -
  						withinOffset;
  					position.top += overTop - newOverBottom;

  				// Element is initially over bottom of within
  				} else if ( overBottom > 0 && overTop <= 0 ) {
  					position.top = withinOffset;

  				// Element is initially over both top and bottom of within
  				} else {
  					if ( overTop > overBottom ) {
  						position.top = withinOffset + outerHeight - data.collisionHeight;
  					} else {
  						position.top = withinOffset;
  					}
  				}

  			// Too far up -> align with top
  			} else if ( overTop > 0 ) {
  				position.top += overTop;

  			// Too far down -> align with bottom edge
  			} else if ( overBottom > 0 ) {
  				position.top -= overBottom;

  			// Adjust based on position and margin
  			} else {
  				position.top = max( position.top - collisionPosTop, position.top );
  			}
  		}
  	},
  	flip: {
  		left: function( position, data ) {
  			var within = data.within,
  				withinOffset = within.offset.left + within.scrollLeft,
  				outerWidth = within.width,
  				offsetLeft = within.isWindow ? within.scrollLeft : within.offset.left,
  				collisionPosLeft = position.left - data.collisionPosition.marginLeft,
  				overLeft = collisionPosLeft - offsetLeft,
  				overRight = collisionPosLeft + data.collisionWidth - outerWidth - offsetLeft,
  				myOffset = data.my[ 0 ] === "left" ?
  					-data.elemWidth :
  					data.my[ 0 ] === "right" ?
  						data.elemWidth :
  						0,
  				atOffset = data.at[ 0 ] === "left" ?
  					data.targetWidth :
  					data.at[ 0 ] === "right" ?
  						-data.targetWidth :
  						0,
  				offset = -2 * data.offset[ 0 ],
  				newOverRight,
  				newOverLeft;

  			if ( overLeft < 0 ) {
  				newOverRight = position.left + myOffset + atOffset + offset + data.collisionWidth -
  					outerWidth - withinOffset;
  				if ( newOverRight < 0 || newOverRight < abs( overLeft ) ) {
  					position.left += myOffset + atOffset + offset;
  				}
  			} else if ( overRight > 0 ) {
  				newOverLeft = position.left - data.collisionPosition.marginLeft + myOffset +
  					atOffset + offset - offsetLeft;
  				if ( newOverLeft > 0 || abs( newOverLeft ) < overRight ) {
  					position.left += myOffset + atOffset + offset;
  				}
  			}
  		},
  		top: function( position, data ) {
  			var within = data.within,
  				withinOffset = within.offset.top + within.scrollTop,
  				outerHeight = within.height,
  				offsetTop = within.isWindow ? within.scrollTop : within.offset.top,
  				collisionPosTop = position.top - data.collisionPosition.marginTop,
  				overTop = collisionPosTop - offsetTop,
  				overBottom = collisionPosTop + data.collisionHeight - outerHeight - offsetTop,
  				top = data.my[ 1 ] === "top",
  				myOffset = top ?
  					-data.elemHeight :
  					data.my[ 1 ] === "bottom" ?
  						data.elemHeight :
  						0,
  				atOffset = data.at[ 1 ] === "top" ?
  					data.targetHeight :
  					data.at[ 1 ] === "bottom" ?
  						-data.targetHeight :
  						0,
  				offset = -2 * data.offset[ 1 ],
  				newOverTop,
  				newOverBottom;
  			if ( overTop < 0 ) {
  				newOverBottom = position.top + myOffset + atOffset + offset + data.collisionHeight -
  					outerHeight - withinOffset;
  				if ( newOverBottom < 0 || newOverBottom < abs( overTop ) ) {
  					position.top += myOffset + atOffset + offset;
  				}
  			} else if ( overBottom > 0 ) {
  				newOverTop = position.top - data.collisionPosition.marginTop + myOffset + atOffset +
  					offset - offsetTop;
  				if ( newOverTop > 0 || abs( newOverTop ) < overBottom ) {
  					position.top += myOffset + atOffset + offset;
  				}
  			}
  		}
  	},
  	flipfit: {
  		left: function() {
  			$.ui.position.flip.left.apply( this, arguments );
  			$.ui.position.fit.left.apply( this, arguments );
  		},
  		top: function() {
  			$.ui.position.flip.top.apply( this, arguments );
  			$.ui.position.fit.top.apply( this, arguments );
  		}
  	}
  };

  } )();

  $.ui.position;


  /*!
   * jQuery UI :data 1.14.0
   * https://jqueryui.com
   *
   * Copyright OpenJS Foundation and other contributors
   * Released under the MIT license.
   * https://jquery.org/license
   */

  //>>label: :data Selector
  //>>group: Core
  //>>description: Selects elements which have data stored under the specified key.
  //>>docs: https://api.jqueryui.com/data-selector/


  $.extend( $.expr.pseudos, {
  	data: $.expr.createPseudo( function( dataName ) {
  		return function( elem ) {
  			return !!$.data( elem, dataName );
  		};
  	} )
  } );

  /*!
   * jQuery UI Disable Selection 1.14.0
   * https://jqueryui.com
   *
   * Copyright OpenJS Foundation and other contributors
   * Released under the MIT license.
   * https://jquery.org/license
   */

  //>>label: disableSelection
  //>>group: Core
  //>>description: Disable selection of text content within the set of matched elements.
  //>>docs: https://api.jqueryui.com/disableSelection/

  // This file is deprecated

  $.fn.extend( {
  	disableSelection: ( function() {
  		var eventType = "onselectstart" in document.createElement( "div" ) ?
  			"selectstart" :
  			"mousedown";

  		return function() {
  			return this.on( eventType + ".ui-disableSelection", function( event ) {
  				event.preventDefault();
  			} );
  		};
  	} )(),

  	enableSelection: function() {
  		return this.off( ".ui-disableSelection" );
  	}
  } );



  // Create a local jQuery because jQuery Color relies on it and the
  // global may not exist with AMD and a custom build (#10199).
  // This module is a noop if used as a regular AMD module.
  // eslint-disable-next-line no-unused-vars
  var jQuery = $;


  /*!
   * jQuery Color Animations v3.0.0
   * https://github.com/jquery/jquery-color
   *
   * Copyright OpenJS Foundation and other contributors
   * Released under the MIT license.
   * https://jquery.org/license
   *
   * Date: Wed May 15 16:49:44 2024 +0200
   */


  	var stepHooks = "backgroundColor borderBottomColor borderLeftColor borderRightColor " +
  		"borderTopColor color columnRuleColor outlineColor textDecorationColor textEmphasisColor",

  	class2type = {},
  	toString = class2type.toString,

  	// plusequals test for += 100 -= 100
  	rplusequals = /^([\-+])=\s*(\d+\.?\d*)/,

  	// a set of RE's that can match strings and generate color tuples.
  	stringParsers = [ {
  			re: /rgba?\(\s*(\d{1,3})\s*,\s*(\d{1,3})\s*,\s*(\d{1,3})\s*(?:,\s*(\d?(?:\.\d+)?)\s*)?\)/,
  			parse: function( execResult ) {
  				return [
  					execResult[ 1 ],
  					execResult[ 2 ],
  					execResult[ 3 ],
  					execResult[ 4 ]
  				];
  			}
  		}, {
  			re: /rgba?\(\s*(\d+(?:\.\d+)?)\%\s*,\s*(\d+(?:\.\d+)?)\%\s*,\s*(\d+(?:\.\d+)?)\%\s*(?:,\s*(\d?(?:\.\d+)?)\s*)?\)/,
  			parse: function( execResult ) {
  				return [
  					execResult[ 1 ] * 2.55,
  					execResult[ 2 ] * 2.55,
  					execResult[ 3 ] * 2.55,
  					execResult[ 4 ]
  				];
  			}
  		}, {

  			// this regex ignores A-F because it's compared against an already lowercased string
  			re: /#([a-f0-9]{2})([a-f0-9]{2})([a-f0-9]{2})([a-f0-9]{2})?/,
  			parse: function( execResult ) {
  				return [
  					parseInt( execResult[ 1 ], 16 ),
  					parseInt( execResult[ 2 ], 16 ),
  					parseInt( execResult[ 3 ], 16 ),
  					execResult[ 4 ] ?
  						( parseInt( execResult[ 4 ], 16 ) / 255 ).toFixed( 2 ) :
  						1
  				];
  			}
  		}, {

  			// this regex ignores A-F because it's compared against an already lowercased string
  			re: /#([a-f0-9])([a-f0-9])([a-f0-9])([a-f0-9])?/,
  			parse: function( execResult ) {
  				return [
  					parseInt( execResult[ 1 ] + execResult[ 1 ], 16 ),
  					parseInt( execResult[ 2 ] + execResult[ 2 ], 16 ),
  					parseInt( execResult[ 3 ] + execResult[ 3 ], 16 ),
  					execResult[ 4 ] ?
  						( parseInt( execResult[ 4 ] + execResult[ 4 ], 16 ) / 255 )
  							.toFixed( 2 ) :
  						1
  				];
  			}
  		}, {
  			re: /hsla?\(\s*(\d+(?:\.\d+)?)\s*,\s*(\d+(?:\.\d+)?)\%\s*,\s*(\d+(?:\.\d+)?)\%\s*(?:,\s*(\d?(?:\.\d+)?)\s*)?\)/,
  			space: "hsla",
  			parse: function( execResult ) {
  				return [
  					execResult[ 1 ],
  					execResult[ 2 ] / 100,
  					execResult[ 3 ] / 100,
  					execResult[ 4 ]
  				];
  			}
  		} ],

  	// jQuery.Color( )
  	color = jQuery.Color = function( color, green, blue, alpha ) {
  		return new jQuery.Color.fn.parse( color, green, blue, alpha );
  	},
  	spaces = {
  		rgba: {
  			props: {
  				red: {
  					idx: 0,
  					type: "byte"
  				},
  				green: {
  					idx: 1,
  					type: "byte"
  				},
  				blue: {
  					idx: 2,
  					type: "byte"
  				}
  			}
  		},

  		hsla: {
  			props: {
  				hue: {
  					idx: 0,
  					type: "degrees"
  				},
  				saturation: {
  					idx: 1,
  					type: "percent"
  				},
  				lightness: {
  					idx: 2,
  					type: "percent"
  				}
  			}
  		}
  	},
  	propTypes = {
  		"byte": {
  			floor: true,
  			max: 255
  		},
  		"percent": {
  			max: 1
  		},
  		"degrees": {
  			mod: 360,
  			floor: true
  		}
  	},

  	// colors = jQuery.Color.names
  	colors,

  	// local aliases of functions called often
  	each = jQuery.each;

  // define cache name and alpha properties
  // for rgba and hsla spaces
  each( spaces, function( spaceName, space ) {
  	space.cache = "_" + spaceName;
  	space.props.alpha = {
  		idx: 3,
  		type: "percent",
  		def: 1
  	};
  } );

  // Populate the class2type map
  jQuery.each( "Boolean Number String Function Array Date RegExp Object Error Symbol".split( " " ),
  	function( _i, name ) {
  		class2type[ "[object " + name + "]" ] = name.toLowerCase();
  	} );

  function getType( obj ) {
  	if ( obj == null ) {
  		return obj + "";
  	}

  	return typeof obj === "object" ?
  		class2type[ toString.call( obj ) ] || "object" :
  		typeof obj;
  }

  function clamp( value, prop, allowEmpty ) {
  	var type = propTypes[ prop.type ] || {};

  	if ( value == null ) {
  		return ( allowEmpty || !prop.def ) ? null : prop.def;
  	}

  	// ~~ is an short way of doing floor for positive numbers
  	value = type.floor ? ~~value : parseFloat( value );

  	if ( type.mod ) {

  		// we add mod before modding to make sure that negatives values
  		// get converted properly: -10 -> 350
  		return ( value + type.mod ) % type.mod;
  	}

  	// for now all property types without mod have min and max
  	return Math.min( type.max, Math.max( 0, value ) );
  }

  function stringParse( string ) {
  	var inst = color(),
  		rgba = inst._rgba = [];

  	string = string.toLowerCase();

  	each( stringParsers, function( _i, parser ) {
  		var parsed,
  			match = parser.re.exec( string ),
  			values = match && parser.parse( match ),
  			spaceName = parser.space || "rgba";

  		if ( values ) {
  			parsed = inst[ spaceName ]( values );

  			// if this was an rgba parse the assignment might happen twice
  			// oh well....
  			inst[ spaces[ spaceName ].cache ] = parsed[ spaces[ spaceName ].cache ];
  			rgba = inst._rgba = parsed._rgba;

  			// exit each( stringParsers ) here because we matched
  			return false;
  		}
  	} );

  	// Found a stringParser that handled it
  	if ( rgba.length ) {

  		// if this came from a parsed string, force "transparent" when alpha is 0
  		// chrome, (and maybe others) return "transparent" as rgba(0,0,0,0)
  		if ( rgba.join() === "0,0,0,0" ) {
  			jQuery.extend( rgba, colors.transparent );
  		}
  		return inst;
  	}

  	// named colors
  	return colors[ string ];
  }

  color.fn = jQuery.extend( color.prototype, {
  	parse: function( red, green, blue, alpha ) {
  		if ( red === undefined ) {
  			this._rgba = [ null, null, null, null ];
  			return this;
  		}
  		if ( red.jquery || red.nodeType ) {
  			red = jQuery( red ).css( green );
  			green = undefined;
  		}

  		var inst = this,
  			type = getType( red ),
  			rgba = this._rgba = [];

  		// more than 1 argument specified - assume ( red, green, blue, alpha )
  		if ( green !== undefined ) {
  			red = [ red, green, blue, alpha ];
  			type = "array";
  		}

  		if ( type === "string" ) {
  			return this.parse( stringParse( red ) || colors._default );
  		}

  		if ( type === "array" ) {
  			each( spaces.rgba.props, function( _key, prop ) {
  				rgba[ prop.idx ] = clamp( red[ prop.idx ], prop );
  			} );
  			return this;
  		}

  		if ( type === "object" ) {
  			if ( red instanceof color ) {
  				each( spaces, function( _spaceName, space ) {
  					if ( red[ space.cache ] ) {
  						inst[ space.cache ] = red[ space.cache ].slice();
  					}
  				} );
  			} else {
  				each( spaces, function( _spaceName, space ) {
  					var cache = space.cache;
  					each( space.props, function( key, prop ) {

  						// if the cache doesn't exist, and we know how to convert
  						if ( !inst[ cache ] && space.to ) {

  							// if the value was null, we don't need to copy it
  							// if the key was alpha, we don't need to copy it either
  							if ( key === "alpha" || red[ key ] == null ) {
  								return;
  							}
  							inst[ cache ] = space.to( inst._rgba );
  						}

  						// this is the only case where we allow nulls for ALL properties.
  						// call clamp with alwaysAllowEmpty
  						inst[ cache ][ prop.idx ] = clamp( red[ key ], prop, true );
  					} );

  					// everything defined but alpha?
  					if ( inst[ cache ] && jQuery.inArray(
  						null,
  						inst[ cache ].slice( 0, 3 )
  					) < 0 ) {

  						// use the default of 1
  						if ( inst[ cache ][ 3 ] == null ) {
  							inst[ cache ][ 3 ] = 1;
  						}

  						if ( space.from ) {
  							inst._rgba = space.from( inst[ cache ] );
  						}
  					}
  				} );
  			}
  			return this;
  		}
  	},
  	is: function( compare ) {
  		var is = color( compare ),
  			same = true,
  			inst = this;

  		each( spaces, function( _, space ) {
  			var localCache,
  				isCache = is[ space.cache ];
  			if ( isCache ) {
  				localCache = inst[ space.cache ] || space.to && space.to( inst._rgba ) || [];
  				each( space.props, function( _, prop ) {
  					if ( isCache[ prop.idx ] != null ) {
  						same = ( isCache[ prop.idx ] === localCache[ prop.idx ] );
  						return same;
  					}
  				} );
  			}
  			return same;
  		} );
  		return same;
  	},
  	_space: function() {
  		var used = [],
  			inst = this;
  		each( spaces, function( spaceName, space ) {
  			if ( inst[ space.cache ] ) {
  				used.push( spaceName );
  			}
  		} );
  		return used.pop();
  	},
  	transition: function( other, distance ) {
  		var end = color( other ),
  			spaceName = end._space(),
  			space = spaces[ spaceName ],
  			startColor = this.alpha() === 0 ? color( "transparent" ) : this,
  			start = startColor[ space.cache ] || space.to( startColor._rgba ),
  			result = start.slice();

  		end = end[ space.cache ];
  		each( space.props, function( _key, prop ) {
  			var index = prop.idx,
  				startValue = start[ index ],
  				endValue = end[ index ],
  				type = propTypes[ prop.type ] || {};

  			// if null, don't override start value
  			if ( endValue === null ) {
  				return;
  			}

  			// if null - use end
  			if ( startValue === null ) {
  				result[ index ] = endValue;
  			} else {
  				if ( type.mod ) {
  					if ( endValue - startValue > type.mod / 2 ) {
  						startValue += type.mod;
  					} else if ( startValue - endValue > type.mod / 2 ) {
  						startValue -= type.mod;
  					}
  				}
  				result[ index ] = clamp( ( endValue - startValue ) * distance + startValue, prop );
  			}
  		} );
  		return this[ spaceName ]( result );
  	},
  	blend: function( opaque ) {

  		// if we are already opaque - return ourself
  		if ( this._rgba[ 3 ] === 1 ) {
  			return this;
  		}

  		var rgb = this._rgba.slice(),
  			a = rgb.pop(),
  			blend = color( opaque )._rgba;

  		return color( jQuery.map( rgb, function( v, i ) {
  			return ( 1 - a ) * blend[ i ] + a * v;
  		} ) );
  	},
  	toRgbaString: function() {
  		var prefix = "rgba(",
  			rgba = jQuery.map( this._rgba, function( v, i ) {
  				if ( v != null ) {
  					return v;
  				}
  				return i > 2 ? 1 : 0;
  			} );

  		if ( rgba[ 3 ] === 1 ) {
  			rgba.pop();
  			prefix = "rgb(";
  		}

  		return prefix + rgba.join( ", " ) + ")";
  	},
  	toHslaString: function() {
  		var prefix = "hsla(",
  			hsla = jQuery.map( this.hsla(), function( v, i ) {
  				if ( v == null ) {
  					v = i > 2 ? 1 : 0;
  				}

  				// catch 1 and 2
  				if ( i && i < 3 ) {
  					v = Math.round( v * 100 ) + "%";
  				}
  				return v;
  			} );

  		if ( hsla[ 3 ] === 1 ) {
  			hsla.pop();
  			prefix = "hsl(";
  		}
  		return prefix + hsla.join( ", " ) + ")";
  	},
  	toHexString: function( includeAlpha ) {
  		var rgba = this._rgba.slice(),
  			alpha = rgba.pop();

  		if ( includeAlpha ) {
  			rgba.push( ~~( alpha * 255 ) );
  		}

  		return "#" + jQuery.map( rgba, function( v ) {

  			// default to 0 when nulls exist
  			return ( "0" + ( v || 0 ).toString( 16 ) ).substr( -2 );
  		} ).join( "" );
  	},
  	toString: function() {
  		return this.toRgbaString();
  	}
  } );
  color.fn.parse.prototype = color.fn;

  // hsla conversions adapted from:
  // https://code.google.com/p/maashaack/source/browse/packages/graphics/trunk/src/graphics/colors/HUE2RGB.as?r=5021

  function hue2rgb( p, q, h ) {
  	h = ( h + 1 ) % 1;
  	if ( h * 6 < 1 ) {
  		return p + ( q - p ) * h * 6;
  	}
  	if ( h * 2 < 1 ) {
  		return q;
  	}
  	if ( h * 3 < 2 ) {
  		return p + ( q - p ) * ( ( 2 / 3 ) - h ) * 6;
  	}
  	return p;
  }

  spaces.hsla.to = function( rgba ) {
  	if ( rgba[ 0 ] == null || rgba[ 1 ] == null || rgba[ 2 ] == null ) {
  		return [ null, null, null, rgba[ 3 ] ];
  	}
  	var r = rgba[ 0 ] / 255,
  		g = rgba[ 1 ] / 255,
  		b = rgba[ 2 ] / 255,
  		a = rgba[ 3 ],
  		max = Math.max( r, g, b ),
  		min = Math.min( r, g, b ),
  		diff = max - min,
  		add = max + min,
  		l = add * 0.5,
  		h, s;

  	if ( min === max ) {
  		h = 0;
  	} else if ( r === max ) {
  		h = ( 60 * ( g - b ) / diff ) + 360;
  	} else if ( g === max ) {
  		h = ( 60 * ( b - r ) / diff ) + 120;
  	} else {
  		h = ( 60 * ( r - g ) / diff ) + 240;
  	}

  	// chroma (diff) == 0 means greyscale which, by definition, saturation = 0%
  	// otherwise, saturation is based on the ratio of chroma (diff) to lightness (add)
  	if ( diff === 0 ) {
  		s = 0;
  	} else if ( l <= 0.5 ) {
  		s = diff / add;
  	} else {
  		s = diff / ( 2 - add );
  	}
  	return [ Math.round( h ) % 360, s, l, a == null ? 1 : a ];
  };

  spaces.hsla.from = function( hsla ) {
  	if ( hsla[ 0 ] == null || hsla[ 1 ] == null || hsla[ 2 ] == null ) {
  		return [ null, null, null, hsla[ 3 ] ];
  	}
  	var h = hsla[ 0 ] / 360,
  		s = hsla[ 1 ],
  		l = hsla[ 2 ],
  		a = hsla[ 3 ],
  		q = l <= 0.5 ? l * ( 1 + s ) : l + s - l * s,
  		p = 2 * l - q;

  	return [
  		Math.round( hue2rgb( p, q, h + ( 1 / 3 ) ) * 255 ),
  		Math.round( hue2rgb( p, q, h ) * 255 ),
  		Math.round( hue2rgb( p, q, h - ( 1 / 3 ) ) * 255 ),
  		a
  	];
  };


  each( spaces, function( spaceName, space ) {
  	var props = space.props,
  		cache = space.cache,
  		to = space.to,
  		from = space.from;

  	// makes rgba() and hsla()
  	color.fn[ spaceName ] = function( value ) {

  		// generate a cache for this space if it doesn't exist
  		if ( to && !this[ cache ] ) {
  			this[ cache ] = to( this._rgba );
  		}
  		if ( value === undefined ) {
  			return this[ cache ].slice();
  		}

  		var ret,
  			type = getType( value ),
  			arr = ( type === "array" || type === "object" ) ? value : arguments,
  			local = this[ cache ].slice();

  		each( props, function( key, prop ) {
  			var val = arr[ type === "object" ? key : prop.idx ];
  			if ( val == null ) {
  				val = local[ prop.idx ];
  			}
  			local[ prop.idx ] = clamp( val, prop );
  		} );

  		if ( from ) {
  			ret = color( from( local ) );
  			ret[ cache ] = local;
  			return ret;
  		} else {
  			return color( local );
  		}
  	};

  	// makes red() green() blue() alpha() hue() saturation() lightness()
  	each( props, function( key, prop ) {

  		// alpha is included in more than one space
  		if ( color.fn[ key ] ) {
  			return;
  		}
  		color.fn[ key ] = function( value ) {
  			var local, cur, match, fn,
  				vtype = getType( value );

  			if ( key === "alpha" ) {
  				fn = this._hsla ? "hsla" : "rgba";
  			} else {
  				fn = spaceName;
  			}
  			local = this[ fn ]();
  			cur = local[ prop.idx ];

  			if ( vtype === "undefined" ) {
  				return cur;
  			}

  			if ( vtype === "function" ) {
  				value = value.call( this, cur );
  				vtype = getType( value );
  			}
  			if ( value == null && prop.empty ) {
  				return this;
  			}
  			if ( vtype === "string" ) {
  				match = rplusequals.exec( value );
  				if ( match ) {
  					value = cur + parseFloat( match[ 2 ] ) * ( match[ 1 ] === "+" ? 1 : -1 );
  				}
  			}
  			local[ prop.idx ] = value;
  			return this[ fn ]( local );
  		};
  	} );
  } );

  // add cssHook and .fx.step function for each named hook.
  // accept a space separated string of properties
  color.hook = function( hook ) {
  	var hooks = hook.split( " " );
  	each( hooks, function( _i, hook ) {
  		jQuery.cssHooks[ hook ] = {
  			set: function( elem, value ) {
  				var parsed;

  				if ( value !== "transparent" &&
  					( getType( value ) !== "string" ||
  						( parsed = stringParse( value ) ) ) ) {
  					value = color( parsed || value );
  					value = value.toRgbaString();
  				}
  				elem.style[ hook ] = value;
  			}
  		};
  		jQuery.fx.step[ hook ] = function( fx ) {
  			if ( !fx.colorInit ) {
  				fx.start = color( fx.elem, hook );
  				fx.end = color( fx.end );
  				fx.colorInit = true;
  			}
  			jQuery.cssHooks[ hook ].set( fx.elem, fx.start.transition( fx.end, fx.pos ) );
  		};
  	} );

  };

  color.hook( stepHooks );

  jQuery.cssHooks.borderColor = {
  	expand: function( value ) {
  		var expanded = {};

  		each( [ "Top", "Right", "Bottom", "Left" ], function( _i, part ) {
  			expanded[ "border" + part + "Color" ] = value;
  		} );
  		return expanded;
  	}
  };

  // Basic color names only.
  // Usage of any of the other color names requires adding yourself or including
  // jquery.color.svg-names.js.
  colors = jQuery.Color.names = {

  	// 4.1. Basic color keywords
  	aqua: "#00ffff",
  	black: "#000000",
  	blue: "#0000ff",
  	fuchsia: "#ff00ff",
  	gray: "#808080",
  	green: "#008000",
  	lime: "#00ff00",
  	maroon: "#800000",
  	navy: "#000080",
  	olive: "#808000",
  	purple: "#800080",
  	red: "#ff0000",
  	silver: "#c0c0c0",
  	teal: "#008080",
  	white: "#ffffff",
  	yellow: "#ffff00",

  	// 4.2.3. "transparent" color keyword
  	transparent: [ null, null, null, 0 ],

  	_default: "#ffffff"
  };


  /*!
   * jQuery UI Effects 1.14.0
   * https://jqueryui.com
   *
   * Copyright OpenJS Foundation and other contributors
   * Released under the MIT license.
   * https://jquery.org/license
   */

  //>>label: Effects Core
  //>>group: Effects
  /* eslint-disable max-len */
  //>>description: Extends the internal jQuery effects. Includes morphing and easing. Required by all other effects.
  /* eslint-enable max-len */
  //>>docs: https://api.jqueryui.com/category/effects-core/
  //>>demos: https://jqueryui.com/effect/


  var dataSpace = "ui-effects-",
  	dataSpaceStyle = "ui-effects-style",
  	dataSpaceAnimated = "ui-effects-animated";

  $.effects = {
  	effect: {}
  };

  /******************************************************************************/
  /****************************** CLASS ANIMATIONS ******************************/
  /******************************************************************************/
  ( function() {

  var classAnimationActions = [ "add", "remove", "toggle" ],
  	shorthandStyles = {
  		border: 1,
  		borderBottom: 1,
  		borderColor: 1,
  		borderLeft: 1,
  		borderRight: 1,
  		borderTop: 1,
  		borderWidth: 1,
  		margin: 1,
  		padding: 1
  	};

  $.each(
  	[ "borderLeftStyle", "borderRightStyle", "borderBottomStyle", "borderTopStyle" ],
  	function( _, prop ) {
  		$.fx.step[ prop ] = function( fx ) {
  			if ( fx.end !== "none" && !fx.setAttr || fx.pos === 1 && !fx.setAttr ) {
  				jQuery.style( fx.elem, prop, fx.end );
  				fx.setAttr = true;
  			}
  		};
  	}
  );

  function camelCase( string ) {
  	return string.replace( /-([\da-z])/gi, function( all, letter ) {
  		return letter.toUpperCase();
  	} );
  }

  function getElementStyles( elem ) {
  	var key, len,
  		style = elem.ownerDocument.defaultView.getComputedStyle( elem ),
  		styles = {};

  	len = style.length;
  	while ( len-- ) {
  		key = style[ len ];
  		if ( typeof style[ key ] === "string" ) {
  			styles[ camelCase( key ) ] = style[ key ];
  		}
  	}

  	return styles;
  }

  function styleDifference( oldStyle, newStyle ) {
  	var diff = {},
  		name, value;

  	for ( name in newStyle ) {
  		value = newStyle[ name ];
  		if ( oldStyle[ name ] !== value ) {
  			if ( !shorthandStyles[ name ] ) {
  				if ( $.fx.step[ name ] || !isNaN( parseFloat( value ) ) ) {
  					diff[ name ] = value;
  				}
  			}
  		}
  	}

  	return diff;
  }

  $.effects.animateClass = function( value, duration, easing, callback ) {
  	var o = $.speed( duration, easing, callback );

  	return this.queue( function() {
  		var animated = $( this ),
  			baseClass = animated.attr( "class" ) || "",
  			applyClassChange,
  			allAnimations = o.children ? animated.find( "*" ).addBack() : animated;

  		// Map the animated objects to store the original styles.
  		allAnimations = allAnimations.map( function() {
  			var el = $( this );
  			return {
  				el: el,
  				start: getElementStyles( this )
  			};
  		} );

  		// Apply class change
  		applyClassChange = function() {
  			$.each( classAnimationActions, function( i, action ) {
  				if ( value[ action ] ) {
  					animated[ action + "Class" ]( value[ action ] );
  				}
  			} );
  		};
  		applyClassChange();

  		// Map all animated objects again - calculate new styles and diff
  		allAnimations = allAnimations.map( function() {
  			this.end = getElementStyles( this.el[ 0 ] );
  			this.diff = styleDifference( this.start, this.end );
  			return this;
  		} );

  		// Apply original class
  		animated.attr( "class", baseClass );

  		// Map all animated objects again - this time collecting a promise
  		allAnimations = allAnimations.map( function() {
  			var styleInfo = this,
  				dfd = $.Deferred(),
  				opts = $.extend( {}, o, {
  					queue: false,
  					complete: function() {
  						dfd.resolve( styleInfo );
  					}
  				} );

  			this.el.animate( this.diff, opts );
  			return dfd.promise();
  		} );

  		// Once all animations have completed:
  		$.when.apply( $, allAnimations.get() ).done( function() {

  			// Set the final class
  			applyClassChange();

  			// For each animated element,
  			// clear all css properties that were animated
  			$.each( arguments, function() {
  				var el = this.el;
  				$.each( this.diff, function( key ) {
  					el.css( key, "" );
  				} );
  			} );

  			// This is guarnteed to be there if you use jQuery.speed()
  			// it also handles dequeuing the next anim...
  			o.complete.call( animated[ 0 ] );
  		} );
  	} );
  };

  $.fn.extend( {
  	addClass: ( function( orig ) {
  		return function( classNames, speed, easing, callback ) {
  			return speed ?
  				$.effects.animateClass.call( this,
  					{ add: classNames }, speed, easing, callback ) :
  				orig.apply( this, arguments );
  		};
  	} )( $.fn.addClass ),

  	removeClass: ( function( orig ) {
  		return function( classNames, speed, easing, callback ) {
  			return arguments.length > 1 ?
  				$.effects.animateClass.call( this,
  					{ remove: classNames }, speed, easing, callback ) :
  				orig.apply( this, arguments );
  		};
  	} )( $.fn.removeClass ),

  	toggleClass: ( function( orig ) {
  		return function( classNames, force, speed, easing, callback ) {
  			if ( typeof force === "boolean" || force === undefined ) {
  				if ( !speed ) {

  					// Without speed parameter
  					return orig.apply( this, arguments );
  				} else {
  					return $.effects.animateClass.call( this,
  						( force ? { add: classNames } : { remove: classNames } ),
  						speed, easing, callback );
  				}
  			} else {

  				// Without force parameter
  				return $.effects.animateClass.call( this,
  					{ toggle: classNames }, force, speed, easing );
  			}
  		};
  	} )( $.fn.toggleClass ),

  	switchClass: function( remove, add, speed, easing, callback ) {
  		return $.effects.animateClass.call( this, {
  			add: add,
  			remove: remove
  		}, speed, easing, callback );
  	}
  } );

  } )();

  /******************************************************************************/
  /*********************************** EFFECTS **********************************/
  /******************************************************************************/

  ( function() {

  if ( $.expr && $.expr.pseudos && $.expr.pseudos.animated ) {
  	$.expr.pseudos.animated = ( function( orig ) {
  		return function( elem ) {
  			return !!$( elem ).data( dataSpaceAnimated ) || orig( elem );
  		};
  	} )( $.expr.pseudos.animated );
  }

  if ( $.uiBackCompat === true ) {
  	$.extend( $.effects, {

  		// Saves a set of properties in a data storage
  		save: function( element, set ) {
  			var i = 0, length = set.length;
  			for ( ; i < length; i++ ) {
  				if ( set[ i ] !== null ) {
  					element.data( dataSpace + set[ i ], element[ 0 ].style[ set[ i ] ] );
  				}
  			}
  		},

  		// Restores a set of previously saved properties from a data storage
  		restore: function( element, set ) {
  			var val, i = 0, length = set.length;
  			for ( ; i < length; i++ ) {
  				if ( set[ i ] !== null ) {
  					val = element.data( dataSpace + set[ i ] );
  					element.css( set[ i ], val );
  				}
  			}
  		},

  		setMode: function( el, mode ) {
  			if ( mode === "toggle" ) {
  				mode = el.is( ":hidden" ) ? "show" : "hide";
  			}
  			return mode;
  		},

  		// Wraps the element around a wrapper that copies position properties
  		createWrapper: function( element ) {

  			// If the element is already wrapped, return it
  			if ( element.parent().is( ".ui-effects-wrapper" ) ) {
  				return element.parent();
  			}

  			// Wrap the element
  			var props = {
  					width: element.outerWidth( true ),
  					height: element.outerHeight( true ),
  					"float": element.css( "float" )
  				},
  				wrapper = $( "<div></div>" )
  					.addClass( "ui-effects-wrapper" )
  					.css( {
  						fontSize: "100%",
  						background: "transparent",
  						border: "none",
  						margin: 0,
  						padding: 0
  					} ),

  				// Store the size in case width/height are defined in % - Fixes #5245
  				size = {
  					width: element.width(),
  					height: element.height()
  				},
  				active = document.activeElement;

  			// Support: Firefox
  			// Firefox incorrectly exposes anonymous content
  			// https://bugzilla.mozilla.org/show_bug.cgi?id=561664
  			try {
  				// eslint-disable-next-line no-unused-expressions
  				active.id;
  			} catch ( e ) {
  				active = document.body;
  			}

  			element.wrap( wrapper );

  			// Fixes #7595 - Elements lose focus when wrapped.
  			if ( element[ 0 ] === active || $.contains( element[ 0 ], active ) ) {
  				$( active ).trigger( "focus" );
  			}

  			// Hotfix for jQuery 1.4 since some change in wrap() seems to actually
  			// lose the reference to the wrapped element
  			wrapper = element.parent();

  			// Transfer positioning properties to the wrapper
  			if ( element.css( "position" ) === "static" ) {
  				wrapper.css( { position: "relative" } );
  				element.css( { position: "relative" } );
  			} else {
  				$.extend( props, {
  					position: element.css( "position" ),
  					zIndex: element.css( "z-index" )
  				} );
  				$.each( [ "top", "left", "bottom", "right" ], function( i, pos ) {
  					props[ pos ] = element.css( pos );
  					if ( isNaN( parseInt( props[ pos ], 10 ) ) ) {
  						props[ pos ] = "auto";
  					}
  				} );
  				element.css( {
  					position: "relative",
  					top: 0,
  					left: 0,
  					right: "auto",
  					bottom: "auto"
  				} );
  			}
  			element.css( size );

  			return wrapper.css( props ).show();
  		},

  		removeWrapper: function( element ) {
  			var active = document.activeElement;

  			if ( element.parent().is( ".ui-effects-wrapper" ) ) {
  				element.parent().replaceWith( element );

  				// Fixes #7595 - Elements lose focus when wrapped.
  				if ( element[ 0 ] === active || $.contains( element[ 0 ], active ) ) {
  					$( active ).trigger( "focus" );
  				}
  			}

  			return element;
  		}
  	} );
  }

  $.extend( $.effects, {
  	version: "1.14.0",

  	define: function( name, mode, effect ) {
  		if ( !effect ) {
  			effect = mode;
  			mode = "effect";
  		}

  		$.effects.effect[ name ] = effect;
  		$.effects.effect[ name ].mode = mode;

  		return effect;
  	},

  	scaledDimensions: function( element, percent, direction ) {
  		if ( percent === 0 ) {
  			return {
  				height: 0,
  				width: 0,
  				outerHeight: 0,
  				outerWidth: 0
  			};
  		}

  		var x = direction !== "horizontal" ? ( ( percent || 100 ) / 100 ) : 1,
  			y = direction !== "vertical" ? ( ( percent || 100 ) / 100 ) : 1;

  		return {
  			height: element.height() * y,
  			width: element.width() * x,
  			outerHeight: element.outerHeight() * y,
  			outerWidth: element.outerWidth() * x
  		};

  	},

  	clipToBox: function( animation ) {
  		return {
  			width: animation.clip.right - animation.clip.left,
  			height: animation.clip.bottom - animation.clip.top,
  			left: animation.clip.left,
  			top: animation.clip.top
  		};
  	},

  	// Injects recently queued functions to be first in line (after "inprogress")
  	unshift: function( element, queueLength, count ) {
  		var queue = element.queue();

  		if ( queueLength > 1 ) {
  			queue.splice.apply( queue,
  				[ 1, 0 ].concat( queue.splice( queueLength, count ) ) );
  		}
  		element.dequeue();
  	},

  	saveStyle: function( element ) {
  		element.data( dataSpaceStyle, element[ 0 ].style.cssText );
  	},

  	restoreStyle: function( element ) {
  		element[ 0 ].style.cssText = element.data( dataSpaceStyle ) || "";
  		element.removeData( dataSpaceStyle );
  	},

  	mode: function( element, mode ) {
  		var hidden = element.is( ":hidden" );

  		if ( mode === "toggle" ) {
  			mode = hidden ? "show" : "hide";
  		}
  		if ( hidden ? mode === "hide" : mode === "show" ) {
  			mode = "none";
  		}
  		return mode;
  	},

  	// Translates a [top,left] array into a baseline value
  	getBaseline: function( origin, original ) {
  		var y, x;

  		switch ( origin[ 0 ] ) {
  		case "top":
  			y = 0;
  			break;
  		case "middle":
  			y = 0.5;
  			break;
  		case "bottom":
  			y = 1;
  			break;
  		default:
  			y = origin[ 0 ] / original.height;
  		}

  		switch ( origin[ 1 ] ) {
  		case "left":
  			x = 0;
  			break;
  		case "center":
  			x = 0.5;
  			break;
  		case "right":
  			x = 1;
  			break;
  		default:
  			x = origin[ 1 ] / original.width;
  		}

  		return {
  			x: x,
  			y: y
  		};
  	},

  	// Creates a placeholder element so that the original element can be made absolute
  	createPlaceholder: function( element ) {
  		var placeholder,
  			cssPosition = element.css( "position" ),
  			position = element.position();

  		// Lock in margins first to account for form elements, which
  		// will change margin if you explicitly set height
  		// see: https://jsfiddle.net/JZSMt/3/ https://bugs.webkit.org/show_bug.cgi?id=107380
  		// Support: Safari
  		element.css( {
  			marginTop: element.css( "marginTop" ),
  			marginBottom: element.css( "marginBottom" ),
  			marginLeft: element.css( "marginLeft" ),
  			marginRight: element.css( "marginRight" )
  		} )
  		.outerWidth( element.outerWidth() )
  		.outerHeight( element.outerHeight() );

  		if ( /^(static|relative)/.test( cssPosition ) ) {
  			cssPosition = "absolute";

  			placeholder = $( "<" + element[ 0 ].nodeName + ">" ).insertAfter( element ).css( {

  				// Convert inline to inline block to account for inline elements
  				// that turn to inline block based on content (like img)
  				display: /^(inline|ruby)/.test( element.css( "display" ) ) ?
  					"inline-block" :
  					"block",
  				visibility: "hidden",

  				// Margins need to be set to account for margin collapse
  				marginTop: element.css( "marginTop" ),
  				marginBottom: element.css( "marginBottom" ),
  				marginLeft: element.css( "marginLeft" ),
  				marginRight: element.css( "marginRight" ),
  				"float": element.css( "float" )
  			} )
  			.outerWidth( element.outerWidth() )
  			.outerHeight( element.outerHeight() )
  			.addClass( "ui-effects-placeholder" );

  			element.data( dataSpace + "placeholder", placeholder );
  		}

  		element.css( {
  			position: cssPosition,
  			left: position.left,
  			top: position.top
  		} );

  		return placeholder;
  	},

  	removePlaceholder: function( element ) {
  		var dataKey = dataSpace + "placeholder",
  				placeholder = element.data( dataKey );

  		if ( placeholder ) {
  			placeholder.remove();
  			element.removeData( dataKey );
  		}
  	},

  	// Removes a placeholder if it exists and restores
  	// properties that were modified during placeholder creation
  	cleanUp: function( element ) {
  		$.effects.restoreStyle( element );
  		$.effects.removePlaceholder( element );
  	},

  	setTransition: function( element, list, factor, value ) {
  		value = value || {};
  		$.each( list, function( i, x ) {
  			var unit = element.cssUnit( x );
  			if ( unit[ 0 ] > 0 ) {
  				value[ x ] = unit[ 0 ] * factor + unit[ 1 ];
  			}
  		} );
  		return value;
  	}
  } );

  // Return an effect options object for the given parameters:
  function _normalizeArguments( effect, options, speed, callback ) {

  	// Allow passing all options as the first parameter
  	if ( $.isPlainObject( effect ) ) {
  		options = effect;
  		effect = effect.effect;
  	}

  	// Convert to an object
  	effect = { effect: effect };

  	// Catch (effect, null, ...)
  	if ( options == null ) {
  		options = {};
  	}

  	// Catch (effect, callback)
  	if ( typeof options === "function" ) {
  		callback = options;
  		speed = null;
  		options = {};
  	}

  	// Catch (effect, speed, ?)
  	if ( typeof options === "number" || $.fx.speeds[ options ] ) {
  		callback = speed;
  		speed = options;
  		options = {};
  	}

  	// Catch (effect, options, callback)
  	if ( typeof speed === "function" ) {
  		callback = speed;
  		speed = null;
  	}

  	// Add options to effect
  	if ( options ) {
  		$.extend( effect, options );
  	}

  	speed = speed || options.duration;
  	effect.duration = $.fx.off ? 0 :
  		typeof speed === "number" ? speed :
  		speed in $.fx.speeds ? $.fx.speeds[ speed ] :
  		$.fx.speeds._default;

  	effect.complete = callback || options.complete;

  	return effect;
  }

  function standardAnimationOption( option ) {

  	// Valid standard speeds (nothing, number, named speed)
  	if ( !option || typeof option === "number" || $.fx.speeds[ option ] ) {
  		return true;
  	}

  	// Invalid strings - treat as "normal" speed
  	if ( typeof option === "string" && !$.effects.effect[ option ] ) {
  		return true;
  	}

  	// Complete callback
  	if ( typeof option === "function" ) {
  		return true;
  	}

  	// Options hash (but not naming an effect)
  	if ( typeof option === "object" && !option.effect ) {
  		return true;
  	}

  	// Didn't match any standard API
  	return false;
  }

  $.fn.extend( {
  	effect: function( /* effect, options, speed, callback */ ) {
  		var args = _normalizeArguments.apply( this, arguments ),
  			effectMethod = $.effects.effect[ args.effect ],
  			defaultMode = effectMethod.mode,
  			queue = args.queue,
  			queueName = queue || "fx",
  			complete = args.complete,
  			mode = args.mode,
  			modes = [],
  			prefilter = function( next ) {
  				var el = $( this ),
  					normalizedMode = $.effects.mode( el, mode ) || defaultMode;

  				// Sentinel for duck-punching the :animated pseudo-selector
  				el.data( dataSpaceAnimated, true );

  				// Save effect mode for later use,
  				// we can't just call $.effects.mode again later,
  				// as the .show() below destroys the initial state
  				modes.push( normalizedMode );

  				// See $.uiBackCompat inside of run() for removal of defaultMode in 1.14
  				if ( defaultMode && ( normalizedMode === "show" ||
  						( normalizedMode === defaultMode && normalizedMode === "hide" ) ) ) {
  					el.show();
  				}

  				if ( !defaultMode || normalizedMode !== "none" ) {
  					$.effects.saveStyle( el );
  				}

  				if ( typeof next === "function" ) {
  					next();
  				}
  			};

  		if ( $.fx.off || !effectMethod ) {

  			// Delegate to the original method (e.g., .show()) if possible
  			if ( mode ) {
  				return this[ mode ]( args.duration, complete );
  			} else {
  				return this.each( function() {
  					if ( complete ) {
  						complete.call( this );
  					}
  				} );
  			}
  		}

  		function run( next ) {
  			var elem = $( this );

  			function cleanup() {
  				elem.removeData( dataSpaceAnimated );

  				$.effects.cleanUp( elem );

  				if ( args.mode === "hide" ) {
  					elem.hide();
  				}

  				done();
  			}

  			function done() {
  				if ( typeof complete === "function" ) {
  					complete.call( elem[ 0 ] );
  				}

  				if ( typeof next === "function" ) {
  					next();
  				}
  			}

  			// Override mode option on a per element basis,
  			// as toggle can be either show or hide depending on element state
  			args.mode = modes.shift();

  			if ( $.uiBackCompat === true && !defaultMode ) {
  				if ( elem.is( ":hidden" ) ? mode === "hide" : mode === "show" ) {

  					// Call the core method to track "olddisplay" properly
  					elem[ mode ]();
  					done();
  				} else {
  					effectMethod.call( elem[ 0 ], args, done );
  				}
  			} else {
  				if ( args.mode === "none" ) {

  					// Call the core method to track "olddisplay" properly
  					elem[ mode ]();
  					done();
  				} else {
  					effectMethod.call( elem[ 0 ], args, cleanup );
  				}
  			}
  		}

  		// Run prefilter on all elements first to ensure that
  		// any showing or hiding happens before placeholder creation,
  		// which ensures that any layout changes are correctly captured.
  		return queue === false ?
  			this.each( prefilter ).each( run ) :
  			this.queue( queueName, prefilter ).queue( queueName, run );
  	},

  	show: ( function( orig ) {
  		return function( option ) {
  			if ( standardAnimationOption( option ) ) {
  				return orig.apply( this, arguments );
  			} else {
  				var args = _normalizeArguments.apply( this, arguments );
  				args.mode = "show";
  				return this.effect.call( this, args );
  			}
  		};
  	} )( $.fn.show ),

  	hide: ( function( orig ) {
  		return function( option ) {
  			if ( standardAnimationOption( option ) ) {
  				return orig.apply( this, arguments );
  			} else {
  				var args = _normalizeArguments.apply( this, arguments );
  				args.mode = "hide";
  				return this.effect.call( this, args );
  			}
  		};
  	} )( $.fn.hide ),

  	toggle: ( function( orig ) {
  		return function( option ) {
  			if ( standardAnimationOption( option ) || typeof option === "boolean" ) {
  				return orig.apply( this, arguments );
  			} else {
  				var args = _normalizeArguments.apply( this, arguments );
  				args.mode = "toggle";
  				return this.effect.call( this, args );
  			}
  		};
  	} )( $.fn.toggle ),

  	cssUnit: function( key ) {
  		var style = this.css( key ),
  			val = [];

  		$.each( [ "em", "px", "%", "pt" ], function( i, unit ) {
  			if ( style.indexOf( unit ) > 0 ) {
  				val = [ parseFloat( style ), unit ];
  			}
  		} );
  		return val;
  	},

  	cssClip: function( clipObj ) {
  		if ( clipObj ) {
  			return this.css( "clip", "rect(" + clipObj.top + "px " + clipObj.right + "px " +
  				clipObj.bottom + "px " + clipObj.left + "px)" );
  		}
  		return parseClip( this.css( "clip" ), this );
  	},

  	transfer: function( options, done ) {
  		var element = $( this ),
  			target = $( options.to ),
  			targetFixed = target.css( "position" ) === "fixed",
  			body = $( "body" ),
  			fixTop = targetFixed ? body.scrollTop() : 0,
  			fixLeft = targetFixed ? body.scrollLeft() : 0,
  			endPosition = target.offset(),
  			animation = {
  				top: endPosition.top - fixTop,
  				left: endPosition.left - fixLeft,
  				height: target.innerHeight(),
  				width: target.innerWidth()
  			},
  			startPosition = element.offset(),
  			transfer = $( "<div class='ui-effects-transfer'></div>" );

  		transfer
  			.appendTo( "body" )
  			.addClass( options.className )
  			.css( {
  				top: startPosition.top - fixTop,
  				left: startPosition.left - fixLeft,
  				height: element.innerHeight(),
  				width: element.innerWidth(),
  				position: targetFixed ? "fixed" : "absolute"
  			} )
  			.animate( animation, options.duration, options.easing, function() {
  				transfer.remove();
  				if ( typeof done === "function" ) {
  					done();
  				}
  			} );
  	}
  } );

  function parseClip( str, element ) {
  		var outerWidth = element.outerWidth(),
  			outerHeight = element.outerHeight(),
  			clipRegex = /^rect\((-?\d*\.?\d*px|-?\d+%|auto),?\s*(-?\d*\.?\d*px|-?\d+%|auto),?\s*(-?\d*\.?\d*px|-?\d+%|auto),?\s*(-?\d*\.?\d*px|-?\d+%|auto)\)$/,
  			values = clipRegex.exec( str ) || [ "", 0, outerWidth, outerHeight, 0 ];

  		return {
  			top: parseFloat( values[ 1 ] ) || 0,
  			right: values[ 2 ] === "auto" ? outerWidth : parseFloat( values[ 2 ] ),
  			bottom: values[ 3 ] === "auto" ? outerHeight : parseFloat( values[ 3 ] ),
  			left: parseFloat( values[ 4 ] ) || 0
  		};
  }

  $.fx.step.clip = function( fx ) {
  	if ( !fx.clipInit ) {
  		fx.start = $( fx.elem ).cssClip();
  		if ( typeof fx.end === "string" ) {
  			fx.end = parseClip( fx.end, fx.elem );
  		}
  		fx.clipInit = true;
  	}

  	$( fx.elem ).cssClip( {
  		top: fx.pos * ( fx.end.top - fx.start.top ) + fx.start.top,
  		right: fx.pos * ( fx.end.right - fx.start.right ) + fx.start.right,
  		bottom: fx.pos * ( fx.end.bottom - fx.start.bottom ) + fx.start.bottom,
  		left: fx.pos * ( fx.end.left - fx.start.left ) + fx.start.left
  	} );
  };

  } )();

  /******************************************************************************/
  /*********************************** EASING ***********************************/
  /******************************************************************************/

  ( function() {

  // Based on easing equations from Robert Penner (http://robertpenner.com/easing)

  var baseEasings = {};

  $.each( [ "Quad", "Cubic", "Quart", "Quint", "Expo" ], function( i, name ) {
  	baseEasings[ name ] = function( p ) {
  		return Math.pow( p, i + 2 );
  	};
  } );

  $.extend( baseEasings, {
  	Sine: function( p ) {
  		return 1 - Math.cos( p * Math.PI / 2 );
  	},
  	Circ: function( p ) {
  		return 1 - Math.sqrt( 1 - p * p );
  	},
  	Elastic: function( p ) {
  		return p === 0 || p === 1 ? p :
  			-Math.pow( 2, 8 * ( p - 1 ) ) * Math.sin( ( ( p - 1 ) * 80 - 7.5 ) * Math.PI / 15 );
  	},
  	Back: function( p ) {
  		return p * p * ( 3 * p - 2 );
  	},
  	Bounce: function( p ) {
  		var pow2,
  			bounce = 4;

  		while ( p < ( ( pow2 = Math.pow( 2, --bounce ) ) - 1 ) / 11 ) {}
  		return 1 / Math.pow( 4, 3 - bounce ) - 7.5625 * Math.pow( ( pow2 * 3 - 2 ) / 22 - p, 2 );
  	}
  } );

  $.each( baseEasings, function( name, easeIn ) {
  	$.easing[ "easeIn" + name ] = easeIn;
  	$.easing[ "easeOut" + name ] = function( p ) {
  		return 1 - easeIn( 1 - p );
  	};
  	$.easing[ "easeInOut" + name ] = function( p ) {
  		return p < 0.5 ?
  			easeIn( p * 2 ) / 2 :
  			1 - easeIn( p * -2 + 2 ) / 2;
  	};
  } );

  } )();

  $.effects;


  /*!
   * jQuery UI Effects Blind 1.14.0
   * https://jqueryui.com
   *
   * Copyright OpenJS Foundation and other contributors
   * Released under the MIT license.
   * https://jquery.org/license
   */

  //>>label: Blind Effect
  //>>group: Effects
  //>>description: Blinds the element.
  //>>docs: https://api.jqueryui.com/blind-effect/
  //>>demos: https://jqueryui.com/effect/


  $.effects.define( "blind", "hide", function( options, done ) {
  	var map = {
  			up: [ "bottom", "top" ],
  			vertical: [ "bottom", "top" ],
  			down: [ "top", "bottom" ],
  			left: [ "right", "left" ],
  			horizontal: [ "right", "left" ],
  			right: [ "left", "right" ]
  		},
  		element = $( this ),
  		direction = options.direction || "up",
  		start = element.cssClip(),
  		animate = { clip: $.extend( {}, start ) },
  		placeholder = $.effects.createPlaceholder( element );

  	animate.clip[ map[ direction ][ 0 ] ] = animate.clip[ map[ direction ][ 1 ] ];

  	if ( options.mode === "show" ) {
  		element.cssClip( animate.clip );
  		if ( placeholder ) {
  			placeholder.css( $.effects.clipToBox( animate ) );
  		}

  		animate.clip = start;
  	}

  	if ( placeholder ) {
  		placeholder.animate( $.effects.clipToBox( animate ), options.duration, options.easing );
  	}

  	element.animate( animate, {
  		queue: false,
  		duration: options.duration,
  		easing: options.easing,
  		complete: done
  	} );
  } );


  /*!
   * jQuery UI Effects Bounce 1.14.0
   * https://jqueryui.com
   *
   * Copyright OpenJS Foundation and other contributors
   * Released under the MIT license.
   * https://jquery.org/license
   */

  //>>label: Bounce Effect
  //>>group: Effects
  //>>description: Bounces an element horizontally or vertically n times.
  //>>docs: https://api.jqueryui.com/bounce-effect/
  //>>demos: https://jqueryui.com/effect/


  $.effects.define( "bounce", function( options, done ) {
  	var upAnim, downAnim, refValue,
  		element = $( this ),

  		// Defaults:
  		mode = options.mode,
  		hide = mode === "hide",
  		show = mode === "show",
  		direction = options.direction || "up",
  		distance = options.distance,
  		times = options.times || 5,

  		// Number of internal animations
  		anims = times * 2 + ( show || hide ? 1 : 0 ),
  		speed = options.duration / anims,
  		easing = options.easing,

  		// Utility:
  		ref = ( direction === "up" || direction === "down" ) ? "top" : "left",
  		motion = ( direction === "up" || direction === "left" ),
  		i = 0,

  		queuelen = element.queue().length;

  	$.effects.createPlaceholder( element );

  	refValue = element.css( ref );

  	// Default distance for the BIGGEST bounce is the outer Distance / 3
  	if ( !distance ) {
  		distance = element[ ref === "top" ? "outerHeight" : "outerWidth" ]() / 3;
  	}

  	if ( show ) {
  		downAnim = { opacity: 1 };
  		downAnim[ ref ] = refValue;

  		// If we are showing, force opacity 0 and set the initial position
  		// then do the "first" animation
  		element
  			.css( "opacity", 0 )
  			.css( ref, motion ? -distance * 2 : distance * 2 )
  			.animate( downAnim, speed, easing );
  	}

  	// Start at the smallest distance if we are hiding
  	if ( hide ) {
  		distance = distance / Math.pow( 2, times - 1 );
  	}

  	downAnim = {};
  	downAnim[ ref ] = refValue;

  	// Bounces up/down/left/right then back to 0 -- times * 2 animations happen here
  	for ( ; i < times; i++ ) {
  		upAnim = {};
  		upAnim[ ref ] = ( motion ? "-=" : "+=" ) + distance;

  		element
  			.animate( upAnim, speed, easing )
  			.animate( downAnim, speed, easing );

  		distance = hide ? distance * 2 : distance / 2;
  	}

  	// Last Bounce when Hiding
  	if ( hide ) {
  		upAnim = { opacity: 0 };
  		upAnim[ ref ] = ( motion ? "-=" : "+=" ) + distance;

  		element.animate( upAnim, speed, easing );
  	}

  	element.queue( done );

  	$.effects.unshift( element, queuelen, anims + 1 );
  } );


  /*!
   * jQuery UI Effects Clip 1.14.0
   * https://jqueryui.com
   *
   * Copyright OpenJS Foundation and other contributors
   * Released under the MIT license.
   * https://jquery.org/license
   */

  //>>label: Clip Effect
  //>>group: Effects
  //>>description: Clips the element on and off like an old TV.
  //>>docs: https://api.jqueryui.com/clip-effect/
  //>>demos: https://jqueryui.com/effect/


  $.effects.define( "clip", "hide", function( options, done ) {
  	var start,
  		animate = {},
  		element = $( this ),
  		direction = options.direction || "vertical",
  		both = direction === "both",
  		horizontal = both || direction === "horizontal",
  		vertical = both || direction === "vertical";

  	start = element.cssClip();
  	animate.clip = {
  		top: vertical ? ( start.bottom - start.top ) / 2 : start.top,
  		right: horizontal ? ( start.right - start.left ) / 2 : start.right,
  		bottom: vertical ? ( start.bottom - start.top ) / 2 : start.bottom,
  		left: horizontal ? ( start.right - start.left ) / 2 : start.left
  	};

  	$.effects.createPlaceholder( element );

  	if ( options.mode === "show" ) {
  		element.cssClip( animate.clip );
  		animate.clip = start;
  	}

  	element.animate( animate, {
  		queue: false,
  		duration: options.duration,
  		easing: options.easing,
  		complete: done
  	} );

  } );


  /*!
   * jQuery UI Effects Drop 1.14.0
   * https://jqueryui.com
   *
   * Copyright OpenJS Foundation and other contributors
   * Released under the MIT license.
   * https://jquery.org/license
   */

  //>>label: Drop Effect
  //>>group: Effects
  //>>description: Moves an element in one direction and hides it at the same time.
  //>>docs: https://api.jqueryui.com/drop-effect/
  //>>demos: https://jqueryui.com/effect/


  $.effects.define( "drop", "hide", function( options, done ) {

  	var distance,
  		element = $( this ),
  		mode = options.mode,
  		show = mode === "show",
  		direction = options.direction || "left",
  		ref = ( direction === "up" || direction === "down" ) ? "top" : "left",
  		motion = ( direction === "up" || direction === "left" ) ? "-=" : "+=",
  		oppositeMotion = ( motion === "+=" ) ? "-=" : "+=",
  		animation = {
  			opacity: 0
  		};

  	$.effects.createPlaceholder( element );

  	distance = options.distance ||
  		element[ ref === "top" ? "outerHeight" : "outerWidth" ]( true ) / 2;

  	animation[ ref ] = motion + distance;

  	if ( show ) {
  		element.css( animation );

  		animation[ ref ] = oppositeMotion + distance;
  		animation.opacity = 1;
  	}

  	// Animate
  	element.animate( animation, {
  		queue: false,
  		duration: options.duration,
  		easing: options.easing,
  		complete: done
  	} );
  } );


  /*!
   * jQuery UI Effects Explode 1.14.0
   * https://jqueryui.com
   *
   * Copyright OpenJS Foundation and other contributors
   * Released under the MIT license.
   * https://jquery.org/license
   */

  //>>label: Explode Effect
  //>>group: Effects
  /* eslint-disable max-len */
  //>>description: Explodes an element in all directions into n pieces. Implodes an element to its original wholeness.
  /* eslint-enable max-len */
  //>>docs: https://api.jqueryui.com/explode-effect/
  //>>demos: https://jqueryui.com/effect/


  $.effects.define( "explode", "hide", function( options, done ) {

  	var i, j, left, top, mx, my,
  		rows = options.pieces ? Math.round( Math.sqrt( options.pieces ) ) : 3,
  		cells = rows,
  		element = $( this ),
  		mode = options.mode,
  		show = mode === "show",

  		// Show and then visibility:hidden the element before calculating offset
  		offset = element.show().css( "visibility", "hidden" ).offset(),

  		// Width and height of a piece
  		width = Math.ceil( element.outerWidth() / cells ),
  		height = Math.ceil( element.outerHeight() / rows ),
  		pieces = [];

  	// Children animate complete:
  	function childComplete() {
  		pieces.push( this );
  		if ( pieces.length === rows * cells ) {
  			animComplete();
  		}
  	}

  	// Clone the element for each row and cell.
  	for ( i = 0; i < rows; i++ ) { // ===>
  		top = offset.top + i * height;
  		my = i - ( rows - 1 ) / 2;

  		for ( j = 0; j < cells; j++ ) { // |||
  			left = offset.left + j * width;
  			mx = j - ( cells - 1 ) / 2;

  			// Create a clone of the now hidden main element that will be absolute positioned
  			// within a wrapper div off the -left and -top equal to size of our pieces
  			element
  				.clone()
  				.appendTo( "body" )
  				.wrap( "<div></div>" )
  				.css( {
  					position: "absolute",
  					visibility: "visible",
  					left: -j * width,
  					top: -i * height
  				} )

  				// Select the wrapper - make it overflow: hidden and absolute positioned based on
  				// where the original was located +left and +top equal to the size of pieces
  				.parent()
  					.addClass( "ui-effects-explode" )
  					.css( {
  						position: "absolute",
  						overflow: "hidden",
  						width: width,
  						height: height,
  						left: left + ( show ? mx * width : 0 ),
  						top: top + ( show ? my * height : 0 ),
  						opacity: show ? 0 : 1
  					} )
  					.animate( {
  						left: left + ( show ? 0 : mx * width ),
  						top: top + ( show ? 0 : my * height ),
  						opacity: show ? 1 : 0
  					}, options.duration || 500, options.easing, childComplete );
  		}
  	}

  	function animComplete() {
  		element.css( {
  			visibility: "visible"
  		} );
  		$( pieces ).remove();
  		done();
  	}
  } );


  /*!
   * jQuery UI Effects Fade 1.14.0
   * https://jqueryui.com
   *
   * Copyright OpenJS Foundation and other contributors
   * Released under the MIT license.
   * https://jquery.org/license
   */

  //>>label: Fade Effect
  //>>group: Effects
  //>>description: Fades the element.
  //>>docs: https://api.jqueryui.com/fade-effect/
  //>>demos: https://jqueryui.com/effect/


  $.effects.define( "fade", "toggle", function( options, done ) {
  	var show = options.mode === "show";

  	$( this )
  		.css( "opacity", show ? 0 : 1 )
  		.animate( {
  			opacity: show ? 1 : 0
  		}, {
  			queue: false,
  			duration: options.duration,
  			easing: options.easing,
  			complete: done
  		} );
  } );


  /*!
   * jQuery UI Effects Fold 1.14.0
   * https://jqueryui.com
   *
   * Copyright OpenJS Foundation and other contributors
   * Released under the MIT license.
   * https://jquery.org/license
   */

  //>>label: Fold Effect
  //>>group: Effects
  //>>description: Folds an element first horizontally and then vertically.
  //>>docs: https://api.jqueryui.com/fold-effect/
  //>>demos: https://jqueryui.com/effect/


  $.effects.define( "fold", "hide", function( options, done ) {

  	// Create element
  	var element = $( this ),
  		mode = options.mode,
  		show = mode === "show",
  		hide = mode === "hide",
  		size = options.size || 15,
  		percent = /([0-9]+)%/.exec( size ),
  		horizFirst = !!options.horizFirst,
  		ref = horizFirst ? [ "right", "bottom" ] : [ "bottom", "right" ],
  		duration = options.duration / 2,

  		placeholder = $.effects.createPlaceholder( element ),

  		start = element.cssClip(),
  		animation1 = { clip: $.extend( {}, start ) },
  		animation2 = { clip: $.extend( {}, start ) },

  		distance = [ start[ ref[ 0 ] ], start[ ref[ 1 ] ] ],

  		queuelen = element.queue().length;

  	if ( percent ) {
  		size = parseInt( percent[ 1 ], 10 ) / 100 * distance[ hide ? 0 : 1 ];
  	}
  	animation1.clip[ ref[ 0 ] ] = size;
  	animation2.clip[ ref[ 0 ] ] = size;
  	animation2.clip[ ref[ 1 ] ] = 0;

  	if ( show ) {
  		element.cssClip( animation2.clip );
  		if ( placeholder ) {
  			placeholder.css( $.effects.clipToBox( animation2 ) );
  		}

  		animation2.clip = start;
  	}

  	// Animate
  	element
  		.queue( function( next ) {
  			if ( placeholder ) {
  				placeholder
  					.animate( $.effects.clipToBox( animation1 ), duration, options.easing )
  					.animate( $.effects.clipToBox( animation2 ), duration, options.easing );
  			}

  			next();
  		} )
  		.animate( animation1, duration, options.easing )
  		.animate( animation2, duration, options.easing )
  		.queue( done );

  	$.effects.unshift( element, queuelen, 4 );
  } );


  /*!
   * jQuery UI Effects Highlight 1.14.0
   * https://jqueryui.com
   *
   * Copyright OpenJS Foundation and other contributors
   * Released under the MIT license.
   * https://jquery.org/license
   */

  //>>label: Highlight Effect
  //>>group: Effects
  //>>description: Highlights the background of an element in a defined color for a custom duration.
  //>>docs: https://api.jqueryui.com/highlight-effect/
  //>>demos: https://jqueryui.com/effect/


  $.effects.define( "highlight", "show", function( options, done ) {
  	var element = $( this ),
  		animation = {
  			backgroundColor: element.css( "backgroundColor" )
  		};

  	if ( options.mode === "hide" ) {
  		animation.opacity = 0;
  	}

  	$.effects.saveStyle( element );

  	element
  		.css( {
  			backgroundImage: "none",
  			backgroundColor: options.color || "#ffff99"
  		} )
  		.animate( animation, {
  			queue: false,
  			duration: options.duration,
  			easing: options.easing,
  			complete: done
  		} );
  } );


  /*!
   * jQuery UI Effects Size 1.14.0
   * https://jqueryui.com
   *
   * Copyright OpenJS Foundation and other contributors
   * Released under the MIT license.
   * https://jquery.org/license
   */

  //>>label: Size Effect
  //>>group: Effects
  //>>description: Resize an element to a specified width and height.
  //>>docs: https://api.jqueryui.com/size-effect/
  //>>demos: https://jqueryui.com/effect/


  $.effects.define( "size", function( options, done ) {

  	// Create element
  	var baseline, factor, temp,
  		element = $( this ),

  		// Copy for children
  		cProps = [ "fontSize" ],
  		vProps = [ "borderTopWidth", "borderBottomWidth", "paddingTop", "paddingBottom" ],
  		hProps = [ "borderLeftWidth", "borderRightWidth", "paddingLeft", "paddingRight" ],

  		// Set options
  		mode = options.mode,
  		restore = mode !== "effect",
  		scale = options.scale || "both",
  		origin = options.origin || [ "middle", "center" ],
  		position = element.css( "position" ),
  		pos = element.position(),
  		original = $.effects.scaledDimensions( element ),
  		from = options.from || original,
  		to = options.to || $.effects.scaledDimensions( element, 0 );

  	$.effects.createPlaceholder( element );

  	if ( mode === "show" ) {
  		temp = from;
  		from = to;
  		to = temp;
  	}

  	// Set scaling factor
  	factor = {
  		from: {
  			y: from.height / original.height,
  			x: from.width / original.width
  		},
  		to: {
  			y: to.height / original.height,
  			x: to.width / original.width
  		}
  	};

  	// Scale the css box
  	if ( scale === "box" || scale === "both" ) {

  		// Vertical props scaling
  		if ( factor.from.y !== factor.to.y ) {
  			from = $.effects.setTransition( element, vProps, factor.from.y, from );
  			to = $.effects.setTransition( element, vProps, factor.to.y, to );
  		}

  		// Horizontal props scaling
  		if ( factor.from.x !== factor.to.x ) {
  			from = $.effects.setTransition( element, hProps, factor.from.x, from );
  			to = $.effects.setTransition( element, hProps, factor.to.x, to );
  		}
  	}

  	// Scale the content
  	if ( scale === "content" || scale === "both" ) {

  		// Vertical props scaling
  		if ( factor.from.y !== factor.to.y ) {
  			from = $.effects.setTransition( element, cProps, factor.from.y, from );
  			to = $.effects.setTransition( element, cProps, factor.to.y, to );
  		}
  	}

  	// Adjust the position properties based on the provided origin points
  	if ( origin ) {
  		baseline = $.effects.getBaseline( origin, original );
  		from.top = ( original.outerHeight - from.outerHeight ) * baseline.y + pos.top;
  		from.left = ( original.outerWidth - from.outerWidth ) * baseline.x + pos.left;
  		to.top = ( original.outerHeight - to.outerHeight ) * baseline.y + pos.top;
  		to.left = ( original.outerWidth - to.outerWidth ) * baseline.x + pos.left;
  	}
  	delete from.outerHeight;
  	delete from.outerWidth;
  	element.css( from );

  	// Animate the children if desired
  	if ( scale === "content" || scale === "both" ) {

  		vProps = vProps.concat( [ "marginTop", "marginBottom" ] ).concat( cProps );
  		hProps = hProps.concat( [ "marginLeft", "marginRight" ] );

  		// Only animate children with width attributes specified
  		// TODO: is this right? should we include anything with css width specified as well
  		element.find( "*[width]" ).each( function() {
  			var child = $( this ),
  				childOriginal = $.effects.scaledDimensions( child ),
  				childFrom = {
  					height: childOriginal.height * factor.from.y,
  					width: childOriginal.width * factor.from.x,
  					outerHeight: childOriginal.outerHeight * factor.from.y,
  					outerWidth: childOriginal.outerWidth * factor.from.x
  				},
  				childTo = {
  					height: childOriginal.height * factor.to.y,
  					width: childOriginal.width * factor.to.x,
  					outerHeight: childOriginal.height * factor.to.y,
  					outerWidth: childOriginal.width * factor.to.x
  				};

  			// Vertical props scaling
  			if ( factor.from.y !== factor.to.y ) {
  				childFrom = $.effects.setTransition( child, vProps, factor.from.y, childFrom );
  				childTo = $.effects.setTransition( child, vProps, factor.to.y, childTo );
  			}

  			// Horizontal props scaling
  			if ( factor.from.x !== factor.to.x ) {
  				childFrom = $.effects.setTransition( child, hProps, factor.from.x, childFrom );
  				childTo = $.effects.setTransition( child, hProps, factor.to.x, childTo );
  			}

  			if ( restore ) {
  				$.effects.saveStyle( child );
  			}

  			// Animate children
  			child.css( childFrom );
  			child.animate( childTo, options.duration, options.easing, function() {

  				// Restore children
  				if ( restore ) {
  					$.effects.restoreStyle( child );
  				}
  			} );
  		} );
  	}

  	// Animate
  	element.animate( to, {
  		queue: false,
  		duration: options.duration,
  		easing: options.easing,
  		complete: function() {

  			var offset = element.offset();

  			if ( to.opacity === 0 ) {
  				element.css( "opacity", from.opacity );
  			}

  			if ( !restore ) {
  				element
  					.css( "position", position === "static" ? "relative" : position )
  					.offset( offset );

  				// Need to save style here so that automatic style restoration
  				// doesn't restore to the original styles from before the animation.
  				$.effects.saveStyle( element );
  			}

  			done();
  		}
  	} );

  } );


  /*!
   * jQuery UI Effects Scale 1.14.0
   * https://jqueryui.com
   *
   * Copyright OpenJS Foundation and other contributors
   * Released under the MIT license.
   * https://jquery.org/license
   */

  //>>label: Scale Effect
  //>>group: Effects
  //>>description: Grows or shrinks an element and its content.
  //>>docs: https://api.jqueryui.com/scale-effect/
  //>>demos: https://jqueryui.com/effect/


  $.effects.define( "scale", function( options, done ) {

  	// Create element
  	var el = $( this ),
  		mode = options.mode,
  		percent = parseInt( options.percent, 10 ) ||
  			( parseInt( options.percent, 10 ) === 0 ? 0 : ( mode !== "effect" ? 0 : 100 ) ),

  		newOptions = $.extend( true, {
  			from: $.effects.scaledDimensions( el ),
  			to: $.effects.scaledDimensions( el, percent, options.direction || "both" ),
  			origin: options.origin || [ "middle", "center" ]
  		}, options );

  	// Fade option to support puff
  	if ( options.fade ) {
  		newOptions.from.opacity = 1;
  		newOptions.to.opacity = 0;
  	}

  	$.effects.effect.size.call( this, newOptions, done );
  } );


  /*!
   * jQuery UI Effects Puff 1.14.0
   * https://jqueryui.com
   *
   * Copyright OpenJS Foundation and other contributors
   * Released under the MIT license.
   * https://jquery.org/license
   */

  //>>label: Puff Effect
  //>>group: Effects
  //>>description: Creates a puff effect by scaling the element up and hiding it at the same time.
  //>>docs: https://api.jqueryui.com/puff-effect/
  //>>demos: https://jqueryui.com/effect/


  $.effects.define( "puff", "hide", function( options, done ) {
  	var newOptions = $.extend( true, {}, options, {
  		fade: true,
  		percent: parseInt( options.percent, 10 ) || 150
  	} );

  	$.effects.effect.scale.call( this, newOptions, done );
  } );


  /*!
   * jQuery UI Effects Pulsate 1.14.0
   * https://jqueryui.com
   *
   * Copyright OpenJS Foundation and other contributors
   * Released under the MIT license.
   * https://jquery.org/license
   */

  //>>label: Pulsate Effect
  //>>group: Effects
  //>>description: Pulsates an element n times by changing the opacity to zero and back.
  //>>docs: https://api.jqueryui.com/pulsate-effect/
  //>>demos: https://jqueryui.com/effect/


  $.effects.define( "pulsate", "show", function( options, done ) {
  	var element = $( this ),
  		mode = options.mode,
  		show = mode === "show",
  		hide = mode === "hide",
  		showhide = show || hide,

  		// Showing or hiding leaves off the "last" animation
  		anims = ( ( options.times || 5 ) * 2 ) + ( showhide ? 1 : 0 ),
  		duration = options.duration / anims,
  		animateTo = 0,
  		i = 1,
  		queuelen = element.queue().length;

  	if ( show || !element.is( ":visible" ) ) {
  		element.css( "opacity", 0 ).show();
  		animateTo = 1;
  	}

  	// Anims - 1 opacity "toggles"
  	for ( ; i < anims; i++ ) {
  		element.animate( { opacity: animateTo }, duration, options.easing );
  		animateTo = 1 - animateTo;
  	}

  	element.animate( { opacity: animateTo }, duration, options.easing );

  	element.queue( done );

  	$.effects.unshift( element, queuelen, anims + 1 );
  } );


  /*!
   * jQuery UI Effects Shake 1.14.0
   * https://jqueryui.com
   *
   * Copyright OpenJS Foundation and other contributors
   * Released under the MIT license.
   * https://jquery.org/license
   */

  //>>label: Shake Effect
  //>>group: Effects
  //>>description: Shakes an element horizontally or vertically n times.
  //>>docs: https://api.jqueryui.com/shake-effect/
  //>>demos: https://jqueryui.com/effect/


  $.effects.define( "shake", function( options, done ) {

  	var i = 1,
  		element = $( this ),
  		direction = options.direction || "left",
  		distance = options.distance || 20,
  		times = options.times || 3,
  		anims = times * 2 + 1,
  		speed = Math.round( options.duration / anims ),
  		ref = ( direction === "up" || direction === "down" ) ? "top" : "left",
  		positiveMotion = ( direction === "up" || direction === "left" ),
  		animation = {},
  		animation1 = {},
  		animation2 = {},

  		queuelen = element.queue().length;

  	$.effects.createPlaceholder( element );

  	// Animation
  	animation[ ref ] = ( positiveMotion ? "-=" : "+=" ) + distance;
  	animation1[ ref ] = ( positiveMotion ? "+=" : "-=" ) + distance * 2;
  	animation2[ ref ] = ( positiveMotion ? "-=" : "+=" ) + distance * 2;

  	// Animate
  	element.animate( animation, speed, options.easing );

  	// Shakes
  	for ( ; i < times; i++ ) {
  		element
  			.animate( animation1, speed, options.easing )
  			.animate( animation2, speed, options.easing );
  	}

  	element
  		.animate( animation1, speed, options.easing )
  		.animate( animation, speed / 2, options.easing )
  		.queue( done );

  	$.effects.unshift( element, queuelen, anims + 1 );
  } );


  /*!
   * jQuery UI Effects Slide 1.14.0
   * https://jqueryui.com
   *
   * Copyright OpenJS Foundation and other contributors
   * Released under the MIT license.
   * https://jquery.org/license
   */

  //>>label: Slide Effect
  //>>group: Effects
  //>>description: Slides an element in and out of the viewport.
  //>>docs: https://api.jqueryui.com/slide-effect/
  //>>demos: https://jqueryui.com/effect/


  $.effects.define( "slide", "show", function( options, done ) {
  	var startClip, startRef,
  		element = $( this ),
  		map = {
  			up: [ "bottom", "top" ],
  			down: [ "top", "bottom" ],
  			left: [ "right", "left" ],
  			right: [ "left", "right" ]
  		},
  		mode = options.mode,
  		direction = options.direction || "left",
  		ref = ( direction === "up" || direction === "down" ) ? "top" : "left",
  		positiveMotion = ( direction === "up" || direction === "left" ),
  		distance = options.distance ||
  			element[ ref === "top" ? "outerHeight" : "outerWidth" ]( true ),
  		animation = {};

  	$.effects.createPlaceholder( element );

  	startClip = element.cssClip();
  	startRef = element.position()[ ref ];

  	// Define hide animation
  	animation[ ref ] = ( positiveMotion ? -1 : 1 ) * distance + startRef;
  	animation.clip = element.cssClip();
  	animation.clip[ map[ direction ][ 1 ] ] = animation.clip[ map[ direction ][ 0 ] ];

  	// Reverse the animation if we're showing
  	if ( mode === "show" ) {
  		element.cssClip( animation.clip );
  		element.css( ref, animation[ ref ] );
  		animation.clip = startClip;
  		animation[ ref ] = startRef;
  	}

  	// Actually animate
  	element.animate( animation, {
  		queue: false,
  		duration: options.duration,
  		easing: options.easing,
  		complete: done
  	} );
  } );
  if ( $.uiBackCompat === true ) {
  	$.effects.define( "transfer", function( options, done ) {
  		$( this ).transfer( options, done );
  	} );
  }


  /*!
   * jQuery UI Focusable 1.14.0
   * https://jqueryui.com
   *
   * Copyright OpenJS Foundation and other contributors
   * Released under the MIT license.
   * https://jquery.org/license
   */

  //>>label: :focusable Selector
  //>>group: Core
  //>>description: Selects elements which can be focused.
  //>>docs: https://api.jqueryui.com/focusable-selector/


  // Selectors
  $.ui.focusable = function( element, hasTabindex ) {
  	var map, mapName, img, focusableIfVisible, fieldset,
  		nodeName = element.nodeName.toLowerCase();

  	if ( "area" === nodeName ) {
  		map = element.parentNode;
  		mapName = map.name;
  		if ( !element.href || !mapName || map.nodeName.toLowerCase() !== "map" ) {
  			return false;
  		}
  		img = $( "img[usemap='#" + mapName + "']" );
  		return img.length > 0 && img.is( ":visible" );
  	}

  	if ( /^(input|select|textarea|button|object)$/.test( nodeName ) ) {
  		focusableIfVisible = !element.disabled;

  		if ( focusableIfVisible ) {

  			// Form controls within a disabled fieldset are disabled.
  			// However, controls within the fieldset's legend do not get disabled.
  			// Since controls generally aren't placed inside legends, we skip
  			// this portion of the check.
  			fieldset = $( element ).closest( "fieldset" )[ 0 ];
  			if ( fieldset ) {
  				focusableIfVisible = !fieldset.disabled;
  			}
  		}
  	} else if ( "a" === nodeName ) {
  		focusableIfVisible = element.href || hasTabindex;
  	} else {
  		focusableIfVisible = hasTabindex;
  	}

  	return focusableIfVisible && $( element ).is( ":visible" ) &&
  		$( element ).css( "visibility" ) === "visible";
  };

  $.extend( $.expr.pseudos, {
  	focusable: function( element ) {
  		return $.ui.focusable( element, $.attr( element, "tabindex" ) != null );
  	}
  } );

  $.ui.focusable;


  /*!
   * jQuery UI Form Reset Mixin 1.14.0
   * https://jqueryui.com
   *
   * Copyright OpenJS Foundation and other contributors
   * Released under the MIT license.
   * https://jquery.org/license
   */

  //>>label: Form Reset Mixin
  //>>group: Core
  //>>description: Refresh input widgets when their form is reset
  //>>docs: https://api.jqueryui.com/form-reset-mixin/


  $.ui.formResetMixin = {
  	_formResetHandler: function() {
  		var form = $( this );

  		// Wait for the form reset to actually happen before refreshing
  		setTimeout( function() {
  			var instances = form.data( "ui-form-reset-instances" );
  			$.each( instances, function() {
  				this.refresh();
  			} );
  		} );
  	},

  	_bindFormResetHandler: function() {
  		this.form = $( this.element.prop( "form" ) );
  		if ( !this.form.length ) {
  			return;
  		}

  		var instances = this.form.data( "ui-form-reset-instances" ) || [];
  		if ( !instances.length ) {

  			// We don't use _on() here because we use a single event handler per form
  			this.form.on( "reset.ui-form-reset", this._formResetHandler );
  		}
  		instances.push( this );
  		this.form.data( "ui-form-reset-instances", instances );
  	},

  	_unbindFormResetHandler: function() {
  		if ( !this.form.length ) {
  			return;
  		}

  		var instances = this.form.data( "ui-form-reset-instances" );
  		instances.splice( $.inArray( this, instances ), 1 );
  		if ( instances.length ) {
  			this.form.data( "ui-form-reset-instances", instances );
  		} else {
  			this.form
  				.removeData( "ui-form-reset-instances" )
  				.off( "reset.ui-form-reset" );
  		}
  	}
  };


  /*!
   * jQuery UI Legacy jQuery Core patches 1.14.0
   * https://jqueryui.com
   *
   * Copyright OpenJS Foundation and other contributors
   * Released under the MIT license.
   * https://jquery.org/license
   *
   */

  //>>label: Legacy jQuery Core patches
  //>>group: Core
  //>>description: Backport `.even()`, `.odd()` and `$.escapeSelector` to older jQuery Core versions (deprecated)


  // Support: jQuery 2.2.x or older.
  // This method has been defined in jQuery 3.0.0.
  // Code from https://github.com/jquery/jquery/blob/e539bac79e666bba95bba86d690b4e609dca2286/src/selector/escapeSelector.js
  if ( !$.escapeSelector ) {
  	$.escapeSelector = function( id ) {
  		return CSS.escape( id + "" );
  	};
  }

  // Support: jQuery 3.4.x or older
  // These methods have been defined in jQuery 3.5.0.
  if ( !$.fn.even || !$.fn.odd ) {
  	$.fn.extend( {
  		even: function() {
  			return this.filter( function( i ) {
  				return i % 2 === 0;
  			} );
  		},
  		odd: function() {
  			return this.filter( function( i ) {
  				return i % 2 === 1;
  			} );
  		}
  	} );
  }
  /*!
   * jQuery UI Keycode 1.14.0
   * https://jqueryui.com
   *
   * Copyright OpenJS Foundation and other contributors
   * Released under the MIT license.
   * https://jquery.org/license
   */

  //>>label: Keycode
  //>>group: Core
  //>>description: Provide keycodes as keynames
  //>>docs: https://api.jqueryui.com/jQuery.ui.keyCode/


  $.ui.keyCode = {
  	BACKSPACE: 8,
  	COMMA: 188,
  	DELETE: 46,
  	DOWN: 40,
  	END: 35,
  	ENTER: 13,
  	ESCAPE: 27,
  	HOME: 36,
  	LEFT: 37,
  	PAGE_DOWN: 34,
  	PAGE_UP: 33,
  	PERIOD: 190,
  	RIGHT: 39,
  	SPACE: 32,
  	TAB: 9,
  	UP: 38
  };


  /*!
   * jQuery UI Labels 1.14.0
   * https://jqueryui.com
   *
   * Copyright OpenJS Foundation and other contributors
   * Released under the MIT license.
   * https://jquery.org/license
   */

  //>>label: labels
  //>>group: Core
  //>>description: Find all the labels associated with a given input
  //>>docs: https://api.jqueryui.com/labels/


  $.fn.labels = function() {
  	var ancestor, selector, id, labels, ancestors;

  	if ( !this.length ) {
  		return this.pushStack( [] );
  	}

  	// Check control.labels first
  	if ( this[ 0 ].labels && this[ 0 ].labels.length ) {
  		return this.pushStack( this[ 0 ].labels );
  	}

  	// If `control.labels` is empty - e.g. inside of document fragments - find
  	// the labels manually
  	labels = this.eq( 0 ).parents( "label" );

  	// Look for the label based on the id
  	id = this.attr( "id" );
  	if ( id ) {

  		// We don't search against the document in case the element
  		// is disconnected from the DOM
  		ancestor = this.eq( 0 ).parents().last();

  		// Get a full set of top level ancestors
  		ancestors = ancestor.add( ancestor.length ? ancestor.siblings() : this.siblings() );

  		// Create a selector for the label based on the id
  		selector = "label[for='" + CSS.escape( id ) + "']";

  		labels = labels.add( ancestors.find( selector ).addBack( selector ) );

  	}

  	// Return whatever we have found for labels
  	return this.pushStack( labels );
  };


  /*!
   * jQuery UI Scroll Parent 1.14.0
   * https://jqueryui.com
   *
   * Copyright OpenJS Foundation and other contributors
   * Released under the MIT license.
   * https://jquery.org/license
   */

  //>>label: scrollParent
  //>>group: Core
  //>>description: Get the closest ancestor element that is scrollable.
  //>>docs: https://api.jqueryui.com/scrollParent/


  $.fn.scrollParent = function( includeHidden ) {
  	var position = this.css( "position" ),
  		excludeStaticParent = position === "absolute",
  		overflowRegex = includeHidden ? /(auto|scroll|hidden)/ : /(auto|scroll)/,
  		scrollParent = this.parents().filter( function() {
  			var parent = $( this );
  			if ( excludeStaticParent && parent.css( "position" ) === "static" ) {
  				return false;
  			}
  			return overflowRegex.test( parent.css( "overflow" ) + parent.css( "overflow-y" ) +
  				parent.css( "overflow-x" ) );
  		} ).eq( 0 );

  	return position === "fixed" || !scrollParent.length ?
  		$( this[ 0 ].ownerDocument || document ) :
  		scrollParent;
  };


  /*!
   * jQuery UI Tabbable 1.14.0
   * https://jqueryui.com
   *
   * Copyright OpenJS Foundation and other contributors
   * Released under the MIT license.
   * https://jquery.org/license
   */

  //>>label: :tabbable Selector
  //>>group: Core
  //>>description: Selects elements which can be tabbed to.
  //>>docs: https://api.jqueryui.com/tabbable-selector/


  $.extend( $.expr.pseudos, {
  	tabbable: function( element ) {
  		var tabIndex = $.attr( element, "tabindex" ),
  			hasTabindex = tabIndex != null;
  		return ( !hasTabindex || tabIndex >= 0 ) && $.ui.focusable( element, hasTabindex );
  	}
  } );


  /*!
   * jQuery UI Unique ID 1.14.0
   * https://jqueryui.com
   *
   * Copyright OpenJS Foundation and other contributors
   * Released under the MIT license.
   * https://jquery.org/license
   */

  //>>label: uniqueId
  //>>group: Core
  //>>description: Functions to generate and remove uniqueId's
  //>>docs: https://api.jqueryui.com/uniqueId/


  $.fn.extend( {
  	uniqueId: ( function() {
  		var uuid = 0;

  		return function() {
  			return this.each( function() {
  				if ( !this.id ) {
  					this.id = "ui-id-" + ( ++uuid );
  				}
  			} );
  		};
  	} )(),

  	removeUniqueId: function() {
  		return this.each( function() {
  			if ( /^ui-id-\d+$/.test( this.id ) ) {
  				$( this ).removeAttr( "id" );
  			}
  		} );
  	}
  } );


  /*!
   * jQuery UI Accordion 1.14.0
   * https://jqueryui.com
   *
   * Copyright OpenJS Foundation and other contributors
   * Released under the MIT license.
   * https://jquery.org/license
   */

  //>>label: Accordion
  //>>group: Widgets
  /* eslint-disable max-len */
  //>>description: Displays collapsible content panels for presenting information in a limited amount of space.
  /* eslint-enable max-len */
  //>>docs: https://api.jqueryui.com/accordion/
  //>>demos: https://jqueryui.com/accordion/
  //>>css.structure: ../../themes/base/core.css
  //>>css.structure: ../../themes/base/accordion.css
  //>>css.theme: ../../themes/base/theme.css


  $.widget( "ui.accordion", {
  	version: "1.14.0",
  	options: {
  		active: 0,
  		animate: {},
  		classes: {
  			"ui-accordion-header": "ui-corner-top",
  			"ui-accordion-header-collapsed": "ui-corner-all",
  			"ui-accordion-content": "ui-corner-bottom"
  		},
  		collapsible: false,
  		event: "click",
  		header: function( elem ) {
  			return elem
  				.find( "> li > :first-child" )
  				.add(
  					elem.find( "> :not(li)" )

  						// Support: jQuery <3.5 only
  						// We could use `.even()` but that's unavailable in older jQuery.
  						.filter( function( i ) {
  							return i % 2 === 0;
  						} )
  				);
  		},
  		heightStyle: "auto",
  		icons: {
  			activeHeader: "ui-icon-triangle-1-s",
  			header: "ui-icon-triangle-1-e"
  		},

  		// Callbacks
  		activate: null,
  		beforeActivate: null
  	},

  	hideProps: {
  		borderTopWidth: "hide",
  		borderBottomWidth: "hide",
  		paddingTop: "hide",
  		paddingBottom: "hide",
  		height: "hide"
  	},

  	showProps: {
  		borderTopWidth: "show",
  		borderBottomWidth: "show",
  		paddingTop: "show",
  		paddingBottom: "show",
  		height: "show"
  	},

  	_create: function() {
  		var options = this.options;

  		this.prevShow = this.prevHide = $();
  		this._addClass( "ui-accordion", "ui-widget ui-helper-reset" );
  		this.element.attr( "role", "tablist" );

  		// Don't allow collapsible: false and active: false / null
  		if ( !options.collapsible && ( options.active === false || options.active == null ) ) {
  			options.active = 0;
  		}

  		this._processPanels();

  		// handle negative values
  		if ( options.active < 0 ) {
  			options.active += this.headers.length;
  		}
  		this._refresh();
  	},

  	_getCreateEventData: function() {
  		return {
  			header: this.active,
  			panel: !this.active.length ? $() : this.active.next()
  		};
  	},

  	_createIcons: function() {
  		var icon, children,
  			icons = this.options.icons;

  		if ( icons ) {
  			icon = $( "<span>" );
  			this._addClass( icon, "ui-accordion-header-icon", "ui-icon " + icons.header );
  			icon.prependTo( this.headers );
  			children = this.active.children( ".ui-accordion-header-icon" );
  			this._removeClass( children, icons.header )
  				._addClass( children, null, icons.activeHeader )
  				._addClass( this.headers, "ui-accordion-icons" );
  		}
  	},

  	_destroyIcons: function() {
  		this._removeClass( this.headers, "ui-accordion-icons" );
  		this.headers.children( ".ui-accordion-header-icon" ).remove();
  	},

  	_destroy: function() {
  		var contents;

  		// Clean up main element
  		this.element.removeAttr( "role" );

  		// Clean up headers
  		this.headers
  			.removeAttr( "role aria-expanded aria-selected aria-controls tabIndex" )
  			.removeUniqueId();

  		this._destroyIcons();

  		// Clean up content panels
  		contents = this.headers.next()
  			.css( "display", "" )
  			.removeAttr( "role aria-hidden aria-labelledby" )
  			.removeUniqueId();

  		if ( this.options.heightStyle !== "content" ) {
  			contents.css( "height", "" );
  		}
  	},

  	_setOption: function( key, value ) {
  		if ( key === "active" ) {

  			// _activate() will handle invalid values and update this.options
  			this._activate( value );
  			return;
  		}

  		if ( key === "event" ) {
  			if ( this.options.event ) {
  				this._off( this.headers, this.options.event );
  			}
  			this._setupEvents( value );
  		}

  		this._super( key, value );

  		// Setting collapsible: false while collapsed; open first panel
  		if ( key === "collapsible" && !value && this.options.active === false ) {
  			this._activate( 0 );
  		}

  		if ( key === "icons" ) {
  			this._destroyIcons();
  			if ( value ) {
  				this._createIcons();
  			}
  		}
  	},

  	_setOptionDisabled: function( value ) {
  		this._super( value );

  		this.element.attr( "aria-disabled", value );
  		this._toggleClass( null, "ui-state-disabled", !!value );
  	},

  	_keydown: function( event ) {
  		if ( event.altKey || event.ctrlKey ) {
  			return;
  		}

  		var keyCode = $.ui.keyCode,
  			length = this.headers.length,
  			currentIndex = this.headers.index( event.target ),
  			toFocus = false;

  		switch ( event.keyCode ) {
  		case keyCode.RIGHT:
  		case keyCode.DOWN:
  			toFocus = this.headers[ ( currentIndex + 1 ) % length ];
  			break;
  		case keyCode.LEFT:
  		case keyCode.UP:
  			toFocus = this.headers[ ( currentIndex - 1 + length ) % length ];
  			break;
  		case keyCode.SPACE:
  		case keyCode.ENTER:
  			this._eventHandler( event );
  			break;
  		case keyCode.HOME:
  			toFocus = this.headers[ 0 ];
  			break;
  		case keyCode.END:
  			toFocus = this.headers[ length - 1 ];
  			break;
  		}

  		if ( toFocus ) {
  			$( event.target ).attr( "tabIndex", -1 );
  			$( toFocus ).attr( "tabIndex", 0 );
  			$( toFocus ).trigger( "focus" );
  			event.preventDefault();
  		}
  	},

  	_panelKeyDown: function( event ) {
  		if ( event.keyCode === $.ui.keyCode.UP && event.ctrlKey ) {
  			$( event.currentTarget ).prev().trigger( "focus" );
  		}
  	},

  	refresh: function() {
  		var options = this.options;
  		this._processPanels();

  		// Was collapsed or no panel
  		if ( ( options.active === false && options.collapsible === true ) ||
  				!this.headers.length ) {
  			options.active = false;
  			this.active = $();

  		// active false only when collapsible is true
  		} else if ( options.active === false ) {
  			this._activate( 0 );

  		// was active, but active panel is gone
  		} else if ( this.active.length && !$.contains( this.element[ 0 ], this.active[ 0 ] ) ) {

  			// all remaining panel are disabled
  			if ( this.headers.length === this.headers.find( ".ui-state-disabled" ).length ) {
  				options.active = false;
  				this.active = $();

  			// activate previous panel
  			} else {
  				this._activate( Math.max( 0, options.active - 1 ) );
  			}

  		// was active, active panel still exists
  		} else {

  			// make sure active index is correct
  			options.active = this.headers.index( this.active );
  		}

  		this._destroyIcons();

  		this._refresh();
  	},

  	_processPanels: function() {
  		var prevHeaders = this.headers,
  			prevPanels = this.panels;

  		if ( typeof this.options.header === "function" ) {
  			this.headers = this.options.header( this.element );
  		} else {
  			this.headers = this.element.find( this.options.header );
  		}
  		this._addClass( this.headers, "ui-accordion-header ui-accordion-header-collapsed",
  			"ui-state-default" );

  		this.panels = this.headers.next().filter( ":not(.ui-accordion-content-active)" ).hide();
  		this._addClass( this.panels, "ui-accordion-content", "ui-helper-reset ui-widget-content" );

  		// Avoid memory leaks (#10056)
  		if ( prevPanels ) {
  			this._off( prevHeaders.not( this.headers ) );
  			this._off( prevPanels.not( this.panels ) );
  		}
  	},

  	_refresh: function() {
  		var maxHeight,
  			options = this.options,
  			heightStyle = options.heightStyle,
  			parent = this.element.parent();

  		this.active = this._findActive( options.active );
  		this._addClass( this.active, "ui-accordion-header-active", "ui-state-active" )
  			._removeClass( this.active, "ui-accordion-header-collapsed" );
  		this._addClass( this.active.next(), "ui-accordion-content-active" );
  		this.active.next().show();

  		this.headers
  			.attr( "role", "tab" )
  			.each( function() {
  				var header = $( this ),
  					headerId = header.uniqueId().attr( "id" ),
  					panel = header.next(),
  					panelId = panel.uniqueId().attr( "id" );
  				header.attr( "aria-controls", panelId );
  				panel.attr( "aria-labelledby", headerId );
  			} )
  			.next()
  				.attr( "role", "tabpanel" );

  		this.headers
  			.not( this.active )
  				.attr( {
  					"aria-selected": "false",
  					"aria-expanded": "false",
  					tabIndex: -1
  				} )
  				.next()
  					.attr( {
  						"aria-hidden": "true"
  					} )
  					.hide();

  		// Make sure at least one header is in the tab order
  		if ( !this.active.length ) {
  			this.headers.eq( 0 ).attr( "tabIndex", 0 );
  		} else {
  			this.active.attr( {
  				"aria-selected": "true",
  				"aria-expanded": "true",
  				tabIndex: 0
  			} )
  				.next()
  					.attr( {
  						"aria-hidden": "false"
  					} );
  		}

  		this._createIcons();

  		this._setupEvents( options.event );

  		if ( heightStyle === "fill" ) {
  			maxHeight = parent.height();
  			this.element.siblings( ":visible" ).each( function() {
  				var elem = $( this ),
  					position = elem.css( "position" );

  				if ( position === "absolute" || position === "fixed" ) {
  					return;
  				}
  				maxHeight -= elem.outerHeight( true );
  			} );

  			this.headers.each( function() {
  				maxHeight -= $( this ).outerHeight( true );
  			} );

  			this.headers.next()
  				.each( function() {
  					$( this ).height( Math.max( 0, maxHeight -
  						$( this ).innerHeight() + $( this ).height() ) );
  				} )
  				.css( "overflow", "auto" );
  		} else if ( heightStyle === "auto" ) {
  			maxHeight = 0;
  			this.headers.next()
  				.each( function() {
  					var isVisible = $( this ).is( ":visible" );
  					if ( !isVisible ) {
  						$( this ).show();
  					}
  					maxHeight = Math.max( maxHeight, $( this ).css( "height", "" ).height() );
  					if ( !isVisible ) {
  						$( this ).hide();
  					}
  				} )
  				.height( maxHeight );
  		}
  	},

  	_activate: function( index ) {
  		var active = this._findActive( index )[ 0 ];

  		// Trying to activate the already active panel
  		if ( active === this.active[ 0 ] ) {
  			return;
  		}

  		// Trying to collapse, simulate a click on the currently active header
  		active = active || this.active[ 0 ];

  		this._eventHandler( {
  			target: active,
  			currentTarget: active,
  			preventDefault: $.noop
  		} );
  	},

  	_findActive: function( selector ) {
  		return typeof selector === "number" ? this.headers.eq( selector ) : $();
  	},

  	_setupEvents: function( event ) {
  		var events = {
  			keydown: "_keydown"
  		};
  		if ( event ) {
  			$.each( event.split( " " ), function( index, eventName ) {
  				events[ eventName ] = "_eventHandler";
  			} );
  		}

  		this._off( this.headers.add( this.headers.next() ) );
  		this._on( this.headers, events );
  		this._on( this.headers.next(), { keydown: "_panelKeyDown" } );
  		this._hoverable( this.headers );
  		this._focusable( this.headers );
  	},

  	_eventHandler: function( event ) {
  		var activeChildren, clickedChildren,
  			options = this.options,
  			active = this.active,
  			clicked = $( event.currentTarget ),
  			clickedIsActive = clicked[ 0 ] === active[ 0 ],
  			collapsing = clickedIsActive && options.collapsible,
  			toShow = collapsing ? $() : clicked.next(),
  			toHide = active.next(),
  			eventData = {
  				oldHeader: active,
  				oldPanel: toHide,
  				newHeader: collapsing ? $() : clicked,
  				newPanel: toShow
  			};

  		event.preventDefault();

  		if (

  				// click on active header, but not collapsible
  				( clickedIsActive && !options.collapsible ) ||

  				// allow canceling activation
  				( this._trigger( "beforeActivate", event, eventData ) === false ) ) {
  			return;
  		}

  		options.active = collapsing ? false : this.headers.index( clicked );

  		// When the call to ._toggle() comes after the class changes
  		// it causes a very odd bug in IE 8 (see #6720)
  		this.active = clickedIsActive ? $() : clicked;
  		this._toggle( eventData );

  		// Switch classes
  		// corner classes on the previously active header stay after the animation
  		this._removeClass( active, "ui-accordion-header-active", "ui-state-active" );
  		if ( options.icons ) {
  			activeChildren = active.children( ".ui-accordion-header-icon" );
  			this._removeClass( activeChildren, null, options.icons.activeHeader )
  				._addClass( activeChildren, null, options.icons.header );
  		}

  		if ( !clickedIsActive ) {
  			this._removeClass( clicked, "ui-accordion-header-collapsed" )
  				._addClass( clicked, "ui-accordion-header-active", "ui-state-active" );
  			if ( options.icons ) {
  				clickedChildren = clicked.children( ".ui-accordion-header-icon" );
  				this._removeClass( clickedChildren, null, options.icons.header )
  					._addClass( clickedChildren, null, options.icons.activeHeader );
  			}

  			this._addClass( clicked.next(), "ui-accordion-content-active" );
  		}
  	},

  	_toggle: function( data ) {
  		var toShow = data.newPanel,
  			toHide = this.prevShow.length ? this.prevShow : data.oldPanel;

  		// Handle activating a panel during the animation for another activation
  		this.prevShow.add( this.prevHide ).stop( true, true );
  		this.prevShow = toShow;
  		this.prevHide = toHide;

  		if ( this.options.animate ) {
  			this._animate( toShow, toHide, data );
  		} else {
  			toHide.hide();
  			toShow.show();
  			this._toggleComplete( data );
  		}

  		toHide.attr( {
  			"aria-hidden": "true"
  		} );
  		toHide.prev().attr( {
  			"aria-selected": "false",
  			"aria-expanded": "false"
  		} );

  		// if we're switching panels, remove the old header from the tab order
  		// if we're opening from collapsed state, remove the previous header from the tab order
  		// if we're collapsing, then keep the collapsing header in the tab order
  		if ( toShow.length && toHide.length ) {
  			toHide.prev().attr( {
  				"tabIndex": -1,
  				"aria-expanded": "false"
  			} );
  		} else if ( toShow.length ) {
  			this.headers.filter( function() {
  				return parseInt( $( this ).attr( "tabIndex" ), 10 ) === 0;
  			} )
  				.attr( "tabIndex", -1 );
  		}

  		toShow
  			.attr( "aria-hidden", "false" )
  			.prev()
  				.attr( {
  					"aria-selected": "true",
  					"aria-expanded": "true",
  					tabIndex: 0
  				} );
  	},

  	_animate: function( toShow, toHide, data ) {
  		var total, easing, duration,
  			that = this,
  			adjust = 0,
  			boxSizing = toShow.css( "box-sizing" ),
  			down = toShow.length &&
  				( !toHide.length || ( toShow.index() < toHide.index() ) ),
  			animate = this.options.animate || {},
  			options = down && animate.down || animate,
  			complete = function() {
  				that._toggleComplete( data );
  			};

  		if ( typeof options === "number" ) {
  			duration = options;
  		}
  		if ( typeof options === "string" ) {
  			easing = options;
  		}

  		// fall back from options to animation in case of partial down settings
  		easing = easing || options.easing || animate.easing;
  		duration = duration || options.duration || animate.duration;

  		if ( !toHide.length ) {
  			return toShow.animate( this.showProps, duration, easing, complete );
  		}
  		if ( !toShow.length ) {
  			return toHide.animate( this.hideProps, duration, easing, complete );
  		}

  		total = toShow.show().outerHeight();
  		toHide.animate( this.hideProps, {
  			duration: duration,
  			easing: easing,
  			step: function( now, fx ) {
  				fx.now = Math.round( now );
  			}
  		} );
  		toShow
  			.hide()
  			.animate( this.showProps, {
  				duration: duration,
  				easing: easing,
  				complete: complete,
  				step: function( now, fx ) {
  					fx.now = Math.round( now );
  					if ( fx.prop !== "height" ) {
  						if ( boxSizing === "content-box" ) {
  							adjust += fx.now;
  						}
  					} else if ( that.options.heightStyle !== "content" ) {
  						fx.now = Math.round( total - toHide.outerHeight() - adjust );
  						adjust = 0;
  					}
  				}
  			} );
  	},

  	_toggleComplete: function( data ) {
  		var toHide = data.oldPanel,
  			prev = toHide.prev();

  		this._removeClass( toHide, "ui-accordion-content-active" );
  		this._removeClass( prev, "ui-accordion-header-active" )
  			._addClass( prev, "ui-accordion-header-collapsed" );

  		this._trigger( "activate", null, data );
  	}
  } );


  /*!
   * jQuery UI Menu 1.14.0
   * https://jqueryui.com
   *
   * Copyright OpenJS Foundation and other contributors
   * Released under the MIT license.
   * https://jquery.org/license
   */

  //>>label: Menu
  //>>group: Widgets
  //>>description: Creates nestable menus.
  //>>docs: https://api.jqueryui.com/menu/
  //>>demos: https://jqueryui.com/menu/
  //>>css.structure: ../../themes/base/core.css
  //>>css.structure: ../../themes/base/menu.css
  //>>css.theme: ../../themes/base/theme.css


  $.widget( "ui.menu", {
  	version: "1.14.0",
  	defaultElement: "<ul>",
  	delay: 300,
  	options: {
  		icons: {
  			submenu: "ui-icon-caret-1-e"
  		},
  		items: "> *",
  		menus: "ul",
  		position: {
  			my: "left top",
  			at: "right top"
  		},
  		role: "menu",

  		// Callbacks
  		blur: null,
  		focus: null,
  		select: null
  	},

  	_create: function() {
  		this.activeMenu = this.element;

  		// Flag used to prevent firing of the click handler
  		// as the event bubbles up through nested menus
  		this.mouseHandled = false;
  		this.lastMousePosition = { x: null, y: null };
  		this.element
  			.uniqueId()
  			.attr( {
  				role: this.options.role,
  				tabIndex: 0
  			} );

  		this._addClass( "ui-menu", "ui-widget ui-widget-content" );
  		this._on( {

  			// Prevent focus from sticking to links inside menu after clicking
  			// them (focus should always stay on UL during navigation).
  			"mousedown .ui-menu-item": function( event ) {
  				event.preventDefault();

  				this._activateItem( event );
  			},
  			"click .ui-menu-item": function( event ) {
  				var target = $( event.target );
  				var active = $( this.document[ 0 ].activeElement );
  				if ( !this.mouseHandled && target.not( ".ui-state-disabled" ).length ) {
  					this.select( event );

  					// Only set the mouseHandled flag if the event will bubble, see #9469.
  					if ( !event.isPropagationStopped() ) {
  						this.mouseHandled = true;
  					}

  					// Open submenu on click
  					if ( target.has( ".ui-menu" ).length ) {
  						this.expand( event );
  					} else if ( !this.element.is( ":focus" ) &&
  							active.closest( ".ui-menu" ).length ) {

  						// Redirect focus to the menu
  						this.element.trigger( "focus", [ true ] );

  						// If the active item is on the top level, let it stay active.
  						// Otherwise, blur the active item since it is no longer visible.
  						if ( this.active && this.active.parents( ".ui-menu" ).length === 1 ) {
  							clearTimeout( this.timer );
  						}
  					}
  				}
  			},
  			"mouseenter .ui-menu-item": "_activateItem",
  			"mousemove .ui-menu-item": "_activateItem",
  			mouseleave: "collapseAll",
  			"mouseleave .ui-menu": "collapseAll",
  			focus: function( event, keepActiveItem ) {

  				// If there's already an active item, keep it active
  				// If not, activate the first item
  				var item = this.active || this._menuItems().first();

  				if ( !keepActiveItem ) {
  					this.focus( event, item );
  				}
  			},
  			blur: function( event ) {
  				this._delay( function() {
  					var notContained = !$.contains(
  						this.element[ 0 ],
  						this.document[ 0 ].activeElement
  					);
  					if ( notContained ) {
  						this.collapseAll( event );
  					}
  				} );
  			},
  			keydown: "_keydown"
  		} );

  		this.refresh();

  		// Clicks outside of a menu collapse any open menus
  		this._on( this.document, {
  			click: function( event ) {
  				if ( this._closeOnDocumentClick( event ) ) {
  					this.collapseAll( event, true );
  				}

  				// Reset the mouseHandled flag
  				this.mouseHandled = false;
  			}
  		} );
  	},

  	_activateItem: function( event ) {

  		// Ignore mouse events while typeahead is active, see #10458.
  		// Prevents focusing the wrong item when typeahead causes a scroll while the mouse
  		// is over an item in the menu
  		if ( this.previousFilter ) {
  			return;
  		}

  		// If the mouse didn't actually move, but the page was scrolled, ignore the event (#9356)
  		if ( event.clientX === this.lastMousePosition.x &&
  				event.clientY === this.lastMousePosition.y ) {
  			return;
  		}

  		this.lastMousePosition = {
  			x: event.clientX,
  			y: event.clientY
  		};

  		var actualTarget = $( event.target ).closest( ".ui-menu-item" ),
  			target = $( event.currentTarget );

  		// Ignore bubbled events on parent items, see #11641
  		if ( actualTarget[ 0 ] !== target[ 0 ] ) {
  			return;
  		}

  		// If the item is already active, there's nothing to do
  		if ( target.is( ".ui-state-active" ) ) {
  			return;
  		}

  		// Remove ui-state-active class from siblings of the newly focused menu item
  		// to avoid a jump caused by adjacent elements both having a class with a border
  		this._removeClass( target.siblings().children( ".ui-state-active" ),
  			null, "ui-state-active" );
  		this.focus( event, target );
  	},

  	_destroy: function() {
  		var items = this.element.find( ".ui-menu-item" )
  				.removeAttr( "role aria-disabled" ),
  			submenus = items.children( ".ui-menu-item-wrapper" )
  				.removeUniqueId()
  				.removeAttr( "tabIndex role aria-haspopup" );

  		// Destroy (sub)menus
  		this.element
  			.removeAttr( "aria-activedescendant" )
  			.find( ".ui-menu" ).addBack()
  				.removeAttr( "role aria-labelledby aria-expanded aria-hidden aria-disabled " +
  					"tabIndex" )
  				.removeUniqueId()
  				.show();

  		submenus.children().each( function() {
  			var elem = $( this );
  			if ( elem.data( "ui-menu-submenu-caret" ) ) {
  				elem.remove();
  			}
  		} );
  	},

  	_keydown: function( event ) {
  		var match, prev, character, skip,
  			preventDefault = true;

  		switch ( event.keyCode ) {
  		case $.ui.keyCode.PAGE_UP:
  			this.previousPage( event );
  			break;
  		case $.ui.keyCode.PAGE_DOWN:
  			this.nextPage( event );
  			break;
  		case $.ui.keyCode.HOME:
  			this._move( "first", "first", event );
  			break;
  		case $.ui.keyCode.END:
  			this._move( "last", "last", event );
  			break;
  		case $.ui.keyCode.UP:
  			this.previous( event );
  			break;
  		case $.ui.keyCode.DOWN:
  			this.next( event );
  			break;
  		case $.ui.keyCode.LEFT:
  			this.collapse( event );
  			break;
  		case $.ui.keyCode.RIGHT:
  			if ( this.active && !this.active.is( ".ui-state-disabled" ) ) {
  				this.expand( event );
  			}
  			break;
  		case $.ui.keyCode.ENTER:
  		case $.ui.keyCode.SPACE:
  			this._activate( event );
  			break;
  		case $.ui.keyCode.ESCAPE:
  			this.collapse( event );
  			break;
  		default:
  			preventDefault = false;
  			prev = this.previousFilter || "";
  			skip = false;

  			// Support number pad values
  			character = event.keyCode >= 96 && event.keyCode <= 105 ?
  				( event.keyCode - 96 ).toString() : String.fromCharCode( event.keyCode );

  			clearTimeout( this.filterTimer );

  			if ( character === prev ) {
  				skip = true;
  			} else {
  				character = prev + character;
  			}

  			match = this._filterMenuItems( character );
  			match = skip && match.index( this.active.next() ) !== -1 ?
  				this.active.nextAll( ".ui-menu-item" ) :
  				match;

  			// If no matches on the current filter, reset to the last character pressed
  			// to move down the menu to the first item that starts with that character
  			if ( !match.length ) {
  				character = String.fromCharCode( event.keyCode );
  				match = this._filterMenuItems( character );
  			}

  			if ( match.length ) {
  				this.focus( event, match );
  				this.previousFilter = character;
  				this.filterTimer = this._delay( function() {
  					delete this.previousFilter;
  				}, 1000 );
  			} else {
  				delete this.previousFilter;
  			}
  		}

  		if ( preventDefault ) {
  			event.preventDefault();
  		}
  	},

  	_activate: function( event ) {
  		if ( this.active && !this.active.is( ".ui-state-disabled" ) ) {
  			if ( this.active.children( "[aria-haspopup='true']" ).length ) {
  				this.expand( event );
  			} else {
  				this.select( event );
  			}
  		}
  	},

  	refresh: function() {
  		var menus, items, newSubmenus, newItems, newWrappers,
  			that = this,
  			icon = this.options.icons.submenu,
  			submenus = this.element.find( this.options.menus );

  		this._toggleClass( "ui-menu-icons", null, !!this.element.find( ".ui-icon" ).length );

  		// Initialize nested menus
  		newSubmenus = submenus.filter( ":not(.ui-menu)" )
  			.hide()
  			.attr( {
  				role: this.options.role,
  				"aria-hidden": "true",
  				"aria-expanded": "false"
  			} )
  			.each( function() {
  				var menu = $( this ),
  					item = menu.prev(),
  					submenuCaret = $( "<span>" ).data( "ui-menu-submenu-caret", true );

  				that._addClass( submenuCaret, "ui-menu-icon", "ui-icon " + icon );
  				item
  					.attr( "aria-haspopup", "true" )
  					.prepend( submenuCaret );
  				menu.attr( "aria-labelledby", item.attr( "id" ) );
  			} );

  		this._addClass( newSubmenus, "ui-menu", "ui-widget ui-widget-content ui-front" );

  		menus = submenus.add( this.element );
  		items = menus.find( this.options.items );

  		// Initialize menu-items containing spaces and/or dashes only as dividers
  		items.not( ".ui-menu-item" ).each( function() {
  			var item = $( this );
  			if ( that._isDivider( item ) ) {
  				that._addClass( item, "ui-menu-divider", "ui-widget-content" );
  			}
  		} );

  		// Don't refresh list items that are already adapted
  		newItems = items.not( ".ui-menu-item, .ui-menu-divider" );
  		newWrappers = newItems.children()
  			.not( ".ui-menu" )
  				.uniqueId()
  				.attr( {
  					tabIndex: -1,
  					role: this._itemRole()
  				} );
  		this._addClass( newItems, "ui-menu-item" )
  			._addClass( newWrappers, "ui-menu-item-wrapper" );

  		// Add aria-disabled attribute to any disabled menu item
  		items.filter( ".ui-state-disabled" ).attr( "aria-disabled", "true" );

  		// If the active item has been removed, blur the menu
  		if ( this.active && !$.contains( this.element[ 0 ], this.active[ 0 ] ) ) {
  			this.blur();
  		}
  	},

  	_itemRole: function() {
  		return {
  			menu: "menuitem",
  			listbox: "option"
  		}[ this.options.role ];
  	},

  	_setOption: function( key, value ) {
  		if ( key === "icons" ) {
  			var icons = this.element.find( ".ui-menu-icon" );
  			this._removeClass( icons, null, this.options.icons.submenu )
  				._addClass( icons, null, value.submenu );
  		}
  		this._super( key, value );
  	},

  	_setOptionDisabled: function( value ) {
  		this._super( value );

  		this.element.attr( "aria-disabled", String( value ) );
  		this._toggleClass( null, "ui-state-disabled", !!value );
  	},

  	focus: function( event, item ) {
  		var nested, focused, activeParent;
  		this.blur( event, event && event.type === "focus" );

  		this._scrollIntoView( item );

  		this.active = item.first();

  		focused = this.active.children( ".ui-menu-item-wrapper" );
  		this._addClass( focused, null, "ui-state-active" );

  		// Only update aria-activedescendant if there's a role
  		// otherwise we assume focus is managed elsewhere
  		if ( this.options.role ) {
  			this.element.attr( "aria-activedescendant", focused.attr( "id" ) );
  		}

  		// Highlight active parent menu item, if any
  		activeParent = this.active
  			.parent()
  				.closest( ".ui-menu-item" )
  					.children( ".ui-menu-item-wrapper" );
  		this._addClass( activeParent, null, "ui-state-active" );

  		if ( event && event.type === "keydown" ) {
  			this._close();
  		} else {
  			this.timer = this._delay( function() {
  				this._close();
  			}, this.delay );
  		}

  		nested = item.children( ".ui-menu" );
  		if ( nested.length && event && ( /^mouse/.test( event.type ) ) ) {
  			this._startOpening( nested );
  		}
  		this.activeMenu = item.parent();

  		this._trigger( "focus", event, { item: item } );
  	},

  	_scrollIntoView: function( item ) {
  		var borderTop, paddingTop, offset, scroll, elementHeight, itemHeight;
  		if ( this._hasScroll() ) {
  			borderTop = parseFloat( $.css( this.activeMenu[ 0 ], "borderTopWidth" ) ) || 0;
  			paddingTop = parseFloat( $.css( this.activeMenu[ 0 ], "paddingTop" ) ) || 0;
  			offset = item.offset().top - this.activeMenu.offset().top - borderTop - paddingTop;
  			scroll = this.activeMenu.scrollTop();
  			elementHeight = this.activeMenu.height();
  			itemHeight = item.outerHeight();

  			if ( offset < 0 ) {
  				this.activeMenu.scrollTop( scroll + offset );
  			} else if ( offset + itemHeight > elementHeight ) {
  				this.activeMenu.scrollTop( scroll + offset - elementHeight + itemHeight );
  			}
  		}
  	},

  	blur: function( event, fromFocus ) {
  		if ( !fromFocus ) {
  			clearTimeout( this.timer );
  		}

  		if ( !this.active ) {
  			return;
  		}

  		this._removeClass( this.active.children( ".ui-menu-item-wrapper" ),
  			null, "ui-state-active" );

  		this._trigger( "blur", event, { item: this.active } );
  		this.active = null;
  	},

  	_startOpening: function( submenu ) {
  		clearTimeout( this.timer );

  		// Don't open if already open fixes a Firefox bug that caused a .5 pixel
  		// shift in the submenu position when mousing over the caret icon
  		if ( submenu.attr( "aria-hidden" ) !== "true" ) {
  			return;
  		}

  		this.timer = this._delay( function() {
  			this._close();
  			this._open( submenu );
  		}, this.delay );
  	},

  	_open: function( submenu ) {
  		var position = $.extend( {
  			of: this.active
  		}, this.options.position );

  		clearTimeout( this.timer );
  		this.element.find( ".ui-menu" ).not( submenu.parents( ".ui-menu" ) )
  			.hide()
  			.attr( "aria-hidden", "true" );

  		submenu
  			.show()
  			.removeAttr( "aria-hidden" )
  			.attr( "aria-expanded", "true" )
  			.position( position );
  	},

  	collapseAll: function( event, all ) {
  		clearTimeout( this.timer );
  		this.timer = this._delay( function() {

  			// If we were passed an event, look for the submenu that contains the event
  			var currentMenu = all ? this.element :
  				$( event && event.target ).closest( this.element.find( ".ui-menu" ) );

  			// If we found no valid submenu ancestor, use the main menu to close all
  			// sub menus anyway
  			if ( !currentMenu.length ) {
  				currentMenu = this.element;
  			}

  			this._close( currentMenu );

  			this.blur( event );

  			// Work around active item staying active after menu is blurred
  			this._removeClass( currentMenu.find( ".ui-state-active" ), null, "ui-state-active" );

  			this.activeMenu = currentMenu;
  		}, all ? 0 : this.delay );
  	},

  	// With no arguments, closes the currently active menu - if nothing is active
  	// it closes all menus.  If passed an argument, it will search for menus BELOW
  	_close: function( startMenu ) {
  		if ( !startMenu ) {
  			startMenu = this.active ? this.active.parent() : this.element;
  		}

  		startMenu.find( ".ui-menu" )
  			.hide()
  			.attr( "aria-hidden", "true" )
  			.attr( "aria-expanded", "false" );
  	},

  	_closeOnDocumentClick: function( event ) {
  		return !$( event.target ).closest( ".ui-menu" ).length;
  	},

  	_isDivider: function( item ) {

  		// Match hyphen, em dash, en dash
  		return !/[^\-\u2014\u2013\s]/.test( item.text() );
  	},

  	collapse: function( event ) {
  		var newItem = this.active &&
  			this.active.parent().closest( ".ui-menu-item", this.element );
  		if ( newItem && newItem.length ) {
  			this._close();
  			this.focus( event, newItem );
  		}
  	},

  	expand: function( event ) {
  		var newItem = this.active && this._menuItems( this.active.children( ".ui-menu" ) ).first();

  		if ( newItem && newItem.length ) {
  			this._open( newItem.parent() );

  			// Delay so Firefox will not hide activedescendant change in expanding submenu from AT
  			this._delay( function() {
  				this.focus( event, newItem );
  			} );
  		}
  	},

  	next: function( event ) {
  		this._move( "next", "first", event );
  	},

  	previous: function( event ) {
  		this._move( "prev", "last", event );
  	},

  	isFirstItem: function() {
  		return this.active && !this.active.prevAll( ".ui-menu-item" ).length;
  	},

  	isLastItem: function() {
  		return this.active && !this.active.nextAll( ".ui-menu-item" ).length;
  	},

  	_menuItems: function( menu ) {
  		return ( menu || this.element )
  			.find( this.options.items )
  			.filter( ".ui-menu-item" );
  	},

  	_move: function( direction, filter, event ) {
  		var next;
  		if ( this.active ) {
  			if ( direction === "first" || direction === "last" ) {
  				next = this.active
  					[ direction === "first" ? "prevAll" : "nextAll" ]( ".ui-menu-item" )
  					.last();
  			} else {
  				next = this.active
  					[ direction + "All" ]( ".ui-menu-item" )
  					.first();
  			}
  		}
  		if ( !next || !next.length || !this.active ) {
  			next = this._menuItems( this.activeMenu )[ filter ]();
  		}

  		this.focus( event, next );
  	},

  	nextPage: function( event ) {
  		var item, base, height;

  		if ( !this.active ) {
  			this.next( event );
  			return;
  		}
  		if ( this.isLastItem() ) {
  			return;
  		}
  		if ( this._hasScroll() ) {
  			base = this.active.offset().top;
  			height = this.element.innerHeight();

  			// jQuery 3.2 doesn't include scrollbars in innerHeight, add it back.
  			if ( $.fn.jquery.indexOf( "3.2." ) === 0 ) {
  				height += this.element[ 0 ].offsetHeight - this.element.outerHeight();
  			}

  			this.active.nextAll( ".ui-menu-item" ).each( function() {
  				item = $( this );
  				return item.offset().top - base - height < 0;
  			} );

  			this.focus( event, item );
  		} else {
  			this.focus( event, this._menuItems( this.activeMenu )
  				[ !this.active ? "first" : "last" ]() );
  		}
  	},

  	previousPage: function( event ) {
  		var item, base, height;
  		if ( !this.active ) {
  			this.next( event );
  			return;
  		}
  		if ( this.isFirstItem() ) {
  			return;
  		}
  		if ( this._hasScroll() ) {
  			base = this.active.offset().top;
  			height = this.element.innerHeight();

  			// jQuery 3.2 doesn't include scrollbars in innerHeight, add it back.
  			if ( $.fn.jquery.indexOf( "3.2." ) === 0 ) {
  				height += this.element[ 0 ].offsetHeight - this.element.outerHeight();
  			}

  			this.active.prevAll( ".ui-menu-item" ).each( function() {
  				item = $( this );
  				return item.offset().top - base + height > 0;
  			} );

  			this.focus( event, item );
  		} else {
  			this.focus( event, this._menuItems( this.activeMenu ).first() );
  		}
  	},

  	_hasScroll: function() {
  		return this.element.outerHeight() < this.element.prop( "scrollHeight" );
  	},

  	select: function( event ) {

  		// TODO: It should never be possible to not have an active item at this
  		// point, but the tests don't trigger mouseenter before click.
  		this.active = this.active || $( event.target ).closest( ".ui-menu-item" );
  		var ui = { item: this.active };
  		if ( !this.active.has( ".ui-menu" ).length ) {
  			this.collapseAll( event, true );
  		}
  		this._trigger( "select", event, ui );
  	},

  	_filterMenuItems: function( character ) {
  		var escapedCharacter = character.replace( /[\-\[\]{}()*+?.,\\\^$|#\s]/g, "\\$&" ),
  			regex = new RegExp( "^" + escapedCharacter, "i" );

  		return this.activeMenu
  			.find( this.options.items )

  				// Only match on items, not dividers or other content (#10571)
  				.filter( ".ui-menu-item" )
  					.filter( function() {
  						return regex.test(
  							String.prototype.trim.call(
  								$( this ).children( ".ui-menu-item-wrapper" ).text() ) );
  					} );
  	}
  } );


  /*!
   * jQuery UI Autocomplete 1.14.0
   * https://jqueryui.com
   *
   * Copyright OpenJS Foundation and other contributors
   * Released under the MIT license.
   * https://jquery.org/license
   */

  //>>label: Autocomplete
  //>>group: Widgets
  //>>description: Lists suggested words as the user is typing.
  //>>docs: https://api.jqueryui.com/autocomplete/
  //>>demos: https://jqueryui.com/autocomplete/
  //>>css.structure: ../../themes/base/core.css
  //>>css.structure: ../../themes/base/autocomplete.css
  //>>css.theme: ../../themes/base/theme.css


  $.widget( "ui.autocomplete", {
  	version: "1.14.0",
  	defaultElement: "<input>",
  	options: {
  		appendTo: null,
  		autoFocus: false,
  		delay: 300,
  		minLength: 1,
  		position: {
  			my: "left top",
  			at: "left bottom",
  			collision: "none"
  		},
  		source: null,

  		// Callbacks
  		change: null,
  		close: null,
  		focus: null,
  		open: null,
  		response: null,
  		search: null,
  		select: null
  	},

  	requestIndex: 0,
  	pending: 0,
  	liveRegionTimer: null,

  	_create: function() {

  		// Some browsers only repeat keydown events, not keypress events,
  		// so we use the suppressKeyPress flag to determine if we've already
  		// handled the keydown event. #7269
  		// Unfortunately the code for & in keypress is the same as the up arrow,
  		// so we use the suppressKeyPressRepeat flag to avoid handling keypress
  		// events when we know the keydown event was used to modify the
  		// search term. #7799
  		var suppressKeyPress, suppressKeyPressRepeat, suppressInput,
  			nodeName = this.element[ 0 ].nodeName.toLowerCase(),
  			isTextarea = nodeName === "textarea",
  			isInput = nodeName === "input";

  		// Textareas are always multi-line
  		// Inputs are always single-line, even if inside a contentEditable element
  		// All other element types are determined by whether they're contentEditable
  		this.isMultiLine = isTextarea ||
  			!isInput && this.element.prop( "contentEditable" ) === "true";

  		this.valueMethod = this.element[ isTextarea || isInput ? "val" : "text" ];
  		this.isNewMenu = true;

  		this._addClass( "ui-autocomplete-input" );
  		this.element.attr( "autocomplete", "off" );

  		this._on( this.element, {
  			keydown: function( event ) {
  				if ( this.element.prop( "readOnly" ) ) {
  					suppressKeyPress = true;
  					suppressInput = true;
  					suppressKeyPressRepeat = true;
  					return;
  				}

  				suppressKeyPress = false;
  				suppressInput = false;
  				suppressKeyPressRepeat = false;
  				var keyCode = $.ui.keyCode;
  				switch ( event.keyCode ) {
  				case keyCode.PAGE_UP:
  					suppressKeyPress = true;
  					this._move( "previousPage", event );
  					break;
  				case keyCode.PAGE_DOWN:
  					suppressKeyPress = true;
  					this._move( "nextPage", event );
  					break;
  				case keyCode.UP:
  					suppressKeyPress = true;
  					this._keyEvent( "previous", event );
  					break;
  				case keyCode.DOWN:
  					suppressKeyPress = true;
  					this._keyEvent( "next", event );
  					break;
  				case keyCode.ENTER:

  					// when menu is open and has focus
  					if ( this.menu.active ) {

  						// #6055 - Opera still allows the keypress to occur
  						// which causes forms to submit
  						suppressKeyPress = true;
  						event.preventDefault();
  						this.menu.select( event );
  					}
  					break;
  				case keyCode.TAB:
  					if ( this.menu.active ) {
  						this.menu.select( event );
  					}
  					break;
  				case keyCode.ESCAPE:
  					if ( this.menu.element.is( ":visible" ) ) {
  						if ( !this.isMultiLine ) {
  							this._value( this.term );
  						}
  						this.close( event );

  						// Different browsers have different default behavior for escape
  						// Single press can mean undo or clear
  						event.preventDefault();
  					}
  					break;
  				default:
  					suppressKeyPressRepeat = true;

  					// search timeout should be triggered before the input value is changed
  					this._searchTimeout( event );
  					break;
  				}
  			},
  			keypress: function( event ) {
  				if ( suppressKeyPress ) {
  					suppressKeyPress = false;
  					if ( !this.isMultiLine || this.menu.element.is( ":visible" ) ) {
  						event.preventDefault();
  					}
  					return;
  				}
  				if ( suppressKeyPressRepeat ) {
  					return;
  				}

  				// Replicate some key handlers to allow them to repeat in Firefox and Opera
  				var keyCode = $.ui.keyCode;
  				switch ( event.keyCode ) {
  				case keyCode.PAGE_UP:
  					this._move( "previousPage", event );
  					break;
  				case keyCode.PAGE_DOWN:
  					this._move( "nextPage", event );
  					break;
  				case keyCode.UP:
  					this._keyEvent( "previous", event );
  					break;
  				case keyCode.DOWN:
  					this._keyEvent( "next", event );
  					break;
  				}
  			},
  			input: function( event ) {
  				if ( suppressInput ) {
  					suppressInput = false;
  					event.preventDefault();
  					return;
  				}
  				this._searchTimeout( event );
  			},
  			focus: function() {
  				this.selectedItem = null;
  				this.previous = this._value();
  			},
  			blur: function( event ) {
  				clearTimeout( this.searching );
  				this.close( event );
  				this._change( event );
  			}
  		} );

  		this._initSource();
  		this.menu = $( "<ul>" )
  			.appendTo( this._appendTo() )
  			.menu( {

  				// disable ARIA support, the live region takes care of that
  				role: null
  			} )
  			.hide()
  			.menu( "instance" );

  		this._addClass( this.menu.element, "ui-autocomplete", "ui-front" );
  		this._on( this.menu.element, {
  			mousedown: function( event ) {

  				// Prevent moving focus out of the text field
  				event.preventDefault();
  			},
  			menufocus: function( event, ui ) {
  				var label, item;

  				// Support: Firefox
  				// Prevent accidental activation of menu items in Firefox (#7024 #9118)
  				if ( this.isNewMenu ) {
  					this.isNewMenu = false;
  					if ( event.originalEvent && /^mouse/.test( event.originalEvent.type ) ) {
  						this.menu.blur();

  						this.document.one( "mousemove", function() {
  							$( event.target ).trigger( event.originalEvent );
  						} );

  						return;
  					}
  				}

  				item = ui.item.data( "ui-autocomplete-item" );
  				if ( false !== this._trigger( "focus", event, { item: item } ) ) {

  					// use value to match what will end up in the input, if it was a key event
  					if ( event.originalEvent && /^key/.test( event.originalEvent.type ) ) {
  						this._value( item.value );
  					}
  				}

  				// Announce the value in the liveRegion
  				label = ui.item.attr( "aria-label" ) || item.value;
  				if ( label && String.prototype.trim.call( label ).length ) {
  					clearTimeout( this.liveRegionTimer );
  					this.liveRegionTimer = this._delay( function() {
  						this.liveRegion.html( $( "<div>" ).text( label ) );
  					}, 100 );
  				}
  			},
  			menuselect: function( event, ui ) {
  				var item = ui.item.data( "ui-autocomplete-item" ),
  					previous = this.previous;

  				// Only trigger when focus was lost (click on menu)
  				if ( this.element[ 0 ] !== this.document[ 0 ].activeElement ) {
  					this.element.trigger( "focus" );
  					this.previous = previous;
  				}

  				if ( false !== this._trigger( "select", event, { item: item } ) ) {
  					this._value( item.value );
  				}

  				// reset the term after the select event
  				// this allows custom select handling to work properly
  				this.term = this._value();

  				this.close( event );
  				this.selectedItem = item;
  			}
  		} );

  		this.liveRegion = $( "<div>", {
  			role: "status",
  			"aria-live": "assertive",
  			"aria-relevant": "additions"
  		} )
  			.appendTo( this.document[ 0 ].body );

  		this._addClass( this.liveRegion, null, "ui-helper-hidden-accessible" );

  		// Turning off autocomplete prevents the browser from remembering the
  		// value when navigating through history, so we re-enable autocomplete
  		// if the page is unloaded before the widget is destroyed. #7790
  		this._on( this.window, {
  			beforeunload: function() {
  				this.element.removeAttr( "autocomplete" );
  			}
  		} );
  	},

  	_destroy: function() {
  		clearTimeout( this.searching );
  		this.element.removeAttr( "autocomplete" );
  		this.menu.element.remove();
  		this.liveRegion.remove();
  	},

  	_setOption: function( key, value ) {
  		this._super( key, value );
  		if ( key === "source" ) {
  			this._initSource();
  		}
  		if ( key === "appendTo" ) {
  			this.menu.element.appendTo( this._appendTo() );
  		}
  		if ( key === "disabled" && value && this.xhr ) {
  			this.xhr.abort();
  		}
  	},

  	_isEventTargetInWidget: function( event ) {
  		var menuElement = this.menu.element[ 0 ];

  		return event.target === this.element[ 0 ] ||
  			event.target === menuElement ||
  			$.contains( menuElement, event.target );
  	},

  	_closeOnClickOutside: function( event ) {
  		if ( !this._isEventTargetInWidget( event ) ) {
  			this.close();
  		}
  	},

  	_appendTo: function() {
  		var element = this.options.appendTo;

  		if ( element ) {
  			element = element.jquery || element.nodeType ?
  				$( element ) :
  				this.document.find( element ).eq( 0 );
  		}

  		if ( !element || !element[ 0 ] ) {
  			element = this.element.closest( ".ui-front, dialog" );
  		}

  		if ( !element.length ) {
  			element = this.document[ 0 ].body;
  		}

  		return element;
  	},

  	_initSource: function() {
  		var array, url,
  			that = this;
  		if ( Array.isArray( this.options.source ) ) {
  			array = this.options.source;
  			this.source = function( request, response ) {
  				response( $.ui.autocomplete.filter( array, request.term ) );
  			};
  		} else if ( typeof this.options.source === "string" ) {
  			url = this.options.source;
  			this.source = function( request, response ) {
  				if ( that.xhr ) {
  					that.xhr.abort();
  				}
  				that.xhr = $.ajax( {
  					url: url,
  					data: request,
  					dataType: "json",
  					success: function( data ) {
  						response( data );
  					},
  					error: function() {
  						response( [] );
  					}
  				} );
  			};
  		} else {
  			this.source = this.options.source;
  		}
  	},

  	_searchTimeout: function( event ) {
  		clearTimeout( this.searching );
  		this.searching = this._delay( function() {

  			// Search if the value has changed, or if the user retypes the same value (see #7434)
  			var equalValues = this.term === this._value(),
  				menuVisible = this.menu.element.is( ":visible" ),
  				modifierKey = event.altKey || event.ctrlKey || event.metaKey || event.shiftKey;

  			if ( !equalValues || ( equalValues && !menuVisible && !modifierKey ) ) {
  				this.selectedItem = null;
  				this.search( null, event );
  			}
  		}, this.options.delay );
  	},

  	search: function( value, event ) {
  		value = value != null ? value : this._value();

  		// Always save the actual value, not the one passed as an argument
  		this.term = this._value();

  		if ( value.length < this.options.minLength ) {
  			return this.close( event );
  		}

  		if ( this._trigger( "search", event ) === false ) {
  			return;
  		}

  		return this._search( value );
  	},

  	_search: function( value ) {
  		this.pending++;
  		this._addClass( "ui-autocomplete-loading" );
  		this.cancelSearch = false;

  		this.source( { term: value }, this._response() );
  	},

  	_response: function() {
  		var index = ++this.requestIndex;

  		return function( content ) {
  			if ( index === this.requestIndex ) {
  				this.__response( content );
  			}

  			this.pending--;
  			if ( !this.pending ) {
  				this._removeClass( "ui-autocomplete-loading" );
  			}
  		}.bind( this );
  	},

  	__response: function( content ) {
  		if ( content ) {
  			content = this._normalize( content );
  		}
  		this._trigger( "response", null, { content: content } );
  		if ( !this.options.disabled && content && content.length && !this.cancelSearch ) {
  			this._suggest( content );
  			this._trigger( "open" );
  		} else {

  			// use ._close() instead of .close() so we don't cancel future searches
  			this._close();
  		}
  	},

  	close: function( event ) {
  		this.cancelSearch = true;
  		this._close( event );
  	},

  	_close: function( event ) {

  		// Remove the handler that closes the menu on outside clicks
  		this._off( this.document, "mousedown" );

  		if ( this.menu.element.is( ":visible" ) ) {
  			this.menu.element.hide();
  			this.menu.blur();
  			this.isNewMenu = true;
  			this._trigger( "close", event );
  		}
  	},

  	_change: function( event ) {
  		if ( this.previous !== this._value() ) {
  			this._trigger( "change", event, { item: this.selectedItem } );
  		}
  	},

  	_normalize: function( items ) {

  		// assume all items have the right format when the first item is complete
  		if ( items.length && items[ 0 ].label && items[ 0 ].value ) {
  			return items;
  		}
  		return $.map( items, function( item ) {
  			if ( typeof item === "string" ) {
  				return {
  					label: item,
  					value: item
  				};
  			}
  			return $.extend( {}, item, {
  				label: item.label || item.value,
  				value: item.value || item.label
  			} );
  		} );
  	},

  	_suggest: function( items ) {
  		var ul = this.menu.element.empty();
  		this._renderMenu( ul, items );
  		this.isNewMenu = true;
  		this.menu.refresh();

  		// Size and position menu
  		ul.show();
  		this._resizeMenu();
  		ul.position( $.extend( {
  			of: this.element
  		}, this.options.position ) );

  		if ( this.options.autoFocus ) {
  			this.menu.next();
  		}

  		// Listen for interactions outside of the widget (#6642)
  		this._on( this.document, {
  			mousedown: "_closeOnClickOutside"
  		} );
  	},

  	_resizeMenu: function() {
  		var ul = this.menu.element;
  		ul.outerWidth( Math.max(

  			// Firefox wraps long text (possibly a rounding bug)
  			// so we add 1px to avoid the wrapping (#7513)
  			ul.width( "" ).outerWidth() + 1,
  			this.element.outerWidth()
  		) );
  	},

  	_renderMenu: function( ul, items ) {
  		var that = this;
  		$.each( items, function( index, item ) {
  			that._renderItemData( ul, item );
  		} );
  	},

  	_renderItemData: function( ul, item ) {
  		return this._renderItem( ul, item ).data( "ui-autocomplete-item", item );
  	},

  	_renderItem: function( ul, item ) {
  		return $( "<li>" )
  			.append( $( "<div>" ).text( item.label ) )
  			.appendTo( ul );
  	},

  	_move: function( direction, event ) {
  		if ( !this.menu.element.is( ":visible" ) ) {
  			this.search( null, event );
  			return;
  		}
  		if ( this.menu.isFirstItem() && /^previous/.test( direction ) ||
  				this.menu.isLastItem() && /^next/.test( direction ) ) {

  			if ( !this.isMultiLine ) {
  				this._value( this.term );
  			}

  			this.menu.blur();
  			return;
  		}
  		this.menu[ direction ]( event );
  	},

  	widget: function() {
  		return this.menu.element;
  	},

  	_value: function() {
  		return this.valueMethod.apply( this.element, arguments );
  	},

  	_keyEvent: function( keyEvent, event ) {
  		if ( !this.isMultiLine || this.menu.element.is( ":visible" ) ) {
  			this._move( keyEvent, event );

  			// Prevents moving cursor to beginning/end of the text field in some browsers
  			event.preventDefault();
  		}
  	}
  } );

  $.extend( $.ui.autocomplete, {
  	escapeRegex: function( value ) {
  		return value.replace( /[\-\[\]{}()*+?.,\\\^$|#\s]/g, "\\$&" );
  	},
  	filter: function( array, term ) {
  		var matcher = new RegExp( $.ui.autocomplete.escapeRegex( term ), "i" );
  		return $.grep( array, function( value ) {
  			return matcher.test( value.label || value.value || value );
  		} );
  	}
  } );

  // Live region extension, adding a `messages` option
  // NOTE: This is an experimental API. We are still investigating
  // a full solution for string manipulation and internationalization.
  $.widget( "ui.autocomplete", $.ui.autocomplete, {
  	options: {
  		messages: {
  			noResults: "No search results.",
  			results: function( amount ) {
  				return amount + ( amount > 1 ? " results are" : " result is" ) +
  					" available, use up and down arrow keys to navigate.";
  			}
  		}
  	},

  	__response: function( content ) {
  		var message;
  		this._superApply( arguments );
  		if ( this.options.disabled || this.cancelSearch ) {
  			return;
  		}
  		if ( content && content.length ) {
  			message = this.options.messages.results( content.length );
  		} else {
  			message = this.options.messages.noResults;
  		}
  		clearTimeout( this.liveRegionTimer );
  		this.liveRegionTimer = this._delay( function() {
  			this.liveRegion.html( $( "<div>" ).text( message ) );
  		}, 100 );
  	}
  } );

  $.ui.autocomplete;


  /*!
   * jQuery UI Controlgroup 1.14.0
   * https://jqueryui.com
   *
   * Copyright OpenJS Foundation and other contributors
   * Released under the MIT license.
   * https://jquery.org/license
   */

  //>>label: Controlgroup
  //>>group: Widgets
  //>>description: Visually groups form control widgets
  //>>docs: https://api.jqueryui.com/controlgroup/
  //>>demos: https://jqueryui.com/controlgroup/
  //>>css.structure: ../../themes/base/core.css
  //>>css.structure: ../../themes/base/controlgroup.css
  //>>css.theme: ../../themes/base/theme.css


  var controlgroupCornerRegex = /ui-corner-([a-z]){2,6}/g;

  $.widget( "ui.controlgroup", {
  	version: "1.14.0",
  	defaultElement: "<div>",
  	options: {
  		direction: "horizontal",
  		disabled: null,
  		onlyVisible: true,
  		items: {
  			"button": "input[type=button], input[type=submit], input[type=reset], button, a",
  			"controlgroupLabel": ".ui-controlgroup-label",
  			"checkboxradio": "input[type='checkbox'], input[type='radio']",
  			"selectmenu": "select",
  			"spinner": ".ui-spinner-input"
  		}
  	},

  	_create: function() {
  		this._enhance();
  	},

  	// To support the enhanced option in jQuery Mobile, we isolate DOM manipulation
  	_enhance: function() {
  		this.element.attr( "role", "toolbar" );
  		this.refresh();
  	},

  	_destroy: function() {
  		this._callChildMethod( "destroy" );
  		this.childWidgets.removeData( "ui-controlgroup-data" );
  		this.element.removeAttr( "role" );
  		if ( this.options.items.controlgroupLabel ) {
  			this.element
  				.find( this.options.items.controlgroupLabel )
  				.find( ".ui-controlgroup-label-contents" )
  				.contents().unwrap();
  		}
  	},

  	_initWidgets: function() {
  		var that = this,
  			childWidgets = [];

  		// First we iterate over each of the items options
  		$.each( this.options.items, function( widget, selector ) {
  			var labels;
  			var options = {};

  			// Make sure the widget has a selector set
  			if ( !selector ) {
  				return;
  			}

  			if ( widget === "controlgroupLabel" ) {
  				labels = that.element.find( selector );
  				labels.each( function() {
  					var element = $( this );

  					if ( element.children( ".ui-controlgroup-label-contents" ).length ) {
  						return;
  					}
  					element.contents()
  						.wrapAll( "<span class='ui-controlgroup-label-contents'></span>" );
  				} );
  				that._addClass( labels, null, "ui-widget ui-widget-content ui-state-default" );
  				childWidgets = childWidgets.concat( labels.get() );
  				return;
  			}

  			// Make sure the widget actually exists
  			if ( !$.fn[ widget ] ) {
  				return;
  			}

  			// We assume everything is in the middle to start because we can't determine
  			// first / last elements until all enhancments are done.
  			if ( that[ "_" + widget + "Options" ] ) {
  				options = that[ "_" + widget + "Options" ]( "middle" );
  			} else {
  				options = { classes: {} };
  			}

  			// Find instances of this widget inside controlgroup and init them
  			that.element
  				.find( selector )
  				.each( function() {
  					var element = $( this );
  					var instance = element[ widget ]( "instance" );

  					// We need to clone the default options for this type of widget to avoid
  					// polluting the variable options which has a wider scope than a single widget.
  					var instanceOptions = $.widget.extend( {}, options );

  					// If the button is the child of a spinner ignore it
  					// TODO: Find a more generic solution
  					if ( widget === "button" && element.parent( ".ui-spinner" ).length ) {
  						return;
  					}

  					// Create the widget if it doesn't exist
  					if ( !instance ) {
  						instance = element[ widget ]()[ widget ]( "instance" );
  					}
  					if ( instance ) {
  						instanceOptions.classes =
  							that._resolveClassesValues( instanceOptions.classes, instance );
  					}
  					element[ widget ]( instanceOptions );

  					// Store an instance of the controlgroup to be able to reference
  					// from the outermost element for changing options and refresh
  					var widgetElement = element[ widget ]( "widget" );
  					$.data( widgetElement[ 0 ], "ui-controlgroup-data",
  						instance ? instance : element[ widget ]( "instance" ) );

  					childWidgets.push( widgetElement[ 0 ] );
  				} );
  		} );

  		this.childWidgets = $( $.uniqueSort( childWidgets ) );
  		this._addClass( this.childWidgets, "ui-controlgroup-item" );
  	},

  	_callChildMethod: function( method ) {
  		this.childWidgets.each( function() {
  			var element = $( this ),
  				data = element.data( "ui-controlgroup-data" );
  			if ( data && data[ method ] ) {
  				data[ method ]();
  			}
  		} );
  	},

  	_updateCornerClass: function( element, position ) {
  		var remove = "ui-corner-top ui-corner-bottom ui-corner-left ui-corner-right ui-corner-all";
  		var add = this._buildSimpleOptions( position, "label" ).classes.label;

  		this._removeClass( element, null, remove );
  		this._addClass( element, null, add );
  	},

  	_buildSimpleOptions: function( position, key ) {
  		var direction = this.options.direction === "vertical";
  		var result = {
  			classes: {}
  		};
  		result.classes[ key ] = {
  			"middle": "",
  			"first": "ui-corner-" + ( direction ? "top" : "left" ),
  			"last": "ui-corner-" + ( direction ? "bottom" : "right" ),
  			"only": "ui-corner-all"
  		}[ position ];

  		return result;
  	},

  	_spinnerOptions: function( position ) {
  		var options = this._buildSimpleOptions( position, "ui-spinner" );

  		options.classes[ "ui-spinner-up" ] = "";
  		options.classes[ "ui-spinner-down" ] = "";

  		return options;
  	},

  	_buttonOptions: function( position ) {
  		return this._buildSimpleOptions( position, "ui-button" );
  	},

  	_checkboxradioOptions: function( position ) {
  		return this._buildSimpleOptions( position, "ui-checkboxradio-label" );
  	},

  	_selectmenuOptions: function( position ) {
  		var direction = this.options.direction === "vertical";
  		return {
  			width: direction ? "auto" : false,
  			classes: {
  				middle: {
  					"ui-selectmenu-button-open": "",
  					"ui-selectmenu-button-closed": ""
  				},
  				first: {
  					"ui-selectmenu-button-open": "ui-corner-" + ( direction ? "top" : "tl" ),
  					"ui-selectmenu-button-closed": "ui-corner-" + ( direction ? "top" : "left" )
  				},
  				last: {
  					"ui-selectmenu-button-open": direction ? "" : "ui-corner-tr",
  					"ui-selectmenu-button-closed": "ui-corner-" + ( direction ? "bottom" : "right" )
  				},
  				only: {
  					"ui-selectmenu-button-open": "ui-corner-top",
  					"ui-selectmenu-button-closed": "ui-corner-all"
  				}

  			}[ position ]
  		};
  	},

  	_resolveClassesValues: function( classes, instance ) {
  		var result = {};
  		$.each( classes, function( key ) {
  			var current = instance.options.classes[ key ] || "";
  			current = String.prototype.trim.call( current.replace( controlgroupCornerRegex, "" ) );
  			result[ key ] = ( current + " " + classes[ key ] ).replace( /\s+/g, " " );
  		} );
  		return result;
  	},

  	_setOption: function( key, value ) {
  		if ( key === "direction" ) {
  			this._removeClass( "ui-controlgroup-" + this.options.direction );
  		}

  		this._super( key, value );
  		if ( key === "disabled" ) {
  			this._callChildMethod( value ? "disable" : "enable" );
  			return;
  		}

  		this.refresh();
  	},

  	refresh: function() {
  		var children,
  			that = this;

  		this._addClass( "ui-controlgroup ui-controlgroup-" + this.options.direction );

  		if ( this.options.direction === "horizontal" ) {
  			this._addClass( null, "ui-helper-clearfix" );
  		}
  		this._initWidgets();

  		children = this.childWidgets;

  		// We filter here because we need to track all childWidgets not just the visible ones
  		if ( this.options.onlyVisible ) {
  			children = children.filter( ":visible" );
  		}

  		if ( children.length ) {

  			// We do this last because we need to make sure all enhancment is done
  			// before determining first and last
  			$.each( [ "first", "last" ], function( index, value ) {
  				var instance = children[ value ]().data( "ui-controlgroup-data" );

  				if ( instance && that[ "_" + instance.widgetName + "Options" ] ) {
  					var options = that[ "_" + instance.widgetName + "Options" ](
  						children.length === 1 ? "only" : value
  					);
  					options.classes = that._resolveClassesValues( options.classes, instance );
  					instance.element[ instance.widgetName ]( options );
  				} else {
  					that._updateCornerClass( children[ value ](), value );
  				}
  			} );

  			// Finally call the refresh method on each of the child widgets.
  			this._callChildMethod( "refresh" );
  		}
  	}
  } );

  /*!
   * jQuery UI Checkboxradio 1.14.0
   * https://jqueryui.com
   *
   * Copyright OpenJS Foundation and other contributors
   * Released under the MIT license.
   * https://jquery.org/license
   */

  //>>label: Checkboxradio
  //>>group: Widgets
  //>>description: Enhances a form with multiple themeable checkboxes or radio buttons.
  //>>docs: https://api.jqueryui.com/checkboxradio/
  //>>demos: https://jqueryui.com/checkboxradio/
  //>>css.structure: ../../themes/base/core.css
  //>>css.structure: ../../themes/base/button.css
  //>>css.structure: ../../themes/base/checkboxradio.css
  //>>css.theme: ../../themes/base/theme.css


  $.widget( "ui.checkboxradio", [ $.ui.formResetMixin, {
  	version: "1.14.0",
  	options: {
  		disabled: null,
  		label: null,
  		icon: true,
  		classes: {
  			"ui-checkboxradio-label": "ui-corner-all",
  			"ui-checkboxradio-icon": "ui-corner-all"
  		}
  	},

  	_getCreateOptions: function() {
  		var disabled, labels, labelContents;
  		var options = this._super() || {};

  		// We read the type here, because it makes more sense to throw a element type error first,
  		// rather then the error for lack of a label. Often if its the wrong type, it
  		// won't have a label (e.g. calling on a div, btn, etc)
  		this._readType();

  		labels = this.element.labels();

  		// If there are multiple labels, use the last one
  		this.label = $( labels[ labels.length - 1 ] );
  		if ( !this.label.length ) {
  			$.error( "No label found for checkboxradio widget" );
  		}

  		this.originalLabel = "";

  		// We need to get the label text but this may also need to make sure it does not contain the
  		// input itself.
  		// The label contents could be text, html, or a mix. We wrap all elements
  		// and read the wrapper's `innerHTML` to get a string representation of
  		// the label, without the input as part of it.
  		labelContents = this.label.contents().not( this.element[ 0 ] );

  		if ( labelContents.length ) {
  			this.originalLabel += labelContents
  				.clone()
  				.wrapAll( "<div></div>" )
  				.parent()
  				.html();
  		}

  		// Set the label option if we found label text
  		if ( this.originalLabel ) {
  			options.label = this.originalLabel;
  		}

  		disabled = this.element[ 0 ].disabled;
  		if ( disabled != null ) {
  			options.disabled = disabled;
  		}
  		return options;
  	},

  	_create: function() {
  		var checked = this.element[ 0 ].checked;

  		this._bindFormResetHandler();

  		if ( this.options.disabled == null ) {
  			this.options.disabled = this.element[ 0 ].disabled;
  		}

  		this._setOption( "disabled", this.options.disabled );
  		this._addClass( "ui-checkboxradio", "ui-helper-hidden-accessible" );
  		this._addClass( this.label, "ui-checkboxradio-label", "ui-button ui-widget" );

  		if ( this.type === "radio" ) {
  			this._addClass( this.label, "ui-checkboxradio-radio-label" );
  		}

  		if ( this.options.label && this.options.label !== this.originalLabel ) {
  			this._updateLabel();
  		} else if ( this.originalLabel ) {
  			this.options.label = this.originalLabel;
  		}

  		this._enhance();

  		if ( checked ) {
  			this._addClass( this.label, "ui-checkboxradio-checked", "ui-state-active" );
  		}

  		this._on( {
  			change: "_toggleClasses",
  			focus: function() {
  				this._addClass( this.label, null, "ui-state-focus ui-visual-focus" );
  			},
  			blur: function() {
  				this._removeClass( this.label, null, "ui-state-focus ui-visual-focus" );
  			}
  		} );
  	},

  	_readType: function() {
  		var nodeName = this.element[ 0 ].nodeName.toLowerCase();
  		this.type = this.element[ 0 ].type;
  		if ( nodeName !== "input" || !/radio|checkbox/.test( this.type ) ) {
  			$.error( "Can't create checkboxradio on element.nodeName=" + nodeName +
  				" and element.type=" + this.type );
  		}
  	},

  	// Support jQuery Mobile enhanced option
  	_enhance: function() {
  		this._updateIcon( this.element[ 0 ].checked );
  	},

  	widget: function() {
  		return this.label;
  	},

  	_getRadioGroup: function() {
  		var group;
  		var name = this.element[ 0 ].name;
  		var nameSelector = "input[name='" + CSS.escape( name ) + "']";

  		if ( !name ) {
  			return $( [] );
  		}

  		if ( this.form.length ) {
  			group = $( this.form[ 0 ].elements ).filter( nameSelector );
  		} else {

  			// Not inside a form, check all inputs that also are not inside a form
  			group = $( nameSelector ).filter( function() {
  				return $( $( this ).prop( "form" ) ).length === 0;
  			} );
  		}

  		return group.not( this.element );
  	},

  	_toggleClasses: function() {
  		var checked = this.element[ 0 ].checked;
  		this._toggleClass( this.label, "ui-checkboxradio-checked", "ui-state-active", checked );

  		if ( this.options.icon && this.type === "checkbox" ) {
  			this._toggleClass( this.icon, null, "ui-icon-check ui-state-checked", checked )
  				._toggleClass( this.icon, null, "ui-icon-blank", !checked );
  		}

  		if ( this.type === "radio" ) {
  			this._getRadioGroup()
  				.each( function() {
  					var instance = $( this ).checkboxradio( "instance" );

  					if ( instance ) {
  						instance._removeClass( instance.label,
  							"ui-checkboxradio-checked", "ui-state-active" );
  					}
  				} );
  		}
  	},

  	_destroy: function() {
  		this._unbindFormResetHandler();

  		if ( this.icon ) {
  			this.icon.remove();
  			this.iconSpace.remove();
  		}
  	},

  	_setOption: function( key, value ) {

  		// We don't allow the value to be set to nothing
  		if ( key === "label" && !value ) {
  			return;
  		}

  		this._super( key, value );

  		if ( key === "disabled" ) {
  			this._toggleClass( this.label, null, "ui-state-disabled", value );
  			this.element[ 0 ].disabled = value;

  			// Don't refresh when setting disabled
  			return;
  		}
  		this.refresh();
  	},

  	_updateIcon: function( checked ) {
  		var toAdd = "ui-icon ui-icon-background ";

  		if ( this.options.icon ) {
  			if ( !this.icon ) {
  				this.icon = $( "<span>" );
  				this.iconSpace = $( "<span> </span>" );
  				this._addClass( this.iconSpace, "ui-checkboxradio-icon-space" );
  			}

  			if ( this.type === "checkbox" ) {
  				toAdd += checked ? "ui-icon-check ui-state-checked" : "ui-icon-blank";
  				this._removeClass( this.icon, null, checked ? "ui-icon-blank" : "ui-icon-check" );
  			} else {
  				toAdd += "ui-icon-blank";
  			}
  			this._addClass( this.icon, "ui-checkboxradio-icon", toAdd );
  			if ( !checked ) {
  				this._removeClass( this.icon, null, "ui-icon-check ui-state-checked" );
  			}
  			this.icon.prependTo( this.label ).after( this.iconSpace );
  		} else if ( this.icon !== undefined ) {
  			this.icon.remove();
  			this.iconSpace.remove();
  			delete this.icon;
  		}
  	},

  	_updateLabel: function() {

  		// Remove the contents of the label ( minus the icon, icon space, and input )
  		var contents = this.label.contents().not( this.element[ 0 ] );
  		if ( this.icon ) {
  			contents = contents.not( this.icon[ 0 ] );
  		}
  		if ( this.iconSpace ) {
  			contents = contents.not( this.iconSpace[ 0 ] );
  		}
  		contents.remove();

  		this.label.append( this.options.label );
  	},

  	refresh: function() {
  		var checked = this.element[ 0 ].checked,
  			isDisabled = this.element[ 0 ].disabled;

  		this._updateIcon( checked );
  		this._toggleClass( this.label, "ui-checkboxradio-checked", "ui-state-active", checked );
  		if ( this.options.label !== null ) {
  			this._updateLabel();
  		}

  		if ( isDisabled !== this.options.disabled ) {
  			this._setOptions( { "disabled": isDisabled } );
  		}
  	}

  } ] );

  $.ui.checkboxradio;


  /*!
   * jQuery UI Button 1.14.0
   * https://jqueryui.com
   *
   * Copyright OpenJS Foundation and other contributors
   * Released under the MIT license.
   * https://jquery.org/license
   */

  //>>label: Button
  //>>group: Widgets
  //>>description: Enhances a form with themeable buttons.
  //>>docs: https://api.jqueryui.com/button/
  //>>demos: https://jqueryui.com/button/
  //>>css.structure: ../../themes/base/core.css
  //>>css.structure: ../../themes/base/button.css
  //>>css.theme: ../../themes/base/theme.css


  $.widget( "ui.button", {
  	version: "1.14.0",
  	defaultElement: "<button>",
  	options: {
  		classes: {
  			"ui-button": "ui-corner-all"
  		},
  		disabled: null,
  		icon: null,
  		iconPosition: "beginning",
  		label: null,
  		showLabel: true
  	},

  	_getCreateOptions: function() {
  		var disabled,

  			// This is to support cases like in jQuery Mobile where the base widget does have
  			// an implementation of _getCreateOptions
  			options = this._super() || {};

  		this.isInput = this.element.is( "input" );

  		disabled = this.element[ 0 ].disabled;
  		if ( disabled != null ) {
  			options.disabled = disabled;
  		}

  		this.originalLabel = this.isInput ? this.element.val() : this.element.html();
  		if ( this.originalLabel ) {
  			options.label = this.originalLabel;
  		}

  		return options;
  	},

  	_create: function() {
  		if ( !this.option.showLabel & !this.options.icon ) {
  			this.options.showLabel = true;
  		}

  		// We have to check the option again here even though we did in _getCreateOptions,
  		// because null may have been passed on init which would override what was set in
  		// _getCreateOptions
  		if ( this.options.disabled == null ) {
  			this.options.disabled = this.element[ 0 ].disabled || false;
  		}

  		this.hasTitle = !!this.element.attr( "title" );

  		// Check to see if the label needs to be set or if its already correct
  		if ( this.options.label && this.options.label !== this.originalLabel ) {
  			if ( this.isInput ) {
  				this.element.val( this.options.label );
  			} else {
  				this.element.html( this.options.label );
  			}
  		}
  		this._addClass( "ui-button", "ui-widget" );
  		this._setOption( "disabled", this.options.disabled );
  		this._enhance();

  		if ( this.element.is( "a" ) ) {
  			this._on( {
  				"keyup": function( event ) {
  					if ( event.keyCode === $.ui.keyCode.SPACE ) {
  						event.preventDefault();

  						// If a native click is available use it, so we
  						// actually cause navigation. Otherwise, just trigger
  						// a click event.
  						if ( this.element[ 0 ].click ) {
  							this.element[ 0 ].click();
  						} else {
  							this.element.trigger( "click" );
  						}
  					}
  				}
  			} );
  		}
  	},

  	_enhance: function() {
  		if ( !this.element.is( "button" ) ) {
  			this.element.attr( "role", "button" );
  		}

  		if ( this.options.icon ) {
  			this._updateIcon( "icon", this.options.icon );
  			this._updateTooltip();
  		}
  	},

  	_updateTooltip: function() {
  		this.title = this.element.attr( "title" );

  		if ( !this.options.showLabel && !this.title ) {
  			this.element.attr( "title", this.options.label );
  		}
  	},

  	_updateIcon: function( option, value ) {
  		var icon = option !== "iconPosition",
  			position = icon ? this.options.iconPosition : value,
  			displayBlock = position === "top" || position === "bottom";

  		// Create icon
  		if ( !this.icon ) {
  			this.icon = $( "<span>" );

  			this._addClass( this.icon, "ui-button-icon", "ui-icon" );

  			if ( !this.options.showLabel ) {
  				this._addClass( "ui-button-icon-only" );
  			}
  		} else if ( icon ) {

  			// If we are updating the icon remove the old icon class
  			this._removeClass( this.icon, null, this.options.icon );
  		}

  		// If we are updating the icon add the new icon class
  		if ( icon ) {
  			this._addClass( this.icon, null, value );
  		}

  		this._attachIcon( position );

  		// If the icon is on top or bottom we need to add the ui-widget-icon-block class and remove
  		// the iconSpace if there is one.
  		if ( displayBlock ) {
  			this._addClass( this.icon, null, "ui-widget-icon-block" );
  			if ( this.iconSpace ) {
  				this.iconSpace.remove();
  			}
  		} else {

  			// Position is beginning or end so remove the ui-widget-icon-block class and add the
  			// space if it does not exist
  			if ( !this.iconSpace ) {
  				this.iconSpace = $( "<span> </span>" );
  				this._addClass( this.iconSpace, "ui-button-icon-space" );
  			}
  			this._removeClass( this.icon, null, "ui-wiget-icon-block" );
  			this._attachIconSpace( position );
  		}
  	},

  	_destroy: function() {
  		this.element.removeAttr( "role" );

  		if ( this.icon ) {
  			this.icon.remove();
  		}
  		if ( this.iconSpace ) {
  			this.iconSpace.remove();
  		}
  		if ( !this.hasTitle ) {
  			this.element.removeAttr( "title" );
  		}
  	},

  	_attachIconSpace: function( iconPosition ) {
  		this.icon[ /^(?:end|bottom)/.test( iconPosition ) ? "before" : "after" ]( this.iconSpace );
  	},

  	_attachIcon: function( iconPosition ) {
  		this.element[ /^(?:end|bottom)/.test( iconPosition ) ? "append" : "prepend" ]( this.icon );
  	},

  	_setOptions: function( options ) {
  		var newShowLabel = options.showLabel === undefined ?
  				this.options.showLabel :
  				options.showLabel,
  			newIcon = options.icon === undefined ? this.options.icon : options.icon;

  		if ( !newShowLabel && !newIcon ) {
  			options.showLabel = true;
  		}
  		this._super( options );
  	},

  	_setOption: function( key, value ) {
  		if ( key === "icon" ) {
  			if ( value ) {
  				this._updateIcon( key, value );
  			} else if ( this.icon ) {
  				this.icon.remove();
  				if ( this.iconSpace ) {
  					this.iconSpace.remove();
  				}
  			}
  		}

  		if ( key === "iconPosition" ) {
  			this._updateIcon( key, value );
  		}

  		// Make sure we can't end up with a button that has neither text nor icon
  		if ( key === "showLabel" ) {
  				this._toggleClass( "ui-button-icon-only", null, !value );
  				this._updateTooltip();
  		}

  		if ( key === "label" ) {
  			if ( this.isInput ) {
  				this.element.val( value );
  			} else {

  				// If there is an icon, append it, else nothing then append the value
  				// this avoids removal of the icon when setting label text
  				this.element.html( value );
  				if ( this.icon ) {
  					this._attachIcon( this.options.iconPosition );
  					this._attachIconSpace( this.options.iconPosition );
  				}
  			}
  		}

  		this._super( key, value );

  		if ( key === "disabled" ) {
  			this._toggleClass( null, "ui-state-disabled", value );
  			this.element[ 0 ].disabled = value;
  			if ( value ) {
  				this.element.trigger( "blur" );
  			}
  		}
  	},

  	refresh: function() {

  		// Make sure to only check disabled if its an element that supports this otherwise
  		// check for the disabled class to determine state
  		var isDisabled = this.element.is( "input, button" ) ?
  			this.element[ 0 ].disabled : this.element.hasClass( "ui-button-disabled" );

  		if ( isDisabled !== this.options.disabled ) {
  			this._setOptions( { disabled: isDisabled } );
  		}

  		this._updateTooltip();
  	}
  } );

  // DEPRECATED
  if ( $.uiBackCompat === true ) {

  	// Text and Icons options
  	$.widget( "ui.button", $.ui.button, {
  		options: {
  			text: true,
  			icons: {
  				primary: null,
  				secondary: null
  			}
  		},

  		_create: function() {
  			if ( this.options.showLabel && !this.options.text ) {
  				this.options.showLabel = this.options.text;
  			}
  			if ( !this.options.showLabel && this.options.text ) {
  				this.options.text = this.options.showLabel;
  			}
  			if ( !this.options.icon && ( this.options.icons.primary ||
  					this.options.icons.secondary ) ) {
  				if ( this.options.icons.primary ) {
  					this.options.icon = this.options.icons.primary;
  				} else {
  					this.options.icon = this.options.icons.secondary;
  					this.options.iconPosition = "end";
  				}
  			} else if ( this.options.icon ) {
  				this.options.icons.primary = this.options.icon;
  			}
  			this._super();
  		},

  		_setOption: function( key, value ) {
  			if ( key === "text" ) {
  				this._super( "showLabel", value );
  				return;
  			}
  			if ( key === "showLabel" ) {
  				this.options.text = value;
  			}
  			if ( key === "icon" ) {
  				this.options.icons.primary = value;
  			}
  			if ( key === "icons" ) {
  				if ( value.primary ) {
  					this._super( "icon", value.primary );
  					this._super( "iconPosition", "beginning" );
  				} else if ( value.secondary ) {
  					this._super( "icon", value.secondary );
  					this._super( "iconPosition", "end" );
  				}
  			}
  			this._superApply( arguments );
  		}
  	} );

  	$.fn.button = ( function( orig ) {
  		return function( options ) {
  			var isMethodCall = typeof options === "string";
  			var args = Array.prototype.slice.call( arguments, 1 );
  			var returnValue = this;

  			if ( isMethodCall ) {

  				// If this is an empty collection, we need to have the instance method
  				// return undefined instead of the jQuery instance
  				if ( !this.length && options === "instance" ) {
  					returnValue = undefined;
  				} else {
  					this.each( function() {
  						var methodValue;
  						var type = $( this ).attr( "type" );
  						var name = type !== "checkbox" && type !== "radio" ?
  							"button" :
  							"checkboxradio";
  						var instance = $.data( this, "ui-" + name );

  						if ( options === "instance" ) {
  							returnValue = instance;
  							return false;
  						}

  						if ( !instance ) {
  							return $.error( "cannot call methods on button" +
  								" prior to initialization; " +
  								"attempted to call method '" + options + "'" );
  						}

  						if ( typeof instance[ options ] !== "function" ||
  							options.charAt( 0 ) === "_" ) {
  							return $.error( "no such method '" + options + "' for button" +
  								" widget instance" );
  						}

  						methodValue = instance[ options ].apply( instance, args );

  						if ( methodValue !== instance && methodValue !== undefined ) {
  							returnValue = methodValue && methodValue.jquery ?
  								returnValue.pushStack( methodValue.get() ) :
  								methodValue;
  							return false;
  						}
  					} );
  				}
  			} else {

  				// Allow multiple hashes to be passed on init
  				if ( args.length ) {
  					options = $.widget.extend.apply( null, [ options ].concat( args ) );
  				}

  				this.each( function() {
  					var type = $( this ).attr( "type" );
  					var name = type !== "checkbox" && type !== "radio" ? "button" : "checkboxradio";
  					var instance = $.data( this, "ui-" + name );

  					if ( instance ) {
  						instance.option( options || {} );
  						if ( instance._init ) {
  							instance._init();
  						}
  					} else {
  						if ( name === "button" ) {
  							orig.call( $( this ), options );
  							return;
  						}

  						$( this ).checkboxradio( $.extend( { icon: false }, options ) );
  					}
  				} );
  			}

  			return returnValue;
  		};
  	} )( $.fn.button );

  	$.fn.buttonset = function() {
  		if ( !$.ui.controlgroup ) {
  			$.error( "Controlgroup widget missing" );
  		}
  		if ( arguments[ 0 ] === "option" && arguments[ 1 ] === "items" && arguments[ 2 ] ) {
  			return this.controlgroup.apply( this,
  				[ arguments[ 0 ], "items.button", arguments[ 2 ] ] );
  		}
  		if ( arguments[ 0 ] === "option" && arguments[ 1 ] === "items" ) {
  			return this.controlgroup.apply( this, [ arguments[ 0 ], "items.button" ] );
  		}
  		if ( typeof arguments[ 0 ] === "object" && arguments[ 0 ].items ) {
  			arguments[ 0 ].items = {
  				button: arguments[ 0 ].items
  			};
  		}
  		return this.controlgroup.apply( this, arguments );
  	};
  }

  $.ui.button;


  /* eslint-disable max-len, camelcase */
  /*!
   * jQuery UI Datepicker 1.14.0
   * https://jqueryui.com
   *
   * Copyright OpenJS Foundation and other contributors
   * Released under the MIT license.
   * https://jquery.org/license
   */

  //>>label: Datepicker
  //>>group: Widgets
  //>>description: Displays a calendar from an input or inline for selecting dates.
  //>>docs: https://api.jqueryui.com/datepicker/
  //>>demos: https://jqueryui.com/datepicker/
  //>>css.structure: ../../themes/base/core.css
  //>>css.structure: ../../themes/base/datepicker.css
  //>>css.theme: ../../themes/base/theme.css


  $.extend( $.ui, { datepicker: { version: "1.14.0" } } );

  var datepicker_instActive;

  function datepicker_getZindex( elem ) {
  	var position, value;
  	while ( elem.length && elem[ 0 ] !== document ) {

  		// Ignore z-index if position is set to a value where z-index is ignored by the browser
  		// This makes behavior of this function consistent across browsers
  		// WebKit always returns auto if the element is positioned
  		position = elem.css( "position" );
  		if ( position === "absolute" || position === "relative" || position === "fixed" ) {

  			// IE returns 0 when zIndex is not specified
  			// other browsers return a string
  			// we ignore the case of nested elements with an explicit value of 0
  			// <div style="z-index: -10;"><div style="z-index: 0;"></div></div>
  			value = parseInt( elem.css( "zIndex" ), 10 );
  			if ( !isNaN( value ) && value !== 0 ) {
  				return value;
  			}
  		}
  		elem = elem.parent();
  	}

  	return 0;
  }

  /* Date picker manager.
     Use the singleton instance of this class, $.datepicker, to interact with the date picker.
     Settings for (groups of) date pickers are maintained in an instance object,
     allowing multiple different settings on the same page. */

  function Datepicker() {
  	this._curInst = null; // The current instance in use
  	this._keyEvent = false; // If the last event was a key event
  	this._disabledInputs = []; // List of date picker inputs that have been disabled
  	this._datepickerShowing = false; // True if the popup picker is showing , false if not
  	this._inDialog = false; // True if showing within a "dialog", false if not
  	this._mainDivId = "ui-datepicker-div"; // The ID of the main datepicker division
  	this._inlineClass = "ui-datepicker-inline"; // The name of the inline marker class
  	this._appendClass = "ui-datepicker-append"; // The name of the append marker class
  	this._triggerClass = "ui-datepicker-trigger"; // The name of the trigger marker class
  	this._dialogClass = "ui-datepicker-dialog"; // The name of the dialog marker class
  	this._disableClass = "ui-datepicker-disabled"; // The name of the disabled covering marker class
  	this._unselectableClass = "ui-datepicker-unselectable"; // The name of the unselectable cell marker class
  	this._currentClass = "ui-datepicker-current-day"; // The name of the current day marker class
  	this._dayOverClass = "ui-datepicker-days-cell-over"; // The name of the day hover marker class
  	this.regional = []; // Available regional settings, indexed by language code
  	this.regional[ "" ] = { // Default regional settings
  		closeText: "Done", // Display text for close link
  		prevText: "Prev", // Display text for previous month link
  		nextText: "Next", // Display text for next month link
  		currentText: "Today", // Display text for current month link
  		monthNames: [ "January", "February", "March", "April", "May", "June",
  			"July", "August", "September", "October", "November", "December" ], // Names of months for drop-down and formatting
  		monthNamesShort: [ "Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec" ], // For formatting
  		dayNames: [ "Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday" ], // For formatting
  		dayNamesShort: [ "Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat" ], // For formatting
  		dayNamesMin: [ "Su", "Mo", "Tu", "We", "Th", "Fr", "Sa" ], // Column headings for days starting at Sunday
  		weekHeader: "Wk", // Column header for week of the year
  		dateFormat: "mm/dd/yy", // See format options on parseDate
  		firstDay: 0, // The first day of the week, Sun = 0, Mon = 1, ...
  		isRTL: false, // True if right-to-left language, false if left-to-right
  		showMonthAfterYear: false, // True if the year select precedes month, false for month then year
  		yearSuffix: "", // Additional text to append to the year in the month headers,
  		selectMonthLabel: "Select month", // Invisible label for month selector
  		selectYearLabel: "Select year" // Invisible label for year selector
  	};
  	this._defaults = { // Global defaults for all the date picker instances
  		showOn: "focus", // "focus" for popup on focus,
  			// "button" for trigger button, or "both" for either
  		showAnim: "fadeIn", // Name of jQuery animation for popup
  		showOptions: {}, // Options for enhanced animations
  		defaultDate: null, // Used when field is blank: actual date,
  			// +/-number for offset from today, null for today
  		appendText: "", // Display text following the input box, e.g. showing the format
  		buttonText: "...", // Text for trigger button
  		buttonImage: "", // URL for trigger button image
  		buttonImageOnly: false, // True if the image appears alone, false if it appears on a button
  		hideIfNoPrevNext: false, // True to hide next/previous month links
  			// if not applicable, false to just disable them
  		navigationAsDateFormat: false, // True if date formatting applied to prev/today/next links
  		gotoCurrent: false, // True if today link goes back to current selection instead
  		changeMonth: false, // True if month can be selected directly, false if only prev/next
  		changeYear: false, // True if year can be selected directly, false if only prev/next
  		yearRange: "c-10:c+10", // Range of years to display in drop-down,
  			// either relative to today's year (-nn:+nn), relative to currently displayed year
  			// (c-nn:c+nn), absolute (nnnn:nnnn), or a combination of the above (nnnn:-n)
  		showOtherMonths: false, // True to show dates in other months, false to leave blank
  		selectOtherMonths: false, // True to allow selection of dates in other months, false for unselectable
  		showWeek: false, // True to show week of the year, false to not show it
  		calculateWeek: this.iso8601Week, // How to calculate the week of the year,
  			// takes a Date and returns the number of the week for it
  		shortYearCutoff: "+10", // Short year values < this are in the current century,
  			// > this are in the previous century,
  			// string value starting with "+" for current year + value
  		minDate: null, // The earliest selectable date, or null for no limit
  		maxDate: null, // The latest selectable date, or null for no limit
  		duration: "fast", // Duration of display/closure
  		beforeShowDay: null, // Function that takes a date and returns an array with
  			// [0] = true if selectable, false if not, [1] = custom CSS class name(s) or "",
  			// [2] = cell title (optional), e.g. $.datepicker.noWeekends
  		beforeShow: null, // Function that takes an input field and
  			// returns a set of custom settings for the date picker
  		onSelect: null, // Define a callback function when a date is selected
  		onChangeMonthYear: null, // Define a callback function when the month or year is changed
  		onClose: null, // Define a callback function when the datepicker is closed
  		onUpdateDatepicker: null, // Define a callback function when the datepicker is updated
  		numberOfMonths: 1, // Number of months to show at a time
  		showCurrentAtPos: 0, // The position in multipe months at which to show the current month (starting at 0)
  		stepMonths: 1, // Number of months to step back/forward
  		stepBigMonths: 12, // Number of months to step back/forward for the big links
  		altField: "", // Selector for an alternate field to store selected dates into
  		altFormat: "", // The date format to use for the alternate field
  		constrainInput: true, // The input is constrained by the current date format
  		showButtonPanel: false, // True to show button panel, false to not show it
  		autoSize: false, // True to size the input for the date format, false to leave as is
  		disabled: false // The initial disabled state
  	};
  	$.extend( this._defaults, this.regional[ "" ] );
  	this.regional.en = $.extend( true, {}, this.regional[ "" ] );
  	this.regional[ "en-US" ] = $.extend( true, {}, this.regional.en );
  	this.dpDiv = datepicker_bindHover( $( "<div id='" + this._mainDivId + "' class='ui-datepicker ui-widget ui-widget-content ui-helper-clearfix ui-corner-all'></div>" ) );
  }

  $.extend( Datepicker.prototype, {

  	/* Class name added to elements to indicate already configured with a date picker. */
  	markerClassName: "hasDatepicker",

  	//Keep track of the maximum number of rows displayed (see #7043)
  	maxRows: 4,

  	// TODO rename to "widget" when switching to widget factory
  	_widgetDatepicker: function() {
  		return this.dpDiv;
  	},

  	/* Override the default settings for all instances of the date picker.
  	 * @param  settings  object - the new settings to use as defaults (anonymous object)
  	 * @return the manager object
  	 */
  	setDefaults: function( settings ) {
  		datepicker_extendRemove( this._defaults, settings || {} );
  		return this;
  	},

  	/* Attach the date picker to a jQuery selection.
  	 * @param  target	element - the target input field or division or span
  	 * @param  settings  object - the new settings to use for this date picker instance (anonymous)
  	 */
  	_attachDatepicker: function( target, settings ) {
  		var nodeName, inline, inst;
  		nodeName = target.nodeName.toLowerCase();
  		inline = ( nodeName === "div" || nodeName === "span" );
  		if ( !target.id ) {
  			this.uuid += 1;
  			target.id = "dp" + this.uuid;
  		}
  		inst = this._newInst( $( target ), inline );
  		inst.settings = $.extend( {}, settings || {} );
  		if ( nodeName === "input" ) {
  			this._connectDatepicker( target, inst );
  		} else if ( inline ) {
  			this._inlineDatepicker( target, inst );
  		}
  	},

  	/* Create a new instance object. */
  	_newInst: function( target, inline ) {
  		var id = target[ 0 ].id.replace( /([^A-Za-z0-9_\-])/g, "\\\\$1" ); // escape jQuery meta chars
  		return { id: id, input: target, // associated target
  			selectedDay: 0, selectedMonth: 0, selectedYear: 0, // current selection
  			drawMonth: 0, drawYear: 0, // month being drawn
  			inline: inline, // is datepicker inline or not
  			dpDiv: ( !inline ? this.dpDiv : // presentation div
  			datepicker_bindHover( $( "<div class='" + this._inlineClass + " ui-datepicker ui-widget ui-widget-content ui-helper-clearfix ui-corner-all'></div>" ) ) ) };
  	},

  	/* Attach the date picker to an input field. */
  	_connectDatepicker: function( target, inst ) {
  		var input = $( target );
  		inst.append = $( [] );
  		inst.trigger = $( [] );
  		if ( input.hasClass( this.markerClassName ) ) {
  			return;
  		}
  		this._attachments( input, inst );
  		input.addClass( this.markerClassName ).on( "keydown", this._doKeyDown ).
  			on( "keypress", this._doKeyPress ).on( "keyup", this._doKeyUp );
  		this._autoSize( inst );
  		$.data( target, "datepicker", inst );

  		//If disabled option is true, disable the datepicker once it has been attached to the input (see ticket #5665)
  		if ( inst.settings.disabled ) {
  			this._disableDatepicker( target );
  		}
  	},

  	/* Make attachments based on settings. */
  	_attachments: function( input, inst ) {
  		var showOn, buttonText, buttonImage,
  			appendText = this._get( inst, "appendText" ),
  			isRTL = this._get( inst, "isRTL" );

  		if ( inst.append ) {
  			inst.append.remove();
  		}
  		if ( appendText ) {
  			inst.append = $( "<span>" )
  				.addClass( this._appendClass )
  				.text( appendText );
  			input[ isRTL ? "before" : "after" ]( inst.append );
  		}

  		input.off( "focus", this._showDatepicker );

  		if ( inst.trigger ) {
  			inst.trigger.remove();
  		}

  		showOn = this._get( inst, "showOn" );
  		if ( showOn === "focus" || showOn === "both" ) { // pop-up date picker when in the marked field
  			input.on( "focus", this._showDatepicker );
  		}
  		if ( showOn === "button" || showOn === "both" ) { // pop-up date picker when button clicked
  			buttonText = this._get( inst, "buttonText" );
  			buttonImage = this._get( inst, "buttonImage" );

  			if ( this._get( inst, "buttonImageOnly" ) ) {
  				inst.trigger = $( "<img>" )
  					.addClass( this._triggerClass )
  					.attr( {
  						src: buttonImage,
  						alt: buttonText,
  						title: buttonText
  					} );
  			} else {
  				inst.trigger = $( "<button type='button'>" )
  					.addClass( this._triggerClass );
  				if ( buttonImage ) {
  					inst.trigger.html(
  						$( "<img>" )
  							.attr( {
  								src: buttonImage,
  								alt: buttonText,
  								title: buttonText
  							} )
  					);
  				} else {
  					inst.trigger.text( buttonText );
  				}
  			}

  			input[ isRTL ? "before" : "after" ]( inst.trigger );
  			inst.trigger.on( "click", function() {
  				if ( $.datepicker._datepickerShowing && $.datepicker._lastInput === input[ 0 ] ) {
  					$.datepicker._hideDatepicker();
  				} else if ( $.datepicker._datepickerShowing && $.datepicker._lastInput !== input[ 0 ] ) {
  					$.datepicker._hideDatepicker();
  					$.datepicker._showDatepicker( input[ 0 ] );
  				} else {
  					$.datepicker._showDatepicker( input[ 0 ] );
  				}
  				return false;
  			} );
  		}
  	},

  	/* Apply the maximum length for the date format. */
  	_autoSize: function( inst ) {
  		if ( this._get( inst, "autoSize" ) && !inst.inline ) {
  			var findMax, max, maxI, i,
  				date = new Date( 2009, 12 - 1, 20 ), // Ensure double digits
  				dateFormat = this._get( inst, "dateFormat" );

  			if ( dateFormat.match( /[DM]/ ) ) {
  				findMax = function( names ) {
  					max = 0;
  					maxI = 0;
  					for ( i = 0; i < names.length; i++ ) {
  						if ( names[ i ].length > max ) {
  							max = names[ i ].length;
  							maxI = i;
  						}
  					}
  					return maxI;
  				};
  				date.setMonth( findMax( this._get( inst, ( dateFormat.match( /MM/ ) ?
  					"monthNames" : "monthNamesShort" ) ) ) );
  				date.setDate( findMax( this._get( inst, ( dateFormat.match( /DD/ ) ?
  					"dayNames" : "dayNamesShort" ) ) ) + 20 - date.getDay() );
  			}
  			inst.input.attr( "size", this._formatDate( inst, date ).length );
  		}
  	},

  	/* Attach an inline date picker to a div. */
  	_inlineDatepicker: function( target, inst ) {
  		var divSpan = $( target );
  		if ( divSpan.hasClass( this.markerClassName ) ) {
  			return;
  		}
  		divSpan.addClass( this.markerClassName ).append( inst.dpDiv );
  		$.data( target, "datepicker", inst );
  		this._setDate( inst, this._getDefaultDate( inst ), true );
  		this._updateDatepicker( inst );
  		this._updateAlternate( inst );

  		//If disabled option is true, disable the datepicker before showing it (see ticket #5665)
  		if ( inst.settings.disabled ) {
  			this._disableDatepicker( target );
  		}

  		// Set display:block in place of inst.dpDiv.show() which won't work on disconnected elements
  		// https://bugs.jqueryui.com/ticket/7552 - A Datepicker created on a detached div has zero height
  		inst.dpDiv.css( "display", "block" );
  	},

  	/* Pop-up the date picker in a "dialog" box.
  	 * @param  input element - ignored
  	 * @param  date	string or Date - the initial date to display
  	 * @param  onSelect  function - the function to call when a date is selected
  	 * @param  settings  object - update the dialog date picker instance's settings (anonymous object)
  	 * @param  pos int[2] - coordinates for the dialog's position within the screen or
  	 *					event - with x/y coordinates or
  	 *					leave empty for default (screen centre)
  	 * @return the manager object
  	 */
  	_dialogDatepicker: function( input, date, onSelect, settings, pos ) {
  		var id, browserWidth, browserHeight, scrollX, scrollY,
  			inst = this._dialogInst; // internal instance

  		if ( !inst ) {
  			this.uuid += 1;
  			id = "dp" + this.uuid;
  			this._dialogInput = $( "<input type='text' id='" + id +
  				"' style='position: absolute; top: -100px; width: 0px;'/>" );
  			this._dialogInput.on( "keydown", this._doKeyDown );
  			$( "body" ).append( this._dialogInput );
  			inst = this._dialogInst = this._newInst( this._dialogInput, false );
  			inst.settings = {};
  			$.data( this._dialogInput[ 0 ], "datepicker", inst );
  		}
  		datepicker_extendRemove( inst.settings, settings || {} );
  		date = ( date && date.constructor === Date ? this._formatDate( inst, date ) : date );
  		this._dialogInput.val( date );

  		this._pos = ( pos ? ( pos.length ? pos : [ pos.pageX, pos.pageY ] ) : null );
  		if ( !this._pos ) {
  			browserWidth = document.documentElement.clientWidth;
  			browserHeight = document.documentElement.clientHeight;
  			scrollX = document.documentElement.scrollLeft || document.body.scrollLeft;
  			scrollY = document.documentElement.scrollTop || document.body.scrollTop;
  			this._pos = // should use actual width/height below
  				[ ( browserWidth / 2 ) - 100 + scrollX, ( browserHeight / 2 ) - 150 + scrollY ];
  		}

  		// Move input on screen for focus, but hidden behind dialog
  		this._dialogInput.css( "left", ( this._pos[ 0 ] + 20 ) + "px" ).css( "top", this._pos[ 1 ] + "px" );
  		inst.settings.onSelect = onSelect;
  		this._inDialog = true;
  		this.dpDiv.addClass( this._dialogClass );
  		this._showDatepicker( this._dialogInput[ 0 ] );
  		if ( $.blockUI ) {
  			$.blockUI( this.dpDiv );
  		}
  		$.data( this._dialogInput[ 0 ], "datepicker", inst );
  		return this;
  	},

  	/* Detach a datepicker from its control.
  	 * @param  target	element - the target input field or division or span
  	 */
  	_destroyDatepicker: function( target ) {
  		var nodeName,
  			$target = $( target ),
  			inst = $.data( target, "datepicker" );

  		if ( !$target.hasClass( this.markerClassName ) ) {
  			return;
  		}

  		nodeName = target.nodeName.toLowerCase();
  		$.removeData( target, "datepicker" );
  		if ( nodeName === "input" ) {
  			inst.append.remove();
  			inst.trigger.remove();
  			$target.removeClass( this.markerClassName ).
  				off( "focus", this._showDatepicker ).
  				off( "keydown", this._doKeyDown ).
  				off( "keypress", this._doKeyPress ).
  				off( "keyup", this._doKeyUp );
  		} else if ( nodeName === "div" || nodeName === "span" ) {
  			$target.removeClass( this.markerClassName ).empty();
  		}

  		$.datepicker._hideDatepicker();
  		if ( datepicker_instActive === inst ) {
  			datepicker_instActive = null;
  			this._curInst = null;
  		}
  	},

  	/* Enable the date picker to a jQuery selection.
  	 * @param  target	element - the target input field or division or span
  	 */
  	_enableDatepicker: function( target ) {
  		var nodeName, inline,
  			$target = $( target ),
  			inst = $.data( target, "datepicker" );

  		if ( !$target.hasClass( this.markerClassName ) ) {
  			return;
  		}

  		nodeName = target.nodeName.toLowerCase();
  		if ( nodeName === "input" ) {
  			target.disabled = false;
  			inst.trigger.filter( "button" ).
  				each( function() {
  					this.disabled = false;
  				} ).end().
  				filter( "img" ).css( { opacity: "1.0", cursor: "" } );
  		} else if ( nodeName === "div" || nodeName === "span" ) {
  			inline = $target.children( "." + this._inlineClass );
  			inline.children().removeClass( "ui-state-disabled" );
  			inline.find( "select.ui-datepicker-month, select.ui-datepicker-year" ).
  				prop( "disabled", false );
  		}
  		this._disabledInputs = $.map( this._disabledInputs,

  			// Delete entry
  			function( value ) {
  				return ( value === target ? null : value );
  			} );
  	},

  	/* Disable the date picker to a jQuery selection.
  	 * @param  target	element - the target input field or division or span
  	 */
  	_disableDatepicker: function( target ) {
  		var nodeName, inline,
  			$target = $( target ),
  			inst = $.data( target, "datepicker" );

  		if ( !$target.hasClass( this.markerClassName ) ) {
  			return;
  		}

  		nodeName = target.nodeName.toLowerCase();
  		if ( nodeName === "input" ) {
  			target.disabled = true;
  			inst.trigger.filter( "button" ).
  				each( function() {
  					this.disabled = true;
  				} ).end().
  				filter( "img" ).css( { opacity: "0.5", cursor: "default" } );
  		} else if ( nodeName === "div" || nodeName === "span" ) {
  			inline = $target.children( "." + this._inlineClass );
  			inline.children().addClass( "ui-state-disabled" );
  			inline.find( "select.ui-datepicker-month, select.ui-datepicker-year" ).
  				prop( "disabled", true );
  		}
  		this._disabledInputs = $.map( this._disabledInputs,

  			// Delete entry
  			function( value ) {
  				return ( value === target ? null : value );
  			} );
  		this._disabledInputs[ this._disabledInputs.length ] = target;
  	},

  	/* Is the first field in a jQuery collection disabled as a datepicker?
  	 * @param  target	element - the target input field or division or span
  	 * @return boolean - true if disabled, false if enabled
  	 */
  	_isDisabledDatepicker: function( target ) {
  		if ( !target ) {
  			return false;
  		}
  		for ( var i = 0; i < this._disabledInputs.length; i++ ) {
  			if ( this._disabledInputs[ i ] === target ) {
  				return true;
  			}
  		}
  		return false;
  	},

  	/* Retrieve the instance data for the target control.
  	 * @param  target  element - the target input field or division or span
  	 * @return  object - the associated instance data
  	 * @throws  error if a jQuery problem getting data
  	 */
  	_getInst: function( target ) {
  		try {
  			return $.data( target, "datepicker" );
  		} catch ( err ) {
  			throw "Missing instance data for this datepicker";
  		}
  	},

  	/* Update or retrieve the settings for a date picker attached to an input field or division.
  	 * @param  target  element - the target input field or division or span
  	 * @param  name	object - the new settings to update or
  	 *				string - the name of the setting to change or retrieve,
  	 *				when retrieving also "all" for all instance settings or
  	 *				"defaults" for all global defaults
  	 * @param  value   any - the new value for the setting
  	 *				(omit if above is an object or to retrieve a value)
  	 */
  	_optionDatepicker: function( target, name, value ) {
  		var settings, date, minDate, maxDate,
  			inst = this._getInst( target );

  		if ( arguments.length === 2 && typeof name === "string" ) {
  			return ( name === "defaults" ? $.extend( {}, $.datepicker._defaults ) :
  				( inst ? ( name === "all" ? $.extend( {}, inst.settings ) :
  				this._get( inst, name ) ) : null ) );
  		}

  		settings = name || {};
  		if ( typeof name === "string" ) {
  			settings = {};
  			settings[ name ] = value;
  		}

  		if ( inst ) {
  			if ( this._curInst === inst ) {
  				this._hideDatepicker();
  			}

  			date = this._getDateDatepicker( target, true );
  			minDate = this._getMinMaxDate( inst, "min" );
  			maxDate = this._getMinMaxDate( inst, "max" );
  			datepicker_extendRemove( inst.settings, settings );

  			// reformat the old minDate/maxDate values if dateFormat changes and a new minDate/maxDate isn't provided
  			if ( minDate !== null && settings.dateFormat !== undefined && settings.minDate === undefined ) {
  				inst.settings.minDate = this._formatDate( inst, minDate );
  			}
  			if ( maxDate !== null && settings.dateFormat !== undefined && settings.maxDate === undefined ) {
  				inst.settings.maxDate = this._formatDate( inst, maxDate );
  			}
  			if ( "disabled" in settings ) {
  				if ( settings.disabled ) {
  					this._disableDatepicker( target );
  				} else {
  					this._enableDatepicker( target );
  				}
  			}
  			this._attachments( $( target ), inst );
  			this._autoSize( inst );
  			this._setDate( inst, date );
  			this._updateAlternate( inst );
  			this._updateDatepicker( inst );
  		}
  	},

  	// Change method deprecated
  	_changeDatepicker: function( target, name, value ) {
  		this._optionDatepicker( target, name, value );
  	},

  	/* Redraw the date picker attached to an input field or division.
  	 * @param  target  element - the target input field or division or span
  	 */
  	_refreshDatepicker: function( target ) {
  		var inst = this._getInst( target );
  		if ( inst ) {
  			this._updateDatepicker( inst );
  		}
  	},

  	/* Set the dates for a jQuery selection.
  	 * @param  target element - the target input field or division or span
  	 * @param  date	Date - the new date
  	 */
  	_setDateDatepicker: function( target, date ) {
  		var inst = this._getInst( target );
  		if ( inst ) {
  			this._setDate( inst, date );
  			this._updateDatepicker( inst );
  			this._updateAlternate( inst );
  		}
  	},

  	/* Get the date(s) for the first entry in a jQuery selection.
  	 * @param  target element - the target input field or division or span
  	 * @param  noDefault boolean - true if no default date is to be used
  	 * @return Date - the current date
  	 */
  	_getDateDatepicker: function( target, noDefault ) {
  		var inst = this._getInst( target );
  		if ( inst && !inst.inline ) {
  			this._setDateFromField( inst, noDefault );
  		}
  		return ( inst ? this._getDate( inst ) : null );
  	},

  	/* Handle keystrokes. */
  	_doKeyDown: function( event ) {
  		var onSelect, dateStr, sel,
  			inst = $.datepicker._getInst( event.target ),
  			handled = true,
  			isRTL = inst.dpDiv.is( ".ui-datepicker-rtl" );

  		inst._keyEvent = true;
  		if ( $.datepicker._datepickerShowing ) {
  			switch ( event.keyCode ) {
  				case 9: $.datepicker._hideDatepicker();
  						handled = false;
  						break; // hide on tab out
  				case 13: sel = $( "td." + $.datepicker._dayOverClass + ":not(." +
  									$.datepicker._currentClass + ")", inst.dpDiv );
  						if ( sel[ 0 ] ) {
  							$.datepicker._selectDay( event.target, inst.selectedMonth, inst.selectedYear, sel[ 0 ] );
  						}

  						onSelect = $.datepicker._get( inst, "onSelect" );
  						if ( onSelect ) {
  							dateStr = $.datepicker._formatDate( inst );

  							// Trigger custom callback
  							onSelect.apply( ( inst.input ? inst.input[ 0 ] : null ), [ dateStr, inst ] );
  						} else {
  							$.datepicker._hideDatepicker();
  						}

  						return false; // don't submit the form
  				case 27: $.datepicker._hideDatepicker();
  						break; // hide on escape
  				case 33: $.datepicker._adjustDate( event.target, ( event.ctrlKey ?
  							-$.datepicker._get( inst, "stepBigMonths" ) :
  							-$.datepicker._get( inst, "stepMonths" ) ), "M" );
  						break; // previous month/year on page up/+ ctrl
  				case 34: $.datepicker._adjustDate( event.target, ( event.ctrlKey ?
  							+$.datepicker._get( inst, "stepBigMonths" ) :
  							+$.datepicker._get( inst, "stepMonths" ) ), "M" );
  						break; // next month/year on page down/+ ctrl
  				case 35: if ( event.ctrlKey || event.metaKey ) {
  							$.datepicker._clearDate( event.target );
  						}
  						handled = event.ctrlKey || event.metaKey;
  						break; // clear on ctrl or command +end
  				case 36: if ( event.ctrlKey || event.metaKey ) {
  							$.datepicker._gotoToday( event.target );
  						}
  						handled = event.ctrlKey || event.metaKey;
  						break; // current on ctrl or command +home
  				case 37: if ( event.ctrlKey || event.metaKey ) {
  							$.datepicker._adjustDate( event.target, ( isRTL ? +1 : -1 ), "D" );
  						}
  						handled = event.ctrlKey || event.metaKey;

  						// -1 day on ctrl or command +left
  						if ( event.originalEvent.altKey ) {
  							$.datepicker._adjustDate( event.target, ( event.ctrlKey ?
  								-$.datepicker._get( inst, "stepBigMonths" ) :
  								-$.datepicker._get( inst, "stepMonths" ) ), "M" );
  						}

  						// next month/year on alt +left on Mac
  						break;
  				case 38: if ( event.ctrlKey || event.metaKey ) {
  							$.datepicker._adjustDate( event.target, -7, "D" );
  						}
  						handled = event.ctrlKey || event.metaKey;
  						break; // -1 week on ctrl or command +up
  				case 39: if ( event.ctrlKey || event.metaKey ) {
  							$.datepicker._adjustDate( event.target, ( isRTL ? -1 : +1 ), "D" );
  						}
  						handled = event.ctrlKey || event.metaKey;

  						// +1 day on ctrl or command +right
  						if ( event.originalEvent.altKey ) {
  							$.datepicker._adjustDate( event.target, ( event.ctrlKey ?
  								+$.datepicker._get( inst, "stepBigMonths" ) :
  								+$.datepicker._get( inst, "stepMonths" ) ), "M" );
  						}

  						// next month/year on alt +right
  						break;
  				case 40: if ( event.ctrlKey || event.metaKey ) {
  							$.datepicker._adjustDate( event.target, +7, "D" );
  						}
  						handled = event.ctrlKey || event.metaKey;
  						break; // +1 week on ctrl or command +down
  				default: handled = false;
  			}
  		} else if ( event.keyCode === 36 && event.ctrlKey ) { // display the date picker on ctrl+home
  			$.datepicker._showDatepicker( this );
  		} else {
  			handled = false;
  		}

  		if ( handled ) {
  			event.preventDefault();
  			event.stopPropagation();
  		}
  	},

  	/* Filter entered characters - based on date format. */
  	_doKeyPress: function( event ) {
  		var chars, chr,
  			inst = $.datepicker._getInst( event.target );

  		if ( $.datepicker._get( inst, "constrainInput" ) ) {
  			chars = $.datepicker._possibleChars( $.datepicker._get( inst, "dateFormat" ) );
  			chr = String.fromCharCode( event.charCode == null ? event.keyCode : event.charCode );
  			return event.ctrlKey || event.metaKey || ( chr < " " || !chars || chars.indexOf( chr ) > -1 );
  		}
  	},

  	/* Synchronise manual entry and field/alternate field. */
  	_doKeyUp: function( event ) {
  		var date,
  			inst = $.datepicker._getInst( event.target );

  		if ( inst.input.val() !== inst.lastVal ) {
  			try {
  				date = $.datepicker.parseDate( $.datepicker._get( inst, "dateFormat" ),
  					( inst.input ? inst.input.val() : null ),
  					$.datepicker._getFormatConfig( inst ) );

  				if ( date ) { // only if valid
  					$.datepicker._setDateFromField( inst );
  					$.datepicker._updateAlternate( inst );
  					$.datepicker._updateDatepicker( inst );
  				}
  			} catch ( err ) {
  			}
  		}
  		return true;
  	},

  	/* Pop-up the date picker for a given input field.
  	 * If false returned from beforeShow event handler do not show.
  	 * @param  input  element - the input field attached to the date picker or
  	 *					event - if triggered by focus
  	 */
  	_showDatepicker: function( input ) {
  		input = input.target || input;
  		if ( input.nodeName.toLowerCase() !== "input" ) { // find from button/image trigger
  			input = $( "input", input.parentNode )[ 0 ];
  		}

  		if ( $.datepicker._isDisabledDatepicker( input ) || $.datepicker._lastInput === input ) { // already here
  			return;
  		}

  		var inst, beforeShow, beforeShowSettings, isFixed,
  			offset, showAnim, duration;

  		inst = $.datepicker._getInst( input );
  		if ( $.datepicker._curInst && $.datepicker._curInst !== inst ) {
  			$.datepicker._curInst.dpDiv.stop( true, true );
  			if ( inst && $.datepicker._datepickerShowing ) {
  				$.datepicker._hideDatepicker( $.datepicker._curInst.input[ 0 ] );
  			}
  		}

  		beforeShow = $.datepicker._get( inst, "beforeShow" );
  		beforeShowSettings = beforeShow ? beforeShow.apply( input, [ input, inst ] ) : {};
  		if ( beforeShowSettings === false ) {
  			return;
  		}
  		datepicker_extendRemove( inst.settings, beforeShowSettings );

  		inst.lastVal = null;
  		$.datepicker._lastInput = input;
  		$.datepicker._setDateFromField( inst );

  		if ( $.datepicker._inDialog ) { // hide cursor
  			input.value = "";
  		}
  		if ( !$.datepicker._pos ) { // position below input
  			$.datepicker._pos = $.datepicker._findPos( input );
  			$.datepicker._pos[ 1 ] += input.offsetHeight; // add the height
  		}

  		isFixed = false;
  		$( input ).parents().each( function() {
  			isFixed |= $( this ).css( "position" ) === "fixed";
  			return !isFixed;
  		} );

  		offset = { left: $.datepicker._pos[ 0 ], top: $.datepicker._pos[ 1 ] };
  		$.datepicker._pos = null;

  		//to avoid flashes on Firefox
  		inst.dpDiv.empty();

  		// determine sizing offscreen
  		inst.dpDiv.css( { position: "absolute", display: "block", top: "-1000px" } );
  		$.datepicker._updateDatepicker( inst );

  		// fix width for dynamic number of date pickers
  		// and adjust position before showing
  		offset = $.datepicker._checkOffset( inst, offset, isFixed );
  		inst.dpDiv.css( { position: ( $.datepicker._inDialog && $.blockUI ?
  			"static" : ( isFixed ? "fixed" : "absolute" ) ), display: "none",
  			left: offset.left + "px", top: offset.top + "px" } );

  		if ( !inst.inline ) {
  			showAnim = $.datepicker._get( inst, "showAnim" );
  			duration = $.datepicker._get( inst, "duration" );
  			inst.dpDiv.css( "z-index", datepicker_getZindex( $( input ) ) + 1 );
  			$.datepicker._datepickerShowing = true;

  			if ( $.effects && $.effects.effect[ showAnim ] ) {
  				inst.dpDiv.show( showAnim, $.datepicker._get( inst, "showOptions" ), duration );
  			} else {
  				inst.dpDiv[ showAnim || "show" ]( showAnim ? duration : null );
  			}

  			if ( $.datepicker._shouldFocusInput( inst ) ) {
  				inst.input.trigger( "focus" );
  			}

  			$.datepicker._curInst = inst;
  		}
  	},

  	/* Generate the date picker content. */
  	_updateDatepicker: function( inst ) {
  		this.maxRows = 4; //Reset the max number of rows being displayed (see #7043)
  		datepicker_instActive = inst; // for delegate hover events
  		inst.dpDiv.empty().append( this._generateHTML( inst ) );
  		this._attachHandlers( inst );

  		var origyearshtml,
  			numMonths = this._getNumberOfMonths( inst ),
  			cols = numMonths[ 1 ],
  			width = 17,
  			activeCell = inst.dpDiv.find( "." + this._dayOverClass + " a" ),
  			onUpdateDatepicker = $.datepicker._get( inst, "onUpdateDatepicker" );

  		if ( activeCell.length > 0 ) {
  			datepicker_handleMouseover.apply( activeCell.get( 0 ) );
  		}

  		inst.dpDiv.removeClass( "ui-datepicker-multi-2 ui-datepicker-multi-3 ui-datepicker-multi-4" ).width( "" );
  		if ( cols > 1 ) {
  			inst.dpDiv.addClass( "ui-datepicker-multi-" + cols ).css( "width", ( width * cols ) + "em" );
  		}
  		inst.dpDiv[ ( numMonths[ 0 ] !== 1 || numMonths[ 1 ] !== 1 ? "add" : "remove" ) +
  			"Class" ]( "ui-datepicker-multi" );
  		inst.dpDiv[ ( this._get( inst, "isRTL" ) ? "add" : "remove" ) +
  			"Class" ]( "ui-datepicker-rtl" );

  		if ( inst === $.datepicker._curInst && $.datepicker._datepickerShowing && $.datepicker._shouldFocusInput( inst ) ) {
  			inst.input.trigger( "focus" );
  		}

  		// Deffered render of the years select (to avoid flashes on Firefox)
  		if ( inst.yearshtml ) {
  			origyearshtml = inst.yearshtml;
  			setTimeout( function() {

  				//assure that inst.yearshtml didn't change.
  				if ( origyearshtml === inst.yearshtml && inst.yearshtml ) {
  					inst.dpDiv.find( "select.ui-datepicker-year" ).first().replaceWith( inst.yearshtml );
  				}
  				origyearshtml = inst.yearshtml = null;
  			}, 0 );
  		}

  		if ( onUpdateDatepicker ) {
  			onUpdateDatepicker.apply( ( inst.input ? inst.input[ 0 ] : null ), [ inst ] );
  		}
  	},

  	_shouldFocusInput: function( inst ) {
  		return inst.input && inst.input.is( ":visible" ) && !inst.input.is( ":disabled" );
  	},

  	/* Check positioning to remain on screen. */
  	_checkOffset: function( inst, offset, isFixed ) {
  		var dpWidth = inst.dpDiv.outerWidth(),
  			dpHeight = inst.dpDiv.outerHeight(),
  			inputWidth = inst.input ? inst.input.outerWidth() : 0,
  			inputHeight = inst.input ? inst.input.outerHeight() : 0,
  			viewWidth = document.documentElement.clientWidth + ( isFixed ? 0 : $( document ).scrollLeft() ),
  			viewHeight = document.documentElement.clientHeight + ( isFixed ? 0 : $( document ).scrollTop() );

  		offset.left -= ( this._get( inst, "isRTL" ) ? ( dpWidth - inputWidth ) : 0 );
  		offset.left -= ( isFixed && offset.left === inst.input.offset().left ) ? $( document ).scrollLeft() : 0;
  		offset.top -= ( isFixed && offset.top === ( inst.input.offset().top + inputHeight ) ) ? $( document ).scrollTop() : 0;

  		// Now check if datepicker is showing outside window viewport - move to a better place if so.
  		offset.left -= Math.min( offset.left, ( offset.left + dpWidth > viewWidth && viewWidth > dpWidth ) ?
  			Math.abs( offset.left + dpWidth - viewWidth ) : 0 );
  		offset.top -= Math.min( offset.top, ( offset.top + dpHeight > viewHeight && viewHeight > dpHeight ) ?
  			Math.abs( dpHeight + inputHeight ) : 0 );

  		return offset;
  	},

  	/* Find an object's position on the screen. */
  	_findPos: function( obj ) {
  		var position,
  			inst = this._getInst( obj ),
  			isRTL = this._get( inst, "isRTL" );

  		while ( obj && ( obj.type === "hidden" || obj.nodeType !== 1 || $.expr.pseudos.hidden( obj ) ) ) {
  			obj = obj[ isRTL ? "previousSibling" : "nextSibling" ];
  		}

  		position = $( obj ).offset();
  		return [ position.left, position.top ];
  	},

  	/* Hide the date picker from view.
  	 * @param  input  element - the input field attached to the date picker
  	 */
  	_hideDatepicker: function( input ) {
  		var showAnim, duration, postProcess, onClose,
  			inst = this._curInst;

  		if ( !inst || ( input && inst !== $.data( input, "datepicker" ) ) ) {
  			return;
  		}

  		if ( this._datepickerShowing ) {
  			showAnim = this._get( inst, "showAnim" );
  			duration = this._get( inst, "duration" );
  			postProcess = function() {
  				$.datepicker._tidyDialog( inst );
  			};

  			if ( $.effects && ( $.effects.effect[ showAnim ] ) ) {
  				inst.dpDiv.hide( showAnim, $.datepicker._get( inst, "showOptions" ), duration, postProcess );
  			} else {
  				inst.dpDiv[ ( showAnim === "slideDown" ? "slideUp" :
  					( showAnim === "fadeIn" ? "fadeOut" : "hide" ) ) ]( ( showAnim ? duration : null ), postProcess );
  			}

  			if ( !showAnim ) {
  				postProcess();
  			}
  			this._datepickerShowing = false;

  			onClose = this._get( inst, "onClose" );
  			if ( onClose ) {
  				onClose.apply( ( inst.input ? inst.input[ 0 ] : null ), [ ( inst.input ? inst.input.val() : "" ), inst ] );
  			}

  			this._lastInput = null;
  			if ( this._inDialog ) {
  				this._dialogInput.css( { position: "absolute", left: "0", top: "-100px" } );
  				if ( $.blockUI ) {
  					$.unblockUI();
  					$( "body" ).append( this.dpDiv );
  				}
  			}
  			this._inDialog = false;
  		}
  	},

  	/* Tidy up after a dialog display. */
  	_tidyDialog: function( inst ) {
  		inst.dpDiv.removeClass( this._dialogClass ).off( ".ui-datepicker-calendar" );
  	},

  	/* Close date picker if clicked elsewhere. */
  	_checkExternalClick: function( event ) {
  		if ( !$.datepicker._curInst ) {
  			return;
  		}

  		var $target = $( event.target ),
  			inst = $.datepicker._getInst( $target[ 0 ] );

  		if ( ( ( $target[ 0 ].id !== $.datepicker._mainDivId &&
  				$target.parents( "#" + $.datepicker._mainDivId ).length === 0 &&
  				!$target.hasClass( $.datepicker.markerClassName ) &&
  				!$target.closest( "." + $.datepicker._triggerClass ).length &&
  				$.datepicker._datepickerShowing && !( $.datepicker._inDialog && $.blockUI ) ) ) ||
  			( $target.hasClass( $.datepicker.markerClassName ) && $.datepicker._curInst !== inst ) ) {
  				$.datepicker._hideDatepicker();
  		}
  	},

  	/* Adjust one of the date sub-fields. */
  	_adjustDate: function( id, offset, period ) {
  		var target = $( id ),
  			inst = this._getInst( target[ 0 ] );

  		if ( this._isDisabledDatepicker( target[ 0 ] ) ) {
  			return;
  		}
  		this._adjustInstDate( inst, offset, period );
  		this._updateDatepicker( inst );
  	},

  	/* Action for current link. */
  	_gotoToday: function( id ) {
  		var date,
  			target = $( id ),
  			inst = this._getInst( target[ 0 ] );

  		if ( this._get( inst, "gotoCurrent" ) && inst.currentDay ) {
  			inst.selectedDay = inst.currentDay;
  			inst.drawMonth = inst.selectedMonth = inst.currentMonth;
  			inst.drawYear = inst.selectedYear = inst.currentYear;
  		} else {
  			date = new Date();
  			inst.selectedDay = date.getDate();
  			inst.drawMonth = inst.selectedMonth = date.getMonth();
  			inst.drawYear = inst.selectedYear = date.getFullYear();
  		}
  		this._notifyChange( inst );
  		this._adjustDate( target );
  	},

  	/* Action for selecting a new month/year. */
  	_selectMonthYear: function( id, select, period ) {
  		var target = $( id ),
  			inst = this._getInst( target[ 0 ] );

  		inst[ "selected" + ( period === "M" ? "Month" : "Year" ) ] =
  		inst[ "draw" + ( period === "M" ? "Month" : "Year" ) ] =
  			parseInt( select.options[ select.selectedIndex ].value, 10 );

  		this._notifyChange( inst );
  		this._adjustDate( target );
  	},

  	/* Action for selecting a day. */
  	_selectDay: function( id, month, year, td ) {
  		var inst,
  			target = $( id );

  		if ( $( td ).hasClass( this._unselectableClass ) || this._isDisabledDatepicker( target[ 0 ] ) ) {
  			return;
  		}

  		inst = this._getInst( target[ 0 ] );
  		inst.selectedDay = inst.currentDay = parseInt( $( "a", td ).attr( "data-date" ) );
  		inst.selectedMonth = inst.currentMonth = month;
  		inst.selectedYear = inst.currentYear = year;
  		this._selectDate( id, this._formatDate( inst,
  			inst.currentDay, inst.currentMonth, inst.currentYear ) );
  	},

  	/* Erase the input field and hide the date picker. */
  	_clearDate: function( id ) {
  		var target = $( id );
  		this._selectDate( target, "" );
  	},

  	/* Update the input field with the selected date. */
  	_selectDate: function( id, dateStr ) {
  		var onSelect,
  			target = $( id ),
  			inst = this._getInst( target[ 0 ] );

  		dateStr = ( dateStr != null ? dateStr : this._formatDate( inst ) );
  		if ( inst.input ) {
  			inst.input.val( dateStr );
  		}
  		this._updateAlternate( inst );

  		onSelect = this._get( inst, "onSelect" );
  		if ( onSelect ) {
  			onSelect.apply( ( inst.input ? inst.input[ 0 ] : null ), [ dateStr, inst ] );  // trigger custom callback
  		} else if ( inst.input ) {
  			inst.input.trigger( "change" ); // fire the change event
  		}

  		if ( inst.inline ) {
  			this._updateDatepicker( inst );
  		} else {
  			this._hideDatepicker();
  			this._lastInput = inst.input[ 0 ];
  			if ( typeof( inst.input[ 0 ] ) !== "object" ) {
  				inst.input.trigger( "focus" ); // restore focus
  			}
  			this._lastInput = null;
  		}
  	},

  	/* Update any alternate field to synchronise with the main field. */
  	_updateAlternate: function( inst ) {
  		var altFormat, date, dateStr,
  			altField = this._get( inst, "altField" );

  		if ( altField ) { // update alternate field too
  			altFormat = this._get( inst, "altFormat" ) || this._get( inst, "dateFormat" );
  			date = this._getDate( inst );
  			dateStr = this.formatDate( altFormat, date, this._getFormatConfig( inst ) );
  			$( document ).find( altField ).val( dateStr );
  		}
  	},

  	/* Set as beforeShowDay function to prevent selection of weekends.
  	 * @param  date  Date - the date to customise
  	 * @return [boolean, string] - is this date selectable?, what is its CSS class?
  	 */
  	noWeekends: function( date ) {
  		var day = date.getDay();
  		return [ ( day > 0 && day < 6 ), "" ];
  	},

  	/* Set as calculateWeek to determine the week of the year based on the ISO 8601 definition.
  	 * @param  date  Date - the date to get the week for
  	 * @return  number - the number of the week within the year that contains this date
  	 */
  	iso8601Week: function( date ) {
  		var time,
  			checkDate = new Date( date.getTime() );

  		// Find Thursday of this week starting on Monday
  		checkDate.setDate( checkDate.getDate() + 4 - ( checkDate.getDay() || 7 ) );

  		time = checkDate.getTime();
  		checkDate.setMonth( 0 ); // Compare with Jan 1
  		checkDate.setDate( 1 );
  		return Math.floor( Math.round( ( time - checkDate ) / 86400000 ) / 7 ) + 1;
  	},

  	/* Parse a string value into a date object.
  	 * See formatDate below for the possible formats.
  	 *
  	 * @param  format string - the expected format of the date
  	 * @param  value string - the date in the above format
  	 * @param  settings Object - attributes include:
  	 *					shortYearCutoff  number - the cutoff year for determining the century (optional)
  	 *					dayNamesShort	string[7] - abbreviated names of the days from Sunday (optional)
  	 *					dayNames		string[7] - names of the days from Sunday (optional)
  	 *					monthNamesShort string[12] - abbreviated names of the months (optional)
  	 *					monthNames		string[12] - names of the months (optional)
  	 * @return  Date - the extracted date value or null if value is blank
  	 */
  	parseDate: function( format, value, settings ) {
  		if ( format == null || value == null ) {
  			throw "Invalid arguments";
  		}

  		value = ( typeof value === "object" ? value.toString() : value + "" );
  		if ( value === "" ) {
  			return null;
  		}

  		var iFormat, dim, extra,
  			iValue = 0,
  			shortYearCutoffTemp = ( settings ? settings.shortYearCutoff : null ) || this._defaults.shortYearCutoff,
  			shortYearCutoff = ( typeof shortYearCutoffTemp !== "string" ? shortYearCutoffTemp :
  				new Date().getFullYear() % 100 + parseInt( shortYearCutoffTemp, 10 ) ),
  			dayNamesShort = ( settings ? settings.dayNamesShort : null ) || this._defaults.dayNamesShort,
  			dayNames = ( settings ? settings.dayNames : null ) || this._defaults.dayNames,
  			monthNamesShort = ( settings ? settings.monthNamesShort : null ) || this._defaults.monthNamesShort,
  			monthNames = ( settings ? settings.monthNames : null ) || this._defaults.monthNames,
  			year = -1,
  			month = -1,
  			day = -1,
  			doy = -1,
  			literal = false,
  			date,

  			// Check whether a format character is doubled
  			lookAhead = function( match ) {
  				var matches = ( iFormat + 1 < format.length && format.charAt( iFormat + 1 ) === match );
  				if ( matches ) {
  					iFormat++;
  				}
  				return matches;
  			},

  			// Extract a number from the string value
  			getNumber = function( match ) {
  				var isDoubled = lookAhead( match ),
  					size = ( match === "@" ? 14 : ( match === "!" ? 20 :
  					( match === "y" && isDoubled ? 4 : ( match === "o" ? 3 : 2 ) ) ) ),
  					minSize = ( match === "y" ? size : 1 ),
  					digits = new RegExp( "^\\d{" + minSize + "," + size + "}" ),
  					num = value.substring( iValue ).match( digits );
  				if ( !num ) {
  					throw "Missing number at position " + iValue;
  				}
  				iValue += num[ 0 ].length;
  				return parseInt( num[ 0 ], 10 );
  			},

  			// Extract a name from the string value and convert to an index
  			getName = function( match, shortNames, longNames ) {
  				var index = -1,
  					names = $.map( lookAhead( match ) ? longNames : shortNames, function( v, k ) {
  						return [ [ k, v ] ];
  					} ).sort( function( a, b ) {
  						return -( a[ 1 ].length - b[ 1 ].length );
  					} );

  				$.each( names, function( i, pair ) {
  					var name = pair[ 1 ];
  					if ( value.substr( iValue, name.length ).toLowerCase() === name.toLowerCase() ) {
  						index = pair[ 0 ];
  						iValue += name.length;
  						return false;
  					}
  				} );
  				if ( index !== -1 ) {
  					return index + 1;
  				} else {
  					throw "Unknown name at position " + iValue;
  				}
  			},

  			// Confirm that a literal character matches the string value
  			checkLiteral = function() {
  				if ( value.charAt( iValue ) !== format.charAt( iFormat ) ) {
  					throw "Unexpected literal at position " + iValue;
  				}
  				iValue++;
  			};

  		for ( iFormat = 0; iFormat < format.length; iFormat++ ) {
  			if ( literal ) {
  				if ( format.charAt( iFormat ) === "'" && !lookAhead( "'" ) ) {
  					literal = false;
  				} else {
  					checkLiteral();
  				}
  			} else {
  				switch ( format.charAt( iFormat ) ) {
  					case "d":
  						day = getNumber( "d" );
  						break;
  					case "D":
  						getName( "D", dayNamesShort, dayNames );
  						break;
  					case "o":
  						doy = getNumber( "o" );
  						break;
  					case "m":
  						month = getNumber( "m" );
  						break;
  					case "M":
  						month = getName( "M", monthNamesShort, monthNames );
  						break;
  					case "y":
  						year = getNumber( "y" );
  						break;
  					case "@":
  						date = new Date( getNumber( "@" ) );
  						year = date.getFullYear();
  						month = date.getMonth() + 1;
  						day = date.getDate();
  						break;
  					case "!":
  						date = new Date( ( getNumber( "!" ) - this._ticksTo1970 ) / 10000 );
  						year = date.getFullYear();
  						month = date.getMonth() + 1;
  						day = date.getDate();
  						break;
  					case "'":
  						if ( lookAhead( "'" ) ) {
  							checkLiteral();
  						} else {
  							literal = true;
  						}
  						break;
  					default:
  						checkLiteral();
  				}
  			}
  		}

  		if ( iValue < value.length ) {
  			extra = value.substr( iValue );
  			if ( !/^\s+/.test( extra ) ) {
  				throw "Extra/unparsed characters found in date: " + extra;
  			}
  		}

  		if ( year === -1 ) {
  			year = new Date().getFullYear();
  		} else if ( year < 100 ) {
  			year += new Date().getFullYear() - new Date().getFullYear() % 100 +
  				( year <= shortYearCutoff ? 0 : -100 );
  		}

  		if ( doy > -1 ) {
  			month = 1;
  			day = doy;
  			do {
  				dim = this._getDaysInMonth( year, month - 1 );
  				if ( day <= dim ) {
  					break;
  				}
  				month++;
  				day -= dim;
  			} while ( true );
  		}

  		date = this._daylightSavingAdjust( new Date( year, month - 1, day ) );
  		if ( date.getFullYear() !== year || date.getMonth() + 1 !== month || date.getDate() !== day ) {
  			throw "Invalid date"; // E.g. 31/02/00
  		}
  		return date;
  	},

  	/* Standard date formats. */
  	ATOM: "yy-mm-dd", // RFC 3339 (ISO 8601)
  	COOKIE: "D, dd M yy",
  	ISO_8601: "yy-mm-dd",
  	RFC_822: "D, d M y",
  	RFC_850: "DD, dd-M-y",
  	RFC_1036: "D, d M y",
  	RFC_1123: "D, d M yy",
  	RFC_2822: "D, d M yy",
  	RSS: "D, d M y", // RFC 822
  	TICKS: "!",
  	TIMESTAMP: "@",
  	W3C: "yy-mm-dd", // ISO 8601

  	_ticksTo1970: ( ( ( 1970 - 1 ) * 365 + Math.floor( 1970 / 4 ) - Math.floor( 1970 / 100 ) +
  		Math.floor( 1970 / 400 ) ) * 24 * 60 * 60 * 10000000 ),

  	/* Format a date object into a string value.
  	 * The format can be combinations of the following:
  	 * d  - day of month (no leading zero)
  	 * dd - day of month (two digit)
  	 * o  - day of year (no leading zeros)
  	 * oo - day of year (three digit)
  	 * D  - day name short
  	 * DD - day name long
  	 * m  - month of year (no leading zero)
  	 * mm - month of year (two digit)
  	 * M  - month name short
  	 * MM - month name long
  	 * y  - year (two digit)
  	 * yy - year (four digit)
  	 * @ - Unix timestamp (ms since 01/01/1970)
  	 * ! - Windows ticks (100ns since 01/01/0001)
  	 * "..." - literal text
  	 * '' - single quote
  	 *
  	 * @param  format string - the desired format of the date
  	 * @param  date Date - the date value to format
  	 * @param  settings Object - attributes include:
  	 *					dayNamesShort	string[7] - abbreviated names of the days from Sunday (optional)
  	 *					dayNames		string[7] - names of the days from Sunday (optional)
  	 *					monthNamesShort string[12] - abbreviated names of the months (optional)
  	 *					monthNames		string[12] - names of the months (optional)
  	 * @return  string - the date in the above format
  	 */
  	formatDate: function( format, date, settings ) {
  		if ( !date ) {
  			return "";
  		}

  		var iFormat,
  			dayNamesShort = ( settings ? settings.dayNamesShort : null ) || this._defaults.dayNamesShort,
  			dayNames = ( settings ? settings.dayNames : null ) || this._defaults.dayNames,
  			monthNamesShort = ( settings ? settings.monthNamesShort : null ) || this._defaults.monthNamesShort,
  			monthNames = ( settings ? settings.monthNames : null ) || this._defaults.monthNames,

  			// Check whether a format character is doubled
  			lookAhead = function( match ) {
  				var matches = ( iFormat + 1 < format.length && format.charAt( iFormat + 1 ) === match );
  				if ( matches ) {
  					iFormat++;
  				}
  				return matches;
  			},

  			// Format a number, with leading zero if necessary
  			formatNumber = function( match, value, len ) {
  				var num = "" + value;
  				if ( lookAhead( match ) ) {
  					while ( num.length < len ) {
  						num = "0" + num;
  					}
  				}
  				return num;
  			},

  			// Format a name, short or long as requested
  			formatName = function( match, value, shortNames, longNames ) {
  				return ( lookAhead( match ) ? longNames[ value ] : shortNames[ value ] );
  			},
  			output = "",
  			literal = false;

  		if ( date ) {
  			for ( iFormat = 0; iFormat < format.length; iFormat++ ) {
  				if ( literal ) {
  					if ( format.charAt( iFormat ) === "'" && !lookAhead( "'" ) ) {
  						literal = false;
  					} else {
  						output += format.charAt( iFormat );
  					}
  				} else {
  					switch ( format.charAt( iFormat ) ) {
  						case "d":
  							output += formatNumber( "d", date.getDate(), 2 );
  							break;
  						case "D":
  							output += formatName( "D", date.getDay(), dayNamesShort, dayNames );
  							break;
  						case "o":
  							output += formatNumber( "o",
  								Math.round( ( new Date( date.getFullYear(), date.getMonth(), date.getDate() ).getTime() - new Date( date.getFullYear(), 0, 0 ).getTime() ) / 86400000 ), 3 );
  							break;
  						case "m":
  							output += formatNumber( "m", date.getMonth() + 1, 2 );
  							break;
  						case "M":
  							output += formatName( "M", date.getMonth(), monthNamesShort, monthNames );
  							break;
  						case "y":
  							output += ( lookAhead( "y" ) ? date.getFullYear() :
  								( date.getFullYear() % 100 < 10 ? "0" : "" ) + date.getFullYear() % 100 );
  							break;
  						case "@":
  							output += date.getTime();
  							break;
  						case "!":
  							output += date.getTime() * 10000 + this._ticksTo1970;
  							break;
  						case "'":
  							if ( lookAhead( "'" ) ) {
  								output += "'";
  							} else {
  								literal = true;
  							}
  							break;
  						default:
  							output += format.charAt( iFormat );
  					}
  				}
  			}
  		}
  		return output;
  	},

  	/* Extract all possible characters from the date format. */
  	_possibleChars: function( format ) {
  		var iFormat,
  			chars = "",
  			literal = false,

  			// Check whether a format character is doubled
  			lookAhead = function( match ) {
  				var matches = ( iFormat + 1 < format.length && format.charAt( iFormat + 1 ) === match );
  				if ( matches ) {
  					iFormat++;
  				}
  				return matches;
  			};

  		for ( iFormat = 0; iFormat < format.length; iFormat++ ) {
  			if ( literal ) {
  				if ( format.charAt( iFormat ) === "'" && !lookAhead( "'" ) ) {
  					literal = false;
  				} else {
  					chars += format.charAt( iFormat );
  				}
  			} else {
  				switch ( format.charAt( iFormat ) ) {
  					case "d": case "m": case "y": case "@":
  						chars += "0123456789";
  						break;
  					case "D": case "M":
  						return null; // Accept anything
  					case "'":
  						if ( lookAhead( "'" ) ) {
  							chars += "'";
  						} else {
  							literal = true;
  						}
  						break;
  					default:
  						chars += format.charAt( iFormat );
  				}
  			}
  		}
  		return chars;
  	},

  	/* Get a setting value, defaulting if necessary. */
  	_get: function( inst, name ) {
  		return inst.settings[ name ] !== undefined ?
  			inst.settings[ name ] : this._defaults[ name ];
  	},

  	/* Parse existing date and initialise date picker. */
  	_setDateFromField: function( inst, noDefault ) {
  		if ( inst.input.val() === inst.lastVal ) {
  			return;
  		}

  		var dateFormat = this._get( inst, "dateFormat" ),
  			dates = inst.lastVal = inst.input ? inst.input.val() : null,
  			defaultDate = this._getDefaultDate( inst ),
  			date = defaultDate,
  			settings = this._getFormatConfig( inst );

  		try {
  			date = this.parseDate( dateFormat, dates, settings ) || defaultDate;
  		} catch ( event ) {
  			dates = ( noDefault ? "" : dates );
  		}
  		inst.selectedDay = date.getDate();
  		inst.drawMonth = inst.selectedMonth = date.getMonth();
  		inst.drawYear = inst.selectedYear = date.getFullYear();
  		inst.currentDay = ( dates ? date.getDate() : 0 );
  		inst.currentMonth = ( dates ? date.getMonth() : 0 );
  		inst.currentYear = ( dates ? date.getFullYear() : 0 );
  		this._adjustInstDate( inst );
  	},

  	/* Retrieve the default date shown on opening. */
  	_getDefaultDate: function( inst ) {
  		return this._restrictMinMax( inst,
  			this._determineDate( inst, this._get( inst, "defaultDate" ), new Date() ) );
  	},

  	/* A date may be specified as an exact value or a relative one. */
  	_determineDate: function( inst, date, defaultDate ) {
  		var offsetNumeric = function( offset ) {
  				var date = new Date();
  				date.setDate( date.getDate() + offset );
  				return date;
  			},
  			offsetString = function( offset ) {
  				try {
  					return $.datepicker.parseDate( $.datepicker._get( inst, "dateFormat" ),
  						offset, $.datepicker._getFormatConfig( inst ) );
  				} catch ( e ) {

  					// Ignore
  				}

  				var date = ( offset.toLowerCase().match( /^c/ ) ?
  					$.datepicker._getDate( inst ) : null ) || new Date(),
  					year = date.getFullYear(),
  					month = date.getMonth(),
  					day = date.getDate(),
  					pattern = /([+\-]?[0-9]+)\s*(d|D|w|W|m|M|y|Y)?/g,
  					matches = pattern.exec( offset );

  				while ( matches ) {
  					switch ( matches[ 2 ] || "d" ) {
  						case "d" : case "D" :
  							day += parseInt( matches[ 1 ], 10 ); break;
  						case "w" : case "W" :
  							day += parseInt( matches[ 1 ], 10 ) * 7; break;
  						case "m" : case "M" :
  							month += parseInt( matches[ 1 ], 10 );
  							day = Math.min( day, $.datepicker._getDaysInMonth( year, month ) );
  							break;
  						case "y": case "Y" :
  							year += parseInt( matches[ 1 ], 10 );
  							day = Math.min( day, $.datepicker._getDaysInMonth( year, month ) );
  							break;
  					}
  					matches = pattern.exec( offset );
  				}
  				return new Date( year, month, day );
  			},
  			newDate = ( date == null || date === "" ? defaultDate : ( typeof date === "string" ? offsetString( date ) :
  				( typeof date === "number" ? ( isNaN( date ) ? defaultDate : offsetNumeric( date ) ) : new Date( date.getTime() ) ) ) );

  		newDate = ( newDate && newDate.toString() === "Invalid Date" ? defaultDate : newDate );
  		if ( newDate ) {
  			newDate.setHours( 0 );
  			newDate.setMinutes( 0 );
  			newDate.setSeconds( 0 );
  			newDate.setMilliseconds( 0 );
  		}
  		return this._daylightSavingAdjust( newDate );
  	},

  	/* Handle switch to/from daylight saving.
  	 * Hours may be non-zero on daylight saving cut-over:
  	 * > 12 when midnight changeover, but then cannot generate
  	 * midnight datetime, so jump to 1AM, otherwise reset.
  	 * @param  date  (Date) the date to check
  	 * @return  (Date) the corrected date
  	 */
  	_daylightSavingAdjust: function( date ) {
  		if ( !date ) {
  			return null;
  		}
  		date.setHours( date.getHours() > 12 ? date.getHours() + 2 : 0 );
  		return date;
  	},

  	/* Set the date(s) directly. */
  	_setDate: function( inst, date, noChange ) {
  		var clear = !date,
  			origMonth = inst.selectedMonth,
  			origYear = inst.selectedYear,
  			newDate = this._restrictMinMax( inst, this._determineDate( inst, date, new Date() ) );

  		inst.selectedDay = inst.currentDay = newDate.getDate();
  		inst.drawMonth = inst.selectedMonth = inst.currentMonth = newDate.getMonth();
  		inst.drawYear = inst.selectedYear = inst.currentYear = newDate.getFullYear();
  		if ( ( origMonth !== inst.selectedMonth || origYear !== inst.selectedYear ) && !noChange ) {
  			this._notifyChange( inst );
  		}
  		this._adjustInstDate( inst );
  		if ( inst.input ) {
  			inst.input.val( clear ? "" : this._formatDate( inst ) );
  		}
  	},

  	/* Retrieve the date(s) directly. */
  	_getDate: function( inst ) {
  		var startDate = ( !inst.currentYear || ( inst.input && inst.input.val() === "" ) ? null :
  			this._daylightSavingAdjust( new Date(
  			inst.currentYear, inst.currentMonth, inst.currentDay ) ) );
  			return startDate;
  	},

  	/* Attach the onxxx handlers.  These are declared statically so
  	 * they work with static code transformers like Caja.
  	 */
  	_attachHandlers: function( inst ) {
  		var stepMonths = this._get( inst, "stepMonths" ),
  			id = "#" + inst.id.replace( /\\\\/g, "\\" );
  		inst.dpDiv.find( "[data-handler]" ).map( function() {
  			var handler = {
  				prev: function() {
  					$.datepicker._adjustDate( id, -stepMonths, "M" );
  				},
  				next: function() {
  					$.datepicker._adjustDate( id, +stepMonths, "M" );
  				},
  				hide: function() {
  					$.datepicker._hideDatepicker();
  				},
  				today: function() {
  					$.datepicker._gotoToday( id );
  				},
  				selectDay: function() {
  					$.datepicker._selectDay( id, +this.getAttribute( "data-month" ), +this.getAttribute( "data-year" ), this );
  					return false;
  				},
  				selectMonth: function() {
  					$.datepicker._selectMonthYear( id, this, "M" );
  					return false;
  				},
  				selectYear: function() {
  					$.datepicker._selectMonthYear( id, this, "Y" );
  					return false;
  				}
  			};
  			$( this ).on( this.getAttribute( "data-event" ), handler[ this.getAttribute( "data-handler" ) ] );
  		} );
  	},

  	/* Generate the HTML for the current state of the date picker. */
  	_generateHTML: function( inst ) {
  		var maxDraw, prevText, prev, nextText, next, currentText, gotoDate,
  			controls, buttonPanel, firstDay, showWeek, dayNames, dayNamesMin,
  			monthNames, monthNamesShort, beforeShowDay, showOtherMonths,
  			selectOtherMonths, defaultDate, html, dow, row, group, col, selectedDate,
  			cornerClass, calender, thead, day, daysInMonth, leadDays, curRows, numRows,
  			printDate, dRow, tbody, daySettings, otherMonth, unselectable,
  			tempDate = new Date(),
  			today = this._daylightSavingAdjust(
  				new Date( tempDate.getFullYear(), tempDate.getMonth(), tempDate.getDate() ) ), // clear time
  			isRTL = this._get( inst, "isRTL" ),
  			showButtonPanel = this._get( inst, "showButtonPanel" ),
  			hideIfNoPrevNext = this._get( inst, "hideIfNoPrevNext" ),
  			navigationAsDateFormat = this._get( inst, "navigationAsDateFormat" ),
  			numMonths = this._getNumberOfMonths( inst ),
  			showCurrentAtPos = this._get( inst, "showCurrentAtPos" ),
  			stepMonths = this._get( inst, "stepMonths" ),
  			isMultiMonth = ( numMonths[ 0 ] !== 1 || numMonths[ 1 ] !== 1 ),
  			currentDate = this._daylightSavingAdjust( ( !inst.currentDay ? new Date( 9999, 9, 9 ) :
  				new Date( inst.currentYear, inst.currentMonth, inst.currentDay ) ) ),
  			minDate = this._getMinMaxDate( inst, "min" ),
  			maxDate = this._getMinMaxDate( inst, "max" ),
  			drawMonth = inst.drawMonth - showCurrentAtPos,
  			drawYear = inst.drawYear;

  		if ( drawMonth < 0 ) {
  			drawMonth += 12;
  			drawYear--;
  		}
  		if ( maxDate ) {
  			maxDraw = this._daylightSavingAdjust( new Date( maxDate.getFullYear(),
  				maxDate.getMonth() - ( numMonths[ 0 ] * numMonths[ 1 ] ) + 1, maxDate.getDate() ) );
  			maxDraw = ( minDate && maxDraw < minDate ? minDate : maxDraw );
  			while ( this._daylightSavingAdjust( new Date( drawYear, drawMonth, 1 ) ) > maxDraw ) {
  				drawMonth--;
  				if ( drawMonth < 0 ) {
  					drawMonth = 11;
  					drawYear--;
  				}
  			}
  		}
  		inst.drawMonth = drawMonth;
  		inst.drawYear = drawYear;

  		prevText = this._get( inst, "prevText" );
  		prevText = ( !navigationAsDateFormat ? prevText : this.formatDate( prevText,
  			this._daylightSavingAdjust( new Date( drawYear, drawMonth - stepMonths, 1 ) ),
  			this._getFormatConfig( inst ) ) );

  		if ( this._canAdjustMonth( inst, -1, drawYear, drawMonth ) ) {
  			prev = $( "<a>" )
  				.attr( {
  					"class": "ui-datepicker-prev ui-corner-all",
  					"data-handler": "prev",
  					"data-event": "click",
  					title: prevText
  				} )
  				.append(
  					$( "<span>" )
  						.addClass( "ui-icon ui-icon-circle-triangle-" +
  							( isRTL ? "e" : "w" ) )
  						.text( prevText )
  				)[ 0 ].outerHTML;
  		} else if ( hideIfNoPrevNext ) {
  			prev = "";
  		} else {
  			prev = $( "<a>" )
  				.attr( {
  					"class": "ui-datepicker-prev ui-corner-all ui-state-disabled",
  					title: prevText
  				} )
  				.append(
  					$( "<span>" )
  						.addClass( "ui-icon ui-icon-circle-triangle-" +
  							( isRTL ? "e" : "w" ) )
  						.text( prevText )
  				)[ 0 ].outerHTML;
  		}

  		nextText = this._get( inst, "nextText" );
  		nextText = ( !navigationAsDateFormat ? nextText : this.formatDate( nextText,
  			this._daylightSavingAdjust( new Date( drawYear, drawMonth + stepMonths, 1 ) ),
  			this._getFormatConfig( inst ) ) );

  		if ( this._canAdjustMonth( inst, +1, drawYear, drawMonth ) ) {
  			next = $( "<a>" )
  				.attr( {
  					"class": "ui-datepicker-next ui-corner-all",
  					"data-handler": "next",
  					"data-event": "click",
  					title: nextText
  				} )
  				.append(
  					$( "<span>" )
  						.addClass( "ui-icon ui-icon-circle-triangle-" +
  							( isRTL ? "w" : "e" ) )
  						.text( nextText )
  				)[ 0 ].outerHTML;
  		} else if ( hideIfNoPrevNext ) {
  			next = "";
  		} else {
  			next = $( "<a>" )
  				.attr( {
  					"class": "ui-datepicker-next ui-corner-all ui-state-disabled",
  					title: nextText
  				} )
  				.append(
  					$( "<span>" )
  						.attr( "class", "ui-icon ui-icon-circle-triangle-" +
  							( isRTL ? "w" : "e" ) )
  						.text( nextText )
  				)[ 0 ].outerHTML;
  		}

  		currentText = this._get( inst, "currentText" );
  		gotoDate = ( this._get( inst, "gotoCurrent" ) && inst.currentDay ? currentDate : today );
  		currentText = ( !navigationAsDateFormat ? currentText :
  			this.formatDate( currentText, gotoDate, this._getFormatConfig( inst ) ) );

  		controls = "";
  		if ( !inst.inline ) {
  			controls = $( "<button>" )
  				.attr( {
  					type: "button",
  					"class": "ui-datepicker-close ui-state-default ui-priority-primary ui-corner-all",
  					"data-handler": "hide",
  					"data-event": "click"
  				} )
  				.text( this._get( inst, "closeText" ) )[ 0 ].outerHTML;
  		}

  		buttonPanel = "";
  		if ( showButtonPanel ) {
  			buttonPanel = $( "<div class='ui-datepicker-buttonpane ui-widget-content'>" )
  				.append( isRTL ? controls : "" )
  				.append( this._isInRange( inst, gotoDate ) ?
  					$( "<button>" )
  						.attr( {
  							type: "button",
  							"class": "ui-datepicker-current ui-state-default ui-priority-secondary ui-corner-all",
  							"data-handler": "today",
  							"data-event": "click"
  						} )
  						.text( currentText ) :
  					"" )
  				.append( isRTL ? "" : controls )[ 0 ].outerHTML;
  		}

  		firstDay = parseInt( this._get( inst, "firstDay" ), 10 );
  		firstDay = ( isNaN( firstDay ) ? 0 : firstDay );

  		showWeek = this._get( inst, "showWeek" );
  		dayNames = this._get( inst, "dayNames" );
  		dayNamesMin = this._get( inst, "dayNamesMin" );
  		monthNames = this._get( inst, "monthNames" );
  		monthNamesShort = this._get( inst, "monthNamesShort" );
  		beforeShowDay = this._get( inst, "beforeShowDay" );
  		showOtherMonths = this._get( inst, "showOtherMonths" );
  		selectOtherMonths = this._get( inst, "selectOtherMonths" );
  		defaultDate = this._getDefaultDate( inst );
  		html = "";

  		for ( row = 0; row < numMonths[ 0 ]; row++ ) {
  			group = "";
  			this.maxRows = 4;
  			for ( col = 0; col < numMonths[ 1 ]; col++ ) {
  				selectedDate = this._daylightSavingAdjust( new Date( drawYear, drawMonth, inst.selectedDay ) );
  				cornerClass = " ui-corner-all";
  				calender = "";
  				if ( isMultiMonth ) {
  					calender += "<div class='ui-datepicker-group";
  					if ( numMonths[ 1 ] > 1 ) {
  						switch ( col ) {
  							case 0: calender += " ui-datepicker-group-first";
  								cornerClass = " ui-corner-" + ( isRTL ? "right" : "left" ); break;
  							case numMonths[ 1 ] - 1: calender += " ui-datepicker-group-last";
  								cornerClass = " ui-corner-" + ( isRTL ? "left" : "right" ); break;
  							default: calender += " ui-datepicker-group-middle"; cornerClass = ""; break;
  						}
  					}
  					calender += "'>";
  				}
  				calender += "<div class='ui-datepicker-header ui-widget-header ui-helper-clearfix" + cornerClass + "'>" +
  					( /all|left/.test( cornerClass ) && row === 0 ? ( isRTL ? next : prev ) : "" ) +
  					( /all|right/.test( cornerClass ) && row === 0 ? ( isRTL ? prev : next ) : "" ) +
  					this._generateMonthYearHeader( inst, drawMonth, drawYear, minDate, maxDate,
  					row > 0 || col > 0, monthNames, monthNamesShort ) + // draw month headers
  					"</div><table class='ui-datepicker-calendar'><thead>" +
  					"<tr>";
  				thead = ( showWeek ? "<th class='ui-datepicker-week-col'>" + this._get( inst, "weekHeader" ) + "</th>" : "" );
  				for ( dow = 0; dow < 7; dow++ ) { // days of the week
  					day = ( dow + firstDay ) % 7;
  					thead += "<th scope='col'" + ( ( dow + firstDay + 6 ) % 7 >= 5 ? " class='ui-datepicker-week-end'" : "" ) + ">" +
  						"<span title='" + dayNames[ day ] + "'>" + dayNamesMin[ day ] + "</span></th>";
  				}
  				calender += thead + "</tr></thead><tbody>";
  				daysInMonth = this._getDaysInMonth( drawYear, drawMonth );
  				if ( drawYear === inst.selectedYear && drawMonth === inst.selectedMonth ) {
  					inst.selectedDay = Math.min( inst.selectedDay, daysInMonth );
  				}
  				leadDays = ( this._getFirstDayOfMonth( drawYear, drawMonth ) - firstDay + 7 ) % 7;
  				curRows = Math.ceil( ( leadDays + daysInMonth ) / 7 ); // calculate the number of rows to generate
  				numRows = ( isMultiMonth ? this.maxRows > curRows ? this.maxRows : curRows : curRows ); //If multiple months, use the higher number of rows (see #7043)
  				this.maxRows = numRows;
  				printDate = this._daylightSavingAdjust( new Date( drawYear, drawMonth, 1 - leadDays ) );
  				for ( dRow = 0; dRow < numRows; dRow++ ) { // create date picker rows
  					calender += "<tr>";
  					tbody = ( !showWeek ? "" : "<td class='ui-datepicker-week-col'>" +
  						this._get( inst, "calculateWeek" )( printDate ) + "</td>" );
  					for ( dow = 0; dow < 7; dow++ ) { // create date picker days
  						daySettings = ( beforeShowDay ?
  							beforeShowDay.apply( ( inst.input ? inst.input[ 0 ] : null ), [ printDate ] ) : [ true, "" ] );
  						otherMonth = ( printDate.getMonth() !== drawMonth );
  						unselectable = ( otherMonth && !selectOtherMonths ) || !daySettings[ 0 ] ||
  							( minDate && printDate < minDate ) || ( maxDate && printDate > maxDate );
  						tbody += "<td class='" +
  							( ( dow + firstDay + 6 ) % 7 >= 5 ? " ui-datepicker-week-end" : "" ) + // highlight weekends
  							( otherMonth ? " ui-datepicker-other-month" : "" ) + // highlight days from other months
  							( ( printDate.getTime() === selectedDate.getTime() && drawMonth === inst.selectedMonth && inst._keyEvent ) || // user pressed key
  							( defaultDate.getTime() === printDate.getTime() && defaultDate.getTime() === selectedDate.getTime() ) ?

  							// or defaultDate is current printedDate and defaultDate is selectedDate
  							" " + this._dayOverClass : "" ) + // highlight selected day
  							( unselectable ? " " + this._unselectableClass + " ui-state-disabled" : "" ) +  // highlight unselectable days
  							( otherMonth && !showOtherMonths ? "" : " " + daySettings[ 1 ] + // highlight custom dates
  							( printDate.getTime() === currentDate.getTime() ? " " + this._currentClass : "" ) + // highlight selected day
  							( printDate.getTime() === today.getTime() ? " ui-datepicker-today" : "" ) ) + "'" + // highlight today (if different)
  							( ( !otherMonth || showOtherMonths ) && daySettings[ 2 ] ? " title='" + daySettings[ 2 ].replace( /'/g, "&#39;" ) + "'" : "" ) + // cell title
  							( unselectable ? "" : " data-handler='selectDay' data-event='click' data-month='" + printDate.getMonth() + "' data-year='" + printDate.getFullYear() + "'" ) + ">" + // actions
  							( otherMonth && !showOtherMonths ? "&#xa0;" : // display for other months
  							( unselectable ? "<span class='ui-state-default'>" + printDate.getDate() + "</span>" : "<a class='ui-state-default" +
  							( printDate.getTime() === today.getTime() ? " ui-state-highlight" : "" ) +
  							( printDate.getTime() === currentDate.getTime() ? " ui-state-active" : "" ) + // highlight selected day
  							( otherMonth ? " ui-priority-secondary" : "" ) + // distinguish dates from other months
  							"' href='#' aria-current='" + ( printDate.getTime() === currentDate.getTime() ? "true" : "false" ) + // mark date as selected for screen reader
  							"' data-date='" + printDate.getDate() + // store date as data
  							"'>" + printDate.getDate() + "</a>" ) ) + "</td>"; // display selectable date
  						printDate.setDate( printDate.getDate() + 1 );
  						printDate = this._daylightSavingAdjust( printDate );
  					}
  					calender += tbody + "</tr>";
  				}
  				drawMonth++;
  				if ( drawMonth > 11 ) {
  					drawMonth = 0;
  					drawYear++;
  				}
  				calender += "</tbody></table>" + ( isMultiMonth ? "</div>" +
  							( ( numMonths[ 0 ] > 0 && col === numMonths[ 1 ] - 1 ) ? "<div class='ui-datepicker-row-break'></div>" : "" ) : "" );
  				group += calender;
  			}
  			html += group;
  		}
  		html += buttonPanel;
  		inst._keyEvent = false;
  		return html;
  	},

  	/* Generate the month and year header. */
  	_generateMonthYearHeader: function( inst, drawMonth, drawYear, minDate, maxDate,
  			secondary, monthNames, monthNamesShort ) {

  		var inMinYear, inMaxYear, month, years, thisYear, determineYear, year, endYear,
  			changeMonth = this._get( inst, "changeMonth" ),
  			changeYear = this._get( inst, "changeYear" ),
  			showMonthAfterYear = this._get( inst, "showMonthAfterYear" ),
  			selectMonthLabel = this._get( inst, "selectMonthLabel" ),
  			selectYearLabel = this._get( inst, "selectYearLabel" ),
  			html = "<div class='ui-datepicker-title'>",
  			monthHtml = "";

  		// Month selection
  		if ( secondary || !changeMonth ) {
  			monthHtml += "<span class='ui-datepicker-month'>" + monthNames[ drawMonth ] + "</span>";
  		} else {
  			inMinYear = ( minDate && minDate.getFullYear() === drawYear );
  			inMaxYear = ( maxDate && maxDate.getFullYear() === drawYear );
  			monthHtml += "<select class='ui-datepicker-month' aria-label='" + selectMonthLabel + "' data-handler='selectMonth' data-event='change'>";
  			for ( month = 0; month < 12; month++ ) {
  				if ( ( !inMinYear || month >= minDate.getMonth() ) && ( !inMaxYear || month <= maxDate.getMonth() ) ) {
  					monthHtml += "<option value='" + month + "'" +
  						( month === drawMonth ? " selected='selected'" : "" ) +
  						">" + monthNamesShort[ month ] + "</option>";
  				}
  			}
  			monthHtml += "</select>";
  		}

  		if ( !showMonthAfterYear ) {
  			html += monthHtml + ( secondary || !( changeMonth && changeYear ) ? "&#xa0;" : "" );
  		}

  		// Year selection
  		if ( !inst.yearshtml ) {
  			inst.yearshtml = "";
  			if ( secondary || !changeYear ) {
  				html += "<span class='ui-datepicker-year'>" + drawYear + "</span>";
  			} else {

  				// determine range of years to display
  				years = this._get( inst, "yearRange" ).split( ":" );
  				thisYear = new Date().getFullYear();
  				determineYear = function( value ) {
  					var year = ( value.match( /c[+\-].*/ ) ? drawYear + parseInt( value.substring( 1 ), 10 ) :
  						( value.match( /[+\-].*/ ) ? thisYear + parseInt( value, 10 ) :
  						parseInt( value, 10 ) ) );
  					return ( isNaN( year ) ? thisYear : year );
  				};
  				year = determineYear( years[ 0 ] );
  				endYear = Math.max( year, determineYear( years[ 1 ] || "" ) );
  				year = ( minDate ? Math.max( year, minDate.getFullYear() ) : year );
  				endYear = ( maxDate ? Math.min( endYear, maxDate.getFullYear() ) : endYear );
  				inst.yearshtml += "<select class='ui-datepicker-year' aria-label='" + selectYearLabel + "' data-handler='selectYear' data-event='change'>";
  				for ( ; year <= endYear; year++ ) {
  					inst.yearshtml += "<option value='" + year + "'" +
  						( year === drawYear ? " selected='selected'" : "" ) +
  						">" + year + "</option>";
  				}
  				inst.yearshtml += "</select>";

  				html += inst.yearshtml;
  				inst.yearshtml = null;
  			}
  		}

  		html += this._get( inst, "yearSuffix" );
  		if ( showMonthAfterYear ) {
  			html += ( secondary || !( changeMonth && changeYear ) ? "&#xa0;" : "" ) + monthHtml;
  		}
  		html += "</div>"; // Close datepicker_header
  		return html;
  	},

  	/* Adjust one of the date sub-fields. */
  	_adjustInstDate: function( inst, offset, period ) {
  		var year = inst.selectedYear + ( period === "Y" ? offset : 0 ),
  			month = inst.selectedMonth + ( period === "M" ? offset : 0 ),
  			day = Math.min( inst.selectedDay, this._getDaysInMonth( year, month ) ) + ( period === "D" ? offset : 0 ),
  			date = this._restrictMinMax( inst, this._daylightSavingAdjust( new Date( year, month, day ) ) );

  		inst.selectedDay = date.getDate();
  		inst.drawMonth = inst.selectedMonth = date.getMonth();
  		inst.drawYear = inst.selectedYear = date.getFullYear();
  		if ( period === "M" || period === "Y" ) {
  			this._notifyChange( inst );
  		}
  	},

  	/* Ensure a date is within any min/max bounds. */
  	_restrictMinMax: function( inst, date ) {
  		var minDate = this._getMinMaxDate( inst, "min" ),
  			maxDate = this._getMinMaxDate( inst, "max" ),
  			newDate = ( minDate && date < minDate ? minDate : date );
  		return ( maxDate && newDate > maxDate ? maxDate : newDate );
  	},

  	/* Notify change of month/year. */
  	_notifyChange: function( inst ) {
  		var onChange = this._get( inst, "onChangeMonthYear" );
  		if ( onChange ) {
  			onChange.apply( ( inst.input ? inst.input[ 0 ] : null ),
  				[ inst.selectedYear, inst.selectedMonth + 1, inst ] );
  		}
  	},

  	/* Determine the number of months to show. */
  	_getNumberOfMonths: function( inst ) {
  		var numMonths = this._get( inst, "numberOfMonths" );
  		return ( numMonths == null ? [ 1, 1 ] : ( typeof numMonths === "number" ? [ 1, numMonths ] : numMonths ) );
  	},

  	/* Determine the current maximum date - ensure no time components are set. */
  	_getMinMaxDate: function( inst, minMax ) {
  		return this._determineDate( inst, this._get( inst, minMax + "Date" ), null );
  	},

  	/* Find the number of days in a given month. */
  	_getDaysInMonth: function( year, month ) {
  		return 32 - this._daylightSavingAdjust( new Date( year, month, 32 ) ).getDate();
  	},

  	/* Find the day of the week of the first of a month. */
  	_getFirstDayOfMonth: function( year, month ) {
  		return new Date( year, month, 1 ).getDay();
  	},

  	/* Determines if we should allow a "next/prev" month display change. */
  	_canAdjustMonth: function( inst, offset, curYear, curMonth ) {
  		var numMonths = this._getNumberOfMonths( inst ),
  			date = this._daylightSavingAdjust( new Date( curYear,
  			curMonth + ( offset < 0 ? offset : numMonths[ 0 ] * numMonths[ 1 ] ), 1 ) );

  		if ( offset < 0 ) {
  			date.setDate( this._getDaysInMonth( date.getFullYear(), date.getMonth() ) );
  		}
  		return this._isInRange( inst, date );
  	},

  	/* Is the given date in the accepted range? */
  	_isInRange: function( inst, date ) {
  		var yearSplit, currentYear,
  			minDate = this._getMinMaxDate( inst, "min" ),
  			maxDate = this._getMinMaxDate( inst, "max" ),
  			minYear = null,
  			maxYear = null,
  			years = this._get( inst, "yearRange" );
  			if ( years ) {
  				yearSplit = years.split( ":" );
  				currentYear = new Date().getFullYear();
  				minYear = parseInt( yearSplit[ 0 ], 10 );
  				maxYear = parseInt( yearSplit[ 1 ], 10 );
  				if ( yearSplit[ 0 ].match( /[+\-].*/ ) ) {
  					minYear += currentYear;
  				}
  				if ( yearSplit[ 1 ].match( /[+\-].*/ ) ) {
  					maxYear += currentYear;
  				}
  			}

  		return ( ( !minDate || date.getTime() >= minDate.getTime() ) &&
  			( !maxDate || date.getTime() <= maxDate.getTime() ) &&
  			( !minYear || date.getFullYear() >= minYear ) &&
  			( !maxYear || date.getFullYear() <= maxYear ) );
  	},

  	/* Provide the configuration settings for formatting/parsing. */
  	_getFormatConfig: function( inst ) {
  		var shortYearCutoff = this._get( inst, "shortYearCutoff" );
  		shortYearCutoff = ( typeof shortYearCutoff !== "string" ? shortYearCutoff :
  			new Date().getFullYear() % 100 + parseInt( shortYearCutoff, 10 ) );
  		return { shortYearCutoff: shortYearCutoff,
  			dayNamesShort: this._get( inst, "dayNamesShort" ), dayNames: this._get( inst, "dayNames" ),
  			monthNamesShort: this._get( inst, "monthNamesShort" ), monthNames: this._get( inst, "monthNames" ) };
  	},

  	/* Format the given date for display. */
  	_formatDate: function( inst, day, month, year ) {
  		if ( !day ) {
  			inst.currentDay = inst.selectedDay;
  			inst.currentMonth = inst.selectedMonth;
  			inst.currentYear = inst.selectedYear;
  		}
  		var date = ( day ? ( typeof day === "object" ? day :
  			this._daylightSavingAdjust( new Date( year, month, day ) ) ) :
  			this._daylightSavingAdjust( new Date( inst.currentYear, inst.currentMonth, inst.currentDay ) ) );
  		return this.formatDate( this._get( inst, "dateFormat" ), date, this._getFormatConfig( inst ) );
  	}
  } );

  /*
   * Bind hover events for datepicker elements.
   * Done via delegate so the binding only occurs once in the lifetime of the parent div.
   * Global datepicker_instActive, set by _updateDatepicker allows the handlers to find their way back to the active picker.
   */
  function datepicker_bindHover( dpDiv ) {
  	var selector = "button, .ui-datepicker-prev, .ui-datepicker-next, .ui-datepicker-calendar td a";
  	return dpDiv.on( "mouseout", selector, function() {
  			$( this ).removeClass( "ui-state-hover" );
  			if ( this.className.indexOf( "ui-datepicker-prev" ) !== -1 ) {
  				$( this ).removeClass( "ui-datepicker-prev-hover" );
  			}
  			if ( this.className.indexOf( "ui-datepicker-next" ) !== -1 ) {
  				$( this ).removeClass( "ui-datepicker-next-hover" );
  			}
  		} )
  		.on( "mouseover", selector, datepicker_handleMouseover );
  }

  function datepicker_handleMouseover() {
  	if ( !$.datepicker._isDisabledDatepicker( datepicker_instActive.inline ? datepicker_instActive.dpDiv.parent()[ 0 ] : datepicker_instActive.input[ 0 ] ) ) {
  		$( this ).parents( ".ui-datepicker-calendar" ).find( "a" ).removeClass( "ui-state-hover" );
  		$( this ).addClass( "ui-state-hover" );
  		if ( this.className.indexOf( "ui-datepicker-prev" ) !== -1 ) {
  			$( this ).addClass( "ui-datepicker-prev-hover" );
  		}
  		if ( this.className.indexOf( "ui-datepicker-next" ) !== -1 ) {
  			$( this ).addClass( "ui-datepicker-next-hover" );
  		}
  	}
  }

  /* jQuery extend now ignores nulls! */
  function datepicker_extendRemove( target, props ) {
  	$.extend( target, props );
  	for ( var name in props ) {
  		if ( props[ name ] == null ) {
  			target[ name ] = props[ name ];
  		}
  	}
  	return target;
  }

  /* Invoke the datepicker functionality.
     @param  options  string - a command, optionally followed by additional parameters or
  					Object - settings for attaching new datepicker functionality
     @return  jQuery object */
  $.fn.datepicker = function( options ) {

  	/* Verify an empty collection wasn't passed - Fixes #6976 */
  	if ( !this.length ) {
  		return this;
  	}

  	/* Initialise the date picker. */
  	if ( !$.datepicker.initialized ) {
  		$( document ).on( "mousedown", $.datepicker._checkExternalClick );
  		$.datepicker.initialized = true;
  	}

  	/* Append datepicker main container to body if not exist. */
  	if ( $( "#" + $.datepicker._mainDivId ).length === 0 ) {
  		$( "body" ).append( $.datepicker.dpDiv );
  	}

  	var otherArgs = Array.prototype.slice.call( arguments, 1 );
  	if ( typeof options === "string" && ( options === "isDisabled" || options === "getDate" || options === "widget" ) ) {
  		return $.datepicker[ "_" + options + "Datepicker" ].
  			apply( $.datepicker, [ this[ 0 ] ].concat( otherArgs ) );
  	}
  	if ( options === "option" && arguments.length === 2 && typeof arguments[ 1 ] === "string" ) {
  		return $.datepicker[ "_" + options + "Datepicker" ].
  			apply( $.datepicker, [ this[ 0 ] ].concat( otherArgs ) );
  	}
  	return this.each( function() {
  		if ( typeof options === "string" ) {
  			$.datepicker[ "_" + options + "Datepicker" ]
  				.apply( $.datepicker, [ this ].concat( otherArgs ) );
  		} else {
  			$.datepicker._attachDatepicker( this, options );
  		}
  	} );
  };

  $.datepicker = new Datepicker(); // singleton instance
  $.datepicker.initialized = false;
  $.datepicker.uuid = new Date().getTime();
  $.datepicker.version = "1.14.0";

  $.datepicker;


  /*!
   * jQuery UI Mouse 1.14.0
   * https://jqueryui.com
   *
   * Copyright OpenJS Foundation and other contributors
   * Released under the MIT license.
   * https://jquery.org/license
   */

  //>>label: Mouse
  //>>group: Widgets
  //>>description: Abstracts mouse-based interactions to assist in creating certain widgets.
  //>>docs: https://api.jqueryui.com/mouse/


  var mouseHandled = false;
  $( document ).on( "mouseup", function() {
  	mouseHandled = false;
  } );

  $.widget( "ui.mouse", {
  	version: "1.14.0",
  	options: {
  		cancel: "input, textarea, button, select, option",
  		distance: 1,
  		delay: 0
  	},
  	_mouseInit: function() {
  		var that = this;

  		this.element
  			.on( "mousedown." + this.widgetName, function( event ) {
  				return that._mouseDown( event );
  			} )
  			.on( "click." + this.widgetName, function( event ) {
  				if ( true === $.data( event.target, that.widgetName + ".preventClickEvent" ) ) {
  					$.removeData( event.target, that.widgetName + ".preventClickEvent" );
  					event.stopImmediatePropagation();
  					return false;
  				}
  			} );

  		this.started = false;
  	},

  	// TODO: make sure destroying one instance of mouse doesn't mess with
  	// other instances of mouse
  	_mouseDestroy: function() {
  		this.element.off( "." + this.widgetName );
  		if ( this._mouseMoveDelegate ) {
  			this.document
  				.off( "mousemove." + this.widgetName, this._mouseMoveDelegate )
  				.off( "mouseup." + this.widgetName, this._mouseUpDelegate );
  		}
  	},

  	_mouseDown: function( event ) {

  		// don't let more than one widget handle mouseStart
  		if ( mouseHandled ) {
  			return;
  		}

  		this._mouseMoved = false;

  		// We may have missed mouseup (out of window)
  		if ( this._mouseStarted ) {
  			this._mouseUp( event );
  		}

  		this._mouseDownEvent = event;

  		var that = this,
  			btnIsLeft = event.which === 1,
  			elIsCancel = typeof this.options.cancel === "string" ?
  				$( event.target ).closest( this.options.cancel ).length :
  				false;
  		if ( !btnIsLeft || elIsCancel || !this._mouseCapture( event ) ) {
  			return true;
  		}

  		this.mouseDelayMet = !this.options.delay;
  		if ( !this.mouseDelayMet ) {
  			this._mouseDelayTimer = setTimeout( function() {
  				that.mouseDelayMet = true;
  			}, this.options.delay );
  		}

  		if ( this._mouseDistanceMet( event ) && this._mouseDelayMet( event ) ) {
  			this._mouseStarted = ( this._mouseStart( event ) !== false );
  			if ( !this._mouseStarted ) {
  				event.preventDefault();
  				return true;
  			}
  		}

  		// Click event may never have fired (Gecko & Opera)
  		if ( true === $.data( event.target, this.widgetName + ".preventClickEvent" ) ) {
  			$.removeData( event.target, this.widgetName + ".preventClickEvent" );
  		}

  		// These delegates are required to keep context
  		this._mouseMoveDelegate = function( event ) {
  			return that._mouseMove( event );
  		};
  		this._mouseUpDelegate = function( event ) {
  			return that._mouseUp( event );
  		};

  		this.document
  			.on( "mousemove." + this.widgetName, this._mouseMoveDelegate )
  			.on( "mouseup." + this.widgetName, this._mouseUpDelegate );

  		event.preventDefault();

  		mouseHandled = true;
  		return true;
  	},

  	_mouseMove: function( event ) {

  		// Only check for mouseups outside the document if you've moved inside the document
  		// at least once.
  		if ( this._mouseMoved && !event.which ) {

  			// Support: Safari <=8 - 9
  			// Safari sets which to 0 if you press any of the following keys
  			// during a drag (#14461)
  			if ( event.originalEvent.altKey || event.originalEvent.ctrlKey ||
  					event.originalEvent.metaKey || event.originalEvent.shiftKey ) {
  				this.ignoreMissingWhich = true;
  			} else if ( !this.ignoreMissingWhich ) {
  				return this._mouseUp( event );
  			}
  		}

  		if ( event.which || event.button ) {
  			this._mouseMoved = true;
  		}

  		if ( this._mouseStarted ) {
  			this._mouseDrag( event );
  			return event.preventDefault();
  		}

  		if ( this._mouseDistanceMet( event ) && this._mouseDelayMet( event ) ) {
  			this._mouseStarted =
  				( this._mouseStart( this._mouseDownEvent, event ) !== false );
  			if ( this._mouseStarted ) {
  				this._mouseDrag( event );
  			} else {
  				this._mouseUp( event );
  			}
  		}

  		return !this._mouseStarted;
  	},

  	_mouseUp: function( event ) {
  		this.document
  			.off( "mousemove." + this.widgetName, this._mouseMoveDelegate )
  			.off( "mouseup." + this.widgetName, this._mouseUpDelegate );

  		if ( this._mouseStarted ) {
  			this._mouseStarted = false;

  			if ( event.target === this._mouseDownEvent.target ) {
  				$.data( event.target, this.widgetName + ".preventClickEvent", true );
  			}

  			this._mouseStop( event );
  		}

  		if ( this._mouseDelayTimer ) {
  			clearTimeout( this._mouseDelayTimer );
  			delete this._mouseDelayTimer;
  		}

  		this.ignoreMissingWhich = false;
  		mouseHandled = false;
  		event.preventDefault();
  	},

  	_mouseDistanceMet: function( event ) {
  		return ( Math.max(
  				Math.abs( this._mouseDownEvent.pageX - event.pageX ),
  				Math.abs( this._mouseDownEvent.pageY - event.pageY )
  			) >= this.options.distance
  		);
  	},

  	_mouseDelayMet: function( /* event */ ) {
  		return this.mouseDelayMet;
  	},

  	// These are placeholder methods, to be overriden by extending plugin
  	_mouseStart: function( /* event */ ) {},
  	_mouseDrag: function( /* event */ ) {},
  	_mouseStop: function( /* event */ ) {},
  	_mouseCapture: function( /* event */ ) {
  		return true;
  	}
  } );



  // $.ui.plugin is deprecated. Use $.widget() extensions instead.
  $.ui.plugin = {
  	add: function( module, option, set ) {
  		var i,
  			proto = $.ui[ module ].prototype;
  		for ( i in set ) {
  			proto.plugins[ i ] = proto.plugins[ i ] || [];
  			proto.plugins[ i ].push( [ option, set[ i ] ] );
  		}
  	},
  	call: function( instance, name, args, allowDisconnected ) {
  		var i,
  			set = instance.plugins[ name ];

  		if ( !set ) {
  			return;
  		}

  		if ( !allowDisconnected && ( !instance.element[ 0 ].parentNode ||
  				instance.element[ 0 ].parentNode.nodeType === 11 ) ) {
  			return;
  		}

  		for ( i = 0; i < set.length; i++ ) {
  			if ( instance.options[ set[ i ][ 0 ] ] ) {
  				set[ i ][ 1 ].apply( instance.element, args );
  			}
  		}
  	}
  };


  /*!
   * jQuery UI Draggable 1.14.0
   * https://jqueryui.com
   *
   * Copyright OpenJS Foundation and other contributors
   * Released under the MIT license.
   * https://jquery.org/license
   */

  //>>label: Draggable
  //>>group: Interactions
  //>>description: Enables dragging functionality for any element.
  //>>docs: https://api.jqueryui.com/draggable/
  //>>demos: https://jqueryui.com/draggable/
  //>>css.structure: ../../themes/base/draggable.css


  $.widget( "ui.draggable", $.ui.mouse, {
  	version: "1.14.0",
  	widgetEventPrefix: "drag",
  	options: {
  		addClasses: true,
  		appendTo: "parent",
  		axis: false,
  		connectToSortable: false,
  		containment: false,
  		cursor: "auto",
  		cursorAt: false,
  		grid: false,
  		handle: false,
  		helper: "original",
  		iframeFix: false,
  		opacity: false,
  		refreshPositions: false,
  		revert: false,
  		revertDuration: 500,
  		scope: "default",
  		scroll: true,
  		scrollSensitivity: 20,
  		scrollSpeed: 20,
  		snap: false,
  		snapMode: "both",
  		snapTolerance: 20,
  		stack: false,
  		zIndex: false,

  		// Callbacks
  		drag: null,
  		start: null,
  		stop: null
  	},
  	_create: function() {

  		if ( this.options.helper === "original" ) {
  			this._setPositionRelative();
  		}
  		if ( this.options.addClasses ) {
  			this._addClass( "ui-draggable" );
  		}
  		this._setHandleClassName();

  		this._mouseInit();
  	},

  	_setOption: function( key, value ) {
  		this._super( key, value );
  		if ( key === "handle" ) {
  			this._removeHandleClassName();
  			this._setHandleClassName();
  		}
  	},

  	_destroy: function() {
  		if ( ( this.helper || this.element ).is( ".ui-draggable-dragging" ) ) {
  			this.destroyOnClear = true;
  			return;
  		}
  		this._removeHandleClassName();
  		this._mouseDestroy();
  	},

  	_mouseCapture: function( event ) {
  		var o = this.options;

  		// Among others, prevent a drag on a resizable-handle
  		if ( this.helper || o.disabled ||
  				$( event.target ).closest( ".ui-resizable-handle" ).length > 0 ) {
  			return false;
  		}

  		//Quit if we're not on a valid handle
  		this.handle = this._getHandle( event );
  		if ( !this.handle ) {
  			return false;
  		}

  		this._blurActiveElement( event );

  		this._blockFrames( o.iframeFix === true ? "iframe" : o.iframeFix );

  		return true;

  	},

  	_blockFrames: function( selector ) {
  		this.iframeBlocks = this.document.find( selector ).map( function() {
  			var iframe = $( this );

  			return $( "<div>" )
  				.css( "position", "absolute" )
  				.appendTo( iframe.parent() )
  				.outerWidth( iframe.outerWidth() )
  				.outerHeight( iframe.outerHeight() )
  				.offset( iframe.offset() )[ 0 ];
  		} );
  	},

  	_unblockFrames: function() {
  		if ( this.iframeBlocks ) {
  			this.iframeBlocks.remove();
  			delete this.iframeBlocks;
  		}
  	},

  	_blurActiveElement: function( event ) {
  		var activeElement = this.document[ 0 ].activeElement,
  			target = $( event.target );

  		// Don't blur if the event occurred on an element that is within
  		// the currently focused element
  		// See #10527, #12472
  		if ( target.closest( activeElement ).length ) {
  			return;
  		}

  		// Blur any element that currently has focus, see #4261
  		$( activeElement ).trigger( "blur" );
  	},

  	_mouseStart: function( event ) {

  		var o = this.options;

  		//Create and append the visible helper
  		this.helper = this._createHelper( event );

  		this._addClass( this.helper, "ui-draggable-dragging" );

  		//Cache the helper size
  		this._cacheHelperProportions();

  		//If ddmanager is used for droppables, set the global draggable
  		if ( $.ui.ddmanager ) {
  			$.ui.ddmanager.current = this;
  		}

  		/*
  		 * - Position generation -
  		 * This block generates everything position related - it's the core of draggables.
  		 */

  		//Cache the margins of the original element
  		this._cacheMargins();

  		//Store the helper's css position
  		this.cssPosition = this.helper.css( "position" );
  		this.scrollParent = this.helper.scrollParent( true );
  		this.offsetParent = this.helper.offsetParent();
  		this.hasFixedAncestor = this.helper.parents().filter( function() {
  				return $( this ).css( "position" ) === "fixed";
  			} ).length > 0;

  		//The element's absolute position on the page minus margins
  		this.positionAbs = this.element.offset();
  		this._refreshOffsets( event );

  		//Generate the original position
  		this.originalPosition = this.position = this._generatePosition( event, false );
  		this.originalPageX = event.pageX;
  		this.originalPageY = event.pageY;

  		//Adjust the mouse offset relative to the helper if "cursorAt" is supplied
  		if ( o.cursorAt ) {
  			this._adjustOffsetFromHelper( o.cursorAt );
  		}

  		//Set a containment if given in the options
  		this._setContainment();

  		//Trigger event + callbacks
  		if ( this._trigger( "start", event ) === false ) {
  			this._clear();
  			return false;
  		}

  		//Recache the helper size
  		this._cacheHelperProportions();

  		//Prepare the droppable offsets
  		if ( $.ui.ddmanager && !o.dropBehaviour ) {
  			$.ui.ddmanager.prepareOffsets( this, event );
  		}

  		// Execute the drag once - this causes the helper not to be visible before getting its
  		// correct position
  		this._mouseDrag( event, true );

  		// If the ddmanager is used for droppables, inform the manager that dragging has started
  		// (see #5003)
  		if ( $.ui.ddmanager ) {
  			$.ui.ddmanager.dragStart( this, event );
  		}

  		return true;
  	},

  	_refreshOffsets: function( event ) {
  		this.offset = {
  			top: this.positionAbs.top - this.margins.top,
  			left: this.positionAbs.left - this.margins.left,
  			scroll: false,
  			parent: this._getParentOffset(),
  			relative: this._getRelativeOffset()
  		};

  		this.offset.click = {
  			left: event.pageX - this.offset.left,
  			top: event.pageY - this.offset.top
  		};
  	},

  	_mouseDrag: function( event, noPropagation ) {

  		// reset any necessary cached properties (see #5009)
  		if ( this.hasFixedAncestor ) {
  			this.offset.parent = this._getParentOffset();
  		}

  		//Compute the helpers position
  		this.position = this._generatePosition( event, true );
  		this.positionAbs = this._convertPositionTo( "absolute" );

  		//Call plugins and callbacks and use the resulting position if something is returned
  		if ( !noPropagation ) {
  			var ui = this._uiHash();
  			if ( this._trigger( "drag", event, ui ) === false ) {
  				this._mouseUp( new $.Event( "mouseup", event ) );
  				return false;
  			}
  			this.position = ui.position;
  		}

  		this.helper[ 0 ].style.left = this.position.left + "px";
  		this.helper[ 0 ].style.top = this.position.top + "px";

  		if ( $.ui.ddmanager ) {
  			$.ui.ddmanager.drag( this, event );
  		}

  		return false;
  	},

  	_mouseStop: function( event ) {

  		//If we are using droppables, inform the manager about the drop
  		var that = this,
  			dropped = false;
  		if ( $.ui.ddmanager && !this.options.dropBehaviour ) {
  			dropped = $.ui.ddmanager.drop( this, event );
  		}

  		//if a drop comes from outside (a sortable)
  		if ( this.dropped ) {
  			dropped = this.dropped;
  			this.dropped = false;
  		}

  		if ( ( this.options.revert === "invalid" && !dropped ) ||
  				( this.options.revert === "valid" && dropped ) ||
  				this.options.revert === true || ( typeof this.options.revert === "function" &&
  				this.options.revert.call( this.element, dropped ) )
  		) {
  			$( this.helper ).animate(
  				this.originalPosition,
  				parseInt( this.options.revertDuration, 10 ),
  				function() {
  					if ( that._trigger( "stop", event ) !== false ) {
  						that._clear();
  					}
  				}
  			);
  		} else {
  			if ( this._trigger( "stop", event ) !== false ) {
  				this._clear();
  			}
  		}

  		return false;
  	},

  	_mouseUp: function( event ) {
  		this._unblockFrames();

  		// If the ddmanager is used for droppables, inform the manager that dragging has stopped
  		// (see #5003)
  		if ( $.ui.ddmanager ) {
  			$.ui.ddmanager.dragStop( this, event );
  		}

  		// Only need to focus if the event occurred on the draggable itself, see #10527
  		if ( this.handleElement.is( event.target ) ) {

  			// The interaction is over; whether or not the click resulted in a drag,
  			// focus the element
  			this.element.trigger( "focus" );
  		}

  		return $.ui.mouse.prototype._mouseUp.call( this, event );
  	},

  	cancel: function() {

  		if ( this.helper.is( ".ui-draggable-dragging" ) ) {
  			this._mouseUp( new $.Event( "mouseup", { target: this.element[ 0 ] } ) );
  		} else {
  			this._clear();
  		}

  		return this;

  	},

  	_getHandle: function( event ) {
  		return this.options.handle ?
  			!!$( event.target ).closest( this.element.find( this.options.handle ) ).length :
  			true;
  	},

  	_setHandleClassName: function() {
  		this.handleElement = this.options.handle ?
  			this.element.find( this.options.handle ) : this.element;
  		this._addClass( this.handleElement, "ui-draggable-handle" );
  	},

  	_removeHandleClassName: function() {
  		this._removeClass( this.handleElement, "ui-draggable-handle" );
  	},

  	_createHelper: function( event ) {

  		var o = this.options,
  			helperIsFunction = typeof o.helper === "function",
  			helper = helperIsFunction ?
  				$( o.helper.apply( this.element[ 0 ], [ event ] ) ) :
  				( o.helper === "clone" ?
  					this.element.clone().removeAttr( "id" ) :
  					this.element );

  		if ( !helper.parents( "body" ).length ) {
  			helper.appendTo( ( o.appendTo === "parent" ?
  				this.element[ 0 ].parentNode :
  				o.appendTo ) );
  		}

  		// https://bugs.jqueryui.com/ticket/9446
  		// a helper function can return the original element
  		// which wouldn't have been set to relative in _create
  		if ( helperIsFunction && helper[ 0 ] === this.element[ 0 ] ) {
  			this._setPositionRelative();
  		}

  		if ( helper[ 0 ] !== this.element[ 0 ] &&
  				!( /(fixed|absolute)/ ).test( helper.css( "position" ) ) ) {
  			helper.css( "position", "absolute" );
  		}

  		return helper;

  	},

  	_setPositionRelative: function() {
  		if ( !( /^(?:r|a|f)/ ).test( this.element.css( "position" ) ) ) {
  			this.element[ 0 ].style.position = "relative";
  		}
  	},

  	_adjustOffsetFromHelper: function( obj ) {
  		if ( typeof obj === "string" ) {
  			obj = obj.split( " " );
  		}
  		if ( Array.isArray( obj ) ) {
  			obj = { left: +obj[ 0 ], top: +obj[ 1 ] || 0 };
  		}
  		if ( "left" in obj ) {
  			this.offset.click.left = obj.left + this.margins.left;
  		}
  		if ( "right" in obj ) {
  			this.offset.click.left = this.helperProportions.width - obj.right + this.margins.left;
  		}
  		if ( "top" in obj ) {
  			this.offset.click.top = obj.top + this.margins.top;
  		}
  		if ( "bottom" in obj ) {
  			this.offset.click.top = this.helperProportions.height - obj.bottom + this.margins.top;
  		}
  	},

  	_isRootNode: function( element ) {
  		return ( /(html|body)/i ).test( element.tagName ) || element === this.document[ 0 ];
  	},

  	_getParentOffset: function() {

  		//Get the offsetParent and cache its position
  		var po = this.offsetParent.offset(),
  			document = this.document[ 0 ];

  		// This is a special case where we need to modify a offset calculated on start, since the
  		// following happened:
  		// 1. The position of the helper is absolute, so it's position is calculated based on the
  		// next positioned parent
  		// 2. The actual offset parent is a child of the scroll parent, and the scroll parent isn't
  		// the document, which means that the scroll is included in the initial calculation of the
  		// offset of the parent, and never recalculated upon drag
  		if ( this.cssPosition === "absolute" && this.scrollParent[ 0 ] !== document &&
  				$.contains( this.scrollParent[ 0 ], this.offsetParent[ 0 ] ) ) {
  			po.left += this.scrollParent.scrollLeft();
  			po.top += this.scrollParent.scrollTop();
  		}

  		if ( this._isRootNode( this.offsetParent[ 0 ] ) ) {
  			po = { top: 0, left: 0 };
  		}

  		return {
  			top: po.top + ( parseInt( this.offsetParent.css( "borderTopWidth" ), 10 ) || 0 ),
  			left: po.left + ( parseInt( this.offsetParent.css( "borderLeftWidth" ), 10 ) || 0 )
  		};

  	},

  	_getRelativeOffset: function() {
  		if ( this.cssPosition !== "relative" ) {
  			return { top: 0, left: 0 };
  		}

  		var p = this.element.position(),
  			scrollIsRootNode = this._isRootNode( this.scrollParent[ 0 ] );

  		return {
  			top: p.top - ( parseInt( this.helper.css( "top" ), 10 ) || 0 ) +
  				( !scrollIsRootNode ? this.scrollParent.scrollTop() : 0 ),
  			left: p.left - ( parseInt( this.helper.css( "left" ), 10 ) || 0 ) +
  				( !scrollIsRootNode ? this.scrollParent.scrollLeft() : 0 )
  		};

  	},

  	_cacheMargins: function() {
  		this.margins = {
  			left: ( parseInt( this.element.css( "marginLeft" ), 10 ) || 0 ),
  			top: ( parseInt( this.element.css( "marginTop" ), 10 ) || 0 ),
  			right: ( parseInt( this.element.css( "marginRight" ), 10 ) || 0 ),
  			bottom: ( parseInt( this.element.css( "marginBottom" ), 10 ) || 0 )
  		};
  	},

  	_cacheHelperProportions: function() {
  		this.helperProportions = {
  			width: this.helper.outerWidth(),
  			height: this.helper.outerHeight()
  		};
  	},

  	_setContainment: function() {

  		var isUserScrollable, c, ce,
  			o = this.options,
  			document = this.document[ 0 ];

  		this.relativeContainer = null;

  		if ( !o.containment ) {
  			this.containment = null;
  			return;
  		}

  		if ( o.containment === "window" ) {
  			this.containment = [
  				$( window ).scrollLeft() - this.offset.relative.left - this.offset.parent.left,
  				$( window ).scrollTop() - this.offset.relative.top - this.offset.parent.top,
  				$( window ).scrollLeft() + $( window ).width() -
  					this.helperProportions.width - this.margins.left,
  				$( window ).scrollTop() +
  					( $( window ).height() || document.body.parentNode.scrollHeight ) -
  					this.helperProportions.height - this.margins.top
  			];
  			return;
  		}

  		if ( o.containment === "document" ) {
  			this.containment = [
  				0,
  				0,
  				$( document ).width() - this.helperProportions.width - this.margins.left,
  				( $( document ).height() || document.body.parentNode.scrollHeight ) -
  					this.helperProportions.height - this.margins.top
  			];
  			return;
  		}

  		if ( o.containment.constructor === Array ) {
  			this.containment = o.containment;
  			return;
  		}

  		if ( o.containment === "parent" ) {
  			o.containment = this.helper[ 0 ].parentNode;
  		}

  		c = $( o.containment );
  		ce = c[ 0 ];

  		if ( !ce ) {
  			return;
  		}

  		isUserScrollable = /(scroll|auto)/.test( c.css( "overflow" ) );

  		this.containment = [
  			( parseInt( c.css( "borderLeftWidth" ), 10 ) || 0 ) +
  				( parseInt( c.css( "paddingLeft" ), 10 ) || 0 ),
  			( parseInt( c.css( "borderTopWidth" ), 10 ) || 0 ) +
  				( parseInt( c.css( "paddingTop" ), 10 ) || 0 ),
  			( isUserScrollable ? Math.max( ce.scrollWidth, ce.offsetWidth ) : ce.offsetWidth ) -
  				( parseInt( c.css( "borderRightWidth" ), 10 ) || 0 ) -
  				( parseInt( c.css( "paddingRight" ), 10 ) || 0 ) -
  				this.helperProportions.width -
  				this.margins.left -
  				this.margins.right,
  			( isUserScrollable ? Math.max( ce.scrollHeight, ce.offsetHeight ) : ce.offsetHeight ) -
  				( parseInt( c.css( "borderBottomWidth" ), 10 ) || 0 ) -
  				( parseInt( c.css( "paddingBottom" ), 10 ) || 0 ) -
  				this.helperProportions.height -
  				this.margins.top -
  				this.margins.bottom
  		];
  		this.relativeContainer = c;
  	},

  	_convertPositionTo: function( d, pos ) {

  		if ( !pos ) {
  			pos = this.position;
  		}

  		var mod = d === "absolute" ? 1 : -1,
  			scrollIsRootNode = this._isRootNode( this.scrollParent[ 0 ] );

  		return {
  			top: (

  				// The absolute mouse position
  				pos.top	+

  				// Only for relative positioned nodes: Relative offset from element to offset parent
  				this.offset.relative.top * mod +

  				// The offsetParent's offset without borders (offset + border)
  				this.offset.parent.top * mod -
  				( ( this.cssPosition === "fixed" ?
  					-this.offset.scroll.top :
  					( scrollIsRootNode ? 0 : this.offset.scroll.top ) ) * mod )
  			),
  			left: (

  				// The absolute mouse position
  				pos.left +

  				// Only for relative positioned nodes: Relative offset from element to offset parent
  				this.offset.relative.left * mod +

  				// The offsetParent's offset without borders (offset + border)
  				this.offset.parent.left * mod	-
  				( ( this.cssPosition === "fixed" ?
  					-this.offset.scroll.left :
  					( scrollIsRootNode ? 0 : this.offset.scroll.left ) ) * mod )
  			)
  		};

  	},

  	_generatePosition: function( event, constrainPosition ) {

  		var containment, co, top, left,
  			o = this.options,
  			scrollIsRootNode = this._isRootNode( this.scrollParent[ 0 ] ),
  			pageX = event.pageX,
  			pageY = event.pageY;

  		// Cache the scroll
  		if ( !scrollIsRootNode || !this.offset.scroll ) {
  			this.offset.scroll = {
  				top: this.scrollParent.scrollTop(),
  				left: this.scrollParent.scrollLeft()
  			};
  		}

  		/*
  		 * - Position constraining -
  		 * Constrain the position to a mix of grid, containment.
  		 */

  		// If we are not dragging yet, we won't check for options
  		if ( constrainPosition ) {
  			if ( this.containment ) {
  				if ( this.relativeContainer ) {
  					co = this.relativeContainer.offset();
  					containment = [
  						this.containment[ 0 ] + co.left,
  						this.containment[ 1 ] + co.top,
  						this.containment[ 2 ] + co.left,
  						this.containment[ 3 ] + co.top
  					];
  				} else {
  					containment = this.containment;
  				}

  				if ( event.pageX - this.offset.click.left < containment[ 0 ] ) {
  					pageX = containment[ 0 ] + this.offset.click.left;
  				}
  				if ( event.pageY - this.offset.click.top < containment[ 1 ] ) {
  					pageY = containment[ 1 ] + this.offset.click.top;
  				}
  				if ( event.pageX - this.offset.click.left > containment[ 2 ] ) {
  					pageX = containment[ 2 ] + this.offset.click.left;
  				}
  				if ( event.pageY - this.offset.click.top > containment[ 3 ] ) {
  					pageY = containment[ 3 ] + this.offset.click.top;
  				}
  			}

  			if ( o.grid ) {

  				//Check for grid elements set to 0 to prevent divide by 0 error causing invalid
  				// argument errors in IE (see ticket #6950)
  				top = o.grid[ 1 ] ? this.originalPageY + Math.round( ( pageY -
  					this.originalPageY ) / o.grid[ 1 ] ) * o.grid[ 1 ] : this.originalPageY;
  				pageY = containment ? ( ( top - this.offset.click.top >= containment[ 1 ] ||
  					top - this.offset.click.top > containment[ 3 ] ) ?
  						top :
  						( ( top - this.offset.click.top >= containment[ 1 ] ) ?
  							top - o.grid[ 1 ] : top + o.grid[ 1 ] ) ) : top;

  				left = o.grid[ 0 ] ? this.originalPageX +
  					Math.round( ( pageX - this.originalPageX ) / o.grid[ 0 ] ) * o.grid[ 0 ] :
  					this.originalPageX;
  				pageX = containment ? ( ( left - this.offset.click.left >= containment[ 0 ] ||
  					left - this.offset.click.left > containment[ 2 ] ) ?
  						left :
  						( ( left - this.offset.click.left >= containment[ 0 ] ) ?
  							left - o.grid[ 0 ] : left + o.grid[ 0 ] ) ) : left;
  			}

  			if ( o.axis === "y" ) {
  				pageX = this.originalPageX;
  			}

  			if ( o.axis === "x" ) {
  				pageY = this.originalPageY;
  			}
  		}

  		return {
  			top: (

  				// The absolute mouse position
  				pageY -

  				// Click offset (relative to the element)
  				this.offset.click.top -

  				// Only for relative positioned nodes: Relative offset from element to offset parent
  				this.offset.relative.top -

  				// The offsetParent's offset without borders (offset + border)
  				this.offset.parent.top +
  				( this.cssPosition === "fixed" ?
  					-this.offset.scroll.top :
  					( scrollIsRootNode ? 0 : this.offset.scroll.top ) )
  			),
  			left: (

  				// The absolute mouse position
  				pageX -

  				// Click offset (relative to the element)
  				this.offset.click.left -

  				// Only for relative positioned nodes: Relative offset from element to offset parent
  				this.offset.relative.left -

  				// The offsetParent's offset without borders (offset + border)
  				this.offset.parent.left +
  				( this.cssPosition === "fixed" ?
  					-this.offset.scroll.left :
  					( scrollIsRootNode ? 0 : this.offset.scroll.left ) )
  			)
  		};

  	},

  	_clear: function() {
  		this._removeClass( this.helper, "ui-draggable-dragging" );
  		if ( this.helper[ 0 ] !== this.element[ 0 ] && !this.cancelHelperRemoval ) {
  			this.helper.remove();
  		}
  		this.helper = null;
  		this.cancelHelperRemoval = false;
  		if ( this.destroyOnClear ) {
  			this.destroy();
  		}
  	},

  	// From now on bulk stuff - mainly helpers

  	_trigger: function( type, event, ui ) {
  		ui = ui || this._uiHash();
  		$.ui.plugin.call( this, type, [ event, ui, this ], true );

  		// Absolute position and offset (see #6884 ) have to be recalculated after plugins
  		if ( /^(drag|start|stop)/.test( type ) ) {
  			this.positionAbs = this._convertPositionTo( "absolute" );
  			ui.offset = this.positionAbs;
  		}
  		return $.Widget.prototype._trigger.call( this, type, event, ui );
  	},

  	plugins: {},

  	_uiHash: function() {
  		return {
  			helper: this.helper,
  			position: this.position,
  			originalPosition: this.originalPosition,
  			offset: this.positionAbs
  		};
  	}

  } );

  $.ui.plugin.add( "draggable", "connectToSortable", {
  	start: function( event, ui, draggable ) {
  		var uiSortable = $.extend( {}, ui, {
  			item: draggable.element
  		} );

  		draggable.sortables = [];
  		$( draggable.options.connectToSortable ).each( function() {
  			var sortable = $( this ).sortable( "instance" );

  			if ( sortable && !sortable.options.disabled ) {
  				draggable.sortables.push( sortable );

  				// RefreshPositions is called at drag start to refresh the containerCache
  				// which is used in drag. This ensures it's initialized and synchronized
  				// with any changes that might have happened on the page since initialization.
  				sortable.refreshPositions();
  				sortable._trigger( "activate", event, uiSortable );
  			}
  		} );
  	},
  	stop: function( event, ui, draggable ) {
  		var uiSortable = $.extend( {}, ui, {
  			item: draggable.element
  		} );

  		draggable.cancelHelperRemoval = false;

  		$.each( draggable.sortables, function() {
  			var sortable = this;

  			if ( sortable.isOver ) {
  				sortable.isOver = 0;

  				// Allow this sortable to handle removing the helper
  				draggable.cancelHelperRemoval = true;
  				sortable.cancelHelperRemoval = false;

  				// Use _storedCSS To restore properties in the sortable,
  				// as this also handles revert (#9675) since the draggable
  				// may have modified them in unexpected ways (#8809)
  				sortable._storedCSS = {
  					position: sortable.placeholder.css( "position" ),
  					top: sortable.placeholder.css( "top" ),
  					left: sortable.placeholder.css( "left" )
  				};

  				sortable._mouseStop( event );

  				// Once drag has ended, the sortable should return to using
  				// its original helper, not the shared helper from draggable
  				sortable.options.helper = sortable.options._helper;
  			} else {

  				// Prevent this Sortable from removing the helper.
  				// However, don't set the draggable to remove the helper
  				// either as another connected Sortable may yet handle the removal.
  				sortable.cancelHelperRemoval = true;

  				sortable._trigger( "deactivate", event, uiSortable );
  			}
  		} );
  	},
  	drag: function( event, ui, draggable ) {
  		$.each( draggable.sortables, function() {
  			var innermostIntersecting = false,
  				sortable = this;

  			// Copy over variables that sortable's _intersectsWith uses
  			sortable.positionAbs = draggable.positionAbs;
  			sortable.helperProportions = draggable.helperProportions;
  			sortable.offset.click = draggable.offset.click;

  			if ( sortable._intersectsWith( sortable.containerCache ) ) {
  				innermostIntersecting = true;

  				$.each( draggable.sortables, function() {

  					// Copy over variables that sortable's _intersectsWith uses
  					this.positionAbs = draggable.positionAbs;
  					this.helperProportions = draggable.helperProportions;
  					this.offset.click = draggable.offset.click;

  					if ( this !== sortable &&
  							this._intersectsWith( this.containerCache ) &&
  							$.contains( sortable.element[ 0 ], this.element[ 0 ] ) ) {
  						innermostIntersecting = false;
  					}

  					return innermostIntersecting;
  				} );
  			}

  			if ( innermostIntersecting ) {

  				// If it intersects, we use a little isOver variable and set it once,
  				// so that the move-in stuff gets fired only once.
  				if ( !sortable.isOver ) {
  					sortable.isOver = 1;

  					// Store draggable's parent in case we need to reappend to it later.
  					draggable._parent = ui.helper.parent();

  					sortable.currentItem = ui.helper
  						.appendTo( sortable.element )
  						.data( "ui-sortable-item", true );

  					// Store helper option to later restore it
  					sortable.options._helper = sortable.options.helper;

  					sortable.options.helper = function() {
  						return ui.helper[ 0 ];
  					};

  					// Fire the start events of the sortable with our passed browser event,
  					// and our own helper (so it doesn't create a new one)
  					event.target = sortable.currentItem[ 0 ];
  					sortable._mouseCapture( event, true );
  					sortable._mouseStart( event, true, true );

  					// Because the browser event is way off the new appended portlet,
  					// modify necessary variables to reflect the changes
  					sortable.offset.click.top = draggable.offset.click.top;
  					sortable.offset.click.left = draggable.offset.click.left;
  					sortable.offset.parent.left -= draggable.offset.parent.left -
  						sortable.offset.parent.left;
  					sortable.offset.parent.top -= draggable.offset.parent.top -
  						sortable.offset.parent.top;

  					draggable._trigger( "toSortable", event );

  					// Inform draggable that the helper is in a valid drop zone,
  					// used solely in the revert option to handle "valid/invalid".
  					draggable.dropped = sortable.element;

  					// Need to refreshPositions of all sortables in the case that
  					// adding to one sortable changes the location of the other sortables (#9675)
  					$.each( draggable.sortables, function() {
  						this.refreshPositions();
  					} );

  					// Hack so receive/update callbacks work (mostly)
  					draggable.currentItem = draggable.element;
  					sortable.fromOutside = draggable;
  				}

  				if ( sortable.currentItem ) {
  					sortable._mouseDrag( event );

  					// Copy the sortable's position because the draggable's can potentially reflect
  					// a relative position, while sortable is always absolute, which the dragged
  					// element has now become. (#8809)
  					ui.position = sortable.position;
  				}
  			} else {

  				// If it doesn't intersect with the sortable, and it intersected before,
  				// we fake the drag stop of the sortable, but make sure it doesn't remove
  				// the helper by using cancelHelperRemoval.
  				if ( sortable.isOver ) {

  					sortable.isOver = 0;
  					sortable.cancelHelperRemoval = true;

  					// Calling sortable's mouseStop would trigger a revert,
  					// so revert must be temporarily false until after mouseStop is called.
  					sortable.options._revert = sortable.options.revert;
  					sortable.options.revert = false;

  					sortable._trigger( "out", event, sortable._uiHash( sortable ) );
  					sortable._mouseStop( event, true );

  					// Restore sortable behaviors that were modfied
  					// when the draggable entered the sortable area (#9481)
  					sortable.options.revert = sortable.options._revert;
  					sortable.options.helper = sortable.options._helper;

  					if ( sortable.placeholder ) {
  						sortable.placeholder.remove();
  					}

  					// Restore and recalculate the draggable's offset considering the sortable
  					// may have modified them in unexpected ways. (#8809, #10669)
  					ui.helper.appendTo( draggable._parent );
  					draggable._refreshOffsets( event );
  					ui.position = draggable._generatePosition( event, true );

  					draggable._trigger( "fromSortable", event );

  					// Inform draggable that the helper is no longer in a valid drop zone
  					draggable.dropped = false;

  					// Need to refreshPositions of all sortables just in case removing
  					// from one sortable changes the location of other sortables (#9675)
  					$.each( draggable.sortables, function() {
  						this.refreshPositions();
  					} );
  				}
  			}
  		} );
  	}
  } );

  $.ui.plugin.add( "draggable", "cursor", {
  	start: function( event, ui, instance ) {
  		var t = $( "body" ),
  			o = instance.options;

  		if ( t.css( "cursor" ) ) {
  			o._cursor = t.css( "cursor" );
  		}
  		t.css( "cursor", o.cursor );
  	},
  	stop: function( event, ui, instance ) {
  		var o = instance.options;
  		if ( o._cursor ) {
  			$( "body" ).css( "cursor", o._cursor );
  		}
  	}
  } );

  $.ui.plugin.add( "draggable", "opacity", {
  	start: function( event, ui, instance ) {
  		var t = $( ui.helper ),
  			o = instance.options;
  		if ( t.css( "opacity" ) ) {
  			o._opacity = t.css( "opacity" );
  		}
  		t.css( "opacity", o.opacity );
  	},
  	stop: function( event, ui, instance ) {
  		var o = instance.options;
  		if ( o._opacity ) {
  			$( ui.helper ).css( "opacity", o._opacity );
  		}
  	}
  } );

  $.ui.plugin.add( "draggable", "scroll", {
  	start: function( event, ui, i ) {
  		if ( !i.scrollParentNotHidden ) {
  			i.scrollParentNotHidden = i.helper.scrollParent( false );
  		}

  		if ( i.scrollParentNotHidden[ 0 ] !== i.document[ 0 ] &&
  				i.scrollParentNotHidden[ 0 ].tagName !== "HTML" ) {
  			i.overflowOffset = i.scrollParentNotHidden.offset();
  		}
  	},
  	drag: function( event, ui, i  ) {

  		var o = i.options,
  			scrolled = false,
  			scrollParent = i.scrollParentNotHidden[ 0 ],
  			document = i.document[ 0 ];

  		if ( scrollParent !== document && scrollParent.tagName !== "HTML" ) {
  			if ( !o.axis || o.axis !== "x" ) {
  				if ( ( i.overflowOffset.top + scrollParent.offsetHeight ) - event.pageY <
  						o.scrollSensitivity ) {
  					scrollParent.scrollTop = scrolled = scrollParent.scrollTop + o.scrollSpeed;
  				} else if ( event.pageY - i.overflowOffset.top < o.scrollSensitivity ) {
  					scrollParent.scrollTop = scrolled = scrollParent.scrollTop - o.scrollSpeed;
  				}
  			}

  			if ( !o.axis || o.axis !== "y" ) {
  				if ( ( i.overflowOffset.left + scrollParent.offsetWidth ) - event.pageX <
  						o.scrollSensitivity ) {
  					scrollParent.scrollLeft = scrolled = scrollParent.scrollLeft + o.scrollSpeed;
  				} else if ( event.pageX - i.overflowOffset.left < o.scrollSensitivity ) {
  					scrollParent.scrollLeft = scrolled = scrollParent.scrollLeft - o.scrollSpeed;
  				}
  			}

  		} else {

  			if ( !o.axis || o.axis !== "x" ) {
  				if ( event.pageY - $( document ).scrollTop() < o.scrollSensitivity ) {
  					scrolled = $( document ).scrollTop( $( document ).scrollTop() - o.scrollSpeed );
  				} else if ( $( window ).height() - ( event.pageY - $( document ).scrollTop() ) <
  						o.scrollSensitivity ) {
  					scrolled = $( document ).scrollTop( $( document ).scrollTop() + o.scrollSpeed );
  				}
  			}

  			if ( !o.axis || o.axis !== "y" ) {
  				if ( event.pageX - $( document ).scrollLeft() < o.scrollSensitivity ) {
  					scrolled = $( document ).scrollLeft(
  						$( document ).scrollLeft() - o.scrollSpeed
  					);
  				} else if ( $( window ).width() - ( event.pageX - $( document ).scrollLeft() ) <
  						o.scrollSensitivity ) {
  					scrolled = $( document ).scrollLeft(
  						$( document ).scrollLeft() + o.scrollSpeed
  					);
  				}
  			}

  		}

  		if ( scrolled !== false && $.ui.ddmanager && !o.dropBehaviour ) {
  			$.ui.ddmanager.prepareOffsets( i, event );
  		}

  	}
  } );

  $.ui.plugin.add( "draggable", "snap", {
  	start: function( event, ui, i ) {

  		var o = i.options;

  		i.snapElements = [];

  		$( o.snap.constructor !== String ? ( o.snap.items || ":data(ui-draggable)" ) : o.snap )
  			.each( function() {
  				var $t = $( this ),
  					$o = $t.offset();
  				if ( this !== i.element[ 0 ] ) {
  					i.snapElements.push( {
  						item: this,
  						width: $t.outerWidth(), height: $t.outerHeight(),
  						top: $o.top, left: $o.left
  					} );
  				}
  			} );

  	},
  	drag: function( event, ui, inst ) {

  		var ts, bs, ls, rs, l, r, t, b, i, first,
  			o = inst.options,
  			d = o.snapTolerance,
  			x1 = ui.offset.left, x2 = x1 + inst.helperProportions.width,
  			y1 = ui.offset.top, y2 = y1 + inst.helperProportions.height;

  		for ( i = inst.snapElements.length - 1; i >= 0; i-- ) {

  			l = inst.snapElements[ i ].left - inst.margins.left;
  			r = l + inst.snapElements[ i ].width;
  			t = inst.snapElements[ i ].top - inst.margins.top;
  			b = t + inst.snapElements[ i ].height;

  			if ( x2 < l - d || x1 > r + d || y2 < t - d || y1 > b + d ||
  					!$.contains( inst.snapElements[ i ].item.ownerDocument,
  					inst.snapElements[ i ].item ) ) {
  				if ( inst.snapElements[ i ].snapping ) {
  					if ( inst.options.snap.release ) {
  						inst.options.snap.release.call(
  							inst.element,
  							event,
  							$.extend( inst._uiHash(), { snapItem: inst.snapElements[ i ].item } )
  						);
  					}
  				}
  				inst.snapElements[ i ].snapping = false;
  				continue;
  			}

  			if ( o.snapMode !== "inner" ) {
  				ts = Math.abs( t - y2 ) <= d;
  				bs = Math.abs( b - y1 ) <= d;
  				ls = Math.abs( l - x2 ) <= d;
  				rs = Math.abs( r - x1 ) <= d;
  				if ( ts ) {
  					ui.position.top = inst._convertPositionTo( "relative", {
  						top: t - inst.helperProportions.height,
  						left: 0
  					} ).top;
  				}
  				if ( bs ) {
  					ui.position.top = inst._convertPositionTo( "relative", {
  						top: b,
  						left: 0
  					} ).top;
  				}
  				if ( ls ) {
  					ui.position.left = inst._convertPositionTo( "relative", {
  						top: 0,
  						left: l - inst.helperProportions.width
  					} ).left;
  				}
  				if ( rs ) {
  					ui.position.left = inst._convertPositionTo( "relative", {
  						top: 0,
  						left: r
  					} ).left;
  				}
  			}

  			first = ( ts || bs || ls || rs );

  			if ( o.snapMode !== "outer" ) {
  				ts = Math.abs( t - y1 ) <= d;
  				bs = Math.abs( b - y2 ) <= d;
  				ls = Math.abs( l - x1 ) <= d;
  				rs = Math.abs( r - x2 ) <= d;
  				if ( ts ) {
  					ui.position.top = inst._convertPositionTo( "relative", {
  						top: t,
  						left: 0
  					} ).top;
  				}
  				if ( bs ) {
  					ui.position.top = inst._convertPositionTo( "relative", {
  						top: b - inst.helperProportions.height,
  						left: 0
  					} ).top;
  				}
  				if ( ls ) {
  					ui.position.left = inst._convertPositionTo( "relative", {
  						top: 0,
  						left: l
  					} ).left;
  				}
  				if ( rs ) {
  					ui.position.left = inst._convertPositionTo( "relative", {
  						top: 0,
  						left: r - inst.helperProportions.width
  					} ).left;
  				}
  			}

  			if ( !inst.snapElements[ i ].snapping && ( ts || bs || ls || rs || first ) ) {
  				if ( inst.options.snap.snap ) {
  					inst.options.snap.snap.call(
  						inst.element,
  						event,
  						$.extend( inst._uiHash(), {
  							snapItem: inst.snapElements[ i ].item
  						} ) );
  				}
  			}
  			inst.snapElements[ i ].snapping = ( ts || bs || ls || rs || first );

  		}

  	}
  } );

  $.ui.plugin.add( "draggable", "stack", {
  	start: function( event, ui, instance ) {
  		var min,
  			o = instance.options,
  			group = $.makeArray( $( o.stack ) ).sort( function( a, b ) {
  				return ( parseInt( $( a ).css( "zIndex" ), 10 ) || 0 ) -
  					( parseInt( $( b ).css( "zIndex" ), 10 ) || 0 );
  			} );

  		if ( !group.length ) {
  			return;
  		}

  		min = parseInt( $( group[ 0 ] ).css( "zIndex" ), 10 ) || 0;
  		$( group ).each( function( i ) {
  			$( this ).css( "zIndex", min + i );
  		} );
  		this.css( "zIndex", ( min + group.length ) );
  	}
  } );

  $.ui.plugin.add( "draggable", "zIndex", {
  	start: function( event, ui, instance ) {
  		var t = $( ui.helper ),
  			o = instance.options;

  		if ( t.css( "zIndex" ) ) {
  			o._zIndex = t.css( "zIndex" );
  		}
  		t.css( "zIndex", o.zIndex );
  	},
  	stop: function( event, ui, instance ) {
  		var o = instance.options;

  		if ( o._zIndex ) {
  			$( ui.helper ).css( "zIndex", o._zIndex );
  		}
  	}
  } );

  $.ui.draggable;


  /*!
   * jQuery UI Resizable 1.14.0
   * https://jqueryui.com
   *
   * Copyright OpenJS Foundation and other contributors
   * Released under the MIT license.
   * https://jquery.org/license
   */

  //>>label: Resizable
  //>>group: Interactions
  //>>description: Enables resize functionality for any element.
  //>>docs: https://api.jqueryui.com/resizable/
  //>>demos: https://jqueryui.com/resizable/
  //>>css.structure: ../../themes/base/core.css
  //>>css.structure: ../../themes/base/resizable.css
  //>>css.theme: ../../themes/base/theme.css


  $.widget( "ui.resizable", $.ui.mouse, {
  	version: "1.14.0",
  	widgetEventPrefix: "resize",
  	options: {
  		alsoResize: false,
  		animate: false,
  		animateDuration: "slow",
  		animateEasing: "swing",
  		aspectRatio: false,
  		autoHide: false,
  		classes: {
  			"ui-resizable-se": "ui-icon ui-icon-gripsmall-diagonal-se"
  		},
  		containment: false,
  		ghost: false,
  		grid: false,
  		handles: "e,s,se",
  		helper: false,
  		maxHeight: null,
  		maxWidth: null,
  		minHeight: 10,
  		minWidth: 10,

  		// See #7960
  		zIndex: 90,

  		// Callbacks
  		resize: null,
  		start: null,
  		stop: null
  	},

  	_num: function( value ) {
  		return parseFloat( value ) || 0;
  	},

  	_isNumber: function( value ) {
  		return !isNaN( parseFloat( value ) );
  	},

  	_hasScroll: function( el, a ) {

  		if ( $( el ).css( "overflow" ) === "hidden" ) {
  			return false;
  		}

  		var scroll = ( a && a === "left" ) ? "scrollLeft" : "scrollTop",
  			has = false;

  		if ( el[ scroll ] > 0 ) {
  			return true;
  		}

  		// TODO: determine which cases actually cause this to happen
  		// if the element doesn't have the scroll set, see if it's possible to
  		// set the scroll
  		try {
  			el[ scroll ] = 1;
  			has = ( el[ scroll ] > 0 );
  			el[ scroll ] = 0;
  		} catch ( e ) {

  			// `el` might be a string, then setting `scroll` will throw
  			// an error in strict mode; ignore it.
  		}
  		return has;
  	},

  	_create: function() {

  		var margins,
  			o = this.options,
  			that = this;
  		this._addClass( "ui-resizable" );

  		$.extend( this, {
  			_aspectRatio: !!( o.aspectRatio ),
  			aspectRatio: o.aspectRatio,
  			originalElement: this.element,
  			_proportionallyResizeElements: [],
  			_helper: o.helper || o.ghost || o.animate ? o.helper || "ui-resizable-helper" : null
  		} );

  		// Wrap the element if it cannot hold child nodes
  		if ( this.element[ 0 ].nodeName.match( /^(canvas|textarea|input|select|button|img)$/i ) ) {

  			this.element.wrap(
  				$( "<div class='ui-wrapper'></div>" ).css( {
  					overflow: "hidden",
  					position: this.element.css( "position" ),
  					width: this.element.outerWidth(),
  					height: this.element.outerHeight(),
  					top: this.element.css( "top" ),
  					left: this.element.css( "left" )
  				} )
  			);

  			this.element = this.element.parent().data(
  				"ui-resizable", this.element.resizable( "instance" )
  			);

  			this.elementIsWrapper = true;

  			margins = {
  				marginTop: this.originalElement.css( "marginTop" ),
  				marginRight: this.originalElement.css( "marginRight" ),
  				marginBottom: this.originalElement.css( "marginBottom" ),
  				marginLeft: this.originalElement.css( "marginLeft" )
  			};

  			this.element.css( margins );

  			// Support: Safari
  			// Prevent Safari textarea resize
  			this.originalResizeStyle = this.originalElement.css( "resize" );
  			this.originalElement.css( "resize", "none" );

  			this._proportionallyResizeElements.push( this.originalElement.css( {
  				position: "static",
  				zoom: 1,
  				display: "block"
  			} ) );

  			this._proportionallyResize();
  		}

  		this._setupHandles();

  		if ( o.autoHide ) {
  			$( this.element )
  				.on( "mouseenter", function() {
  					if ( o.disabled ) {
  						return;
  					}
  					that._removeClass( "ui-resizable-autohide" );
  					that._handles.show();
  				} )
  				.on( "mouseleave", function() {
  					if ( o.disabled ) {
  						return;
  					}
  					if ( !that.resizing ) {
  						that._addClass( "ui-resizable-autohide" );
  						that._handles.hide();
  					}
  				} );
  		}

  		this._mouseInit();
  	},

  	_destroy: function() {

  		this._mouseDestroy();
  		this._addedHandles.remove();

  		var wrapper,
  			_destroy = function( exp ) {
  				$( exp )
  					.removeData( "resizable" )
  					.removeData( "ui-resizable" )
  					.off( ".resizable" );
  			};

  		// TODO: Unwrap at same DOM position
  		if ( this.elementIsWrapper ) {
  			_destroy( this.element );
  			wrapper = this.element;
  			this.originalElement.css( {
  				position: wrapper.css( "position" ),
  				width: wrapper.outerWidth(),
  				height: wrapper.outerHeight(),
  				top: wrapper.css( "top" ),
  				left: wrapper.css( "left" )
  			} ).insertAfter( wrapper );
  			wrapper.remove();
  		}

  		this.originalElement.css( "resize", this.originalResizeStyle );
  		_destroy( this.originalElement );

  		return this;
  	},

  	_setOption: function( key, value ) {
  		this._super( key, value );

  		switch ( key ) {
  		case "handles":
  			this._removeHandles();
  			this._setupHandles();
  			break;
  		case "aspectRatio":
  			this._aspectRatio = !!value;
  			break;
  		}
  	},

  	_setupHandles: function() {
  		var o = this.options, handle, i, n, hname, axis, that = this;
  		this.handles = o.handles ||
  			( !$( ".ui-resizable-handle", this.element ).length ?
  				"e,s,se" : {
  					n: ".ui-resizable-n",
  					e: ".ui-resizable-e",
  					s: ".ui-resizable-s",
  					w: ".ui-resizable-w",
  					se: ".ui-resizable-se",
  					sw: ".ui-resizable-sw",
  					ne: ".ui-resizable-ne",
  					nw: ".ui-resizable-nw"
  				} );

  		this._handles = $();
  		this._addedHandles = $();
  		if ( this.handles.constructor === String ) {

  			if ( this.handles === "all" ) {
  				this.handles = "n,e,s,w,se,sw,ne,nw";
  			}

  			n = this.handles.split( "," );
  			this.handles = {};

  			for ( i = 0; i < n.length; i++ ) {

  				handle = String.prototype.trim.call( n[ i ] );
  				hname = "ui-resizable-" + handle;
  				axis = $( "<div>" );
  				this._addClass( axis, "ui-resizable-handle " + hname );

  				axis.css( { zIndex: o.zIndex } );

  				this.handles[ handle ] = ".ui-resizable-" + handle;
  				if ( !this.element.children( this.handles[ handle ] ).length ) {
  					this.element.append( axis );
  					this._addedHandles = this._addedHandles.add( axis );
  				}
  			}

  		}

  		this._renderAxis = function( target ) {

  			var i, axis, padPos, padWrapper;

  			target = target || this.element;

  			for ( i in this.handles ) {

  				if ( this.handles[ i ].constructor === String ) {
  					this.handles[ i ] = this.element.children( this.handles[ i ] ).first().show();
  				} else if ( this.handles[ i ].jquery || this.handles[ i ].nodeType ) {
  					this.handles[ i ] = $( this.handles[ i ] );
  					this._on( this.handles[ i ], { "mousedown": that._mouseDown } );
  				}

  				if ( this.elementIsWrapper &&
  						this.originalElement[ 0 ]
  							.nodeName
  							.match( /^(textarea|input|select|button)$/i ) ) {
  					axis = $( this.handles[ i ], this.element );

  					padWrapper = /sw|ne|nw|se|n|s/.test( i ) ?
  						axis.outerHeight() :
  						axis.outerWidth();

  					padPos = [ "padding",
  						/ne|nw|n/.test( i ) ? "Top" :
  						/se|sw|s/.test( i ) ? "Bottom" :
  						/^e$/.test( i ) ? "Right" : "Left" ].join( "" );

  					target.css( padPos, padWrapper );

  					this._proportionallyResize();
  				}

  				this._handles = this._handles.add( this.handles[ i ] );
  			}
  		};

  		// TODO: make renderAxis a prototype function
  		this._renderAxis( this.element );

  		this._handles = this._handles.add( this.element.find( ".ui-resizable-handle" ) );
  		this._handles.disableSelection();

  		this._handles.on( "mouseover", function() {
  			if ( !that.resizing ) {
  				if ( this.className ) {
  					axis = this.className.match( /ui-resizable-(se|sw|ne|nw|n|e|s|w)/i );
  				}
  				that.axis = axis && axis[ 1 ] ? axis[ 1 ] : "se";
  			}
  		} );

  		if ( o.autoHide ) {
  			this._handles.hide();
  			this._addClass( "ui-resizable-autohide" );
  		}
  	},

  	_removeHandles: function() {
  		this._addedHandles.remove();
  	},

  	_mouseCapture: function( event ) {
  		var i, handle,
  			capture = false;

  		for ( i in this.handles ) {
  			handle = $( this.handles[ i ] )[ 0 ];
  			if ( handle === event.target || $.contains( handle, event.target ) ) {
  				capture = true;
  			}
  		}

  		return !this.options.disabled && capture;
  	},

  	_mouseStart: function( event ) {

  		var curleft, curtop, cursor,
  			o = this.options,
  			el = this.element;

  		this.resizing = true;

  		this._renderProxy();

  		curleft = this._num( this.helper.css( "left" ) );
  		curtop = this._num( this.helper.css( "top" ) );

  		if ( o.containment ) {
  			curleft += $( o.containment ).scrollLeft() || 0;
  			curtop += $( o.containment ).scrollTop() || 0;
  		}

  		this.offset = this.helper.offset();
  		this.position = { left: curleft, top: curtop };

  		this.size = this._helper ? {
  				width: this.helper.width(),
  				height: this.helper.height()
  			} : {
  				width: el.width(),
  				height: el.height()
  			};

  		this.originalSize = this._helper ? {
  				width: el.outerWidth(),
  				height: el.outerHeight()
  			} : {
  				width: el.width(),
  				height: el.height()
  			};

  		this.sizeDiff = {
  			width: el.outerWidth() - el.width(),
  			height: el.outerHeight() - el.height()
  		};

  		this.originalPosition = { left: curleft, top: curtop };
  		this.originalMousePosition = { left: event.pageX, top: event.pageY };

  		this.aspectRatio = ( typeof o.aspectRatio === "number" ) ?
  			o.aspectRatio :
  			( ( this.originalSize.width / this.originalSize.height ) || 1 );

  		cursor = $( ".ui-resizable-" + this.axis ).css( "cursor" );
  		$( "body" ).css( "cursor", cursor === "auto" ? this.axis + "-resize" : cursor );

  		this._addClass( "ui-resizable-resizing" );
  		this._propagate( "start", event );
  		return true;
  	},

  	_mouseDrag: function( event ) {

  		var data, props,
  			smp = this.originalMousePosition,
  			a = this.axis,
  			dx = ( event.pageX - smp.left ) || 0,
  			dy = ( event.pageY - smp.top ) || 0,
  			trigger = this._change[ a ];

  		this._updatePrevProperties();

  		if ( !trigger ) {
  			return false;
  		}

  		data = trigger.apply( this, [ event, dx, dy ] );

  		this._updateVirtualBoundaries( event.shiftKey );
  		if ( this._aspectRatio || event.shiftKey ) {
  			data = this._updateRatio( data, event );
  		}

  		data = this._respectSize( data, event );

  		this._updateCache( data );

  		this._propagate( "resize", event );

  		props = this._applyChanges();

  		if ( !this._helper && this._proportionallyResizeElements.length ) {
  			this._proportionallyResize();
  		}

  		if ( !$.isEmptyObject( props ) ) {
  			this._updatePrevProperties();
  			this._trigger( "resize", event, this.ui() );
  			this._applyChanges();
  		}

  		return false;
  	},

  	_mouseStop: function( event ) {

  		this.resizing = false;
  		var pr, ista, soffseth, soffsetw, s, left, top,
  			o = this.options, that = this;

  		if ( this._helper ) {

  			pr = this._proportionallyResizeElements;
  			ista = pr.length && ( /textarea/i ).test( pr[ 0 ].nodeName );
  			soffseth = ista && this._hasScroll( pr[ 0 ], "left" ) ? 0 : that.sizeDiff.height;
  			soffsetw = ista ? 0 : that.sizeDiff.width;

  			s = {
  				width: ( that.helper.width()  - soffsetw ),
  				height: ( that.helper.height() - soffseth )
  			};
  			left = ( parseFloat( that.element.css( "left" ) ) +
  				( that.position.left - that.originalPosition.left ) ) || null;
  			top = ( parseFloat( that.element.css( "top" ) ) +
  				( that.position.top - that.originalPosition.top ) ) || null;

  			if ( !o.animate ) {
  				this.element.css( $.extend( s, { top: top, left: left } ) );
  			}

  			that.helper.height( that.size.height );
  			that.helper.width( that.size.width );

  			if ( this._helper && !o.animate ) {
  				this._proportionallyResize();
  			}
  		}

  		$( "body" ).css( "cursor", "auto" );

  		this._removeClass( "ui-resizable-resizing" );

  		this._propagate( "stop", event );

  		if ( this._helper ) {
  			this.helper.remove();
  		}

  		return false;

  	},

  	_updatePrevProperties: function() {
  		this.prevPosition = {
  			top: this.position.top,
  			left: this.position.left
  		};
  		this.prevSize = {
  			width: this.size.width,
  			height: this.size.height
  		};
  	},

  	_applyChanges: function() {
  		var props = {};

  		if ( this.position.top !== this.prevPosition.top ) {
  			props.top = this.position.top + "px";
  		}
  		if ( this.position.left !== this.prevPosition.left ) {
  			props.left = this.position.left + "px";
  		}

  		this.helper.css( props );

  		if ( this.size.width !== this.prevSize.width ) {
  			props.width = this.size.width + "px";
  			this.helper.width( props.width );
  		}
  		if ( this.size.height !== this.prevSize.height ) {
  			props.height = this.size.height + "px";
  			this.helper.height( props.height );
  		}

  		return props;
  	},

  	_updateVirtualBoundaries: function( forceAspectRatio ) {
  		var pMinWidth, pMaxWidth, pMinHeight, pMaxHeight, b,
  			o = this.options;

  		b = {
  			minWidth: this._isNumber( o.minWidth ) ? o.minWidth : 0,
  			maxWidth: this._isNumber( o.maxWidth ) ? o.maxWidth : Infinity,
  			minHeight: this._isNumber( o.minHeight ) ? o.minHeight : 0,
  			maxHeight: this._isNumber( o.maxHeight ) ? o.maxHeight : Infinity
  		};

  		if ( this._aspectRatio || forceAspectRatio ) {
  			pMinWidth = b.minHeight * this.aspectRatio;
  			pMinHeight = b.minWidth / this.aspectRatio;
  			pMaxWidth = b.maxHeight * this.aspectRatio;
  			pMaxHeight = b.maxWidth / this.aspectRatio;

  			if ( pMinWidth > b.minWidth ) {
  				b.minWidth = pMinWidth;
  			}
  			if ( pMinHeight > b.minHeight ) {
  				b.minHeight = pMinHeight;
  			}
  			if ( pMaxWidth < b.maxWidth ) {
  				b.maxWidth = pMaxWidth;
  			}
  			if ( pMaxHeight < b.maxHeight ) {
  				b.maxHeight = pMaxHeight;
  			}
  		}
  		this._vBoundaries = b;
  	},

  	_updateCache: function( data ) {
  		this.offset = this.helper.offset();
  		if ( this._isNumber( data.left ) ) {
  			this.position.left = data.left;
  		}
  		if ( this._isNumber( data.top ) ) {
  			this.position.top = data.top;
  		}
  		if ( this._isNumber( data.height ) ) {
  			this.size.height = data.height;
  		}
  		if ( this._isNumber( data.width ) ) {
  			this.size.width = data.width;
  		}
  	},

  	_updateRatio: function( data ) {

  		var cpos = this.position,
  			csize = this.size,
  			a = this.axis;

  		if ( this._isNumber( data.height ) ) {
  			data.width = ( data.height * this.aspectRatio );
  		} else if ( this._isNumber( data.width ) ) {
  			data.height = ( data.width / this.aspectRatio );
  		}

  		if ( a === "sw" ) {
  			data.left = cpos.left + ( csize.width - data.width );
  			data.top = null;
  		}
  		if ( a === "nw" ) {
  			data.top = cpos.top + ( csize.height - data.height );
  			data.left = cpos.left + ( csize.width - data.width );
  		}

  		return data;
  	},

  	_respectSize: function( data ) {

  		var o = this._vBoundaries,
  			a = this.axis,
  			ismaxw = this._isNumber( data.width ) && o.maxWidth && ( o.maxWidth < data.width ),
  			ismaxh = this._isNumber( data.height ) && o.maxHeight && ( o.maxHeight < data.height ),
  			isminw = this._isNumber( data.width ) && o.minWidth && ( o.minWidth > data.width ),
  			isminh = this._isNumber( data.height ) && o.minHeight && ( o.minHeight > data.height ),
  			dw = this.originalPosition.left + this.originalSize.width,
  			dh = this.originalPosition.top + this.originalSize.height,
  			cw = /sw|nw|w/.test( a ), ch = /nw|ne|n/.test( a );
  		if ( isminw ) {
  			data.width = o.minWidth;
  		}
  		if ( isminh ) {
  			data.height = o.minHeight;
  		}
  		if ( ismaxw ) {
  			data.width = o.maxWidth;
  		}
  		if ( ismaxh ) {
  			data.height = o.maxHeight;
  		}

  		if ( isminw && cw ) {
  			data.left = dw - o.minWidth;
  		}
  		if ( ismaxw && cw ) {
  			data.left = dw - o.maxWidth;
  		}
  		if ( isminh && ch ) {
  			data.top = dh - o.minHeight;
  		}
  		if ( ismaxh && ch ) {
  			data.top = dh - o.maxHeight;
  		}

  		// Fixing jump error on top/left - bug #2330
  		if ( !data.width && !data.height && !data.left && data.top ) {
  			data.top = null;
  		} else if ( !data.width && !data.height && !data.top && data.left ) {
  			data.left = null;
  		}

  		return data;
  	},

  	_getPaddingPlusBorderDimensions: function( element ) {
  		var i = 0,
  			widths = [],
  			borders = [
  				element.css( "borderTopWidth" ),
  				element.css( "borderRightWidth" ),
  				element.css( "borderBottomWidth" ),
  				element.css( "borderLeftWidth" )
  			],
  			paddings = [
  				element.css( "paddingTop" ),
  				element.css( "paddingRight" ),
  				element.css( "paddingBottom" ),
  				element.css( "paddingLeft" )
  			];

  		for ( ; i < 4; i++ ) {
  			widths[ i ] = ( parseFloat( borders[ i ] ) || 0 );
  			widths[ i ] += ( parseFloat( paddings[ i ] ) || 0 );
  		}

  		return {
  			height: widths[ 0 ] + widths[ 2 ],
  			width: widths[ 1 ] + widths[ 3 ]
  		};
  	},

  	_proportionallyResize: function() {

  		if ( !this._proportionallyResizeElements.length ) {
  			return;
  		}

  		var prel,
  			i = 0,
  			element = this.helper || this.element;

  		for ( ; i < this._proportionallyResizeElements.length; i++ ) {

  			prel = this._proportionallyResizeElements[ i ];

  			// TODO: Seems like a bug to cache this.outerDimensions
  			// considering that we are in a loop.
  			if ( !this.outerDimensions ) {
  				this.outerDimensions = this._getPaddingPlusBorderDimensions( prel );
  			}

  			prel.css( {
  				height: ( element.height() - this.outerDimensions.height ) || 0,
  				width: ( element.width() - this.outerDimensions.width ) || 0
  			} );

  		}

  	},

  	_renderProxy: function() {

  		var el = this.element, o = this.options;
  		this.elementOffset = el.offset();

  		if ( this._helper ) {

  			this.helper = this.helper || $( "<div></div>" ).css( { overflow: "hidden" } );

  			this._addClass( this.helper, this._helper );
  			this.helper.css( {
  				width: this.element.outerWidth(),
  				height: this.element.outerHeight(),
  				position: "absolute",
  				left: this.elementOffset.left + "px",
  				top: this.elementOffset.top + "px",
  				zIndex: ++o.zIndex //TODO: Don't modify option
  			} );

  			this.helper
  				.appendTo( "body" )
  				.disableSelection();

  		} else {
  			this.helper = this.element;
  		}

  	},

  	_change: {
  		e: function( event, dx ) {
  			return { width: this.originalSize.width + dx };
  		},
  		w: function( event, dx ) {
  			var cs = this.originalSize, sp = this.originalPosition;
  			return { left: sp.left + dx, width: cs.width - dx };
  		},
  		n: function( event, dx, dy ) {
  			var cs = this.originalSize, sp = this.originalPosition;
  			return { top: sp.top + dy, height: cs.height - dy };
  		},
  		s: function( event, dx, dy ) {
  			return { height: this.originalSize.height + dy };
  		},
  		se: function( event, dx, dy ) {
  			return $.extend( this._change.s.apply( this, arguments ),
  				this._change.e.apply( this, [ event, dx, dy ] ) );
  		},
  		sw: function( event, dx, dy ) {
  			return $.extend( this._change.s.apply( this, arguments ),
  				this._change.w.apply( this, [ event, dx, dy ] ) );
  		},
  		ne: function( event, dx, dy ) {
  			return $.extend( this._change.n.apply( this, arguments ),
  				this._change.e.apply( this, [ event, dx, dy ] ) );
  		},
  		nw: function( event, dx, dy ) {
  			return $.extend( this._change.n.apply( this, arguments ),
  				this._change.w.apply( this, [ event, dx, dy ] ) );
  		}
  	},

  	_propagate: function( n, event ) {
  		$.ui.plugin.call( this, n, [ event, this.ui() ] );
  		if ( n !== "resize" ) {
  			this._trigger( n, event, this.ui() );
  		}
  	},

  	plugins: {},

  	ui: function() {
  		return {
  			originalElement: this.originalElement,
  			element: this.element,
  			helper: this.helper,
  			position: this.position,
  			size: this.size,
  			originalSize: this.originalSize,
  			originalPosition: this.originalPosition
  		};
  	}

  } );

  /*
   * Resizable Extensions
   */

  $.ui.plugin.add( "resizable", "animate", {

  	stop: function( event ) {
  		var that = $( this ).resizable( "instance" ),
  			o = that.options,
  			pr = that._proportionallyResizeElements,
  			ista = pr.length && ( /textarea/i ).test( pr[ 0 ].nodeName ),
  			soffseth = ista && that._hasScroll( pr[ 0 ], "left" ) ? 0 : that.sizeDiff.height,
  			soffsetw = ista ? 0 : that.sizeDiff.width,
  			style = {
  				width: ( that.size.width - soffsetw ),
  				height: ( that.size.height - soffseth )
  			},
  			left = ( parseFloat( that.element.css( "left" ) ) +
  				( that.position.left - that.originalPosition.left ) ) || null,
  			top = ( parseFloat( that.element.css( "top" ) ) +
  				( that.position.top - that.originalPosition.top ) ) || null;

  		that.element.animate(
  			$.extend( style, top && left ? { top: top, left: left } : {} ), {
  				duration: o.animateDuration,
  				easing: o.animateEasing,
  				step: function() {

  					var data = {
  						width: parseFloat( that.element.css( "width" ) ),
  						height: parseFloat( that.element.css( "height" ) ),
  						top: parseFloat( that.element.css( "top" ) ),
  						left: parseFloat( that.element.css( "left" ) )
  					};

  					if ( pr && pr.length ) {
  						$( pr[ 0 ] ).css( { width: data.width, height: data.height } );
  					}

  					// Propagating resize, and updating values for each animation step
  					that._updateCache( data );
  					that._propagate( "resize", event );

  				}
  			}
  		);
  	}

  } );

  $.ui.plugin.add( "resizable", "containment", {

  	start: function() {
  		var element, p, co, ch, cw, width, height,
  			that = $( this ).resizable( "instance" ),
  			o = that.options,
  			el = that.element,
  			oc = o.containment,
  			ce = ( oc instanceof $ ) ?
  				oc.get( 0 ) :
  				( /parent/.test( oc ) ) ? el.parent().get( 0 ) : oc;

  		if ( !ce ) {
  			return;
  		}

  		that.containerElement = $( ce );

  		if ( /document/.test( oc ) || oc === document ) {
  			that.containerOffset = {
  				left: 0,
  				top: 0
  			};
  			that.containerPosition = {
  				left: 0,
  				top: 0
  			};

  			that.parentData = {
  				element: $( document ),
  				left: 0,
  				top: 0,
  				width: $( document ).width(),
  				height: $( document ).height() || document.body.parentNode.scrollHeight
  			};
  		} else {
  			element = $( ce );
  			p = [];
  			$( [ "Top", "Right", "Left", "Bottom" ] ).each( function( i, name ) {
  				p[ i ] = that._num( element.css( "padding" + name ) );
  			} );

  			that.containerOffset = element.offset();
  			that.containerPosition = element.position();
  			that.containerSize = {
  				height: ( element.innerHeight() - p[ 3 ] ),
  				width: ( element.innerWidth() - p[ 1 ] )
  			};

  			co = that.containerOffset;
  			ch = that.containerSize.height;
  			cw = that.containerSize.width;
  			width = ( that._hasScroll( ce, "left" ) ? ce.scrollWidth : cw );
  			height = ( that._hasScroll( ce ) ? ce.scrollHeight : ch );

  			that.parentData = {
  				element: ce,
  				left: co.left,
  				top: co.top,
  				width: width,
  				height: height
  			};
  		}
  	},

  	resize: function( event ) {
  		var woset, hoset, isParent, isOffsetRelative,
  			that = $( this ).resizable( "instance" ),
  			o = that.options,
  			co = that.containerOffset,
  			cp = that.position,
  			pRatio = that._aspectRatio || event.shiftKey,
  			cop = {
  				top: 0,
  				left: 0
  			},
  			ce = that.containerElement,
  			continueResize = true;

  		if ( ce[ 0 ] !== document && ( /static/ ).test( ce.css( "position" ) ) ) {
  			cop = co;
  		}

  		if ( cp.left < ( that._helper ? co.left : 0 ) ) {
  			that.size.width = that.size.width +
  				( that._helper ?
  					( that.position.left - co.left ) :
  					( that.position.left - cop.left ) );

  			if ( pRatio ) {
  				that.size.height = that.size.width / that.aspectRatio;
  				continueResize = false;
  			}
  			that.position.left = o.helper ? co.left : 0;
  		}

  		if ( cp.top < ( that._helper ? co.top : 0 ) ) {
  			that.size.height = that.size.height +
  				( that._helper ?
  					( that.position.top - co.top ) :
  					that.position.top );

  			if ( pRatio ) {
  				that.size.width = that.size.height * that.aspectRatio;
  				continueResize = false;
  			}
  			that.position.top = that._helper ? co.top : 0;
  		}

  		isParent = that.containerElement.get( 0 ) === that.element.parent().get( 0 );
  		isOffsetRelative = /relative|absolute/.test( that.containerElement.css( "position" ) );

  		if ( isParent && isOffsetRelative ) {
  			that.offset.left = that.parentData.left + that.position.left;
  			that.offset.top = that.parentData.top + that.position.top;
  		} else {
  			that.offset.left = that.element.offset().left;
  			that.offset.top = that.element.offset().top;
  		}

  		woset = Math.abs( that.sizeDiff.width +
  			( that._helper ?
  				that.offset.left - cop.left :
  				( that.offset.left - co.left ) ) );

  		hoset = Math.abs( that.sizeDiff.height +
  			( that._helper ?
  				that.offset.top - cop.top :
  				( that.offset.top - co.top ) ) );

  		if ( woset + that.size.width >= that.parentData.width ) {
  			that.size.width = that.parentData.width - woset;
  			if ( pRatio ) {
  				that.size.height = that.size.width / that.aspectRatio;
  				continueResize = false;
  			}
  		}

  		if ( hoset + that.size.height >= that.parentData.height ) {
  			that.size.height = that.parentData.height - hoset;
  			if ( pRatio ) {
  				that.size.width = that.size.height * that.aspectRatio;
  				continueResize = false;
  			}
  		}

  		if ( !continueResize ) {
  			that.position.left = that.prevPosition.left;
  			that.position.top = that.prevPosition.top;
  			that.size.width = that.prevSize.width;
  			that.size.height = that.prevSize.height;
  		}
  	},

  	stop: function() {
  		var that = $( this ).resizable( "instance" ),
  			o = that.options,
  			co = that.containerOffset,
  			cop = that.containerPosition,
  			ce = that.containerElement,
  			helper = $( that.helper ),
  			ho = helper.offset(),
  			w = helper.outerWidth() - that.sizeDiff.width,
  			h = helper.outerHeight() - that.sizeDiff.height;

  		if ( that._helper && !o.animate && ( /relative/ ).test( ce.css( "position" ) ) ) {
  			$( this ).css( {
  				left: ho.left - cop.left - co.left,
  				width: w,
  				height: h
  			} );
  		}

  		if ( that._helper && !o.animate && ( /static/ ).test( ce.css( "position" ) ) ) {
  			$( this ).css( {
  				left: ho.left - cop.left - co.left,
  				width: w,
  				height: h
  			} );
  		}
  	}
  } );

  $.ui.plugin.add( "resizable", "alsoResize", {

  	start: function() {
  		var that = $( this ).resizable( "instance" ),
  			o = that.options;

  		$( o.alsoResize ).each( function() {
  			var el = $( this );
  			el.data( "ui-resizable-alsoresize", {
  				width: parseFloat( el.css( "width" ) ), height: parseFloat( el.css( "height" ) ),
  				left: parseFloat( el.css( "left" ) ), top: parseFloat( el.css( "top" ) )
  			} );
  		} );
  	},

  	resize: function( event, ui ) {
  		var that = $( this ).resizable( "instance" ),
  			o = that.options,
  			os = that.originalSize,
  			op = that.originalPosition,
  			delta = {
  				height: ( that.size.height - os.height ) || 0,
  				width: ( that.size.width - os.width ) || 0,
  				top: ( that.position.top - op.top ) || 0,
  				left: ( that.position.left - op.left ) || 0
  			};

  			$( o.alsoResize ).each( function() {
  				var el = $( this ), start = $( this ).data( "ui-resizable-alsoresize" ), style = {},
  					css = el.parents( ui.originalElement[ 0 ] ).length ?
  							[ "width", "height" ] :
  							[ "width", "height", "top", "left" ];

  				$.each( css, function( i, prop ) {
  					var sum = ( start[ prop ] || 0 ) + ( delta[ prop ] || 0 );
  					if ( sum && sum >= 0 ) {
  						style[ prop ] = sum || null;
  					}
  				} );

  				el.css( style );
  			} );
  	},

  	stop: function() {
  		$( this ).removeData( "ui-resizable-alsoresize" );
  	}
  } );

  $.ui.plugin.add( "resizable", "ghost", {

  	start: function() {

  		var that = $( this ).resizable( "instance" ), cs = that.size;

  		that.ghost = that.originalElement.clone();
  		that.ghost.css( {
  			opacity: 0.25,
  			display: "block",
  			position: "relative",
  			height: cs.height,
  			width: cs.width,
  			margin: 0,
  			left: 0,
  			top: 0
  		} );

  		that._addClass( that.ghost, "ui-resizable-ghost" );

  		// DEPRECATED
  		// TODO: remove after 1.12
  		if ( $.uiBackCompat === true && typeof that.options.ghost === "string" ) {

  			// Ghost option
  			that.ghost.addClass( this.options.ghost );
  		}

  		that.ghost.appendTo( that.helper );

  	},

  	resize: function() {
  		var that = $( this ).resizable( "instance" );
  		if ( that.ghost ) {
  			that.ghost.css( {
  				position: "relative",
  				height: that.size.height,
  				width: that.size.width
  			} );
  		}
  	},

  	stop: function() {
  		var that = $( this ).resizable( "instance" );
  		if ( that.ghost && that.helper ) {
  			that.helper.get( 0 ).removeChild( that.ghost.get( 0 ) );
  		}
  	}

  } );

  $.ui.plugin.add( "resizable", "grid", {

  	resize: function() {
  		var outerDimensions,
  			that = $( this ).resizable( "instance" ),
  			o = that.options,
  			cs = that.size,
  			os = that.originalSize,
  			op = that.originalPosition,
  			a = that.axis,
  			grid = typeof o.grid === "number" ? [ o.grid, o.grid ] : o.grid,
  			gridX = ( grid[ 0 ] || 1 ),
  			gridY = ( grid[ 1 ] || 1 ),
  			ox = Math.round( ( cs.width - os.width ) / gridX ) * gridX,
  			oy = Math.round( ( cs.height - os.height ) / gridY ) * gridY,
  			newWidth = os.width + ox,
  			newHeight = os.height + oy,
  			isMaxWidth = o.maxWidth && ( o.maxWidth < newWidth ),
  			isMaxHeight = o.maxHeight && ( o.maxHeight < newHeight ),
  			isMinWidth = o.minWidth && ( o.minWidth > newWidth ),
  			isMinHeight = o.minHeight && ( o.minHeight > newHeight );

  		o.grid = grid;

  		if ( isMinWidth ) {
  			newWidth += gridX;
  		}
  		if ( isMinHeight ) {
  			newHeight += gridY;
  		}
  		if ( isMaxWidth ) {
  			newWidth -= gridX;
  		}
  		if ( isMaxHeight ) {
  			newHeight -= gridY;
  		}

  		if ( /^(se|s|e)$/.test( a ) ) {
  			that.size.width = newWidth;
  			that.size.height = newHeight;
  		} else if ( /^(ne)$/.test( a ) ) {
  			that.size.width = newWidth;
  			that.size.height = newHeight;
  			that.position.top = op.top - oy;
  		} else if ( /^(sw)$/.test( a ) ) {
  			that.size.width = newWidth;
  			that.size.height = newHeight;
  			that.position.left = op.left - ox;
  		} else {
  			if ( newHeight - gridY <= 0 || newWidth - gridX <= 0 ) {
  				outerDimensions = that._getPaddingPlusBorderDimensions( this );
  			}

  			if ( newHeight - gridY > 0 ) {
  				that.size.height = newHeight;
  				that.position.top = op.top - oy;
  			} else {
  				newHeight = gridY - outerDimensions.height;
  				that.size.height = newHeight;
  				that.position.top = op.top + os.height - newHeight;
  			}
  			if ( newWidth - gridX > 0 ) {
  				that.size.width = newWidth;
  				that.position.left = op.left - ox;
  			} else {
  				newWidth = gridX - outerDimensions.width;
  				that.size.width = newWidth;
  				that.position.left = op.left + os.width - newWidth;
  			}
  		}
  	}

  } );

  $.ui.resizable;


  /*!
   * jQuery UI Dialog 1.14.0
   * https://jqueryui.com
   *
   * Copyright OpenJS Foundation and other contributors
   * Released under the MIT license.
   * https://jquery.org/license
   */

  //>>label: Dialog
  //>>group: Widgets
  //>>description: Displays customizable dialog windows.
  //>>docs: https://api.jqueryui.com/dialog/
  //>>demos: https://jqueryui.com/dialog/
  //>>css.structure: ../../themes/base/core.css
  //>>css.structure: ../../themes/base/dialog.css
  //>>css.theme: ../../themes/base/theme.css


  $.widget( "ui.dialog", {
  	version: "1.14.0",
  	options: {
  		appendTo: "body",
  		autoOpen: true,
  		buttons: [],
  		classes: {
  			"ui-dialog": "ui-corner-all",
  			"ui-dialog-titlebar": "ui-corner-all"
  		},
  		closeOnEscape: true,
  		closeText: "Close",
  		draggable: true,
  		hide: null,
  		height: "auto",
  		maxHeight: null,
  		maxWidth: null,
  		minHeight: 150,
  		minWidth: 150,
  		modal: false,
  		position: {
  			my: "center",
  			at: "center",
  			of: window,
  			collision: "fit",

  			// Ensure the titlebar is always visible
  			using: function( pos ) {
  				var topOffset = $( this ).css( pos ).offset().top;
  				if ( topOffset < 0 ) {
  					$( this ).css( "top", pos.top - topOffset );
  				}
  			}
  		},
  		resizable: true,
  		show: null,
  		title: null,
  		width: 300,

  		// Callbacks
  		beforeClose: null,
  		close: null,
  		drag: null,
  		dragStart: null,
  		dragStop: null,
  		focus: null,
  		open: null,
  		resize: null,
  		resizeStart: null,
  		resizeStop: null
  	},

  	sizeRelatedOptions: {
  		buttons: true,
  		height: true,
  		maxHeight: true,
  		maxWidth: true,
  		minHeight: true,
  		minWidth: true,
  		width: true
  	},

  	resizableRelatedOptions: {
  		maxHeight: true,
  		maxWidth: true,
  		minHeight: true,
  		minWidth: true
  	},

  	_create: function() {
  		this.originalCss = {
  			display: this.element[ 0 ].style.display,
  			width: this.element[ 0 ].style.width,
  			minHeight: this.element[ 0 ].style.minHeight,
  			maxHeight: this.element[ 0 ].style.maxHeight,
  			height: this.element[ 0 ].style.height
  		};
  		this.originalPosition = {
  			parent: this.element.parent(),
  			index: this.element.parent().children().index( this.element )
  		};
  		this.originalTitle = this.element.attr( "title" );
  		if ( this.options.title == null && this.originalTitle != null ) {
  			this.options.title = this.originalTitle;
  		}

  		// Dialogs can't be disabled
  		if ( this.options.disabled ) {
  			this.options.disabled = false;
  		}

  		this._createWrapper();

  		this.element
  			.show()
  			.removeAttr( "title" )
  			.appendTo( this.uiDialog );

  		this._addClass( "ui-dialog-content", "ui-widget-content" );

  		this._createTitlebar();
  		this._createButtonPane();

  		if ( this.options.draggable && $.fn.draggable ) {
  			this._makeDraggable();
  		}
  		if ( this.options.resizable && $.fn.resizable ) {
  			this._makeResizable();
  		}

  		this._isOpen = false;

  		this._trackFocus();
  	},

  	_init: function() {
  		if ( this.options.autoOpen ) {
  			this.open();
  		}
  	},

  	_appendTo: function() {
  		var element = this.options.appendTo;
  		if ( element && ( element.jquery || element.nodeType ) ) {
  			return $( element );
  		}
  		return this.document.find( element || "body" ).eq( 0 );
  	},

  	_destroy: function() {
  		var next,
  			originalPosition = this.originalPosition;

  		this._untrackInstance();
  		this._destroyOverlay();

  		this.element
  			.removeUniqueId()
  			.css( this.originalCss )

  			// Without detaching first, the following becomes really slow
  			.detach();

  		this.uiDialog.remove();

  		if ( this.originalTitle ) {
  			this.element.attr( "title", this.originalTitle );
  		}

  		next = originalPosition.parent.children().eq( originalPosition.index );

  		// Don't try to place the dialog next to itself (#8613)
  		if ( next.length && next[ 0 ] !== this.element[ 0 ] ) {
  			next.before( this.element );
  		} else {
  			originalPosition.parent.append( this.element );
  		}
  	},

  	widget: function() {
  		return this.uiDialog;
  	},

  	disable: $.noop,
  	enable: $.noop,

  	close: function( event ) {
  		var that = this;

  		if ( !this._isOpen || this._trigger( "beforeClose", event ) === false ) {
  			return;
  		}

  		this._isOpen = false;
  		this._focusedElement = null;
  		this._destroyOverlay();
  		this._untrackInstance();

  		if ( !this.opener.filter( ":focusable" ).trigger( "focus" ).length ) {

  			// Hiding a focused element doesn't trigger blur in WebKit
  			// so in case we have nothing to focus on, explicitly blur the active element
  			// https://bugs.webkit.org/show_bug.cgi?id=47182
  			$( this.document[ 0 ].activeElement ).trigger( "blur" );
  		}

  		this._hide( this.uiDialog, this.options.hide, function() {
  			that._trigger( "close", event );
  		} );
  	},

  	isOpen: function() {
  		return this._isOpen;
  	},

  	moveToTop: function() {
  		this._moveToTop();
  	},

  	_moveToTop: function( event, silent ) {
  		var moved = false,
  			zIndices = this.uiDialog.siblings( ".ui-front:visible" ).map( function() {
  				return +$( this ).css( "z-index" );
  			} ).get(),
  			zIndexMax = Math.max.apply( null, zIndices );

  		if ( zIndexMax >= +this.uiDialog.css( "z-index" ) ) {
  			this.uiDialog.css( "z-index", zIndexMax + 1 );
  			moved = true;
  		}

  		if ( moved && !silent ) {
  			this._trigger( "focus", event );
  		}
  		return moved;
  	},

  	open: function() {
  		var that = this;
  		if ( this._isOpen ) {
  			if ( this._moveToTop() ) {
  				this._focusTabbable();
  			}
  			return;
  		}

  		this._isOpen = true;
  		this.opener = $( this.document[ 0 ].activeElement );

  		this._size();
  		this._position();
  		this._createOverlay();
  		this._moveToTop( null, true );

  		// Ensure the overlay is moved to the top with the dialog, but only when
  		// opening. The overlay shouldn't move after the dialog is open so that
  		// modeless dialogs opened after the modal dialog stack properly.
  		if ( this.overlay ) {
  			this.overlay.css( "z-index", this.uiDialog.css( "z-index" ) - 1 );
  		}

  		this._show( this.uiDialog, this.options.show, function() {
  			that._focusTabbable();
  			that._trigger( "focus" );
  		} );

  		// Track the dialog immediately upon opening in case a focus event
  		// somehow occurs outside of the dialog before an element inside the
  		// dialog is focused (#10152)
  		this._makeFocusTarget();

  		this._trigger( "open" );
  	},

  	_focusTabbable: function() {

  		// Set focus to the first match:
  		// 1. An element that was focused previously
  		// 2. First element inside the dialog matching [autofocus]
  		// 3. Tabbable element inside the content element
  		// 4. Tabbable element inside the buttonpane
  		// 5. The close button
  		// 6. The dialog itself
  		var hasFocus = this._focusedElement;
  		if ( !hasFocus ) {
  			hasFocus = this.element.find( "[autofocus]" );
  		}
  		if ( !hasFocus.length ) {
  			hasFocus = this.element.find( ":tabbable" );
  		}
  		if ( !hasFocus.length ) {
  			hasFocus = this.uiDialogButtonPane.find( ":tabbable" );
  		}
  		if ( !hasFocus.length ) {
  			hasFocus = this.uiDialogTitlebarClose.filter( ":tabbable" );
  		}
  		if ( !hasFocus.length ) {
  			hasFocus = this.uiDialog;
  		}
  		hasFocus.eq( 0 ).trigger( "focus" );
  	},

  	_restoreTabbableFocus: function() {
  		var activeElement = this.document[ 0 ].activeElement,
  			isActive = this.uiDialog[ 0 ] === activeElement ||
  				$.contains( this.uiDialog[ 0 ], activeElement );
  		if ( !isActive ) {
  			this._focusTabbable();
  		}
  	},

  	_keepFocus: function( event ) {
  		event.preventDefault();
  		this._restoreTabbableFocus();
  	},

  	_createWrapper: function() {
  		this.uiDialog = $( "<div>" )
  			.hide()
  			.attr( {

  				// Setting tabIndex makes the div focusable
  				tabIndex: -1,
  				role: "dialog",
  				"aria-modal": this.options.modal ? "true" : null
  			} )
  			.appendTo( this._appendTo() );

  		this._addClass( this.uiDialog, "ui-dialog", "ui-widget ui-widget-content ui-front" );
  		this._on( this.uiDialog, {
  			keydown: function( event ) {
  				if ( this.options.closeOnEscape && !event.isDefaultPrevented() && event.keyCode &&
  						event.keyCode === $.ui.keyCode.ESCAPE ) {
  					event.preventDefault();
  					this.close( event );
  					return;
  				}

  				// Prevent tabbing out of dialogs
  				if ( event.keyCode !== $.ui.keyCode.TAB || event.isDefaultPrevented() ) {
  					return;
  				}
  				var tabbables = this.uiDialog.find( ":tabbable" ),
  					first = tabbables.first(),
  					last = tabbables.last();

  				if ( ( event.target === last[ 0 ] || event.target === this.uiDialog[ 0 ] ) &&
  						!event.shiftKey ) {
  					this._delay( function() {
  						first.trigger( "focus" );
  					} );
  					event.preventDefault();
  				} else if ( ( event.target === first[ 0 ] ||
  						event.target === this.uiDialog[ 0 ] ) && event.shiftKey ) {
  					this._delay( function() {
  						last.trigger( "focus" );
  					} );
  					event.preventDefault();
  				}
  			},
  			mousedown: function( event ) {
  				if ( this._moveToTop( event ) ) {
  					this._focusTabbable();
  				}
  			}
  		} );

  		// We assume that any existing aria-describedby attribute means
  		// that the dialog content is marked up properly
  		// otherwise we brute force the content as the description
  		if ( !this.element.find( "[aria-describedby]" ).length ) {
  			this.uiDialog.attr( {
  				"aria-describedby": this.element.uniqueId().attr( "id" )
  			} );
  		}
  	},

  	_createTitlebar: function() {
  		var uiDialogTitle;

  		this.uiDialogTitlebar = $( "<div>" );
  		this._addClass( this.uiDialogTitlebar,
  			"ui-dialog-titlebar", "ui-widget-header ui-helper-clearfix" );
  		this._on( this.uiDialogTitlebar, {
  			mousedown: function( event ) {

  				// Don't prevent click on close button (#8838)
  				// Focusing a dialog that is partially scrolled out of view
  				// causes the browser to scroll it into view, preventing the click event
  				if ( !$( event.target ).closest( ".ui-dialog-titlebar-close" ) ) {

  					// Dialog isn't getting focus when dragging (#8063)
  					this.uiDialog.trigger( "focus" );
  				}
  			}
  		} );

  		this.uiDialogTitlebarClose = $( "<button type='button'></button>" )
  			.button( {
  				label: $( "<a>" ).text( this.options.closeText ).html(),
  				icon: "ui-icon-closethick",
  				showLabel: false
  			} )
  			.appendTo( this.uiDialogTitlebar );

  		this._addClass( this.uiDialogTitlebarClose, "ui-dialog-titlebar-close" );
  		this._on( this.uiDialogTitlebarClose, {
  			click: function( event ) {
  				event.preventDefault();
  				this.close( event );
  			}
  		} );

  		uiDialogTitle = $( "<span>" ).uniqueId().prependTo( this.uiDialogTitlebar );
  		this._addClass( uiDialogTitle, "ui-dialog-title" );
  		this._title( uiDialogTitle );

  		this.uiDialogTitlebar.prependTo( this.uiDialog );

  		this.uiDialog.attr( {
  			"aria-labelledby": uiDialogTitle.attr( "id" )
  		} );
  	},

  	_title: function( title ) {
  		if ( this.options.title ) {
  			title.text( this.options.title );
  		} else {
  			title.html( "&#160;" );
  		}
  	},

  	_createButtonPane: function() {
  		this.uiDialogButtonPane = $( "<div>" );
  		this._addClass( this.uiDialogButtonPane, "ui-dialog-buttonpane",
  			"ui-widget-content ui-helper-clearfix" );

  		this.uiButtonSet = $( "<div>" )
  			.appendTo( this.uiDialogButtonPane );
  		this._addClass( this.uiButtonSet, "ui-dialog-buttonset" );

  		this._createButtons();
  	},

  	_createButtons: function() {
  		var that = this,
  			buttons = this.options.buttons;

  		// If we already have a button pane, remove it
  		this.uiDialogButtonPane.remove();
  		this.uiButtonSet.empty();

  		if ( $.isEmptyObject( buttons ) || ( Array.isArray( buttons ) && !buttons.length ) ) {
  			this._removeClass( this.uiDialog, "ui-dialog-buttons" );
  			return;
  		}

  		$.each( buttons, function( name, props ) {
  			var click, buttonOptions;
  			props = typeof props === "function" ?
  				{ click: props, text: name } :
  				props;

  			// Default to a non-submitting button
  			props = $.extend( { type: "button" }, props );

  			// Change the context for the click callback to be the main element
  			click = props.click;
  			buttonOptions = {
  				icon: props.icon,
  				iconPosition: props.iconPosition,
  				showLabel: props.showLabel,

  				// Deprecated options
  				icons: props.icons,
  				text: props.text
  			};

  			delete props.click;
  			delete props.icon;
  			delete props.iconPosition;
  			delete props.showLabel;

  			// Deprecated options
  			delete props.icons;
  			if ( typeof props.text === "boolean" ) {
  				delete props.text;
  			}

  			$( "<button></button>", props )
  				.button( buttonOptions )
  				.appendTo( that.uiButtonSet )
  				.on( "click", function() {
  					click.apply( that.element[ 0 ], arguments );
  				} );
  		} );
  		this._addClass( this.uiDialog, "ui-dialog-buttons" );
  		this.uiDialogButtonPane.appendTo( this.uiDialog );
  	},

  	_makeDraggable: function() {
  		var that = this,
  			options = this.options;

  		function filteredUi( ui ) {
  			return {
  				position: ui.position,
  				offset: ui.offset
  			};
  		}

  		this.uiDialog.draggable( {
  			cancel: ".ui-dialog-content, .ui-dialog-titlebar-close",
  			handle: ".ui-dialog-titlebar",
  			containment: "document",
  			start: function( event, ui ) {
  				that._addClass( $( this ), "ui-dialog-dragging" );
  				that._blockFrames();
  				that._trigger( "dragStart", event, filteredUi( ui ) );
  			},
  			drag: function( event, ui ) {
  				that._trigger( "drag", event, filteredUi( ui ) );
  			},
  			stop: function( event, ui ) {
  				var left = ui.offset.left - that.document.scrollLeft(),
  					top = ui.offset.top - that.document.scrollTop();

  				options.position = {
  					my: "left top",
  					at: "left" + ( left >= 0 ? "+" : "" ) + left + " " +
  						"top" + ( top >= 0 ? "+" : "" ) + top,
  					of: that.window
  				};
  				that._removeClass( $( this ), "ui-dialog-dragging" );
  				that._unblockFrames();
  				that._trigger( "dragStop", event, filteredUi( ui ) );
  			}
  		} );
  	},

  	_makeResizable: function() {
  		var that = this,
  			options = this.options,
  			handles = options.resizable,

  			// .ui-resizable has position: relative defined in the stylesheet
  			// but dialogs have to use absolute or fixed positioning
  			position = this.uiDialog.css( "position" ),
  			resizeHandles = typeof handles === "string" ?
  				handles :
  				"n,e,s,w,se,sw,ne,nw";

  		function filteredUi( ui ) {
  			return {
  				originalPosition: ui.originalPosition,
  				originalSize: ui.originalSize,
  				position: ui.position,
  				size: ui.size
  			};
  		}

  		this.uiDialog.resizable( {
  			cancel: ".ui-dialog-content",
  			containment: "document",
  			alsoResize: this.element,
  			maxWidth: options.maxWidth,
  			maxHeight: options.maxHeight,
  			minWidth: options.minWidth,
  			minHeight: this._minHeight(),
  			handles: resizeHandles,
  			start: function( event, ui ) {
  				that._addClass( $( this ), "ui-dialog-resizing" );
  				that._blockFrames();
  				that._trigger( "resizeStart", event, filteredUi( ui ) );
  			},
  			resize: function( event, ui ) {
  				that._trigger( "resize", event, filteredUi( ui ) );
  			},
  			stop: function( event, ui ) {
  				var offset = that.uiDialog.offset(),
  					left = offset.left - that.document.scrollLeft(),
  					top = offset.top - that.document.scrollTop();

  				options.height = that.uiDialog.height();
  				options.width = that.uiDialog.width();
  				options.position = {
  					my: "left top",
  					at: "left" + ( left >= 0 ? "+" : "" ) + left + " " +
  						"top" + ( top >= 0 ? "+" : "" ) + top,
  					of: that.window
  				};
  				that._removeClass( $( this ), "ui-dialog-resizing" );
  				that._unblockFrames();
  				that._trigger( "resizeStop", event, filteredUi( ui ) );
  			}
  		} )
  			.css( "position", position );
  	},

  	_trackFocus: function() {
  		this._on( this.widget(), {
  			focusin: function( event ) {
  				this._makeFocusTarget();
  				this._focusedElement = $( event.target );
  			}
  		} );
  	},

  	_makeFocusTarget: function() {
  		this._untrackInstance();
  		this._trackingInstances().unshift( this );
  	},

  	_untrackInstance: function() {
  		var instances = this._trackingInstances(),
  			exists = $.inArray( this, instances );
  		if ( exists !== -1 ) {
  			instances.splice( exists, 1 );
  		}
  	},

  	_trackingInstances: function() {
  		var instances = this.document.data( "ui-dialog-instances" );
  		if ( !instances ) {
  			instances = [];
  			this.document.data( "ui-dialog-instances", instances );
  		}
  		return instances;
  	},

  	_minHeight: function() {
  		var options = this.options;

  		return options.height === "auto" ?
  			options.minHeight :
  			Math.min( options.minHeight, options.height );
  	},

  	_position: function() {

  		// Need to show the dialog to get the actual offset in the position plugin
  		var isVisible = this.uiDialog.is( ":visible" );
  		if ( !isVisible ) {
  			this.uiDialog.show();
  		}
  		this.uiDialog.position( this.options.position );
  		if ( !isVisible ) {
  			this.uiDialog.hide();
  		}
  	},

  	_setOptions: function( options ) {
  		var that = this,
  			resize = false,
  			resizableOptions = {};

  		$.each( options, function( key, value ) {
  			that._setOption( key, value );

  			if ( key in that.sizeRelatedOptions ) {
  				resize = true;
  			}
  			if ( key in that.resizableRelatedOptions ) {
  				resizableOptions[ key ] = value;
  			}
  		} );

  		if ( resize ) {
  			this._size();
  			this._position();
  		}
  		if ( this.uiDialog.is( ":data(ui-resizable)" ) ) {
  			this.uiDialog.resizable( "option", resizableOptions );
  		}
  	},

  	_setOption: function( key, value ) {
  		var isDraggable, isResizable,
  			uiDialog = this.uiDialog;

  		if ( key === "disabled" ) {
  			return;
  		}

  		this._super( key, value );

  		if ( key === "appendTo" ) {
  			this.uiDialog.appendTo( this._appendTo() );
  		}

  		if ( key === "buttons" ) {
  			this._createButtons();
  		}

  		if ( key === "closeText" ) {
  			this.uiDialogTitlebarClose.button( {

  				// Ensure that we always pass a string
  				label: $( "<a>" ).text( "" + this.options.closeText ).html()
  			} );
  		}

  		if ( key === "draggable" ) {
  			isDraggable = uiDialog.is( ":data(ui-draggable)" );
  			if ( isDraggable && !value ) {
  				uiDialog.draggable( "destroy" );
  			}

  			if ( !isDraggable && value ) {
  				this._makeDraggable();
  			}
  		}

  		if ( key === "position" ) {
  			this._position();
  		}

  		if ( key === "resizable" ) {

  			// currently resizable, becoming non-resizable
  			isResizable = uiDialog.is( ":data(ui-resizable)" );
  			if ( isResizable && !value ) {
  				uiDialog.resizable( "destroy" );
  			}

  			// Currently resizable, changing handles
  			if ( isResizable && typeof value === "string" ) {
  				uiDialog.resizable( "option", "handles", value );
  			}

  			// Currently non-resizable, becoming resizable
  			if ( !isResizable && value !== false ) {
  				this._makeResizable();
  			}
  		}

  		if ( key === "title" ) {
  			this._title( this.uiDialogTitlebar.find( ".ui-dialog-title" ) );
  		}

  		if ( key === "modal" ) {
  			uiDialog.attr( "aria-modal", value ? "true" : null );
  		}
  	},

  	_size: function() {

  		// If the user has resized the dialog, the .ui-dialog and .ui-dialog-content
  		// divs will both have width and height set, so we need to reset them
  		var nonContentHeight, minContentHeight, maxContentHeight,
  			options = this.options;

  		// Reset content sizing
  		this.element.show().css( {
  			width: "auto",
  			minHeight: 0,
  			maxHeight: "none",
  			height: 0
  		} );

  		if ( options.minWidth > options.width ) {
  			options.width = options.minWidth;
  		}

  		// Reset wrapper sizing
  		// determine the height of all the non-content elements
  		nonContentHeight = this.uiDialog.css( {
  			height: "auto",
  			width: options.width
  		} )
  			.outerHeight();
  		minContentHeight = Math.max( 0, options.minHeight - nonContentHeight );
  		maxContentHeight = typeof options.maxHeight === "number" ?
  			Math.max( 0, options.maxHeight - nonContentHeight ) :
  			"none";

  		if ( options.height === "auto" ) {
  			this.element.css( {
  				minHeight: minContentHeight,
  				maxHeight: maxContentHeight,
  				height: "auto"
  			} );
  		} else {
  			this.element.height( Math.max( 0, options.height - nonContentHeight ) );
  		}

  		if ( this.uiDialog.is( ":data(ui-resizable)" ) ) {
  			this.uiDialog.resizable( "option", "minHeight", this._minHeight() );
  		}
  	},

  	_blockFrames: function() {
  		this.iframeBlocks = this.document.find( "iframe" ).map( function() {
  			var iframe = $( this );

  			return $( "<div>" )
  				.css( {
  					position: "absolute",
  					width: iframe.outerWidth(),
  					height: iframe.outerHeight()
  				} )
  				.appendTo( iframe.parent() )
  				.offset( iframe.offset() )[ 0 ];
  		} );
  	},

  	_unblockFrames: function() {
  		if ( this.iframeBlocks ) {
  			this.iframeBlocks.remove();
  			delete this.iframeBlocks;
  		}
  	},

  	_allowInteraction: function( event ) {
  		if ( $( event.target ).closest( ".ui-dialog" ).length ) {
  			return true;
  		}

  		// TODO: Remove hack when datepicker implements
  		// the .ui-front logic (#8989)
  		return !!$( event.target ).closest( ".ui-datepicker" ).length;
  	},

  	_createOverlay: function() {
  		if ( !this.options.modal ) {
  			return;
  		}

  		// We use a delay in case the overlay is created from an
  		// event that we're going to be cancelling (#2804)
  		var isOpening = true;
  		this._delay( function() {
  			isOpening = false;
  		} );

  		if ( !this.document.data( "ui-dialog-overlays" ) ) {

  			// Prevent use of anchors and inputs
  			// This doesn't use `_on()` because it is a shared event handler
  			// across all open modal dialogs.
  			this.document.on( "focusin.ui-dialog", function( event ) {
  				if ( isOpening ) {
  					return;
  				}

  				var instance = this._trackingInstances()[ 0 ];
  				if ( !instance._allowInteraction( event ) ) {
  					event.preventDefault();
  					instance._focusTabbable();
  				}
  			}.bind( this ) );
  		}

  		this.overlay = $( "<div>" )
  			.appendTo( this._appendTo() );

  		this._addClass( this.overlay, null, "ui-widget-overlay ui-front" );
  		this._on( this.overlay, {
  			mousedown: "_keepFocus"
  		} );
  		this.document.data( "ui-dialog-overlays",
  			( this.document.data( "ui-dialog-overlays" ) || 0 ) + 1 );
  	},

  	_destroyOverlay: function() {
  		if ( !this.options.modal ) {
  			return;
  		}

  		if ( this.overlay ) {
  			var overlays = this.document.data( "ui-dialog-overlays" ) - 1;

  			if ( !overlays ) {
  				this.document.off( "focusin.ui-dialog" );
  				this.document.removeData( "ui-dialog-overlays" );
  			} else {
  				this.document.data( "ui-dialog-overlays", overlays );
  			}

  			this.overlay.remove();
  			this.overlay = null;
  		}
  	}
  } );

  // DEPRECATED
  // TODO: switch return back to widget declaration at top of file when this is removed
  if ( $.uiBackCompat === true ) {

  	// Backcompat for dialogClass option
  	$.widget( "ui.dialog", $.ui.dialog, {
  		options: {
  			dialogClass: ""
  		},
  		_createWrapper: function() {
  			this._super();
  			this.uiDialog.addClass( this.options.dialogClass );
  		},
  		_setOption: function( key, value ) {
  			if ( key === "dialogClass" ) {
  				this.uiDialog
  					.removeClass( this.options.dialogClass )
  					.addClass( value );
  			}
  			this._superApply( arguments );
  		}
  	} );
  }

  $.ui.dialog;


  /*!
   * jQuery UI Droppable 1.14.0
   * https://jqueryui.com
   *
   * Copyright OpenJS Foundation and other contributors
   * Released under the MIT license.
   * https://jquery.org/license
   */

  //>>label: Droppable
  //>>group: Interactions
  //>>description: Enables drop targets for draggable elements.
  //>>docs: https://api.jqueryui.com/droppable/
  //>>demos: https://jqueryui.com/droppable/


  $.widget( "ui.droppable", {
  	version: "1.14.0",
  	widgetEventPrefix: "drop",
  	options: {
  		accept: "*",
  		addClasses: true,
  		greedy: false,
  		scope: "default",
  		tolerance: "intersect",

  		// Callbacks
  		activate: null,
  		deactivate: null,
  		drop: null,
  		out: null,
  		over: null
  	},
  	_create: function() {

  		var proportions,
  			o = this.options,
  			accept = o.accept;

  		this.isover = false;
  		this.isout = true;

  		this.accept = typeof accept === "function" ? accept : function( d ) {
  			return d.is( accept );
  		};

  		this.proportions = function( /* valueToWrite */ ) {
  			if ( arguments.length ) {

  				// Store the droppable's proportions
  				proportions = arguments[ 0 ];
  			} else {

  				// Retrieve or derive the droppable's proportions
  				return proportions ?
  					proportions :
  					proportions = {
  						width: this.element[ 0 ].offsetWidth,
  						height: this.element[ 0 ].offsetHeight
  					};
  			}
  		};

  		this._addToManager( o.scope );

  		if ( o.addClasses ) {
  			this._addClass( "ui-droppable" );
  		}

  	},

  	_addToManager: function( scope ) {

  		// Add the reference and positions to the manager
  		$.ui.ddmanager.droppables[ scope ] = $.ui.ddmanager.droppables[ scope ] || [];
  		$.ui.ddmanager.droppables[ scope ].push( this );
  	},

  	_splice: function( drop ) {
  		var i = 0;
  		for ( ; i < drop.length; i++ ) {
  			if ( drop[ i ] === this ) {
  				drop.splice( i, 1 );
  			}
  		}
  	},

  	_destroy: function() {
  		var drop = $.ui.ddmanager.droppables[ this.options.scope ];

  		this._splice( drop );
  	},

  	_setOption: function( key, value ) {

  		if ( key === "accept" ) {
  			this.accept = typeof value === "function" ? value : function( d ) {
  				return d.is( value );
  			};
  		} else if ( key === "scope" ) {
  			var drop = $.ui.ddmanager.droppables[ this.options.scope ];

  			this._splice( drop );
  			this._addToManager( value );
  		}

  		this._super( key, value );
  	},

  	_activate: function( event ) {
  		var draggable = $.ui.ddmanager.current;

  		this._addActiveClass();
  		if ( draggable ) {
  			this._trigger( "activate", event, this.ui( draggable ) );
  		}
  	},

  	_deactivate: function( event ) {
  		var draggable = $.ui.ddmanager.current;

  		this._removeActiveClass();
  		if ( draggable ) {
  			this._trigger( "deactivate", event, this.ui( draggable ) );
  		}
  	},

  	_over: function( event ) {

  		var draggable = $.ui.ddmanager.current;

  		// Bail if draggable and droppable are same element
  		if ( !draggable || ( draggable.currentItem ||
  				draggable.element )[ 0 ] === this.element[ 0 ] ) {
  			return;
  		}

  		if ( this.accept.call( this.element[ 0 ], ( draggable.currentItem ||
  				draggable.element ) ) ) {
  			this._addHoverClass();
  			this._trigger( "over", event, this.ui( draggable ) );
  		}

  	},

  	_out: function( event ) {

  		var draggable = $.ui.ddmanager.current;

  		// Bail if draggable and droppable are same element
  		if ( !draggable || ( draggable.currentItem ||
  				draggable.element )[ 0 ] === this.element[ 0 ] ) {
  			return;
  		}

  		if ( this.accept.call( this.element[ 0 ], ( draggable.currentItem ||
  				draggable.element ) ) ) {
  			this._removeHoverClass();
  			this._trigger( "out", event, this.ui( draggable ) );
  		}

  	},

  	_drop: function( event, custom ) {

  		var draggable = custom || $.ui.ddmanager.current,
  			childrenIntersection = false;

  		// Bail if draggable and droppable are same element
  		if ( !draggable || ( draggable.currentItem ||
  				draggable.element )[ 0 ] === this.element[ 0 ] ) {
  			return false;
  		}

  		this.element
  			.find( ":data(ui-droppable)" )
  			.not( ".ui-draggable-dragging" )
  			.each( function() {
  				var inst = $( this ).droppable( "instance" );
  				if (
  					inst.options.greedy &&
  					!inst.options.disabled &&
  					inst.options.scope === draggable.options.scope &&
  					inst.accept.call(
  						inst.element[ 0 ], ( draggable.currentItem || draggable.element )
  					) &&
  					$.ui.intersect(
  						draggable,
  						$.extend( inst, { offset: inst.element.offset() } ),
  						inst.options.tolerance, event
  					)
  				) {
  					childrenIntersection = true;
  					return false;
  				}
  			} );
  		if ( childrenIntersection ) {
  			return false;
  		}

  		if ( this.accept.call( this.element[ 0 ],
  				( draggable.currentItem || draggable.element ) ) ) {
  			this._removeActiveClass();
  			this._removeHoverClass();

  			this._trigger( "drop", event, this.ui( draggable ) );
  			return this.element;
  		}

  		return false;

  	},

  	ui: function( c ) {
  		return {
  			draggable: ( c.currentItem || c.element ),
  			helper: c.helper,
  			position: c.position,
  			offset: c.positionAbs
  		};
  	},

  	// Extension points just to make backcompat sane and avoid duplicating logic
  	// TODO: Remove in 1.14 along with call to it below
  	_addHoverClass: function() {
  		this._addClass( "ui-droppable-hover" );
  	},

  	_removeHoverClass: function() {
  		this._removeClass( "ui-droppable-hover" );
  	},

  	_addActiveClass: function() {
  		this._addClass( "ui-droppable-active" );
  	},

  	_removeActiveClass: function() {
  		this._removeClass( "ui-droppable-active" );
  	}
  } );

  $.ui.intersect = ( function() {
  	function isOverAxis( x, reference, size ) {
  		return ( x >= reference ) && ( x < ( reference + size ) );
  	}

  	return function( draggable, droppable, toleranceMode, event ) {

  		if ( !droppable.offset ) {
  			return false;
  		}

  		var x1 = ( draggable.positionAbs ||
  				draggable.position.absolute ).left + draggable.margins.left,
  			y1 = ( draggable.positionAbs ||
  				draggable.position.absolute ).top + draggable.margins.top,
  			x2 = x1 + draggable.helperProportions.width,
  			y2 = y1 + draggable.helperProportions.height,
  			l = droppable.offset.left,
  			t = droppable.offset.top,
  			r = l + droppable.proportions().width,
  			b = t + droppable.proportions().height;

  		switch ( toleranceMode ) {
  		case "fit":
  			return ( l <= x1 && x2 <= r && t <= y1 && y2 <= b );
  		case "intersect":
  			return ( l < x1 + ( draggable.helperProportions.width / 2 ) && // Right Half
  				x2 - ( draggable.helperProportions.width / 2 ) < r && // Left Half
  				t < y1 + ( draggable.helperProportions.height / 2 ) && // Bottom Half
  				y2 - ( draggable.helperProportions.height / 2 ) < b ); // Top Half
  		case "pointer":
  			return isOverAxis( event.pageY, t, droppable.proportions().height ) &&
  				isOverAxis( event.pageX, l, droppable.proportions().width );
  		case "touch":
  			return (
  				( y1 >= t && y1 <= b ) || // Top edge touching
  				( y2 >= t && y2 <= b ) || // Bottom edge touching
  				( y1 < t && y2 > b ) // Surrounded vertically
  			) && (
  				( x1 >= l && x1 <= r ) || // Left edge touching
  				( x2 >= l && x2 <= r ) || // Right edge touching
  				( x1 < l && x2 > r ) // Surrounded horizontally
  			);
  		default:
  			return false;
  		}
  	};
  } )();

  /*
  	This manager tracks offsets of draggables and droppables
  */
  $.ui.ddmanager = {
  	current: null,
  	droppables: { "default": [] },
  	prepareOffsets: function( t, event ) {

  		var i, j,
  			m = $.ui.ddmanager.droppables[ t.options.scope ] || [],
  			type = event ? event.type : null, // workaround for #2317
  			list = ( t.currentItem || t.element ).find( ":data(ui-droppable)" ).addBack();

  		droppablesLoop: for ( i = 0; i < m.length; i++ ) {

  			// No disabled and non-accepted
  			if ( m[ i ].options.disabled || ( t && !m[ i ].accept.call( m[ i ].element[ 0 ],
  					( t.currentItem || t.element ) ) ) ) {
  				continue;
  			}

  			// Filter out elements in the current dragged item
  			for ( j = 0; j < list.length; j++ ) {
  				if ( list[ j ] === m[ i ].element[ 0 ] ) {
  					m[ i ].proportions().height = 0;
  					continue droppablesLoop;
  				}
  			}

  			m[ i ].visible = m[ i ].element.css( "display" ) !== "none";
  			if ( !m[ i ].visible ) {
  				continue;
  			}

  			// Activate the droppable if used directly from draggables
  			if ( type === "mousedown" ) {
  				m[ i ]._activate.call( m[ i ], event );
  			}

  			m[ i ].offset = m[ i ].element.offset();
  			m[ i ].proportions( {
  				width: m[ i ].element[ 0 ].offsetWidth,
  				height: m[ i ].element[ 0 ].offsetHeight
  			} );

  		}

  	},
  	drop: function( draggable, event ) {

  		var dropped = false;

  		// Create a copy of the droppables in case the list changes during the drop (#9116)
  		$.each( ( $.ui.ddmanager.droppables[ draggable.options.scope ] || [] ).slice(), function() {

  			if ( !this.options ) {
  				return;
  			}
  			if ( !this.options.disabled && this.visible &&
  					$.ui.intersect( draggable, this, this.options.tolerance, event ) ) {
  				dropped = this._drop.call( this, event ) || dropped;
  			}

  			if ( !this.options.disabled && this.visible && this.accept.call( this.element[ 0 ],
  					( draggable.currentItem || draggable.element ) ) ) {
  				this.isout = true;
  				this.isover = false;
  				this._deactivate.call( this, event );
  			}

  		} );
  		return dropped;

  	},
  	dragStart: function( draggable, event ) {

  		// Listen for scrolling so that if the dragging causes scrolling the position of the
  		// droppables can be recalculated (see #5003)
  		draggable.element.parentsUntil( "body" ).on( "scroll.droppable", function() {
  			if ( !draggable.options.refreshPositions ) {
  				$.ui.ddmanager.prepareOffsets( draggable, event );
  			}
  		} );
  	},
  	drag: function( draggable, event ) {

  		// If you have a highly dynamic page, you might try this option. It renders positions
  		// every time you move the mouse.
  		if ( draggable.options.refreshPositions ) {
  			$.ui.ddmanager.prepareOffsets( draggable, event );
  		}

  		// Run through all droppables and check their positions based on specific tolerance options
  		$.each( $.ui.ddmanager.droppables[ draggable.options.scope ] || [], function() {

  			if ( this.options.disabled || this.greedyChild || !this.visible ) {
  				return;
  			}

  			var parentInstance, scope, parent,
  				intersects = $.ui.intersect( draggable, this, this.options.tolerance, event ),
  				c = !intersects && this.isover ?
  					"isout" :
  					( intersects && !this.isover ? "isover" : null );
  			if ( !c ) {
  				return;
  			}

  			if ( this.options.greedy ) {

  				// find droppable parents with same scope
  				scope = this.options.scope;
  				parent = this.element.parents( ":data(ui-droppable)" ).filter( function() {
  					return $( this ).droppable( "instance" ).options.scope === scope;
  				} );

  				if ( parent.length ) {
  					parentInstance = $( parent[ 0 ] ).droppable( "instance" );
  					parentInstance.greedyChild = ( c === "isover" );
  				}
  			}

  			// We just moved into a greedy child
  			if ( parentInstance && c === "isover" ) {
  				parentInstance.isover = false;
  				parentInstance.isout = true;
  				parentInstance._out.call( parentInstance, event );
  			}

  			this[ c ] = true;
  			this[ c === "isout" ? "isover" : "isout" ] = false;
  			this[ c === "isover" ? "_over" : "_out" ].call( this, event );

  			// We just moved out of a greedy child
  			if ( parentInstance && c === "isout" ) {
  				parentInstance.isout = false;
  				parentInstance.isover = true;
  				parentInstance._over.call( parentInstance, event );
  			}
  		} );

  	},
  	dragStop: function( draggable, event ) {
  		draggable.element.parentsUntil( "body" ).off( "scroll.droppable" );

  		// Call prepareOffsets one final time since IE does not fire return scroll events when
  		// overflow was caused by drag (see #5003)
  		if ( !draggable.options.refreshPositions ) {
  			$.ui.ddmanager.prepareOffsets( draggable, event );
  		}
  	}
  };

  // DEPRECATED
  // TODO: switch return back to widget declaration at top of file when this is removed
  if ( $.uiBackCompat === true ) {

  	// Backcompat for activeClass and hoverClass options
  	$.widget( "ui.droppable", $.ui.droppable, {
  		options: {
  			hoverClass: false,
  			activeClass: false
  		},
  		_addActiveClass: function() {
  			this._super();
  			if ( this.options.activeClass ) {
  				this.element.addClass( this.options.activeClass );
  			}
  		},
  		_removeActiveClass: function() {
  			this._super();
  			if ( this.options.activeClass ) {
  				this.element.removeClass( this.options.activeClass );
  			}
  		},
  		_addHoverClass: function() {
  			this._super();
  			if ( this.options.hoverClass ) {
  				this.element.addClass( this.options.hoverClass );
  			}
  		},
  		_removeHoverClass: function() {
  			this._super();
  			if ( this.options.hoverClass ) {
  				this.element.removeClass( this.options.hoverClass );
  			}
  		}
  	} );
  }

  $.ui.droppable;


  /*!
   * jQuery UI Progressbar 1.14.0
   * https://jqueryui.com
   *
   * Copyright OpenJS Foundation and other contributors
   * Released under the MIT license.
   * https://jquery.org/license
   */

  //>>label: Progressbar
  //>>group: Widgets
  /* eslint-disable max-len */
  //>>description: Displays a status indicator for loading state, standard percentage, and other progress indicators.
  /* eslint-enable max-len */
  //>>docs: https://api.jqueryui.com/progressbar/
  //>>demos: https://jqueryui.com/progressbar/
  //>>css.structure: ../../themes/base/core.css
  //>>css.structure: ../../themes/base/progressbar.css
  //>>css.theme: ../../themes/base/theme.css


  $.widget( "ui.progressbar", {
  	version: "1.14.0",
  	options: {
  		classes: {
  			"ui-progressbar": "ui-corner-all",
  			"ui-progressbar-value": "ui-corner-left",
  			"ui-progressbar-complete": "ui-corner-right"
  		},
  		max: 100,
  		value: 0,

  		change: null,
  		complete: null
  	},

  	min: 0,

  	_create: function() {

  		// Constrain initial value
  		this.oldValue = this.options.value = this._constrainedValue();

  		this.element.attr( {

  			// Only set static values; aria-valuenow and aria-valuemax are
  			// set inside _refreshValue()
  			role: "progressbar",
  			"aria-valuemin": this.min
  		} );
  		this._addClass( "ui-progressbar", "ui-widget ui-widget-content" );

  		this.valueDiv = $( "<div>" ).appendTo( this.element );
  		this._addClass( this.valueDiv, "ui-progressbar-value", "ui-widget-header" );
  		this._refreshValue();
  	},

  	_destroy: function() {
  		this.element.removeAttr( "role aria-valuemin aria-valuemax aria-valuenow" );

  		this.valueDiv.remove();
  	},

  	value: function( newValue ) {
  		if ( newValue === undefined ) {
  			return this.options.value;
  		}

  		this.options.value = this._constrainedValue( newValue );
  		this._refreshValue();
  	},

  	_constrainedValue: function( newValue ) {
  		if ( newValue === undefined ) {
  			newValue = this.options.value;
  		}

  		this.indeterminate = newValue === false;

  		// Sanitize value
  		if ( typeof newValue !== "number" ) {
  			newValue = 0;
  		}

  		return this.indeterminate ? false :
  			Math.min( this.options.max, Math.max( this.min, newValue ) );
  	},

  	_setOptions: function( options ) {

  		// Ensure "value" option is set after other values (like max)
  		var value = options.value;
  		delete options.value;

  		this._super( options );

  		this.options.value = this._constrainedValue( value );
  		this._refreshValue();
  	},

  	_setOption: function( key, value ) {
  		if ( key === "max" ) {

  			// Don't allow a max less than min
  			value = Math.max( this.min, value );
  		}
  		this._super( key, value );
  	},

  	_setOptionDisabled: function( value ) {
  		this._super( value );

  		this.element.attr( "aria-disabled", value );
  		this._toggleClass( null, "ui-state-disabled", !!value );
  	},

  	_percentage: function() {
  		return this.indeterminate ?
  			100 :
  			100 * ( this.options.value - this.min ) / ( this.options.max - this.min );
  	},

  	_refreshValue: function() {
  		var value = this.options.value,
  			percentage = this._percentage();

  		this.valueDiv
  			.toggle( this.indeterminate || value > this.min )
  			.width( percentage.toFixed( 0 ) + "%" );

  		this
  			._toggleClass( this.valueDiv, "ui-progressbar-complete", null,
  				value === this.options.max )
  			._toggleClass( "ui-progressbar-indeterminate", null, this.indeterminate );

  		if ( this.indeterminate ) {
  			this.element.removeAttr( "aria-valuenow" );
  			if ( !this.overlayDiv ) {
  				this.overlayDiv = $( "<div>" ).appendTo( this.valueDiv );
  				this._addClass( this.overlayDiv, "ui-progressbar-overlay" );
  			}
  		} else {
  			this.element.attr( {
  				"aria-valuemax": this.options.max,
  				"aria-valuenow": value
  			} );
  			if ( this.overlayDiv ) {
  				this.overlayDiv.remove();
  				this.overlayDiv = null;
  			}
  		}

  		if ( this.oldValue !== value ) {
  			this.oldValue = value;
  			this._trigger( "change" );
  		}
  		if ( value === this.options.max ) {
  			this._trigger( "complete" );
  		}
  	}
  } );


  /*!
   * jQuery UI Selectable 1.14.0
   * https://jqueryui.com
   *
   * Copyright OpenJS Foundation and other contributors
   * Released under the MIT license.
   * https://jquery.org/license
   */

  //>>label: Selectable
  //>>group: Interactions
  //>>description: Allows groups of elements to be selected with the mouse.
  //>>docs: https://api.jqueryui.com/selectable/
  //>>demos: https://jqueryui.com/selectable/
  //>>css.structure: ../../themes/base/selectable.css


  $.widget( "ui.selectable", $.ui.mouse, {
  	version: "1.14.0",
  	options: {
  		appendTo: "body",
  		autoRefresh: true,
  		distance: 0,
  		filter: "*",
  		tolerance: "touch",

  		// Callbacks
  		selected: null,
  		selecting: null,
  		start: null,
  		stop: null,
  		unselected: null,
  		unselecting: null
  	},
  	_create: function() {
  		var that = this;

  		this._addClass( "ui-selectable" );

  		this.dragged = false;

  		// Cache selectee children based on filter
  		this.refresh = function() {
  			that.elementPos = $( that.element[ 0 ] ).offset();
  			that.selectees = $( that.options.filter, that.element[ 0 ] );
  			that._addClass( that.selectees, "ui-selectee" );
  			that.selectees.each( function() {
  				var $this = $( this ),
  					selecteeOffset = $this.offset(),
  					pos = {
  						left: selecteeOffset.left - that.elementPos.left,
  						top: selecteeOffset.top - that.elementPos.top
  					};
  				$.data( this, "selectable-item", {
  					element: this,
  					$element: $this,
  					left: pos.left,
  					top: pos.top,
  					right: pos.left + $this.outerWidth(),
  					bottom: pos.top + $this.outerHeight(),
  					startselected: false,
  					selected: $this.hasClass( "ui-selected" ),
  					selecting: $this.hasClass( "ui-selecting" ),
  					unselecting: $this.hasClass( "ui-unselecting" )
  				} );
  			} );
  		};
  		this.refresh();

  		this._mouseInit();

  		this.helper = $( "<div>" );
  		this._addClass( this.helper, "ui-selectable-helper" );
  	},

  	_destroy: function() {
  		this.selectees.removeData( "selectable-item" );
  		this._mouseDestroy();
  	},

  	_mouseStart: function( event ) {
  		var that = this,
  			options = this.options;

  		this.opos = [ event.pageX, event.pageY ];
  		this.elementPos = $( this.element[ 0 ] ).offset();

  		if ( this.options.disabled ) {
  			return;
  		}

  		this.selectees = $( options.filter, this.element[ 0 ] );

  		this._trigger( "start", event );

  		$( options.appendTo ).append( this.helper );

  		// position helper (lasso)
  		this.helper.css( {
  			"left": event.pageX,
  			"top": event.pageY,
  			"width": 0,
  			"height": 0
  		} );

  		if ( options.autoRefresh ) {
  			this.refresh();
  		}

  		this.selectees.filter( ".ui-selected" ).each( function() {
  			var selectee = $.data( this, "selectable-item" );
  			selectee.startselected = true;
  			if ( !event.metaKey && !event.ctrlKey ) {
  				that._removeClass( selectee.$element, "ui-selected" );
  				selectee.selected = false;
  				that._addClass( selectee.$element, "ui-unselecting" );
  				selectee.unselecting = true;

  				// selectable UNSELECTING callback
  				that._trigger( "unselecting", event, {
  					unselecting: selectee.element
  				} );
  			}
  		} );

  		$( event.target ).parents().addBack().each( function() {
  			var doSelect,
  				selectee = $.data( this, "selectable-item" );
  			if ( selectee ) {
  				doSelect = ( !event.metaKey && !event.ctrlKey ) ||
  					!selectee.$element.hasClass( "ui-selected" );
  				that._removeClass( selectee.$element, doSelect ? "ui-unselecting" : "ui-selected" )
  					._addClass( selectee.$element, doSelect ? "ui-selecting" : "ui-unselecting" );
  				selectee.unselecting = !doSelect;
  				selectee.selecting = doSelect;
  				selectee.selected = doSelect;

  				// selectable (UN)SELECTING callback
  				if ( doSelect ) {
  					that._trigger( "selecting", event, {
  						selecting: selectee.element
  					} );
  				} else {
  					that._trigger( "unselecting", event, {
  						unselecting: selectee.element
  					} );
  				}
  				return false;
  			}
  		} );

  	},

  	_mouseDrag: function( event ) {

  		this.dragged = true;

  		if ( this.options.disabled ) {
  			return;
  		}

  		var tmp,
  			that = this,
  			options = this.options,
  			x1 = this.opos[ 0 ],
  			y1 = this.opos[ 1 ],
  			x2 = event.pageX,
  			y2 = event.pageY;

  		if ( x1 > x2 ) {
  			tmp = x2; x2 = x1; x1 = tmp;
  		}
  		if ( y1 > y2 ) {
  			tmp = y2; y2 = y1; y1 = tmp;
  		}
  		this.helper.css( { left: x1, top: y1, width: x2 - x1, height: y2 - y1 } );

  		this.selectees.each( function() {
  			var selectee = $.data( this, "selectable-item" ),
  				hit = false,
  				offset = {};

  			//prevent helper from being selected if appendTo: selectable
  			if ( !selectee || selectee.element === that.element[ 0 ] ) {
  				return;
  			}

  			offset.left   = selectee.left   + that.elementPos.left;
  			offset.right  = selectee.right  + that.elementPos.left;
  			offset.top    = selectee.top    + that.elementPos.top;
  			offset.bottom = selectee.bottom + that.elementPos.top;

  			if ( options.tolerance === "touch" ) {
  				hit = ( !( offset.left > x2 || offset.right < x1 || offset.top > y2 ||
                      offset.bottom < y1 ) );
  			} else if ( options.tolerance === "fit" ) {
  				hit = ( offset.left > x1 && offset.right < x2 && offset.top > y1 &&
                      offset.bottom < y2 );
  			}

  			if ( hit ) {

  				// SELECT
  				if ( selectee.selected ) {
  					that._removeClass( selectee.$element, "ui-selected" );
  					selectee.selected = false;
  				}
  				if ( selectee.unselecting ) {
  					that._removeClass( selectee.$element, "ui-unselecting" );
  					selectee.unselecting = false;
  				}
  				if ( !selectee.selecting ) {
  					that._addClass( selectee.$element, "ui-selecting" );
  					selectee.selecting = true;

  					// selectable SELECTING callback
  					that._trigger( "selecting", event, {
  						selecting: selectee.element
  					} );
  				}
  			} else {

  				// UNSELECT
  				if ( selectee.selecting ) {
  					if ( ( event.metaKey || event.ctrlKey ) && selectee.startselected ) {
  						that._removeClass( selectee.$element, "ui-selecting" );
  						selectee.selecting = false;
  						that._addClass( selectee.$element, "ui-selected" );
  						selectee.selected = true;
  					} else {
  						that._removeClass( selectee.$element, "ui-selecting" );
  						selectee.selecting = false;
  						if ( selectee.startselected ) {
  							that._addClass( selectee.$element, "ui-unselecting" );
  							selectee.unselecting = true;
  						}

  						// selectable UNSELECTING callback
  						that._trigger( "unselecting", event, {
  							unselecting: selectee.element
  						} );
  					}
  				}
  				if ( selectee.selected ) {
  					if ( !event.metaKey && !event.ctrlKey && !selectee.startselected ) {
  						that._removeClass( selectee.$element, "ui-selected" );
  						selectee.selected = false;

  						that._addClass( selectee.$element, "ui-unselecting" );
  						selectee.unselecting = true;

  						// selectable UNSELECTING callback
  						that._trigger( "unselecting", event, {
  							unselecting: selectee.element
  						} );
  					}
  				}
  			}
  		} );

  		return false;
  	},

  	_mouseStop: function( event ) {
  		var that = this;

  		this.dragged = false;

  		$( ".ui-unselecting", this.element[ 0 ] ).each( function() {
  			var selectee = $.data( this, "selectable-item" );
  			that._removeClass( selectee.$element, "ui-unselecting" );
  			selectee.unselecting = false;
  			selectee.startselected = false;
  			that._trigger( "unselected", event, {
  				unselected: selectee.element
  			} );
  		} );
  		$( ".ui-selecting", this.element[ 0 ] ).each( function() {
  			var selectee = $.data( this, "selectable-item" );
  			that._removeClass( selectee.$element, "ui-selecting" )
  				._addClass( selectee.$element, "ui-selected" );
  			selectee.selecting = false;
  			selectee.selected = true;
  			selectee.startselected = true;
  			that._trigger( "selected", event, {
  				selected: selectee.element
  			} );
  		} );
  		this._trigger( "stop", event );

  		this.helper.remove();

  		return false;
  	}

  } );


  /*!
   * jQuery UI Selectmenu 1.14.0
   * https://jqueryui.com
   *
   * Copyright OpenJS Foundation and other contributors
   * Released under the MIT license.
   * https://jquery.org/license
   */

  //>>label: Selectmenu
  //>>group: Widgets
  /* eslint-disable max-len */
  //>>description: Duplicates and extends the functionality of a native HTML select element, allowing it to be customizable in behavior and appearance far beyond the limitations of a native select.
  /* eslint-enable max-len */
  //>>docs: https://api.jqueryui.com/selectmenu/
  //>>demos: https://jqueryui.com/selectmenu/
  //>>css.structure: ../../themes/base/core.css
  //>>css.structure: ../../themes/base/selectmenu.css, ../../themes/base/button.css
  //>>css.theme: ../../themes/base/theme.css


  $.widget( "ui.selectmenu", [ $.ui.formResetMixin, {
  	version: "1.14.0",
  	defaultElement: "<select>",
  	options: {
  		appendTo: null,
  		classes: {
  			"ui-selectmenu-button-open": "ui-corner-top",
  			"ui-selectmenu-button-closed": "ui-corner-all"
  		},
  		disabled: null,
  		icons: {
  			button: "ui-icon-triangle-1-s"
  		},
  		position: {
  			my: "left top",
  			at: "left bottom",
  			collision: "none"
  		},
  		width: false,

  		// Callbacks
  		change: null,
  		close: null,
  		focus: null,
  		open: null,
  		select: null
  	},

  	_create: function() {
  		var selectmenuId = this.element.uniqueId().attr( "id" );
  		this.ids = {
  			element: selectmenuId,
  			button: selectmenuId + "-button",
  			menu: selectmenuId + "-menu"
  		};

  		this._drawButton();
  		this._drawMenu();
  		this._bindFormResetHandler();

  		this._rendered = false;
  		this.menuItems = $();
  	},

  	_drawButton: function() {
  		var icon,
  			that = this,
  			item = this._parseOption(
  				this.element.find( "option:selected" ),
  				this.element[ 0 ].selectedIndex
  			);

  		// Associate existing label with the new button
  		this.labels = this.element.labels().attr( "for", this.ids.button );
  		this._on( this.labels, {
  			click: function( event ) {
  				this.button.trigger( "focus" );
  				event.preventDefault();
  			}
  		} );

  		// Hide original select element
  		this.element.hide();

  		// Create button
  		this.button = $( "<span>", {
  			tabindex: this.options.disabled ? -1 : 0,
  			id: this.ids.button,
  			role: "combobox",
  			"aria-expanded": "false",
  			"aria-autocomplete": "list",
  			"aria-owns": this.ids.menu,
  			"aria-haspopup": "true",
  			title: this.element.attr( "title" )
  		} )
  			.insertAfter( this.element );

  		this._addClass( this.button, "ui-selectmenu-button ui-selectmenu-button-closed",
  			"ui-button ui-widget" );

  		icon = $( "<span>" ).appendTo( this.button );
  		this._addClass( icon, "ui-selectmenu-icon", "ui-icon " + this.options.icons.button );
  		this.buttonItem = this._renderButtonItem( item )
  			.appendTo( this.button );

  		if ( this.options.width !== false ) {
  			this._resizeButton();
  		}

  		this._on( this.button, this._buttonEvents );
  		this.button.one( "focusin", function() {

  			// Delay rendering the menu items until the button receives focus.
  			// The menu may have already been rendered via a programmatic open.
  			if ( !that._rendered ) {
  				that._refreshMenu();
  			}
  		} );
  	},

  	_drawMenu: function() {
  		var that = this;

  		// Create menu
  		this.menu = $( "<ul>", {
  			"aria-hidden": "true",
  			"aria-labelledby": this.ids.button,
  			id: this.ids.menu
  		} );

  		// Wrap menu
  		this.menuWrap = $( "<div>" ).append( this.menu );
  		this._addClass( this.menuWrap, "ui-selectmenu-menu", "ui-front" );
  		this.menuWrap.appendTo( this._appendTo() );

  		// Initialize menu widget
  		this.menuInstance = this.menu
  			.menu( {
  				classes: {
  					"ui-menu": "ui-corner-bottom"
  				},
  				role: "listbox",
  				select: function( event, ui ) {
  					event.preventDefault();
  					that._select( ui.item.data( "ui-selectmenu-item" ), event );
  				},
  				focus: function( event, ui ) {
  					var item = ui.item.data( "ui-selectmenu-item" );

  					// Prevent inital focus from firing and check if its a newly focused item
  					if ( that.focusIndex != null && item.index !== that.focusIndex ) {
  						that._trigger( "focus", event, { item: item } );
  						if ( !that.isOpen ) {
  							that._select( item, event );
  						}
  					}
  					that.focusIndex = item.index;

  					that.button.attr( "aria-activedescendant",
  						that.menuItems.eq( item.index ).attr( "id" ) );
  				}
  			} )
  			.menu( "instance" );

  		// Don't close the menu on mouseleave
  		this.menuInstance._off( this.menu, "mouseleave" );

  		// Cancel the menu's collapseAll on document click
  		this.menuInstance._closeOnDocumentClick = function() {
  			return false;
  		};

  		// Selects often contain empty items, but never contain dividers
  		this.menuInstance._isDivider = function() {
  			return false;
  		};
  	},

  	refresh: function() {
  		this._refreshMenu();
  		this.buttonItem.replaceWith(
  			this.buttonItem = this._renderButtonItem(

  				// Fall back to an empty object in case there are no options
  				this._getSelectedItem().data( "ui-selectmenu-item" ) || {}
  			)
  		);
  		if ( this.options.width === null ) {
  			this._resizeButton();
  		}
  	},

  	_refreshMenu: function() {
  		var item,
  			options = this.element.find( "option" );

  		this.menu.empty();

  		this._parseOptions( options );
  		this._renderMenu( this.menu, this.items );

  		this.menuInstance.refresh();
  		this.menuItems = this.menu.find( "li" )
  			.not( ".ui-selectmenu-optgroup" )
  				.find( ".ui-menu-item-wrapper" );

  		this._rendered = true;

  		if ( !options.length ) {
  			return;
  		}

  		item = this._getSelectedItem();

  		// Update the menu to have the correct item focused
  		this.menuInstance.focus( null, item );
  		this._setAria( item.data( "ui-selectmenu-item" ) );

  		// Set disabled state
  		this._setOption( "disabled", this.element.prop( "disabled" ) );
  	},

  	open: function( event ) {
  		if ( this.options.disabled ) {
  			return;
  		}

  		// If this is the first time the menu is being opened, render the items
  		if ( !this._rendered ) {
  			this._refreshMenu();
  		} else {

  			// Menu clears focus on close, reset focus to selected item
  			this._removeClass( this.menu.find( ".ui-state-active" ), null, "ui-state-active" );
  			this.menuInstance.focus( null, this._getSelectedItem() );
  		}

  		// If there are no options, don't open the menu
  		if ( !this.menuItems.length ) {
  			return;
  		}

  		this.isOpen = true;
  		this._toggleAttr();
  		this._resizeMenu();
  		this._position();

  		this._on( this.document, this._documentClick );

  		this._trigger( "open", event );
  	},

  	_position: function() {
  		this.menuWrap.position( $.extend( { of: this.button }, this.options.position ) );
  	},

  	close: function( event ) {
  		if ( !this.isOpen ) {
  			return;
  		}

  		this.isOpen = false;
  		this._toggleAttr();

  		this.range = null;
  		this._off( this.document );

  		this._trigger( "close", event );
  	},

  	widget: function() {
  		return this.button;
  	},

  	menuWidget: function() {
  		return this.menu;
  	},

  	_renderButtonItem: function( item ) {
  		var buttonItem = $( "<span>" );

  		this._setText( buttonItem, item.label );
  		this._addClass( buttonItem, "ui-selectmenu-text" );

  		return buttonItem;
  	},

  	_renderMenu: function( ul, items ) {
  		var that = this,
  			currentOptgroup = "";

  		$.each( items, function( index, item ) {
  			var li;

  			if ( item.optgroup !== currentOptgroup ) {
  				li = $( "<li>", {
  					text: item.optgroup
  				} );
  				that._addClass( li, "ui-selectmenu-optgroup", "ui-menu-divider" +
  					( item.element.parent( "optgroup" ).prop( "disabled" ) ?
  						" ui-state-disabled" :
  						"" ) );

  				li.appendTo( ul );

  				currentOptgroup = item.optgroup;
  			}

  			that._renderItemData( ul, item );
  		} );
  	},

  	_renderItemData: function( ul, item ) {
  		return this._renderItem( ul, item ).data( "ui-selectmenu-item", item );
  	},

  	_renderItem: function( ul, item ) {
  		var li = $( "<li>" ),
  			wrapper = $( "<div>", {
  				title: item.element.attr( "title" )
  			} );

  		if ( item.disabled ) {
  			this._addClass( li, null, "ui-state-disabled" );
  		}

  		if ( item.hidden ) {
  			li.prop( "hidden", true );
  		} else {
  			this._setText( wrapper, item.label );
  		}

  		return li.append( wrapper ).appendTo( ul );
  	},

  	_setText: function( element, value ) {
  		if ( value ) {
  			element.text( value );
  		} else {
  			element.html( "&#160;" );
  		}
  	},

  	_move: function( direction, event ) {
  		var item, next,
  			filter = ".ui-menu-item";

  		if ( this.isOpen ) {
  			item = this.menuItems.eq( this.focusIndex ).parent( "li" );
  		} else {
  			item = this.menuItems.eq( this.element[ 0 ].selectedIndex ).parent( "li" );
  			filter += ":not(.ui-state-disabled)";
  		}

  		if ( direction === "first" || direction === "last" ) {
  			next = item[ direction === "first" ? "prevAll" : "nextAll" ]( filter ).eq( -1 );
  		} else {
  			next = item[ direction + "All" ]( filter ).eq( 0 );
  		}

  		if ( next.length ) {
  			this.menuInstance.focus( event, next );
  		}
  	},

  	_getSelectedItem: function() {
  		return this.menuItems.eq( this.element[ 0 ].selectedIndex ).parent( "li" );
  	},

  	_toggle: function( event ) {
  		this[ this.isOpen ? "close" : "open" ]( event );
  	},

  	_setSelection: function() {
  		var selection;

  		if ( !this.range ) {
  			return;
  		}

  		selection = window.getSelection();
  		selection.removeAllRanges();
  		selection.addRange( this.range );
  	},

  	_documentClick: {
  		mousedown: function( event ) {
  			if ( !this.isOpen ) {
  				return;
  			}

  			if ( !$( event.target ).closest( ".ui-selectmenu-menu, #" +
  				CSS.escape( this.ids.button ) ).length ) {
  				this.close( event );
  			}
  		}
  	},

  	_buttonEvents: {

  		// Prevent text selection from being reset when interacting with the selectmenu (#10144)
  		mousedown: function() {
  			var selection = window.getSelection();
  			if ( selection.rangeCount ) {
  				this.range = selection.getRangeAt( 0 );
  			}
  		},

  		click: function( event ) {
  			this._setSelection();
  			this._toggle( event );
  		},

  		keydown: function( event ) {
  			var preventDefault = true;
  			switch ( event.keyCode ) {
  			case $.ui.keyCode.TAB:
  			case $.ui.keyCode.ESCAPE:
  				this.close( event );
  				preventDefault = false;
  				break;
  			case $.ui.keyCode.ENTER:
  				if ( this.isOpen ) {
  					this._selectFocusedItem( event );
  				}
  				break;
  			case $.ui.keyCode.UP:
  				if ( event.altKey ) {
  					this._toggle( event );
  				} else {
  					this._move( "prev", event );
  				}
  				break;
  			case $.ui.keyCode.DOWN:
  				if ( event.altKey ) {
  					this._toggle( event );
  				} else {
  					this._move( "next", event );
  				}
  				break;
  			case $.ui.keyCode.SPACE:
  				if ( this.isOpen ) {
  					this._selectFocusedItem( event );
  				} else {
  					this._toggle( event );
  				}
  				break;
  			case $.ui.keyCode.LEFT:
  				this._move( "prev", event );
  				break;
  			case $.ui.keyCode.RIGHT:
  				this._move( "next", event );
  				break;
  			case $.ui.keyCode.HOME:
  			case $.ui.keyCode.PAGE_UP:
  				this._move( "first", event );
  				break;
  			case $.ui.keyCode.END:
  			case $.ui.keyCode.PAGE_DOWN:
  				this._move( "last", event );
  				break;
  			default:
  				this.menu.trigger( event );
  				preventDefault = false;
  			}

  			if ( preventDefault ) {
  				event.preventDefault();
  			}
  		}
  	},

  	_selectFocusedItem: function( event ) {
  		var item = this.menuItems.eq( this.focusIndex ).parent( "li" );
  		if ( !item.hasClass( "ui-state-disabled" ) ) {
  			this._select( item.data( "ui-selectmenu-item" ), event );
  		}
  	},

  	_select: function( item, event ) {
  		var oldIndex = this.element[ 0 ].selectedIndex;

  		// Change native select element
  		this.element[ 0 ].selectedIndex = item.index;
  		this.buttonItem.replaceWith( this.buttonItem = this._renderButtonItem( item ) );
  		this._setAria( item );
  		this._trigger( "select", event, { item: item } );

  		if ( item.index !== oldIndex ) {
  			this._trigger( "change", event, { item: item } );
  		}

  		this.close( event );
  	},

  	_setAria: function( item ) {
  		var id = this.menuItems.eq( item.index ).attr( "id" );

  		this.button.attr( {
  			"aria-labelledby": id,
  			"aria-activedescendant": id
  		} );
  		this.menu.attr( "aria-activedescendant", id );
  	},

  	_setOption: function( key, value ) {
  		if ( key === "icons" ) {
  			var icon = this.button.find( "span.ui-icon" );
  			this._removeClass( icon, null, this.options.icons.button )
  				._addClass( icon, null, value.button );
  		}

  		this._super( key, value );

  		if ( key === "appendTo" ) {
  			this.menuWrap.appendTo( this._appendTo() );
  		}

  		if ( key === "width" ) {
  			this._resizeButton();
  		}
  	},

  	_setOptionDisabled: function( value ) {
  		this._super( value );

  		this.menuInstance.option( "disabled", value );
  		this.button.attr( "aria-disabled", value );
  		this._toggleClass( this.button, null, "ui-state-disabled", value );

  		this.element.prop( "disabled", value );
  		if ( value ) {
  			this.button.attr( "tabindex", -1 );
  			this.close();
  		} else {
  			this.button.attr( "tabindex", 0 );
  		}
  	},

  	_appendTo: function() {
  		var element = this.options.appendTo;

  		if ( element ) {
  			element = element.jquery || element.nodeType ?
  				$( element ) :
  				this.document.find( element ).eq( 0 );
  		}

  		if ( !element || !element[ 0 ] ) {
  			element = this.element.closest( ".ui-front, dialog" );
  		}

  		if ( !element.length ) {
  			element = this.document[ 0 ].body;
  		}

  		return element;
  	},

  	_toggleAttr: function() {
  		this.button.attr( "aria-expanded", this.isOpen );

  		// We can't use two _toggleClass() calls here, because we need to make sure
  		// we always remove classes first and add them second, otherwise if both classes have the
  		// same theme class, it will be removed after we add it.
  		this._removeClass( this.button, "ui-selectmenu-button-" +
  			( this.isOpen ? "closed" : "open" ) )
  			._addClass( this.button, "ui-selectmenu-button-" +
  				( this.isOpen ? "open" : "closed" ) )
  			._toggleClass( this.menuWrap, "ui-selectmenu-open", null, this.isOpen );

  		this.menu.attr( "aria-hidden", !this.isOpen );
  	},

  	_resizeButton: function() {
  		var width = this.options.width;

  		// For `width: false`, just remove inline style and stop
  		if ( width === false ) {
  			this.button.css( "width", "" );
  			return;
  		}

  		// For `width: null`, match the width of the original element
  		if ( width === null ) {
  			width = this.element.show().outerWidth();
  			this.element.hide();
  		}

  		this.button.outerWidth( width );
  	},

  	_resizeMenu: function() {
  		this.menu.outerWidth( Math.max(
  			this.button.outerWidth(),
  			this.menu.width( "" ).outerWidth()
  		) );
  	},

  	_getCreateOptions: function() {
  		var options = this._super();

  		options.disabled = this.element.prop( "disabled" );

  		return options;
  	},

  	_parseOptions: function( options ) {
  		var that = this,
  			data = [];
  		options.each( function( index, item ) {
  			data.push( that._parseOption( $( item ), index ) );
  		} );
  		this.items = data;
  	},

  	_parseOption: function( option, index ) {
  		var optgroup = option.parent( "optgroup" );

  		return {
  			element: option,
  			index: index,
  			value: option.val(),
  			label: option.text(),
  			hidden: optgroup.prop( "hidden" ) || option.prop( "hidden" ),
  			optgroup: optgroup.attr( "label" ) || "",
  			disabled: optgroup.prop( "disabled" ) || option.prop( "disabled" )
  		};
  	},

  	_destroy: function() {
  		this._unbindFormResetHandler();
  		this.menuWrap.remove();
  		this.button.remove();
  		this.element.show();
  		this.element.removeUniqueId();
  		this.labels.attr( "for", this.ids.element );
  	}
  } ] );


  /*!
   * jQuery UI Slider 1.14.0
   * https://jqueryui.com
   *
   * Copyright OpenJS Foundation and other contributors
   * Released under the MIT license.
   * https://jquery.org/license
   */

  //>>label: Slider
  //>>group: Widgets
  //>>description: Displays a flexible slider with ranges and accessibility via keyboard.
  //>>docs: https://api.jqueryui.com/slider/
  //>>demos: https://jqueryui.com/slider/
  //>>css.structure: ../../themes/base/core.css
  //>>css.structure: ../../themes/base/slider.css
  //>>css.theme: ../../themes/base/theme.css


  $.widget( "ui.slider", $.ui.mouse, {
  	version: "1.14.0",
  	widgetEventPrefix: "slide",

  	options: {
  		animate: false,
  		classes: {
  			"ui-slider": "ui-corner-all",
  			"ui-slider-handle": "ui-corner-all",

  			// Note: ui-widget-header isn't the most fittingly semantic framework class for this
  			// element, but worked best visually with a variety of themes
  			"ui-slider-range": "ui-corner-all ui-widget-header"
  		},
  		distance: 0,
  		max: 100,
  		min: 0,
  		orientation: "horizontal",
  		range: false,
  		step: 1,
  		value: 0,
  		values: null,

  		// Callbacks
  		change: null,
  		slide: null,
  		start: null,
  		stop: null
  	},

  	// Number of pages in a slider
  	// (how many times can you page up/down to go through the whole range)
  	numPages: 5,

  	_create: function() {
  		this._keySliding = false;
  		this._mouseSliding = false;
  		this._animateOff = true;
  		this._handleIndex = null;
  		this._detectOrientation();
  		this._mouseInit();
  		this._calculateNewMax();

  		this._addClass( "ui-slider ui-slider-" + this.orientation,
  			"ui-widget ui-widget-content" );

  		this._refresh();

  		this._animateOff = false;
  	},

  	_refresh: function() {
  		this._createRange();
  		this._createHandles();
  		this._setupEvents();
  		this._refreshValue();
  	},

  	_createHandles: function() {
  		var i, handleCount,
  			options = this.options,
  			existingHandles = this.element.find( ".ui-slider-handle" ),
  			handle = "<span tabindex='0'></span>",
  			handles = [];

  		handleCount = ( options.values && options.values.length ) || 1;

  		if ( existingHandles.length > handleCount ) {
  			existingHandles.slice( handleCount ).remove();
  			existingHandles = existingHandles.slice( 0, handleCount );
  		}

  		for ( i = existingHandles.length; i < handleCount; i++ ) {
  			handles.push( handle );
  		}

  		this.handles = existingHandles.add( $( handles.join( "" ) ).appendTo( this.element ) );

  		this._addClass( this.handles, "ui-slider-handle", "ui-state-default" );

  		this.handle = this.handles.eq( 0 );

  		this.handles.each( function( i ) {
  			$( this )
  				.data( "ui-slider-handle-index", i )
  				.attr( "tabIndex", 0 );
  		} );
  	},

  	_createRange: function() {
  		var options = this.options;

  		if ( options.range ) {
  			if ( options.range === true ) {
  				if ( !options.values ) {
  					options.values = [ this._valueMin(), this._valueMin() ];
  				} else if ( options.values.length && options.values.length !== 2 ) {
  					options.values = [ options.values[ 0 ], options.values[ 0 ] ];
  				} else if ( Array.isArray( options.values ) ) {
  					options.values = options.values.slice( 0 );
  				}
  			}

  			if ( !this.range || !this.range.length ) {
  				this.range = $( "<div>" )
  					.appendTo( this.element );

  				this._addClass( this.range, "ui-slider-range" );
  			} else {
  				this._removeClass( this.range, "ui-slider-range-min ui-slider-range-max" );

  				// Handle range switching from true to min/max
  				this.range.css( {
  					"left": "",
  					"bottom": ""
  				} );
  			}
  			if ( options.range === "min" || options.range === "max" ) {
  				this._addClass( this.range, "ui-slider-range-" + options.range );
  			}
  		} else {
  			if ( this.range ) {
  				this.range.remove();
  			}
  			this.range = null;
  		}
  	},

  	_setupEvents: function() {
  		this._off( this.handles );
  		this._on( this.handles, this._handleEvents );
  		this._hoverable( this.handles );
  		this._focusable( this.handles );
  	},

  	_destroy: function() {
  		this.handles.remove();
  		if ( this.range ) {
  			this.range.remove();
  		}

  		this._mouseDestroy();
  	},

  	_mouseCapture: function( event ) {
  		var position, normValue, distance, closestHandle, index, allowed, offset, mouseOverHandle,
  			that = this,
  			o = this.options;

  		if ( o.disabled ) {
  			return false;
  		}

  		this.elementSize = {
  			width: this.element.outerWidth(),
  			height: this.element.outerHeight()
  		};
  		this.elementOffset = this.element.offset();

  		position = { x: event.pageX, y: event.pageY };
  		normValue = this._normValueFromMouse( position );
  		distance = this._valueMax() - this._valueMin() + 1;
  		this.handles.each( function( i ) {
  			var thisDistance = Math.abs( normValue - that.values( i ) );
  			if ( ( distance > thisDistance ) ||
  				( distance === thisDistance &&
  					( i === that._lastChangedValue || that.values( i ) === o.min ) ) ) {
  				distance = thisDistance;
  				closestHandle = $( this );
  				index = i;
  			}
  		} );

  		allowed = this._start( event, index );
  		if ( allowed === false ) {
  			return false;
  		}
  		this._mouseSliding = true;

  		this._handleIndex = index;

  		this._addClass( closestHandle, null, "ui-state-active" );
  		closestHandle.trigger( "focus" );

  		offset = closestHandle.offset();
  		mouseOverHandle = !$( event.target ).parents().addBack().is( ".ui-slider-handle" );
  		this._clickOffset = mouseOverHandle ? { left: 0, top: 0 } : {
  			left: event.pageX - offset.left - ( closestHandle.width() / 2 ),
  			top: event.pageY - offset.top -
  				( closestHandle.height() / 2 ) -
  				( parseInt( closestHandle.css( "borderTopWidth" ), 10 ) || 0 ) -
  				( parseInt( closestHandle.css( "borderBottomWidth" ), 10 ) || 0 ) +
  				( parseInt( closestHandle.css( "marginTop" ), 10 ) || 0 )
  		};

  		if ( !this.handles.hasClass( "ui-state-hover" ) ) {
  			this._slide( event, index, normValue );
  		}
  		this._animateOff = true;
  		return true;
  	},

  	_mouseStart: function() {
  		return true;
  	},

  	_mouseDrag: function( event ) {
  		var position = { x: event.pageX, y: event.pageY },
  			normValue = this._normValueFromMouse( position );

  		this._slide( event, this._handleIndex, normValue );

  		return false;
  	},

  	_mouseStop: function( event ) {
  		this._removeClass( this.handles, null, "ui-state-active" );
  		this._mouseSliding = false;

  		this._stop( event, this._handleIndex );
  		this._change( event, this._handleIndex );

  		this._handleIndex = null;
  		this._clickOffset = null;
  		this._animateOff = false;

  		return false;
  	},

  	_detectOrientation: function() {
  		this.orientation = ( this.options.orientation === "vertical" ) ? "vertical" : "horizontal";
  	},

  	_normValueFromMouse: function( position ) {
  		var pixelTotal,
  			pixelMouse,
  			percentMouse,
  			valueTotal,
  			valueMouse;

  		if ( this.orientation === "horizontal" ) {
  			pixelTotal = this.elementSize.width;
  			pixelMouse = position.x - this.elementOffset.left -
  				( this._clickOffset ? this._clickOffset.left : 0 );
  		} else {
  			pixelTotal = this.elementSize.height;
  			pixelMouse = position.y - this.elementOffset.top -
  				( this._clickOffset ? this._clickOffset.top : 0 );
  		}

  		percentMouse = ( pixelMouse / pixelTotal );
  		if ( percentMouse > 1 ) {
  			percentMouse = 1;
  		}
  		if ( percentMouse < 0 ) {
  			percentMouse = 0;
  		}
  		if ( this.orientation === "vertical" ) {
  			percentMouse = 1 - percentMouse;
  		}

  		valueTotal = this._valueMax() - this._valueMin();
  		valueMouse = this._valueMin() + percentMouse * valueTotal;

  		return this._trimAlignValue( valueMouse );
  	},

  	_uiHash: function( index, value, values ) {
  		var uiHash = {
  			handle: this.handles[ index ],
  			handleIndex: index,
  			value: value !== undefined ? value : this.value()
  		};

  		if ( this._hasMultipleValues() ) {
  			uiHash.value = value !== undefined ? value : this.values( index );
  			uiHash.values = values || this.values();
  		}

  		return uiHash;
  	},

  	_hasMultipleValues: function() {
  		return this.options.values && this.options.values.length;
  	},

  	_start: function( event, index ) {
  		return this._trigger( "start", event, this._uiHash( index ) );
  	},

  	_slide: function( event, index, newVal ) {
  		var allowed, otherVal,
  			currentValue = this.value(),
  			newValues = this.values();

  		if ( this._hasMultipleValues() ) {
  			otherVal = this.values( index ? 0 : 1 );
  			currentValue = this.values( index );

  			if ( this.options.values.length === 2 && this.options.range === true ) {
  				newVal =  index === 0 ? Math.min( otherVal, newVal ) : Math.max( otherVal, newVal );
  			}

  			newValues[ index ] = newVal;
  		}

  		if ( newVal === currentValue ) {
  			return;
  		}

  		allowed = this._trigger( "slide", event, this._uiHash( index, newVal, newValues ) );

  		// A slide can be canceled by returning false from the slide callback
  		if ( allowed === false ) {
  			return;
  		}

  		if ( this._hasMultipleValues() ) {
  			this.values( index, newVal );
  		} else {
  			this.value( newVal );
  		}
  	},

  	_stop: function( event, index ) {
  		this._trigger( "stop", event, this._uiHash( index ) );
  	},

  	_change: function( event, index ) {
  		if ( !this._keySliding && !this._mouseSliding ) {

  			//store the last changed value index for reference when handles overlap
  			this._lastChangedValue = index;
  			this._trigger( "change", event, this._uiHash( index ) );
  		}
  	},

  	value: function( newValue ) {
  		if ( arguments.length ) {
  			this.options.value = this._trimAlignValue( newValue );
  			this._refreshValue();
  			this._change( null, 0 );
  			return;
  		}

  		return this._value();
  	},

  	values: function( index, newValue ) {
  		var vals,
  			newValues,
  			i;

  		if ( arguments.length > 1 ) {
  			this.options.values[ index ] = this._trimAlignValue( newValue );
  			this._refreshValue();
  			this._change( null, index );
  			return;
  		}

  		if ( arguments.length ) {
  			if ( Array.isArray( arguments[ 0 ] ) ) {
  				vals = this.options.values;
  				newValues = arguments[ 0 ];
  				for ( i = 0; i < vals.length; i += 1 ) {
  					vals[ i ] = this._trimAlignValue( newValues[ i ] );
  					this._change( null, i );
  				}
  				this._refreshValue();
  			} else {
  				if ( this._hasMultipleValues() ) {
  					return this._values( index );
  				} else {
  					return this.value();
  				}
  			}
  		} else {
  			return this._values();
  		}
  	},

  	_setOption: function( key, value ) {
  		var i,
  			valsLength = 0;

  		if ( key === "range" && this.options.range === true ) {
  			if ( value === "min" ) {
  				this.options.value = this._values( 0 );
  				this.options.values = null;
  			} else if ( value === "max" ) {
  				this.options.value = this._values( this.options.values.length - 1 );
  				this.options.values = null;
  			}
  		}

  		if ( Array.isArray( this.options.values ) ) {
  			valsLength = this.options.values.length;
  		}

  		this._super( key, value );

  		switch ( key ) {
  			case "orientation":
  				this._detectOrientation();
  				this._removeClass( "ui-slider-horizontal ui-slider-vertical" )
  					._addClass( "ui-slider-" + this.orientation );
  				this._refreshValue();
  				if ( this.options.range ) {
  					this._refreshRange( value );
  				}

  				// Reset positioning from previous orientation
  				this.handles.css( value === "horizontal" ? "bottom" : "left", "" );
  				break;
  			case "value":
  				this._animateOff = true;
  				this._refreshValue();
  				this._change( null, 0 );
  				this._animateOff = false;
  				break;
  			case "values":
  				this._animateOff = true;
  				this._refreshValue();

  				// Start from the last handle to prevent unreachable handles (#9046)
  				for ( i = valsLength - 1; i >= 0; i-- ) {
  					this._change( null, i );
  				}
  				this._animateOff = false;
  				break;
  			case "step":
  			case "min":
  			case "max":
  				this._animateOff = true;
  				this._calculateNewMax();
  				this._refreshValue();
  				this._animateOff = false;
  				break;
  			case "range":
  				this._animateOff = true;
  				this._refresh();
  				this._animateOff = false;
  				break;
  		}
  	},

  	_setOptionDisabled: function( value ) {
  		this._super( value );

  		this._toggleClass( null, "ui-state-disabled", !!value );
  	},

  	//internal value getter
  	// _value() returns value trimmed by min and max, aligned by step
  	_value: function() {
  		var val = this.options.value;
  		val = this._trimAlignValue( val );

  		return val;
  	},

  	//internal values getter
  	// _values() returns array of values trimmed by min and max, aligned by step
  	// _values( index ) returns single value trimmed by min and max, aligned by step
  	_values: function( index ) {
  		var val,
  			vals,
  			i;

  		if ( arguments.length ) {
  			val = this.options.values[ index ];
  			val = this._trimAlignValue( val );

  			return val;
  		} else if ( this._hasMultipleValues() ) {

  			// .slice() creates a copy of the array
  			// this copy gets trimmed by min and max and then returned
  			vals = this.options.values.slice();
  			for ( i = 0; i < vals.length; i += 1 ) {
  				vals[ i ] = this._trimAlignValue( vals[ i ] );
  			}

  			return vals;
  		} else {
  			return [];
  		}
  	},

  	// Returns the step-aligned value that val is closest to, between (inclusive) min and max
  	_trimAlignValue: function( val ) {
  		if ( val <= this._valueMin() ) {
  			return this._valueMin();
  		}
  		if ( val >= this._valueMax() ) {
  			return this._valueMax();
  		}
  		var step = ( this.options.step > 0 ) ? this.options.step : 1,
  			valModStep = ( val - this._valueMin() ) % step,
  			alignValue = val - valModStep;

  		if ( Math.abs( valModStep ) * 2 >= step ) {
  			alignValue += ( valModStep > 0 ) ? step : ( -step );
  		}

  		// Since JavaScript has problems with large floats, round
  		// the final value to 5 digits after the decimal point (see #4124)
  		return parseFloat( alignValue.toFixed( 5 ) );
  	},

  	_calculateNewMax: function() {
  		var max = this.options.max,
  			min = this._valueMin(),
  			step = this.options.step,
  			aboveMin = Math.round( ( max - min ) / step ) * step;
  		max = aboveMin + min;
  		if ( max > this.options.max ) {

  			//If max is not divisible by step, rounding off may increase its value
  			max -= step;
  		}
  		this.max = parseFloat( max.toFixed( this._precision() ) );
  	},

  	_precision: function() {
  		var precision = this._precisionOf( this.options.step );
  		if ( this.options.min !== null ) {
  			precision = Math.max( precision, this._precisionOf( this.options.min ) );
  		}
  		return precision;
  	},

  	_precisionOf: function( num ) {
  		var str = num.toString(),
  			decimal = str.indexOf( "." );
  		return decimal === -1 ? 0 : str.length - decimal - 1;
  	},

  	_valueMin: function() {
  		return this.options.min;
  	},

  	_valueMax: function() {
  		return this.max;
  	},

  	_refreshRange: function( orientation ) {
  		if ( orientation === "vertical" ) {
  			this.range.css( { "width": "", "left": "" } );
  		}
  		if ( orientation === "horizontal" ) {
  			this.range.css( { "height": "", "bottom": "" } );
  		}
  	},

  	_refreshValue: function() {
  		var lastValPercent, valPercent, value, valueMin, valueMax,
  			oRange = this.options.range,
  			o = this.options,
  			that = this,
  			animate = ( !this._animateOff ) ? o.animate : false,
  			_set = {};

  		if ( this._hasMultipleValues() ) {
  			this.handles.each( function( i ) {
  				valPercent = ( that.values( i ) - that._valueMin() ) / ( that._valueMax() -
  					that._valueMin() ) * 100;
  				_set[ that.orientation === "horizontal" ? "left" : "bottom" ] = valPercent + "%";
  				$( this ).stop( 1, 1 )[ animate ? "animate" : "css" ]( _set, o.animate );
  				if ( that.options.range === true ) {
  					if ( that.orientation === "horizontal" ) {
  						if ( i === 0 ) {
  							that.range.stop( 1, 1 )[ animate ? "animate" : "css" ]( {
  								left: valPercent + "%"
  							}, o.animate );
  						}
  						if ( i === 1 ) {
  							that.range[ animate ? "animate" : "css" ]( {
  								width: ( valPercent - lastValPercent ) + "%"
  							}, {
  								queue: false,
  								duration: o.animate
  							} );
  						}
  					} else {
  						if ( i === 0 ) {
  							that.range.stop( 1, 1 )[ animate ? "animate" : "css" ]( {
  								bottom: ( valPercent ) + "%"
  							}, o.animate );
  						}
  						if ( i === 1 ) {
  							that.range[ animate ? "animate" : "css" ]( {
  								height: ( valPercent - lastValPercent ) + "%"
  							}, {
  								queue: false,
  								duration: o.animate
  							} );
  						}
  					}
  				}
  				lastValPercent = valPercent;
  			} );
  		} else {
  			value = this.value();
  			valueMin = this._valueMin();
  			valueMax = this._valueMax();
  			valPercent = ( valueMax !== valueMin ) ?
  					( value - valueMin ) / ( valueMax - valueMin ) * 100 :
  					0;
  			_set[ this.orientation === "horizontal" ? "left" : "bottom" ] = valPercent + "%";
  			this.handle.stop( 1, 1 )[ animate ? "animate" : "css" ]( _set, o.animate );

  			if ( oRange === "min" && this.orientation === "horizontal" ) {
  				this.range.stop( 1, 1 )[ animate ? "animate" : "css" ]( {
  					width: valPercent + "%"
  				}, o.animate );
  			}
  			if ( oRange === "max" && this.orientation === "horizontal" ) {
  				this.range.stop( 1, 1 )[ animate ? "animate" : "css" ]( {
  					width: ( 100 - valPercent ) + "%"
  				}, o.animate );
  			}
  			if ( oRange === "min" && this.orientation === "vertical" ) {
  				this.range.stop( 1, 1 )[ animate ? "animate" : "css" ]( {
  					height: valPercent + "%"
  				}, o.animate );
  			}
  			if ( oRange === "max" && this.orientation === "vertical" ) {
  				this.range.stop( 1, 1 )[ animate ? "animate" : "css" ]( {
  					height: ( 100 - valPercent ) + "%"
  				}, o.animate );
  			}
  		}
  	},

  	_handleEvents: {
  		keydown: function( event ) {
  			var allowed, curVal, newVal, step,
  				index = $( event.target ).data( "ui-slider-handle-index" );

  			switch ( event.keyCode ) {
  				case $.ui.keyCode.HOME:
  				case $.ui.keyCode.END:
  				case $.ui.keyCode.PAGE_UP:
  				case $.ui.keyCode.PAGE_DOWN:
  				case $.ui.keyCode.UP:
  				case $.ui.keyCode.RIGHT:
  				case $.ui.keyCode.DOWN:
  				case $.ui.keyCode.LEFT:
  					event.preventDefault();
  					if ( !this._keySliding ) {
  						this._keySliding = true;
  						this._addClass( $( event.target ), null, "ui-state-active" );
  						allowed = this._start( event, index );
  						if ( allowed === false ) {
  							return;
  						}
  					}
  					break;
  			}

  			step = this.options.step;
  			if ( this._hasMultipleValues() ) {
  				curVal = newVal = this.values( index );
  			} else {
  				curVal = newVal = this.value();
  			}

  			switch ( event.keyCode ) {
  				case $.ui.keyCode.HOME:
  					newVal = this._valueMin();
  					break;
  				case $.ui.keyCode.END:
  					newVal = this._valueMax();
  					break;
  				case $.ui.keyCode.PAGE_UP:
  					newVal = this._trimAlignValue(
  						curVal + ( ( this._valueMax() - this._valueMin() ) / this.numPages )
  					);
  					break;
  				case $.ui.keyCode.PAGE_DOWN:
  					newVal = this._trimAlignValue(
  						curVal - ( ( this._valueMax() - this._valueMin() ) / this.numPages ) );
  					break;
  				case $.ui.keyCode.UP:
  				case $.ui.keyCode.RIGHT:
  					if ( curVal === this._valueMax() ) {
  						return;
  					}
  					newVal = this._trimAlignValue( curVal + step );
  					break;
  				case $.ui.keyCode.DOWN:
  				case $.ui.keyCode.LEFT:
  					if ( curVal === this._valueMin() ) {
  						return;
  					}
  					newVal = this._trimAlignValue( curVal - step );
  					break;
  			}

  			this._slide( event, index, newVal );
  		},
  		keyup: function( event ) {
  			var index = $( event.target ).data( "ui-slider-handle-index" );

  			if ( this._keySliding ) {
  				this._keySliding = false;
  				this._stop( event, index );
  				this._change( event, index );
  				this._removeClass( $( event.target ), null, "ui-state-active" );
  			}
  		}
  	}
  } );


  /*!
   * jQuery UI Sortable 1.14.0
   * https://jqueryui.com
   *
   * Copyright OpenJS Foundation and other contributors
   * Released under the MIT license.
   * https://jquery.org/license
   */

  //>>label: Sortable
  //>>group: Interactions
  //>>description: Enables items in a list to be sorted using the mouse.
  //>>docs: https://api.jqueryui.com/sortable/
  //>>demos: https://jqueryui.com/sortable/
  //>>css.structure: ../../themes/base/sortable.css


  $.widget( "ui.sortable", $.ui.mouse, {
  	version: "1.14.0",
  	widgetEventPrefix: "sort",
  	ready: false,
  	options: {
  		appendTo: "parent",
  		axis: false,
  		connectWith: false,
  		containment: false,
  		cursor: "auto",
  		cursorAt: false,
  		dropOnEmpty: true,
  		forcePlaceholderSize: false,
  		forceHelperSize: false,
  		grid: false,
  		handle: false,
  		helper: "original",
  		items: "> *",
  		opacity: false,
  		placeholder: false,
  		revert: false,
  		scroll: true,
  		scrollSensitivity: 20,
  		scrollSpeed: 20,
  		scope: "default",
  		tolerance: "intersect",
  		zIndex: 1000,

  		// Callbacks
  		activate: null,
  		beforeStop: null,
  		change: null,
  		deactivate: null,
  		out: null,
  		over: null,
  		receive: null,
  		remove: null,
  		sort: null,
  		start: null,
  		stop: null,
  		update: null
  	},

  	_isOverAxis: function( x, reference, size ) {
  		return ( x >= reference ) && ( x < ( reference + size ) );
  	},

  	_isFloating: function( item ) {
  		return ( /left|right/ ).test( item.css( "float" ) ) ||
  			( /inline|table-cell/ ).test( item.css( "display" ) );
  	},

  	_create: function() {
  		this.containerCache = {};
  		this._addClass( "ui-sortable" );

  		//Get the items
  		this.refresh();

  		//Let's determine the parent's offset
  		this.offset = this.element.offset();

  		//Initialize mouse events for interaction
  		this._mouseInit();

  		this._setHandleClassName();

  		//We're ready to go
  		this.ready = true;

  	},

  	_setOption: function( key, value ) {
  		this._super( key, value );

  		if ( key === "handle" ) {
  			this._setHandleClassName();
  		}
  	},

  	_setHandleClassName: function() {
  		var that = this;
  		this._removeClass( this.element.find( ".ui-sortable-handle" ), "ui-sortable-handle" );
  		$.each( this.items, function() {
  			that._addClass(
  				this.instance.options.handle ?
  					this.item.find( this.instance.options.handle ) :
  					this.item,
  				"ui-sortable-handle"
  			);
  		} );
  	},

  	_destroy: function() {
  		this._mouseDestroy();

  		for ( var i = this.items.length - 1; i >= 0; i-- ) {
  			this.items[ i ].item.removeData( this.widgetName + "-item" );
  		}

  		return this;
  	},

  	_mouseCapture: function( event, overrideHandle ) {
  		var currentItem = null,
  			validHandle = false,
  			that = this;

  		if ( this.reverting ) {
  			return false;
  		}

  		if ( this.options.disabled || this.options.type === "static" ) {
  			return false;
  		}

  		//We have to refresh the items data once first
  		this._refreshItems( event );

  		//Find out if the clicked node (or one of its parents) is a actual item in this.items
  		$( event.target ).parents().each( function() {
  			if ( $.data( this, that.widgetName + "-item" ) === that ) {
  				currentItem = $( this );
  				return false;
  			}
  		} );
  		if ( $.data( event.target, that.widgetName + "-item" ) === that ) {
  			currentItem = $( event.target );
  		}

  		if ( !currentItem ) {
  			return false;
  		}
  		if ( this.options.handle && !overrideHandle ) {
  			$( this.options.handle, currentItem ).find( "*" ).addBack().each( function() {
  				if ( this === event.target ) {
  					validHandle = true;
  				}
  			} );
  			if ( !validHandle ) {
  				return false;
  			}
  		}

  		this.currentItem = currentItem;
  		this._removeCurrentsFromItems();
  		return true;

  	},

  	_mouseStart: function( event, overrideHandle, noActivation ) {

  		var i, body,
  			o = this.options;

  		this.currentContainer = this;

  		//We only need to call refreshPositions, because the refreshItems call has been moved to
  		// mouseCapture
  		this.refreshPositions();

  		//Prepare the dragged items parent
  		this.appendTo = $( o.appendTo !== "parent" ?
  				o.appendTo :
  				this.currentItem.parent() );

  		//Create and append the visible helper
  		this.helper = this._createHelper( event );

  		//Cache the helper size
  		this._cacheHelperProportions();

  		/*
  		 * - Position generation -
  		 * This block generates everything position related - it's the core of draggables.
  		 */

  		//Cache the margins of the original element
  		this._cacheMargins();

  		//The element's absolute position on the page minus margins
  		this.offset = this.currentItem.offset();
  		this.offset = {
  			top: this.offset.top - this.margins.top,
  			left: this.offset.left - this.margins.left
  		};

  		$.extend( this.offset, {
  			click: { //Where the click happened, relative to the element
  				left: event.pageX - this.offset.left,
  				top: event.pageY - this.offset.top
  			},

  			// This is a relative to absolute position minus the actual position calculation -
  			// only used for relative positioned helper
  			relative: this._getRelativeOffset()
  		} );

  		// After we get the helper offset, but before we get the parent offset we can
  		// change the helper's position to absolute
  		// TODO: Still need to figure out a way to make relative sorting possible
  		this.helper.css( "position", "absolute" );
  		this.cssPosition = this.helper.css( "position" );

  		//Adjust the mouse offset relative to the helper if "cursorAt" is supplied
  		if ( o.cursorAt ) {
  			this._adjustOffsetFromHelper( o.cursorAt );
  		}

  		//Cache the former DOM position
  		this.domPosition = {
  			prev: this.currentItem.prev()[ 0 ],
  			parent: this.currentItem.parent()[ 0 ]
  		};

  		// If the helper is not the original, hide the original so it's not playing any role during
  		// the drag, won't cause anything bad this way
  		if ( this.helper[ 0 ] !== this.currentItem[ 0 ] ) {
  			this.currentItem.hide();
  		}

  		//Create the placeholder
  		this._createPlaceholder();

  		//Get the next scrolling parent
  		this.scrollParent = this.placeholder.scrollParent();

  		$.extend( this.offset, {
  			parent: this._getParentOffset()
  		} );

  		//Set a containment if given in the options
  		if ( o.containment ) {
  			this._setContainment();
  		}

  		if ( o.cursor && o.cursor !== "auto" ) { // cursor option
  			body = this.document.find( "body" );

  			this._storedStylesheet =
  				$( "<style>*{ cursor: " + o.cursor + " !important; }</style>" ).appendTo( body );
  		}

  		// We need to make sure to grab the zIndex before setting the
  		// opacity, because setting the opacity to anything lower than 1
  		// causes the zIndex to change from "auto" to 0.
  		if ( o.zIndex ) { // zIndex option
  			if ( this.helper.css( "zIndex" ) ) {
  				this._storedZIndex = this.helper.css( "zIndex" );
  			}
  			this.helper.css( "zIndex", o.zIndex );
  		}

  		if ( o.opacity ) { // opacity option
  			if ( this.helper.css( "opacity" ) ) {
  				this._storedOpacity = this.helper.css( "opacity" );
  			}
  			this.helper.css( "opacity", o.opacity );
  		}

  		//Prepare scrolling
  		if ( this.scrollParent[ 0 ] !== this.document[ 0 ] &&
  				this.scrollParent[ 0 ].tagName !== "HTML" ) {
  			this.overflowOffset = this.scrollParent.offset();
  		}

  		//Call callbacks
  		this._trigger( "start", event, this._uiHash() );

  		//Recache the helper size
  		if ( !this._preserveHelperProportions ) {
  			this._cacheHelperProportions();
  		}

  		//Post "activate" events to possible containers
  		if ( !noActivation ) {
  			for ( i = this.containers.length - 1; i >= 0; i-- ) {
  				this.containers[ i ]._trigger( "activate", event, this._uiHash( this ) );
  			}
  		}

  		//Prepare possible droppables
  		if ( $.ui.ddmanager ) {
  			$.ui.ddmanager.current = this;
  		}

  		if ( $.ui.ddmanager && !o.dropBehaviour ) {
  			$.ui.ddmanager.prepareOffsets( this, event );
  		}

  		this.dragging = true;

  		this._addClass( this.helper, "ui-sortable-helper" );

  		//Move the helper, if needed
  		if ( !this.helper.parent().is( this.appendTo ) ) {
  			this.helper.detach().appendTo( this.appendTo );

  			//Update position
  			this.offset.parent = this._getParentOffset();
  		}

  		//Generate the original position
  		this.position = this.originalPosition = this._generatePosition( event );
  		this.originalPageX = event.pageX;
  		this.originalPageY = event.pageY;
  		this.lastPositionAbs = this.positionAbs = this._convertPositionTo( "absolute" );

  		this._mouseDrag( event );

  		return true;

  	},

  	_scroll: function( event ) {
  		var o = this.options,
  			scrolled = false;

  		if ( this.scrollParent[ 0 ] !== this.document[ 0 ] &&
  				this.scrollParent[ 0 ].tagName !== "HTML" ) {

  			if ( ( this.overflowOffset.top + this.scrollParent[ 0 ].offsetHeight ) -
  					event.pageY < o.scrollSensitivity ) {
  				this.scrollParent[ 0 ].scrollTop =
  					scrolled = this.scrollParent[ 0 ].scrollTop + o.scrollSpeed;
  			} else if ( event.pageY - this.overflowOffset.top < o.scrollSensitivity ) {
  				this.scrollParent[ 0 ].scrollTop =
  					scrolled = this.scrollParent[ 0 ].scrollTop - o.scrollSpeed;
  			}

  			if ( ( this.overflowOffset.left + this.scrollParent[ 0 ].offsetWidth ) -
  					event.pageX < o.scrollSensitivity ) {
  				this.scrollParent[ 0 ].scrollLeft = scrolled =
  					this.scrollParent[ 0 ].scrollLeft + o.scrollSpeed;
  			} else if ( event.pageX - this.overflowOffset.left < o.scrollSensitivity ) {
  				this.scrollParent[ 0 ].scrollLeft = scrolled =
  					this.scrollParent[ 0 ].scrollLeft - o.scrollSpeed;
  			}

  		} else {

  			if ( event.pageY - this.document.scrollTop() < o.scrollSensitivity ) {
  				scrolled = this.document.scrollTop( this.document.scrollTop() - o.scrollSpeed );
  			} else if ( this.window.height() - ( event.pageY - this.document.scrollTop() ) <
  					o.scrollSensitivity ) {
  				scrolled = this.document.scrollTop( this.document.scrollTop() + o.scrollSpeed );
  			}

  			if ( event.pageX - this.document.scrollLeft() < o.scrollSensitivity ) {
  				scrolled = this.document.scrollLeft(
  					this.document.scrollLeft() - o.scrollSpeed
  				);
  			} else if ( this.window.width() - ( event.pageX - this.document.scrollLeft() ) <
  					o.scrollSensitivity ) {
  				scrolled = this.document.scrollLeft(
  					this.document.scrollLeft() + o.scrollSpeed
  				);
  			}

  		}

  		return scrolled;
  	},

  	_mouseDrag: function( event ) {
  		var i, item, itemElement, intersection,
  			o = this.options;

  		//Compute the helpers position
  		this.position = this._generatePosition( event );
  		this.positionAbs = this._convertPositionTo( "absolute" );

  		//Set the helper position
  		if ( !this.options.axis || this.options.axis !== "y" ) {
  			this.helper[ 0 ].style.left = this.position.left + "px";
  		}
  		if ( !this.options.axis || this.options.axis !== "x" ) {
  			this.helper[ 0 ].style.top = this.position.top + "px";
  		}

  		//Do scrolling
  		if ( o.scroll ) {
  			if ( this._scroll( event ) !== false ) {

  				//Update item positions used in position checks
  				this._refreshItemPositions( true );

  				if ( $.ui.ddmanager && !o.dropBehaviour ) {
  					$.ui.ddmanager.prepareOffsets( this, event );
  				}
  			}
  		}

  		this.dragDirection = {
  			vertical: this._getDragVerticalDirection(),
  			horizontal: this._getDragHorizontalDirection()
  		};

  		//Rearrange
  		for ( i = this.items.length - 1; i >= 0; i-- ) {

  			//Cache variables and intersection, continue if no intersection
  			item = this.items[ i ];
  			itemElement = item.item[ 0 ];
  			intersection = this._intersectsWithPointer( item );
  			if ( !intersection ) {
  				continue;
  			}

  			// Only put the placeholder inside the current Container, skip all
  			// items from other containers. This works because when moving
  			// an item from one container to another the
  			// currentContainer is switched before the placeholder is moved.
  			//
  			// Without this, moving items in "sub-sortables" can cause
  			// the placeholder to jitter between the outer and inner container.
  			if ( item.instance !== this.currentContainer ) {
  				continue;
  			}

  			// Cannot intersect with itself
  			// no useless actions that have been done before
  			// no action if the item moved is the parent of the item checked
  			if ( itemElement !== this.currentItem[ 0 ] &&
  				this.placeholder[ intersection === 1 ?
  				"next" : "prev" ]()[ 0 ] !== itemElement &&
  				!$.contains( this.placeholder[ 0 ], itemElement ) &&
  				( this.options.type === "semi-dynamic" ?
  					!$.contains( this.element[ 0 ], itemElement ) :
  					true
  				)
  			) {

  				this.direction = intersection === 1 ? "down" : "up";

  				if ( this.options.tolerance === "pointer" ||
  						this._intersectsWithSides( item ) ) {
  					this._rearrange( event, item );
  				} else {
  					break;
  				}

  				this._trigger( "change", event, this._uiHash() );
  				break;
  			}
  		}

  		//Post events to containers
  		this._contactContainers( event );

  		//Interconnect with droppables
  		if ( $.ui.ddmanager ) {
  			$.ui.ddmanager.drag( this, event );
  		}

  		//Call callbacks
  		this._trigger( "sort", event, this._uiHash() );

  		this.lastPositionAbs = this.positionAbs;
  		return false;

  	},

  	_mouseStop: function( event, noPropagation ) {

  		if ( !event ) {
  			return;
  		}

  		//If we are using droppables, inform the manager about the drop
  		if ( $.ui.ddmanager && !this.options.dropBehaviour ) {
  			$.ui.ddmanager.drop( this, event );
  		}

  		if ( this.options.revert ) {
  			var that = this,
  				cur = this.placeholder.offset(),
  				axis = this.options.axis,
  				animation = {};

  			if ( !axis || axis === "x" ) {
  				animation.left = cur.left - this.offset.parent.left - this.margins.left +
  					( this.offsetParent[ 0 ] === this.document[ 0 ].body ?
  						0 :
  						this.offsetParent[ 0 ].scrollLeft
  					);
  			}
  			if ( !axis || axis === "y" ) {
  				animation.top = cur.top - this.offset.parent.top - this.margins.top +
  					( this.offsetParent[ 0 ] === this.document[ 0 ].body ?
  						0 :
  						this.offsetParent[ 0 ].scrollTop
  					);
  			}
  			this.reverting = true;
  			$( this.helper ).animate(
  				animation,
  				parseInt( this.options.revert, 10 ) || 500,
  				function() {
  					that._clear( event );
  				}
  			);
  		} else {
  			this._clear( event, noPropagation );
  		}

  		return false;

  	},

  	cancel: function() {

  		if ( this.dragging ) {

  			this._mouseUp( new $.Event( "mouseup", { target: null } ) );

  			if ( this.options.helper === "original" ) {
  				this.currentItem.css( this._storedCSS );
  				this._removeClass( this.currentItem, "ui-sortable-helper" );
  			} else {
  				this.currentItem.show();
  			}

  			//Post deactivating events to containers
  			for ( var i = this.containers.length - 1; i >= 0; i-- ) {
  				this.containers[ i ]._trigger( "deactivate", null, this._uiHash( this ) );
  				if ( this.containers[ i ].containerCache.over ) {
  					this.containers[ i ]._trigger( "out", null, this._uiHash( this ) );
  					this.containers[ i ].containerCache.over = 0;
  				}
  			}

  		}

  		if ( this.placeholder ) {

  			//$(this.placeholder[0]).remove(); would have been the jQuery way - unfortunately,
  			// it unbinds ALL events from the original node!
  			if ( this.placeholder[ 0 ].parentNode ) {
  				this.placeholder[ 0 ].parentNode.removeChild( this.placeholder[ 0 ] );
  			}
  			if ( this.options.helper !== "original" && this.helper &&
  					this.helper[ 0 ].parentNode ) {
  				this.helper.remove();
  			}

  			$.extend( this, {
  				helper: null,
  				dragging: false,
  				reverting: false,
  				_noFinalSort: null
  			} );

  			if ( this.domPosition.prev ) {
  				$( this.domPosition.prev ).after( this.currentItem );
  			} else {
  				$( this.domPosition.parent ).prepend( this.currentItem );
  			}
  		}

  		return this;

  	},

  	serialize: function( o ) {

  		var items = this._getItemsAsjQuery( o && o.connected ),
  			str = [];
  		o = o || {};

  		$( items ).each( function() {
  			var res = ( $( o.item || this ).attr( o.attribute || "id" ) || "" )
  				.match( o.expression || ( /(.+)[\-=_](.+)/ ) );
  			if ( res ) {
  				str.push(
  					( o.key || res[ 1 ] + "[]" ) +
  					"=" + ( o.key && o.expression ? res[ 1 ] : res[ 2 ] ) );
  			}
  		} );

  		if ( !str.length && o.key ) {
  			str.push( o.key + "=" );
  		}

  		return str.join( "&" );

  	},

  	toArray: function( o ) {

  		var items = this._getItemsAsjQuery( o && o.connected ),
  			ret = [];

  		o = o || {};

  		items.each( function() {
  			ret.push( $( o.item || this ).attr( o.attribute || "id" ) || "" );
  		} );
  		return ret;

  	},

  	/* Be careful with the following core functions */
  	_intersectsWith: function( item ) {

  		var x1 = this.positionAbs.left,
  			x2 = x1 + this.helperProportions.width,
  			y1 = this.positionAbs.top,
  			y2 = y1 + this.helperProportions.height,
  			l = item.left,
  			r = l + item.width,
  			t = item.top,
  			b = t + item.height,
  			dyClick = this.offset.click.top,
  			dxClick = this.offset.click.left,
  			isOverElementHeight = ( this.options.axis === "x" ) || ( ( y1 + dyClick ) > t &&
  				( y1 + dyClick ) < b ),
  			isOverElementWidth = ( this.options.axis === "y" ) || ( ( x1 + dxClick ) > l &&
  				( x1 + dxClick ) < r ),
  			isOverElement = isOverElementHeight && isOverElementWidth;

  		if ( this.options.tolerance === "pointer" ||
  			this.options.forcePointerForContainers ||
  			( this.options.tolerance !== "pointer" &&
  				this.helperProportions[ this.floating ? "width" : "height" ] >
  				item[ this.floating ? "width" : "height" ] )
  		) {
  			return isOverElement;
  		} else {

  			return ( l < x1 + ( this.helperProportions.width / 2 ) && // Right Half
  				x2 - ( this.helperProportions.width / 2 ) < r && // Left Half
  				t < y1 + ( this.helperProportions.height / 2 ) && // Bottom Half
  				y2 - ( this.helperProportions.height / 2 ) < b ); // Top Half

  		}
  	},

  	_intersectsWithPointer: function( item ) {
  		var verticalDirection, horizontalDirection,
  			isOverElementHeight = ( this.options.axis === "x" ) ||
  				this._isOverAxis(
  					this.positionAbs.top + this.offset.click.top, item.top, item.height ),
  			isOverElementWidth = ( this.options.axis === "y" ) ||
  				this._isOverAxis(
  					this.positionAbs.left + this.offset.click.left, item.left, item.width ),
  			isOverElement = isOverElementHeight && isOverElementWidth;

  		if ( !isOverElement ) {
  			return false;
  		}

  		verticalDirection = this.dragDirection.vertical;
  		horizontalDirection = this.dragDirection.horizontal;

  		return this.floating ?
  			( ( horizontalDirection === "right" || verticalDirection === "down" ) ? 2 : 1 ) :
  			( verticalDirection && ( verticalDirection === "down" ? 2 : 1 ) );

  	},

  	_intersectsWithSides: function( item ) {

  		var isOverBottomHalf = this._isOverAxis( this.positionAbs.top +
  				this.offset.click.top, item.top + ( item.height / 2 ), item.height ),
  			isOverRightHalf = this._isOverAxis( this.positionAbs.left +
  				this.offset.click.left, item.left + ( item.width / 2 ), item.width ),
  			verticalDirection = this.dragDirection.vertical,
  			horizontalDirection = this.dragDirection.horizontal;

  		if ( this.floating && horizontalDirection ) {
  			return ( ( horizontalDirection === "right" && isOverRightHalf ) ||
  				( horizontalDirection === "left" && !isOverRightHalf ) );
  		} else {
  			return verticalDirection && ( ( verticalDirection === "down" && isOverBottomHalf ) ||
  				( verticalDirection === "up" && !isOverBottomHalf ) );
  		}

  	},

  	_getDragVerticalDirection: function() {
  		var delta = this.positionAbs.top - this.lastPositionAbs.top;
  		return delta !== 0 && ( delta > 0 ? "down" : "up" );
  	},

  	_getDragHorizontalDirection: function() {
  		var delta = this.positionAbs.left - this.lastPositionAbs.left;
  		return delta !== 0 && ( delta > 0 ? "right" : "left" );
  	},

  	refresh: function( event ) {
  		this._refreshItems( event );
  		this._setHandleClassName();
  		this.refreshPositions();
  		return this;
  	},

  	_connectWith: function() {
  		var options = this.options;
  		return options.connectWith.constructor === String ?
  			[ options.connectWith ] :
  			options.connectWith;
  	},

  	_getItemsAsjQuery: function( connected ) {

  		var i, j, cur, inst,
  			items = [],
  			queries = [],
  			connectWith = this._connectWith();

  		if ( connectWith && connected ) {
  			for ( i = connectWith.length - 1; i >= 0; i-- ) {
  				cur = $( connectWith[ i ], this.document[ 0 ] );
  				for ( j = cur.length - 1; j >= 0; j-- ) {
  					inst = $.data( cur[ j ], this.widgetFullName );
  					if ( inst && inst !== this && !inst.options.disabled ) {
  						queries.push( [ typeof inst.options.items === "function" ?
  							inst.options.items.call( inst.element ) :
  							$( inst.options.items, inst.element )
  								.not( ".ui-sortable-helper" )
  								.not( ".ui-sortable-placeholder" ), inst ] );
  					}
  				}
  			}
  		}

  		queries.push( [ typeof this.options.items === "function" ?
  			this.options.items
  				.call( this.element, null, { options: this.options, item: this.currentItem } ) :
  			$( this.options.items, this.element )
  				.not( ".ui-sortable-helper" )
  				.not( ".ui-sortable-placeholder" ), this ] );

  		function addItems() {
  			items.push( this );
  		}
  		for ( i = queries.length - 1; i >= 0; i-- ) {
  			queries[ i ][ 0 ].each( addItems );
  		}

  		return $( items );

  	},

  	_removeCurrentsFromItems: function() {

  		var list = this.currentItem.find( ":data(" + this.widgetName + "-item)" );

  		this.items = $.grep( this.items, function( item ) {
  			for ( var j = 0; j < list.length; j++ ) {
  				if ( list[ j ] === item.item[ 0 ] ) {
  					return false;
  				}
  			}
  			return true;
  		} );

  	},

  	_refreshItems: function( event ) {

  		this.items = [];
  		this.containers = [ this ];

  		var i, j, cur, inst, targetData, _queries, item, queriesLength,
  			items = this.items,
  			queries = [ [ typeof this.options.items === "function" ?
  				this.options.items.call( this.element[ 0 ], event, { item: this.currentItem } ) :
  				$( this.options.items, this.element ), this ] ],
  			connectWith = this._connectWith();

  		//Shouldn't be run the first time through due to massive slow-down
  		if ( connectWith && this.ready ) {
  			for ( i = connectWith.length - 1; i >= 0; i-- ) {
  				cur = $( connectWith[ i ], this.document[ 0 ] );
  				for ( j = cur.length - 1; j >= 0; j-- ) {
  					inst = $.data( cur[ j ], this.widgetFullName );
  					if ( inst && inst !== this && !inst.options.disabled ) {
  						queries.push( [ typeof inst.options.items === "function" ?
  							inst.options.items
  								.call( inst.element[ 0 ], event, { item: this.currentItem } ) :
  							$( inst.options.items, inst.element ), inst ] );
  						this.containers.push( inst );
  					}
  				}
  			}
  		}

  		for ( i = queries.length - 1; i >= 0; i-- ) {
  			targetData = queries[ i ][ 1 ];
  			_queries = queries[ i ][ 0 ];

  			for ( j = 0, queriesLength = _queries.length; j < queriesLength; j++ ) {
  				item = $( _queries[ j ] );

  				// Data for target checking (mouse manager)
  				item.data( this.widgetName + "-item", targetData );

  				items.push( {
  					item: item,
  					instance: targetData,
  					width: 0, height: 0,
  					left: 0, top: 0
  				} );
  			}
  		}

  	},

  	_refreshItemPositions: function( fast ) {
  		var i, item, t, p;

  		for ( i = this.items.length - 1; i >= 0; i-- ) {
  			item = this.items[ i ];

  			//We ignore calculating positions of all connected containers when we're not over them
  			if ( this.currentContainer && item.instance !== this.currentContainer &&
  					item.item[ 0 ] !== this.currentItem[ 0 ] ) {
  				continue;
  			}

  			t = this.options.toleranceElement ?
  				$( this.options.toleranceElement, item.item ) :
  				item.item;

  			if ( !fast ) {
  				item.width = t.outerWidth();
  				item.height = t.outerHeight();
  			}

  			p = t.offset();
  			item.left = p.left;
  			item.top = p.top;
  		}
  	},

  	refreshPositions: function( fast ) {

  		// Determine whether items are being displayed horizontally
  		this.floating = this.items.length ?
  			this.options.axis === "x" || this._isFloating( this.items[ 0 ].item ) :
  			false;

  		// This has to be redone because due to the item being moved out/into the offsetParent,
  		// the offsetParent's position will change
  		if ( this.offsetParent && this.helper ) {
  			this.offset.parent = this._getParentOffset();
  		}

  		this._refreshItemPositions( fast );

  		var i, p;

  		if ( this.options.custom && this.options.custom.refreshContainers ) {
  			this.options.custom.refreshContainers.call( this );
  		} else {
  			for ( i = this.containers.length - 1; i >= 0; i-- ) {
  				p = this.containers[ i ].element.offset();
  				this.containers[ i ].containerCache.left = p.left;
  				this.containers[ i ].containerCache.top = p.top;
  				this.containers[ i ].containerCache.width =
  					this.containers[ i ].element.outerWidth();
  				this.containers[ i ].containerCache.height =
  					this.containers[ i ].element.outerHeight();
  			}
  		}

  		return this;
  	},

  	_createPlaceholder: function( that ) {
  		that = that || this;
  		var className, nodeName,
  			o = that.options;

  		if ( !o.placeholder || o.placeholder.constructor === String ) {
  			className = o.placeholder;
  			nodeName = that.currentItem[ 0 ].nodeName.toLowerCase();
  			o.placeholder = {
  				element: function() {

  					var element = $( "<" + nodeName + ">", that.document[ 0 ] );

  					that._addClass( element, "ui-sortable-placeholder",
  							className || that.currentItem[ 0 ].className )
  						._removeClass( element, "ui-sortable-helper" );

  					if ( nodeName === "tbody" ) {
  						that._createTrPlaceholder(
  							that.currentItem.find( "tr" ).eq( 0 ),
  							$( "<tr>", that.document[ 0 ] ).appendTo( element )
  						);
  					} else if ( nodeName === "tr" ) {
  						that._createTrPlaceholder( that.currentItem, element );
  					} else if ( nodeName === "img" ) {
  						element.attr( "src", that.currentItem.attr( "src" ) );
  					}

  					if ( !className ) {
  						element.css( "visibility", "hidden" );
  					}

  					return element;
  				},
  				update: function( container, p ) {

  					// 1. If a className is set as 'placeholder option, we don't force sizes -
  					// the class is responsible for that
  					// 2. The option 'forcePlaceholderSize can be enabled to force it even if a
  					// class name is specified
  					if ( className && !o.forcePlaceholderSize ) {
  						return;
  					}

  					// If the element doesn't have a actual height or width by itself (without
  					// styles coming from a stylesheet), it receives the inline height and width
  					// from the dragged item. Or, if it's a tbody or tr, it's going to have a height
  					// anyway since we're populating them with <td>s above, but they're unlikely to
  					// be the correct height on their own if the row heights are dynamic, so we'll
  					// always assign the height of the dragged item given forcePlaceholderSize
  					// is true.
  					if ( !p.height() || ( o.forcePlaceholderSize &&
  							( nodeName === "tbody" || nodeName === "tr" ) ) ) {
  						p.height(
  							that.currentItem.innerHeight() -
  							parseInt( that.currentItem.css( "paddingTop" ) || 0, 10 ) -
  							parseInt( that.currentItem.css( "paddingBottom" ) || 0, 10 ) );
  					}
  					if ( !p.width() ) {
  						p.width(
  							that.currentItem.innerWidth() -
  							parseInt( that.currentItem.css( "paddingLeft" ) || 0, 10 ) -
  							parseInt( that.currentItem.css( "paddingRight" ) || 0, 10 ) );
  					}
  				}
  			};
  		}

  		//Create the placeholder
  		that.placeholder = $( o.placeholder.element.call( that.element, that.currentItem ) );

  		//Append it after the actual current item
  		that.currentItem.after( that.placeholder );

  		//Update the size of the placeholder (TODO: Logic to fuzzy, see line 316/317)
  		o.placeholder.update( that, that.placeholder );

  	},

  	_createTrPlaceholder: function( sourceTr, targetTr ) {
  		var that = this;

  		sourceTr.children().each( function() {
  			$( "<td>&#160;</td>", that.document[ 0 ] )
  				.attr( "colspan", $( this ).attr( "colspan" ) || 1 )
  				.appendTo( targetTr );
  		} );
  	},

  	_contactContainers: function( event ) {
  		var i, j, dist, itemWithLeastDistance, posProperty, sizeProperty, cur, nearBottom,
  			floating, axis,
  			innermostContainer = null,
  			innermostIndex = null;

  		// Get innermost container that intersects with item
  		for ( i = this.containers.length - 1; i >= 0; i-- ) {

  			// Never consider a container that's located within the item itself
  			if ( $.contains( this.currentItem[ 0 ], this.containers[ i ].element[ 0 ] ) ) {
  				continue;
  			}

  			if ( this._intersectsWith( this.containers[ i ].containerCache ) ) {

  				// If we've already found a container and it's more "inner" than this, then continue
  				if ( innermostContainer &&
  						$.contains(
  							this.containers[ i ].element[ 0 ],
  							innermostContainer.element[ 0 ] ) ) {
  					continue;
  				}

  				innermostContainer = this.containers[ i ];
  				innermostIndex = i;

  			} else {

  				// container doesn't intersect. trigger "out" event if necessary
  				if ( this.containers[ i ].containerCache.over ) {
  					this.containers[ i ]._trigger( "out", event, this._uiHash( this ) );
  					this.containers[ i ].containerCache.over = 0;
  				}
  			}

  		}

  		// If no intersecting containers found, return
  		if ( !innermostContainer ) {
  			return;
  		}

  		// Move the item into the container if it's not there already
  		if ( this.containers.length === 1 ) {
  			if ( !this.containers[ innermostIndex ].containerCache.over ) {
  				this.containers[ innermostIndex ]._trigger( "over", event, this._uiHash( this ) );
  				this.containers[ innermostIndex ].containerCache.over = 1;
  			}
  		} else {

  			// When entering a new container, we will find the item with the least distance and
  			// append our item near it
  			dist = 10000;
  			itemWithLeastDistance = null;
  			floating = innermostContainer.floating || this._isFloating( this.currentItem );
  			posProperty = floating ? "left" : "top";
  			sizeProperty = floating ? "width" : "height";
  			axis = floating ? "pageX" : "pageY";

  			for ( j = this.items.length - 1; j >= 0; j-- ) {
  				if ( !$.contains(
  						this.containers[ innermostIndex ].element[ 0 ], this.items[ j ].item[ 0 ] )
  				) {
  					continue;
  				}
  				if ( this.items[ j ].item[ 0 ] === this.currentItem[ 0 ] ) {
  					continue;
  				}

  				cur = this.items[ j ].item.offset()[ posProperty ];
  				nearBottom = false;
  				if ( event[ axis ] - cur > this.items[ j ][ sizeProperty ] / 2 ) {
  					nearBottom = true;
  				}

  				if ( Math.abs( event[ axis ] - cur ) < dist ) {
  					dist = Math.abs( event[ axis ] - cur );
  					itemWithLeastDistance = this.items[ j ];
  					this.direction = nearBottom ? "up" : "down";
  				}
  			}

  			//Check if dropOnEmpty is enabled
  			if ( !itemWithLeastDistance && !this.options.dropOnEmpty ) {
  				return;
  			}

  			if ( this.currentContainer === this.containers[ innermostIndex ] ) {
  				if ( !this.currentContainer.containerCache.over ) {
  					this.containers[ innermostIndex ]._trigger( "over", event, this._uiHash() );
  					this.currentContainer.containerCache.over = 1;
  				}
  				return;
  			}

  			if ( itemWithLeastDistance ) {
  				this._rearrange( event, itemWithLeastDistance, null, true );
  			} else {
  				this._rearrange( event, null, this.containers[ innermostIndex ].element, true );
  			}
  			this._trigger( "change", event, this._uiHash() );
  			this.containers[ innermostIndex ]._trigger( "change", event, this._uiHash( this ) );
  			this.currentContainer = this.containers[ innermostIndex ];

  			//Update the placeholder
  			this.options.placeholder.update( this.currentContainer, this.placeholder );

  			//Update scrollParent
  			this.scrollParent = this.placeholder.scrollParent();

  			//Update overflowOffset
  			if ( this.scrollParent[ 0 ] !== this.document[ 0 ] &&
  					this.scrollParent[ 0 ].tagName !== "HTML" ) {
  				this.overflowOffset = this.scrollParent.offset();
  			}

  			this.containers[ innermostIndex ]._trigger( "over", event, this._uiHash( this ) );
  			this.containers[ innermostIndex ].containerCache.over = 1;
  		}

  	},

  	_createHelper: function( event ) {

  		var o = this.options,
  			helper = typeof o.helper === "function" ?
  				$( o.helper.apply( this.element[ 0 ], [ event, this.currentItem ] ) ) :
  				( o.helper === "clone" ? this.currentItem.clone() : this.currentItem );

  		//Add the helper to the DOM if that didn't happen already
  		if ( !helper.parents( "body" ).length ) {
  			this.appendTo[ 0 ].appendChild( helper[ 0 ] );
  		}

  		if ( helper[ 0 ] === this.currentItem[ 0 ] ) {
  			this._storedCSS = {
  				width: this.currentItem[ 0 ].style.width,
  				height: this.currentItem[ 0 ].style.height,
  				position: this.currentItem.css( "position" ),
  				top: this.currentItem.css( "top" ),
  				left: this.currentItem.css( "left" )
  			};
  		}

  		if ( !helper[ 0 ].style.width || o.forceHelperSize ) {
  			helper.width( this.currentItem.width() );
  		}
  		if ( !helper[ 0 ].style.height || o.forceHelperSize ) {
  			helper.height( this.currentItem.height() );
  		}

  		return helper;

  	},

  	_adjustOffsetFromHelper: function( obj ) {
  		if ( typeof obj === "string" ) {
  			obj = obj.split( " " );
  		}
  		if ( Array.isArray( obj ) ) {
  			obj = { left: +obj[ 0 ], top: +obj[ 1 ] || 0 };
  		}
  		if ( "left" in obj ) {
  			this.offset.click.left = obj.left + this.margins.left;
  		}
  		if ( "right" in obj ) {
  			this.offset.click.left = this.helperProportions.width - obj.right + this.margins.left;
  		}
  		if ( "top" in obj ) {
  			this.offset.click.top = obj.top + this.margins.top;
  		}
  		if ( "bottom" in obj ) {
  			this.offset.click.top = this.helperProportions.height - obj.bottom + this.margins.top;
  		}
  	},

  	_getParentOffset: function() {

  		//Get the offsetParent and cache its position
  		this.offsetParent = this.helper.offsetParent();
  		var po = this.offsetParent.offset();

  		// This is a special case where we need to modify a offset calculated on start, since the
  		// following happened:
  		// 1. The position of the helper is absolute, so it's position is calculated based on the
  		// next positioned parent
  		// 2. The actual offset parent is a child of the scroll parent, and the scroll parent isn't
  		// the document, which means that the scroll is included in the initial calculation of the
  		// offset of the parent, and never recalculated upon drag
  		if ( this.cssPosition === "absolute" && this.scrollParent[ 0 ] !== this.document[ 0 ] &&
  				$.contains( this.scrollParent[ 0 ], this.offsetParent[ 0 ] ) ) {
  			po.left += this.scrollParent.scrollLeft();
  			po.top += this.scrollParent.scrollTop();
  		}

  		// This needs to be actually done for all browsers, since pageX/pageY includes
  		// this information.
  		if ( this.offsetParent[ 0 ] === this.document[ 0 ].body ) {
  			po = { top: 0, left: 0 };
  		}

  		return {
  			top: po.top + ( parseInt( this.offsetParent.css( "borderTopWidth" ), 10 ) || 0 ),
  			left: po.left + ( parseInt( this.offsetParent.css( "borderLeftWidth" ), 10 ) || 0 )
  		};

  	},

  	_getRelativeOffset: function() {

  		if ( this.cssPosition === "relative" ) {
  			var p = this.currentItem.position();
  			return {
  				top: p.top - ( parseInt( this.helper.css( "top" ), 10 ) || 0 ) +
  					this.scrollParent.scrollTop(),
  				left: p.left - ( parseInt( this.helper.css( "left" ), 10 ) || 0 ) +
  					this.scrollParent.scrollLeft()
  			};
  		} else {
  			return { top: 0, left: 0 };
  		}

  	},

  	_cacheMargins: function() {
  		this.margins = {
  			left: ( parseInt( this.currentItem.css( "marginLeft" ), 10 ) || 0 ),
  			top: ( parseInt( this.currentItem.css( "marginTop" ), 10 ) || 0 )
  		};
  	},

  	_cacheHelperProportions: function() {
  		this.helperProportions = {
  			width: this.helper.outerWidth(),
  			height: this.helper.outerHeight()
  		};
  	},

  	_setContainment: function() {

  		var ce, co, over,
  			o = this.options;
  		if ( o.containment === "parent" ) {
  			o.containment = this.helper[ 0 ].parentNode;
  		}
  		if ( o.containment === "document" || o.containment === "window" ) {
  			this.containment = [
  				0 - this.offset.relative.left - this.offset.parent.left,
  				0 - this.offset.relative.top - this.offset.parent.top,
  				o.containment === "document" ?
  					this.document.width() :
  					this.window.width() - this.helperProportions.width - this.margins.left,
  				( o.containment === "document" ?
  					( this.document.height() || document.body.parentNode.scrollHeight ) :
  					this.window.height() || this.document[ 0 ].body.parentNode.scrollHeight
  				) - this.helperProportions.height - this.margins.top
  			];
  		}

  		if ( !( /^(document|window|parent)$/ ).test( o.containment ) ) {
  			ce = $( o.containment )[ 0 ];
  			co = $( o.containment ).offset();
  			over = ( $( ce ).css( "overflow" ) !== "hidden" );

  			this.containment = [
  				co.left + ( parseInt( $( ce ).css( "borderLeftWidth" ), 10 ) || 0 ) +
  					( parseInt( $( ce ).css( "paddingLeft" ), 10 ) || 0 ) - this.margins.left,
  				co.top + ( parseInt( $( ce ).css( "borderTopWidth" ), 10 ) || 0 ) +
  					( parseInt( $( ce ).css( "paddingTop" ), 10 ) || 0 ) - this.margins.top,
  				co.left + ( over ? Math.max( ce.scrollWidth, ce.offsetWidth ) : ce.offsetWidth ) -
  					( parseInt( $( ce ).css( "borderLeftWidth" ), 10 ) || 0 ) -
  					( parseInt( $( ce ).css( "paddingRight" ), 10 ) || 0 ) -
  					this.helperProportions.width - this.margins.left,
  				co.top + ( over ? Math.max( ce.scrollHeight, ce.offsetHeight ) : ce.offsetHeight ) -
  					( parseInt( $( ce ).css( "borderTopWidth" ), 10 ) || 0 ) -
  					( parseInt( $( ce ).css( "paddingBottom" ), 10 ) || 0 ) -
  					this.helperProportions.height - this.margins.top
  			];
  		}

  	},

  	_convertPositionTo: function( d, pos ) {

  		if ( !pos ) {
  			pos = this.position;
  		}
  		var mod = d === "absolute" ? 1 : -1,
  			scroll = this.cssPosition === "absolute" &&
  				!( this.scrollParent[ 0 ] !== this.document[ 0 ] &&
  				$.contains( this.scrollParent[ 0 ], this.offsetParent[ 0 ] ) ) ?
  					this.offsetParent :
  					this.scrollParent,
  			scrollIsRootNode = ( /(html|body)/i ).test( scroll[ 0 ].tagName );

  		return {
  			top: (

  				// The absolute mouse position
  				pos.top	+

  				// Only for relative positioned nodes: Relative offset from element to offset parent
  				this.offset.relative.top * mod +

  				// The offsetParent's offset without borders (offset + border)
  				this.offset.parent.top * mod -
  				( ( this.cssPosition === "fixed" ?
  					-this.scrollParent.scrollTop() :
  					( scrollIsRootNode ? 0 : scroll.scrollTop() ) ) * mod )
  			),
  			left: (

  				// The absolute mouse position
  				pos.left +

  				// Only for relative positioned nodes: Relative offset from element to offset parent
  				this.offset.relative.left * mod +

  				// The offsetParent's offset without borders (offset + border)
  				this.offset.parent.left * mod	-
  				( ( this.cssPosition === "fixed" ?
  					-this.scrollParent.scrollLeft() : scrollIsRootNode ? 0 :
  					scroll.scrollLeft() ) * mod )
  			)
  		};

  	},

  	_generatePosition: function( event ) {

  		var top, left,
  			o = this.options,
  			pageX = event.pageX,
  			pageY = event.pageY,
  			scroll = this.cssPosition === "absolute" &&
  				!( this.scrollParent[ 0 ] !== this.document[ 0 ] &&
  				$.contains( this.scrollParent[ 0 ], this.offsetParent[ 0 ] ) ) ?
  					this.offsetParent :
  					this.scrollParent,
  				scrollIsRootNode = ( /(html|body)/i ).test( scroll[ 0 ].tagName );

  		// This is another very weird special case that only happens for relative elements:
  		// 1. If the css position is relative
  		// 2. and the scroll parent is the document or similar to the offset parent
  		// we have to refresh the relative offset during the scroll so there are no jumps
  		if ( this.cssPosition === "relative" && !( this.scrollParent[ 0 ] !== this.document[ 0 ] &&
  				this.scrollParent[ 0 ] !== this.offsetParent[ 0 ] ) ) {
  			this.offset.relative = this._getRelativeOffset();
  		}

  		/*
  		 * - Position constraining -
  		 * Constrain the position to a mix of grid, containment.
  		 */

  		if ( this.originalPosition ) { //If we are not dragging yet, we won't check for options

  			if ( this.containment ) {
  				if ( event.pageX - this.offset.click.left < this.containment[ 0 ] ) {
  					pageX = this.containment[ 0 ] + this.offset.click.left;
  				}
  				if ( event.pageY - this.offset.click.top < this.containment[ 1 ] ) {
  					pageY = this.containment[ 1 ] + this.offset.click.top;
  				}
  				if ( event.pageX - this.offset.click.left > this.containment[ 2 ] ) {
  					pageX = this.containment[ 2 ] + this.offset.click.left;
  				}
  				if ( event.pageY - this.offset.click.top > this.containment[ 3 ] ) {
  					pageY = this.containment[ 3 ] + this.offset.click.top;
  				}
  			}

  			if ( o.grid ) {
  				top = this.originalPageY + Math.round( ( pageY - this.originalPageY ) /
  					o.grid[ 1 ] ) * o.grid[ 1 ];
  				pageY = this.containment ?
  					( ( top - this.offset.click.top >= this.containment[ 1 ] &&
  						top - this.offset.click.top <= this.containment[ 3 ] ) ?
  							top :
  							( ( top - this.offset.click.top >= this.containment[ 1 ] ) ?
  								top - o.grid[ 1 ] : top + o.grid[ 1 ] ) ) :
  								top;

  				left = this.originalPageX + Math.round( ( pageX - this.originalPageX ) /
  					o.grid[ 0 ] ) * o.grid[ 0 ];
  				pageX = this.containment ?
  					( ( left - this.offset.click.left >= this.containment[ 0 ] &&
  						left - this.offset.click.left <= this.containment[ 2 ] ) ?
  							left :
  							( ( left - this.offset.click.left >= this.containment[ 0 ] ) ?
  								left - o.grid[ 0 ] : left + o.grid[ 0 ] ) ) :
  								left;
  			}

  		}

  		return {
  			top: (

  				// The absolute mouse position
  				pageY -

  				// Click offset (relative to the element)
  				this.offset.click.top -

  				// Only for relative positioned nodes: Relative offset from element to offset parent
  				this.offset.relative.top -

  				// The offsetParent's offset without borders (offset + border)
  				this.offset.parent.top +
  				( ( this.cssPosition === "fixed" ?
  					-this.scrollParent.scrollTop() :
  					( scrollIsRootNode ? 0 : scroll.scrollTop() ) ) )
  			),
  			left: (

  				// The absolute mouse position
  				pageX -

  				// Click offset (relative to the element)
  				this.offset.click.left -

  				// Only for relative positioned nodes: Relative offset from element to offset parent
  				this.offset.relative.left -

  				// The offsetParent's offset without borders (offset + border)
  				this.offset.parent.left +
  				( ( this.cssPosition === "fixed" ?
  					-this.scrollParent.scrollLeft() :
  					scrollIsRootNode ? 0 : scroll.scrollLeft() ) )
  			)
  		};

  	},

  	_rearrange: function( event, i, a, hardRefresh ) {

  		if ( a ) {
  			a[ 0 ].appendChild( this.placeholder[ 0 ] );
  		} else {
  			i.item[ 0 ].parentNode.insertBefore( this.placeholder[ 0 ],
  				( this.direction === "down" ? i.item[ 0 ] : i.item[ 0 ].nextSibling ) );
  		}

  		//Various things done here to improve the performance:
  		// 1. we create a setTimeout, that calls refreshPositions
  		// 2. on the instance, we have a counter variable, that get's higher after every append
  		// 3. on the local scope, we copy the counter variable, and check in the timeout,
  		// if it's still the same
  		// 4. this lets only the last addition to the timeout stack through
  		this.counter = this.counter ? ++this.counter : 1;
  		var counter = this.counter;

  		this._delay( function() {
  			if ( counter === this.counter ) {

  				//Precompute after each DOM insertion, NOT on mousemove
  				this.refreshPositions( !hardRefresh );
  			}
  		} );

  	},

  	_clear: function( event, noPropagation ) {

  		this.reverting = false;

  		// We delay all events that have to be triggered to after the point where the placeholder
  		// has been removed and everything else normalized again
  		var i,
  			delayedTriggers = [];

  		// We first have to update the dom position of the actual currentItem
  		// Note: don't do it if the current item is already removed (by a user), or it gets
  		// reappended (see #4088)
  		if ( !this._noFinalSort && this.currentItem.parent().length ) {
  			this.placeholder.before( this.currentItem );
  		}
  		this._noFinalSort = null;

  		if ( this.helper[ 0 ] === this.currentItem[ 0 ] ) {
  			for ( i in this._storedCSS ) {
  				if ( this._storedCSS[ i ] === "auto" || this._storedCSS[ i ] === "static" ) {
  					this._storedCSS[ i ] = "";
  				}
  			}
  			this.currentItem.css( this._storedCSS );
  			this._removeClass( this.currentItem, "ui-sortable-helper" );
  		} else {
  			this.currentItem.show();
  		}

  		if ( this.fromOutside && !noPropagation ) {
  			delayedTriggers.push( function( event ) {
  				this._trigger( "receive", event, this._uiHash( this.fromOutside ) );
  			} );
  		}
  		if ( ( this.fromOutside ||
  				this.domPosition.prev !==
  				this.currentItem.prev().not( ".ui-sortable-helper" )[ 0 ] ||
  				this.domPosition.parent !== this.currentItem.parent()[ 0 ] ) && !noPropagation ) {

  			// Trigger update callback if the DOM position has changed
  			delayedTriggers.push( function( event ) {
  				this._trigger( "update", event, this._uiHash() );
  			} );
  		}

  		// Check if the items Container has Changed and trigger appropriate
  		// events.
  		if ( this !== this.currentContainer ) {
  			if ( !noPropagation ) {
  				delayedTriggers.push( function( event ) {
  					this._trigger( "remove", event, this._uiHash() );
  				} );
  				delayedTriggers.push( ( function( c ) {
  					return function( event ) {
  						c._trigger( "receive", event, this._uiHash( this ) );
  					};
  				} ).call( this, this.currentContainer ) );
  				delayedTriggers.push( ( function( c ) {
  					return function( event ) {
  						c._trigger( "update", event, this._uiHash( this ) );
  					};
  				} ).call( this, this.currentContainer ) );
  			}
  		}

  		//Post events to containers
  		function delayEvent( type, instance, container ) {
  			return function( event ) {
  				container._trigger( type, event, instance._uiHash( instance ) );
  			};
  		}
  		for ( i = this.containers.length - 1; i >= 0; i-- ) {
  			if ( !noPropagation ) {
  				delayedTriggers.push( delayEvent( "deactivate", this, this.containers[ i ] ) );
  			}
  			if ( this.containers[ i ].containerCache.over ) {
  				delayedTriggers.push( delayEvent( "out", this, this.containers[ i ] ) );
  				this.containers[ i ].containerCache.over = 0;
  			}
  		}

  		//Do what was originally in plugins
  		if ( this._storedStylesheet ) {
  			this._storedStylesheet.remove();
  			this._storedStylesheet = null;
  		}
  		if ( this._storedOpacity ) {
  			this.helper.css( "opacity", this._storedOpacity );
  		}
  		if ( this._storedZIndex ) {
  			this.helper.css( "zIndex", this._storedZIndex === "auto" ? "" : this._storedZIndex );
  		}

  		this.dragging = false;

  		if ( !noPropagation ) {
  			this._trigger( "beforeStop", event, this._uiHash() );
  		}

  		//$(this.placeholder[0]).remove(); would have been the jQuery way - unfortunately,
  		// it unbinds ALL events from the original node!
  		this.placeholder[ 0 ].parentNode.removeChild( this.placeholder[ 0 ] );

  		if ( !this.cancelHelperRemoval ) {
  			if ( this.helper[ 0 ] !== this.currentItem[ 0 ] ) {
  				this.helper.remove();
  			}
  			this.helper = null;
  		}

  		if ( !noPropagation ) {
  			for ( i = 0; i < delayedTriggers.length; i++ ) {

  				// Trigger all delayed events
  				delayedTriggers[ i ].call( this, event );
  			}
  			this._trigger( "stop", event, this._uiHash() );
  		}

  		this.fromOutside = false;
  		return !this.cancelHelperRemoval;

  	},

  	_trigger: function() {
  		if ( $.Widget.prototype._trigger.apply( this, arguments ) === false ) {
  			this.cancel();
  		}
  	},

  	_uiHash: function( _inst ) {
  		var inst = _inst || this;
  		return {
  			helper: inst.helper,
  			placeholder: inst.placeholder || $( [] ),
  			position: inst.position,
  			originalPosition: inst.originalPosition,
  			offset: inst.positionAbs,
  			item: inst.currentItem,
  			sender: _inst ? _inst.element : null
  		};
  	}

  } );


  /*!
   * jQuery UI Spinner 1.14.0
   * https://jqueryui.com
   *
   * Copyright OpenJS Foundation and other contributors
   * Released under the MIT license.
   * https://jquery.org/license
   */

  //>>label: Spinner
  //>>group: Widgets
  //>>description: Displays buttons to easily input numbers via the keyboard or mouse.
  //>>docs: https://api.jqueryui.com/spinner/
  //>>demos: https://jqueryui.com/spinner/
  //>>css.structure: ../../themes/base/core.css
  //>>css.structure: ../../themes/base/spinner.css
  //>>css.theme: ../../themes/base/theme.css


  function spinnerModifier( fn ) {
  	return function() {
  		var previous = this.element.val();
  		fn.apply( this, arguments );
  		this._refresh();
  		if ( previous !== this.element.val() ) {
  			this._trigger( "change" );
  		}
  	};
  }

  $.widget( "ui.spinner", {
  	version: "1.14.0",
  	defaultElement: "<input>",
  	widgetEventPrefix: "spin",
  	options: {
  		classes: {
  			"ui-spinner": "ui-corner-all",
  			"ui-spinner-down": "ui-corner-br",
  			"ui-spinner-up": "ui-corner-tr"
  		},
  		culture: null,
  		icons: {
  			down: "ui-icon-triangle-1-s",
  			up: "ui-icon-triangle-1-n"
  		},
  		incremental: true,
  		max: null,
  		min: null,
  		numberFormat: null,
  		page: 10,
  		step: 1,

  		change: null,
  		spin: null,
  		start: null,
  		stop: null
  	},

  	_create: function() {

  		// handle string values that need to be parsed
  		this._setOption( "max", this.options.max );
  		this._setOption( "min", this.options.min );
  		this._setOption( "step", this.options.step );

  		// Only format if there is a value, prevents the field from being marked
  		// as invalid in Firefox, see #9573.
  		if ( this.value() !== "" ) {

  			// Format the value, but don't constrain.
  			this._value( this.element.val(), true );
  		}

  		this._draw();
  		this._on( this._events );
  		this._refresh();

  		// Turning off autocomplete prevents the browser from remembering the
  		// value when navigating through history, so we re-enable autocomplete
  		// if the page is unloaded before the widget is destroyed. #7790
  		this._on( this.window, {
  			beforeunload: function() {
  				this.element.removeAttr( "autocomplete" );
  			}
  		} );
  	},

  	_getCreateOptions: function() {
  		var options = this._super();
  		var element = this.element;

  		$.each( [ "min", "max", "step" ], function( i, option ) {
  			var value = element.attr( option );
  			if ( value != null && value.length ) {
  				options[ option ] = value;
  			}
  		} );

  		return options;
  	},

  	_events: {
  		keydown: function( event ) {
  			if ( this._start( event ) && this._keydown( event ) ) {
  				event.preventDefault();
  			}
  		},
  		keyup: "_stop",
  		focus: function() {
  			this.previous = this.element.val();
  		},
  		blur: function( event ) {
  			this._stop();
  			this._refresh();
  			if ( this.previous !== this.element.val() ) {
  				this._trigger( "change", event );
  			}
  		},
  		mousewheel: function( event, delta ) {
  			var activeElement = this.document[ 0 ].activeElement;
  			var isActive = this.element[ 0 ] === activeElement;

  			if ( !isActive || !delta ) {
  				return;
  			}

  			if ( !this.spinning && !this._start( event ) ) {
  				return false;
  			}

  			this._spin( ( delta > 0 ? 1 : -1 ) * this.options.step, event );
  			clearTimeout( this.mousewheelTimer );
  			this.mousewheelTimer = this._delay( function() {
  				if ( this.spinning ) {
  					this._stop( event );
  				}
  			}, 100 );
  			event.preventDefault();
  		},
  		"mousedown .ui-spinner-button": function( event ) {
  			var previous;

  			// We never want the buttons to have focus; whenever the user is
  			// interacting with the spinner, the focus should be on the input.
  			// If the input is focused then this.previous is properly set from
  			// when the input first received focus. If the input is not focused
  			// then we need to set this.previous based on the value before spinning.
  			previous = this.element[ 0 ] === this.document[ 0 ].activeElement ?
  				this.previous : this.element.val();
  			function checkFocus() {
  				var isActive = this.element[ 0 ] === this.document[ 0 ].activeElement;
  				if ( !isActive ) {
  					this.element.trigger( "focus" );
  					this.previous = previous;
  				}
  			}

  			// Ensure focus is on (or stays on) the text field
  			event.preventDefault();
  			checkFocus.call( this );

  			if ( this._start( event ) === false ) {
  				return;
  			}

  			this._repeat( null, $( event.currentTarget )
  				.hasClass( "ui-spinner-up" ) ? 1 : -1, event );
  		},
  		"mouseup .ui-spinner-button": "_stop",
  		"mouseenter .ui-spinner-button": function( event ) {

  			// button will add ui-state-active if mouse was down while mouseleave and kept down
  			if ( !$( event.currentTarget ).hasClass( "ui-state-active" ) ) {
  				return;
  			}

  			if ( this._start( event ) === false ) {
  				return false;
  			}
  			this._repeat( null, $( event.currentTarget )
  				.hasClass( "ui-spinner-up" ) ? 1 : -1, event );
  		},

  		// TODO: do we really want to consider this a stop?
  		// shouldn't we just stop the repeater and wait until mouseup before
  		// we trigger the stop event?
  		"mouseleave .ui-spinner-button": "_stop"
  	},

  	// Support mobile enhanced option and make backcompat more sane
  	_enhance: function() {
  		this.uiSpinner = this.element
  			.attr( "autocomplete", "off" )
  			.wrap( "<span>" )
  			.parent()

  				// Add buttons
  				.append(
  					"<a></a><a></a>"
  				);
  	},

  	_draw: function() {
  		this._enhance();

  		this._addClass( this.uiSpinner, "ui-spinner", "ui-widget ui-widget-content" );
  		this._addClass( "ui-spinner-input" );

  		this.element.attr( "role", "spinbutton" );

  		// Button bindings
  		this.buttons = this.uiSpinner.children( "a" )
  			.attr( "tabIndex", -1 )
  			.attr( "aria-hidden", true )
  			.button( {
  				classes: {
  					"ui-button": ""
  				}
  			} );

  		// TODO: Right now button does not support classes this is already updated in button PR
  		this._removeClass( this.buttons, "ui-corner-all" );

  		this._addClass( this.buttons.first(), "ui-spinner-button ui-spinner-up" );
  		this._addClass( this.buttons.last(), "ui-spinner-button ui-spinner-down" );
  		this.buttons.first().button( {
  			"icon": this.options.icons.up,
  			"showLabel": false
  		} );
  		this.buttons.last().button( {
  			"icon": this.options.icons.down,
  			"showLabel": false
  		} );

  		// IE 6 doesn't understand height: 50% for the buttons
  		// unless the wrapper has an explicit height
  		if ( this.buttons.height() > Math.ceil( this.uiSpinner.height() * 0.5 ) &&
  				this.uiSpinner.height() > 0 ) {
  			this.uiSpinner.height( this.uiSpinner.height() );
  		}
  	},

  	_keydown: function( event ) {
  		var options = this.options,
  			keyCode = $.ui.keyCode;

  		switch ( event.keyCode ) {
  		case keyCode.UP:
  			this._repeat( null, 1, event );
  			return true;
  		case keyCode.DOWN:
  			this._repeat( null, -1, event );
  			return true;
  		case keyCode.PAGE_UP:
  			this._repeat( null, options.page, event );
  			return true;
  		case keyCode.PAGE_DOWN:
  			this._repeat( null, -options.page, event );
  			return true;
  		}

  		return false;
  	},

  	_start: function( event ) {
  		if ( !this.spinning && this._trigger( "start", event ) === false ) {
  			return false;
  		}

  		if ( !this.counter ) {
  			this.counter = 1;
  		}
  		this.spinning = true;
  		return true;
  	},

  	_repeat: function( i, steps, event ) {
  		i = i || 500;

  		clearTimeout( this.timer );
  		this.timer = this._delay( function() {
  			this._repeat( 40, steps, event );
  		}, i );

  		this._spin( steps * this.options.step, event );
  	},

  	_spin: function( step, event ) {
  		var value = this.value() || 0;

  		if ( !this.counter ) {
  			this.counter = 1;
  		}

  		value = this._adjustValue( value + step * this._increment( this.counter ) );

  		if ( !this.spinning || this._trigger( "spin", event, { value: value } ) !== false ) {
  			this._value( value );
  			this.counter++;
  		}
  	},

  	_increment: function( i ) {
  		var incremental = this.options.incremental;

  		if ( incremental ) {
  			return typeof incremental === "function" ?
  				incremental( i ) :
  				Math.floor( i * i * i / 50000 - i * i / 500 + 17 * i / 200 + 1 );
  		}

  		return 1;
  	},

  	_precision: function() {
  		var precision = this._precisionOf( this.options.step );
  		if ( this.options.min !== null ) {
  			precision = Math.max( precision, this._precisionOf( this.options.min ) );
  		}
  		return precision;
  	},

  	_precisionOf: function( num ) {
  		var str = num.toString(),
  			decimal = str.indexOf( "." );
  		return decimal === -1 ? 0 : str.length - decimal - 1;
  	},

  	_adjustValue: function( value ) {
  		var base, aboveMin,
  			options = this.options;

  		// Make sure we're at a valid step
  		// - find out where we are relative to the base (min or 0)
  		base = options.min !== null ? options.min : 0;
  		aboveMin = value - base;

  		// - round to the nearest step
  		aboveMin = Math.round( aboveMin / options.step ) * options.step;

  		// - rounding is based on 0, so adjust back to our base
  		value = base + aboveMin;

  		// Fix precision from bad JS floating point math
  		value = parseFloat( value.toFixed( this._precision() ) );

  		// Clamp the value
  		if ( options.max !== null && value > options.max ) {
  			return options.max;
  		}
  		if ( options.min !== null && value < options.min ) {
  			return options.min;
  		}

  		return value;
  	},

  	_stop: function( event ) {
  		if ( !this.spinning ) {
  			return;
  		}

  		clearTimeout( this.timer );
  		clearTimeout( this.mousewheelTimer );
  		this.counter = 0;
  		this.spinning = false;
  		this._trigger( "stop", event );
  	},

  	_setOption: function( key, value ) {
  		var prevValue, first, last;

  		if ( key === "culture" || key === "numberFormat" ) {
  			prevValue = this._parse( this.element.val() );
  			this.options[ key ] = value;
  			this.element.val( this._format( prevValue ) );
  			return;
  		}

  		if ( key === "max" || key === "min" || key === "step" ) {
  			if ( typeof value === "string" ) {
  				value = this._parse( value );
  			}
  		}
  		if ( key === "icons" ) {
  			first = this.buttons.first().find( ".ui-icon" );
  			this._removeClass( first, null, this.options.icons.up );
  			this._addClass( first, null, value.up );
  			last = this.buttons.last().find( ".ui-icon" );
  			this._removeClass( last, null, this.options.icons.down );
  			this._addClass( last, null, value.down );
  		}

  		this._super( key, value );
  	},

  	_setOptionDisabled: function( value ) {
  		this._super( value );

  		this._toggleClass( this.uiSpinner, null, "ui-state-disabled", !!value );
  		this.element.prop( "disabled", !!value );
  		this.buttons.button( value ? "disable" : "enable" );
  	},

  	_setOptions: spinnerModifier( function( options ) {
  		this._super( options );
  	} ),

  	_parse: function( val ) {
  		if ( typeof val === "string" && val !== "" ) {
  			val = window.Globalize && this.options.numberFormat ?
  				Globalize.parseFloat( val, 10, this.options.culture ) : +val;
  		}
  		return val === "" || isNaN( val ) ? null : val;
  	},

  	_format: function( value ) {
  		if ( value === "" ) {
  			return "";
  		}
  		return window.Globalize && this.options.numberFormat ?
  			Globalize.format( value, this.options.numberFormat, this.options.culture ) :
  			value;
  	},

  	_refresh: function() {
  		this.element.attr( {
  			"aria-valuemin": this.options.min,
  			"aria-valuemax": this.options.max,

  			// TODO: what should we do with values that can't be parsed?
  			"aria-valuenow": this._parse( this.element.val() )
  		} );
  	},

  	isValid: function() {
  		var value = this.value();

  		// Null is invalid
  		if ( value === null ) {
  			return false;
  		}

  		// If value gets adjusted, it's invalid
  		return value === this._adjustValue( value );
  	},

  	// Update the value without triggering change
  	_value: function( value, allowAny ) {
  		var parsed;
  		if ( value !== "" ) {
  			parsed = this._parse( value );
  			if ( parsed !== null ) {
  				if ( !allowAny ) {
  					parsed = this._adjustValue( parsed );
  				}
  				value = this._format( parsed );
  			}
  		}
  		this.element.val( value );
  		this._refresh();
  	},

  	_destroy: function() {
  		this.element
  			.prop( "disabled", false )
  			.removeAttr( "autocomplete role aria-valuemin aria-valuemax aria-valuenow" );

  		this.uiSpinner.replaceWith( this.element );
  	},

  	stepUp: spinnerModifier( function( steps ) {
  		this._stepUp( steps );
  	} ),
  	_stepUp: function( steps ) {
  		if ( this._start() ) {
  			this._spin( ( steps || 1 ) * this.options.step );
  			this._stop();
  		}
  	},

  	stepDown: spinnerModifier( function( steps ) {
  		this._stepDown( steps );
  	} ),
  	_stepDown: function( steps ) {
  		if ( this._start() ) {
  			this._spin( ( steps || 1 ) * -this.options.step );
  			this._stop();
  		}
  	},

  	pageUp: spinnerModifier( function( pages ) {
  		this._stepUp( ( pages || 1 ) * this.options.page );
  	} ),

  	pageDown: spinnerModifier( function( pages ) {
  		this._stepDown( ( pages || 1 ) * this.options.page );
  	} ),

  	value: function( newVal ) {
  		if ( !arguments.length ) {
  			return this._parse( this.element.val() );
  		}
  		spinnerModifier( this._value ).call( this, newVal );
  	},

  	widget: function() {
  		return this.uiSpinner;
  	}
  } );

  // DEPRECATED
  // TODO: switch return back to widget declaration at top of file when this is removed
  if ( $.uiBackCompat === true ) {

  	// Backcompat for spinner html extension points
  	$.widget( "ui.spinner", $.ui.spinner, {
  		_enhance: function() {
  			this.uiSpinner = this.element
  				.attr( "autocomplete", "off" )
  				.wrap( this._uiSpinnerHtml() )
  				.parent()

  					// Add buttons
  					.append( this._buttonHtml() );
  		},
  		_uiSpinnerHtml: function() {
  			return "<span>";
  		},

  		_buttonHtml: function() {
  			return "<a></a><a></a>";
  		}
  	} );
  }

  $.ui.spinner;


  /*!
   * jQuery UI Tabs 1.14.0
   * https://jqueryui.com
   *
   * Copyright OpenJS Foundation and other contributors
   * Released under the MIT license.
   * https://jquery.org/license
   */

  //>>label: Tabs
  //>>group: Widgets
  //>>description: Transforms a set of container elements into a tab structure.
  //>>docs: https://api.jqueryui.com/tabs/
  //>>demos: https://jqueryui.com/tabs/
  //>>css.structure: ../../themes/base/core.css
  //>>css.structure: ../../themes/base/tabs.css
  //>>css.theme: ../../themes/base/theme.css


  $.widget( "ui.tabs", {
  	version: "1.14.0",
  	delay: 300,
  	options: {
  		active: null,
  		classes: {
  			"ui-tabs": "ui-corner-all",
  			"ui-tabs-nav": "ui-corner-all",
  			"ui-tabs-panel": "ui-corner-bottom",
  			"ui-tabs-tab": "ui-corner-top"
  		},
  		collapsible: false,
  		event: "click",
  		heightStyle: "content",
  		hide: null,
  		show: null,

  		// Callbacks
  		activate: null,
  		beforeActivate: null,
  		beforeLoad: null,
  		load: null
  	},

  	_isLocal: ( function() {
  		var rhash = /#.*$/;

  		return function( anchor ) {
  			var anchorUrl, locationUrl;

  			anchorUrl = anchor.href.replace( rhash, "" );
  			locationUrl = location.href.replace( rhash, "" );

  			// Decoding may throw an error if the URL isn't UTF-8 (#9518)
  			try {
  				anchorUrl = decodeURIComponent( anchorUrl );
  			} catch ( error ) {}
  			try {
  				locationUrl = decodeURIComponent( locationUrl );
  			} catch ( error ) {}

  			return anchor.hash.length > 1 && anchorUrl === locationUrl;
  		};
  	} )(),

  	_create: function() {
  		var that = this,
  			options = this.options;

  		this.running = false;

  		this._addClass( "ui-tabs", "ui-widget ui-widget-content" );
  		this._toggleClass( "ui-tabs-collapsible", null, options.collapsible );

  		this._processTabs();
  		options.active = this._initialActive();

  		// Take disabling tabs via class attribute from HTML
  		// into account and update option properly.
  		if ( Array.isArray( options.disabled ) ) {
  			options.disabled = $.uniqueSort( options.disabled.concat(
  				$.map( this.tabs.filter( ".ui-state-disabled" ), function( li ) {
  					return that.tabs.index( li );
  				} )
  			) ).sort();
  		}

  		// Check for length avoids error when initializing empty list
  		if ( this.options.active !== false && this.anchors.length ) {
  			this.active = this._findActive( options.active );
  		} else {
  			this.active = $();
  		}

  		this._refresh();

  		if ( this.active.length ) {
  			this.load( options.active );
  		}
  	},

  	_initialActive: function() {
  		var active = this.options.active,
  			collapsible = this.options.collapsible,
  			locationHash = location.hash.substring( 1 );

  		if ( active === null ) {

  			// check the fragment identifier in the URL
  			if ( locationHash ) {
  				this.tabs.each( function( i, tab ) {
  					if ( $( tab ).attr( "aria-controls" ) === locationHash ) {
  						active = i;
  						return false;
  					}
  				} );
  			}

  			// Check for a tab marked active via a class
  			if ( active === null ) {
  				active = this.tabs.index( this.tabs.filter( ".ui-tabs-active" ) );
  			}

  			// No active tab, set to false
  			if ( active === null || active === -1 ) {
  				active = this.tabs.length ? 0 : false;
  			}
  		}

  		// Handle numbers: negative, out of range
  		if ( active !== false ) {
  			active = this.tabs.index( this.tabs.eq( active ) );
  			if ( active === -1 ) {
  				active = collapsible ? false : 0;
  			}
  		}

  		// Don't allow collapsible: false and active: false
  		if ( !collapsible && active === false && this.anchors.length ) {
  			active = 0;
  		}

  		return active;
  	},

  	_getCreateEventData: function() {
  		return {
  			tab: this.active,
  			panel: !this.active.length ? $() : this._getPanelForTab( this.active )
  		};
  	},

  	_tabKeydown: function( event ) {
  		var focusedTab = $( this.document[ 0 ].activeElement ).closest( "li" ),
  			selectedIndex = this.tabs.index( focusedTab ),
  			goingForward = true;

  		if ( this._handlePageNav( event ) ) {
  			return;
  		}

  		switch ( event.keyCode ) {
  		case $.ui.keyCode.RIGHT:
  		case $.ui.keyCode.DOWN:
  			selectedIndex++;
  			break;
  		case $.ui.keyCode.UP:
  		case $.ui.keyCode.LEFT:
  			goingForward = false;
  			selectedIndex--;
  			break;
  		case $.ui.keyCode.END:
  			selectedIndex = this.anchors.length - 1;
  			break;
  		case $.ui.keyCode.HOME:
  			selectedIndex = 0;
  			break;
  		case $.ui.keyCode.SPACE:

  			// Activate only, no collapsing
  			event.preventDefault();
  			clearTimeout( this.activating );
  			this._activate( selectedIndex );
  			return;
  		case $.ui.keyCode.ENTER:

  			// Toggle (cancel delayed activation, allow collapsing)
  			event.preventDefault();
  			clearTimeout( this.activating );

  			// Determine if we should collapse or activate
  			this._activate( selectedIndex === this.options.active ? false : selectedIndex );
  			return;
  		default:
  			return;
  		}

  		// Focus the appropriate tab, based on which key was pressed
  		event.preventDefault();
  		clearTimeout( this.activating );
  		selectedIndex = this._focusNextTab( selectedIndex, goingForward );

  		// Navigating with control/command key will prevent automatic activation
  		if ( !event.ctrlKey && !event.metaKey ) {

  			// Update aria-selected immediately so that AT think the tab is already selected.
  			// Otherwise AT may confuse the user by stating that they need to activate the tab,
  			// but the tab will already be activated by the time the announcement finishes.
  			focusedTab.attr( "aria-selected", "false" );
  			this.tabs.eq( selectedIndex ).attr( "aria-selected", "true" );

  			this.activating = this._delay( function() {
  				this.option( "active", selectedIndex );
  			}, this.delay );
  		}
  	},

  	_panelKeydown: function( event ) {
  		if ( this._handlePageNav( event ) ) {
  			return;
  		}

  		// Ctrl+up moves focus to the current tab
  		if ( event.ctrlKey && event.keyCode === $.ui.keyCode.UP ) {
  			event.preventDefault();
  			this.active.trigger( "focus" );
  		}
  	},

  	// Alt+page up/down moves focus to the previous/next tab (and activates)
  	_handlePageNav: function( event ) {
  		if ( event.altKey && event.keyCode === $.ui.keyCode.PAGE_UP ) {
  			this._activate( this._focusNextTab( this.options.active - 1, false ) );
  			return true;
  		}
  		if ( event.altKey && event.keyCode === $.ui.keyCode.PAGE_DOWN ) {
  			this._activate( this._focusNextTab( this.options.active + 1, true ) );
  			return true;
  		}
  	},

  	_findNextTab: function( index, goingForward ) {
  		var lastTabIndex = this.tabs.length - 1;

  		function constrain() {
  			if ( index > lastTabIndex ) {
  				index = 0;
  			}
  			if ( index < 0 ) {
  				index = lastTabIndex;
  			}
  			return index;
  		}

  		while ( $.inArray( constrain(), this.options.disabled ) !== -1 ) {
  			index = goingForward ? index + 1 : index - 1;
  		}

  		return index;
  	},

  	_focusNextTab: function( index, goingForward ) {
  		index = this._findNextTab( index, goingForward );
  		this.tabs.eq( index ).trigger( "focus" );
  		return index;
  	},

  	_setOption: function( key, value ) {
  		if ( key === "active" ) {

  			// _activate() will handle invalid values and update this.options
  			this._activate( value );
  			return;
  		}

  		this._super( key, value );

  		if ( key === "collapsible" ) {
  			this._toggleClass( "ui-tabs-collapsible", null, value );

  			// Setting collapsible: false while collapsed; open first panel
  			if ( !value && this.options.active === false ) {
  				this._activate( 0 );
  			}
  		}

  		if ( key === "event" ) {
  			this._setupEvents( value );
  		}

  		if ( key === "heightStyle" ) {
  			this._setupHeightStyle( value );
  		}
  	},

  	_sanitizeSelector: function( hash ) {
  		return hash ? hash.replace( /[!"$%&'()*+,.\/:;<=>?@\[\]\^`{|}~]/g, "\\$&" ) : "";
  	},

  	refresh: function() {
  		var options = this.options,
  			lis = this.tablist.children( ":has(a[href])" );

  		// Get disabled tabs from class attribute from HTML
  		// this will get converted to a boolean if needed in _refresh()
  		options.disabled = $.map( lis.filter( ".ui-state-disabled" ), function( tab ) {
  			return lis.index( tab );
  		} );

  		this._processTabs();

  		// Was collapsed or no tabs
  		if ( options.active === false || !this.anchors.length ) {
  			options.active = false;
  			this.active = $();

  		// was active, but active tab is gone
  		} else if ( this.active.length && !$.contains( this.tablist[ 0 ], this.active[ 0 ] ) ) {

  			// all remaining tabs are disabled
  			if ( this.tabs.length === options.disabled.length ) {
  				options.active = false;
  				this.active = $();

  			// activate previous tab
  			} else {
  				this._activate( this._findNextTab( Math.max( 0, options.active - 1 ), false ) );
  			}

  		// was active, active tab still exists
  		} else {

  			// make sure active index is correct
  			options.active = this.tabs.index( this.active );
  		}

  		this._refresh();
  	},

  	_refresh: function() {
  		this._setOptionDisabled( this.options.disabled );
  		this._setupEvents( this.options.event );
  		this._setupHeightStyle( this.options.heightStyle );

  		this.tabs.not( this.active ).attr( {
  			"aria-selected": "false",
  			"aria-expanded": "false",
  			tabIndex: -1
  		} );
  		this.panels.not( this._getPanelForTab( this.active ) )
  			.hide()
  			.attr( {
  				"aria-hidden": "true"
  			} );

  		// Make sure one tab is in the tab order
  		if ( !this.active.length ) {
  			this.tabs.eq( 0 ).attr( "tabIndex", 0 );
  		} else {
  			this.active
  				.attr( {
  					"aria-selected": "true",
  					"aria-expanded": "true",
  					tabIndex: 0
  				} );
  			this._addClass( this.active, "ui-tabs-active", "ui-state-active" );
  			this._getPanelForTab( this.active )
  				.show()
  				.attr( {
  					"aria-hidden": "false"
  				} );
  		}
  	},

  	_processTabs: function() {
  		var that = this,
  			prevTabs = this.tabs,
  			prevAnchors = this.anchors,
  			prevPanels = this.panels;

  		this.tablist = this._getList().attr( "role", "tablist" );
  		this._addClass( this.tablist, "ui-tabs-nav",
  			"ui-helper-reset ui-helper-clearfix ui-widget-header" );

  		// Prevent users from focusing disabled tabs via click
  		this.tablist
  			.on( "mousedown" + this.eventNamespace, "> li", function( event ) {
  				if ( $( this ).is( ".ui-state-disabled" ) ) {
  					event.preventDefault();
  				}
  			} );

  		this.tabs = this.tablist.find( "> li:has(a[href])" )
  			.attr( {
  				role: "tab",
  				tabIndex: -1
  			} );
  		this._addClass( this.tabs, "ui-tabs-tab", "ui-state-default" );

  		this.anchors = this.tabs.map( function() {
  			return $( "a", this )[ 0 ];
  		} )
  			.attr( {
  				tabIndex: -1
  			} );
  		this._addClass( this.anchors, "ui-tabs-anchor" );

  		this.panels = $();

  		this.anchors.each( function( i, anchor ) {
  			var selector, panel, panelId,
  				anchorId = $( anchor ).uniqueId().attr( "id" ),
  				tab = $( anchor ).closest( "li" ),
  				originalAriaControls = tab.attr( "aria-controls" );

  			// Inline tab
  			if ( that._isLocal( anchor ) ) {
  				selector = anchor.hash;
  				panelId = selector.substring( 1 );
  				panel = that.element.find( that._sanitizeSelector( selector ) );

  			// remote tab
  			} else {

  				// If the tab doesn't already have aria-controls,
  				// generate an id by using a throw-away element
  				panelId = tab.attr( "aria-controls" ) || $( {} ).uniqueId()[ 0 ].id;
  				selector = "#" + panelId;
  				panel = that.element.find( selector );
  				if ( !panel.length ) {
  					panel = that._createPanel( panelId );
  					panel.insertAfter( that.panels[ i - 1 ] || that.tablist );
  				}
  				panel.attr( "aria-live", "polite" );
  			}

  			if ( panel.length ) {
  				that.panels = that.panels.add( panel );
  			}
  			if ( originalAriaControls ) {
  				tab.data( "ui-tabs-aria-controls", originalAriaControls );
  			}
  			tab.attr( {
  				"aria-controls": panelId,
  				"aria-labelledby": anchorId
  			} );
  			panel.attr( "aria-labelledby", anchorId );
  		} );

  		this.panels.attr( "role", "tabpanel" );
  		this._addClass( this.panels, "ui-tabs-panel", "ui-widget-content" );

  		// Avoid memory leaks (#10056)
  		if ( prevTabs ) {
  			this._off( prevTabs.not( this.tabs ) );
  			this._off( prevAnchors.not( this.anchors ) );
  			this._off( prevPanels.not( this.panels ) );
  		}
  	},

  	// Allow overriding how to find the list for rare usage scenarios (#7715)
  	_getList: function() {
  		return this.tablist || this.element.find( "ol, ul" ).eq( 0 );
  	},

  	_createPanel: function( id ) {
  		return $( "<div>" )
  			.attr( "id", id )
  			.data( "ui-tabs-destroy", true );
  	},

  	_setOptionDisabled: function( disabled ) {
  		var currentItem, li, i;

  		if ( Array.isArray( disabled ) ) {
  			if ( !disabled.length ) {
  				disabled = false;
  			} else if ( disabled.length === this.anchors.length ) {
  				disabled = true;
  			}
  		}

  		// Disable tabs
  		for ( i = 0; ( li = this.tabs[ i ] ); i++ ) {
  			currentItem = $( li );
  			if ( disabled === true || $.inArray( i, disabled ) !== -1 ) {
  				currentItem.attr( "aria-disabled", "true" );
  				this._addClass( currentItem, null, "ui-state-disabled" );
  			} else {
  				currentItem.removeAttr( "aria-disabled" );
  				this._removeClass( currentItem, null, "ui-state-disabled" );
  			}
  		}

  		this.options.disabled = disabled;

  		this._toggleClass( this.widget(), this.widgetFullName + "-disabled", null,
  			disabled === true );
  	},

  	_setupEvents: function( event ) {
  		var events = {};
  		if ( event ) {
  			$.each( event.split( " " ), function( index, eventName ) {
  				events[ eventName ] = "_eventHandler";
  			} );
  		}

  		this._off( this.anchors.add( this.tabs ).add( this.panels ) );

  		// Always prevent the default action, even when disabled
  		this._on( true, this.anchors, {
  			click: function( event ) {
  				event.preventDefault();
  			}
  		} );
  		this._on( this.anchors, events );
  		this._on( this.tabs, { keydown: "_tabKeydown" } );
  		this._on( this.panels, { keydown: "_panelKeydown" } );

  		this._focusable( this.tabs );
  		this._hoverable( this.tabs );
  	},

  	_setupHeightStyle: function( heightStyle ) {
  		var maxHeight,
  			parent = this.element.parent();

  		if ( heightStyle === "fill" ) {
  			maxHeight = parent.height();
  			maxHeight -= this.element.outerHeight() - this.element.height();

  			this.element.siblings( ":visible" ).each( function() {
  				var elem = $( this ),
  					position = elem.css( "position" );

  				if ( position === "absolute" || position === "fixed" ) {
  					return;
  				}
  				maxHeight -= elem.outerHeight( true );
  			} );

  			this.element.children().not( this.panels ).each( function() {
  				maxHeight -= $( this ).outerHeight( true );
  			} );

  			this.panels.each( function() {
  				$( this ).height( Math.max( 0, maxHeight -
  					$( this ).innerHeight() + $( this ).height() ) );
  			} )
  				.css( "overflow", "auto" );
  		} else if ( heightStyle === "auto" ) {
  			maxHeight = 0;
  			this.panels.each( function() {
  				maxHeight = Math.max( maxHeight, $( this ).height( "" ).height() );
  			} ).height( maxHeight );
  		}
  	},

  	_eventHandler: function( event ) {
  		var options = this.options,
  			active = this.active,
  			anchor = $( event.currentTarget ),
  			tab = anchor.closest( "li" ),
  			clickedIsActive = tab[ 0 ] === active[ 0 ],
  			collapsing = clickedIsActive && options.collapsible,
  			toShow = collapsing ? $() : this._getPanelForTab( tab ),
  			toHide = !active.length ? $() : this._getPanelForTab( active ),
  			eventData = {
  				oldTab: active,
  				oldPanel: toHide,
  				newTab: collapsing ? $() : tab,
  				newPanel: toShow
  			};

  		event.preventDefault();

  		if ( tab.hasClass( "ui-state-disabled" ) ||

  				// tab is already loading
  				tab.hasClass( "ui-tabs-loading" ) ||

  				// can't switch durning an animation
  				this.running ||

  				// click on active header, but not collapsible
  				( clickedIsActive && !options.collapsible ) ||

  				// allow canceling activation
  				( this._trigger( "beforeActivate", event, eventData ) === false ) ) {
  			return;
  		}

  		options.active = collapsing ? false : this.tabs.index( tab );

  		this.active = clickedIsActive ? $() : tab;
  		if ( this.xhr ) {
  			this.xhr.abort();
  		}

  		if ( !toHide.length && !toShow.length ) {
  			$.error( "jQuery UI Tabs: Mismatching fragment identifier." );
  		}

  		if ( toShow.length ) {
  			this.load( this.tabs.index( tab ), event );
  		}
  		this._toggle( event, eventData );
  	},

  	// Handles show/hide for selecting tabs
  	_toggle: function( event, eventData ) {
  		var that = this,
  			toShow = eventData.newPanel,
  			toHide = eventData.oldPanel;

  		this.running = true;

  		function complete() {
  			that.running = false;
  			that._trigger( "activate", event, eventData );
  		}

  		function show() {
  			that._addClass( eventData.newTab.closest( "li" ), "ui-tabs-active", "ui-state-active" );

  			if ( toShow.length && that.options.show ) {
  				that._show( toShow, that.options.show, complete );
  			} else {
  				toShow.show();
  				complete();
  			}
  		}

  		// Start out by hiding, then showing, then completing
  		if ( toHide.length && this.options.hide ) {
  			this._hide( toHide, this.options.hide, function() {
  				that._removeClass( eventData.oldTab.closest( "li" ),
  					"ui-tabs-active", "ui-state-active" );
  				show();
  			} );
  		} else {
  			this._removeClass( eventData.oldTab.closest( "li" ),
  				"ui-tabs-active", "ui-state-active" );
  			toHide.hide();
  			show();
  		}

  		toHide.attr( "aria-hidden", "true" );
  		eventData.oldTab.attr( {
  			"aria-selected": "false",
  			"aria-expanded": "false"
  		} );

  		// If we're switching tabs, remove the old tab from the tab order.
  		// If we're opening from collapsed state, remove the previous tab from the tab order.
  		// If we're collapsing, then keep the collapsing tab in the tab order.
  		if ( toShow.length && toHide.length ) {
  			eventData.oldTab.attr( "tabIndex", -1 );
  		} else if ( toShow.length ) {
  			this.tabs.filter( function() {
  				return $( this ).attr( "tabIndex" ) === 0;
  			} )
  				.attr( "tabIndex", -1 );
  		}

  		toShow.attr( "aria-hidden", "false" );
  		eventData.newTab.attr( {
  			"aria-selected": "true",
  			"aria-expanded": "true",
  			tabIndex: 0
  		} );
  	},

  	_activate: function( index ) {
  		var anchor,
  			active = this._findActive( index );

  		// Trying to activate the already active panel
  		if ( active[ 0 ] === this.active[ 0 ] ) {
  			return;
  		}

  		// Trying to collapse, simulate a click on the current active header
  		if ( !active.length ) {
  			active = this.active;
  		}

  		anchor = active.find( ".ui-tabs-anchor" )[ 0 ];
  		this._eventHandler( {
  			target: anchor,
  			currentTarget: anchor,
  			preventDefault: $.noop
  		} );
  	},

  	_findActive: function( index ) {
  		return index === false ? $() : this.tabs.eq( index );
  	},

  	_getIndex: function( index ) {

  		// meta-function to give users option to provide a href string instead of a numerical index.
  		if ( typeof index === "string" ) {
  			index = this.anchors.index( this.anchors.filter( "[href$='" +
  				CSS.escape( index ) + "']" ) );
  		}

  		return index;
  	},

  	_destroy: function() {
  		if ( this.xhr ) {
  			this.xhr.abort();
  		}

  		this.tablist
  			.removeAttr( "role" )
  			.off( this.eventNamespace );

  		this.anchors
  			.removeAttr( "role tabIndex" )
  			.removeUniqueId();

  		this.tabs.add( this.panels ).each( function() {
  			if ( $.data( this, "ui-tabs-destroy" ) ) {
  				$( this ).remove();
  			} else {
  				$( this ).removeAttr( "role tabIndex " +
  					"aria-live aria-busy aria-selected aria-labelledby aria-hidden aria-expanded" );
  			}
  		} );

  		this.tabs.each( function() {
  			var li = $( this ),
  				prev = li.data( "ui-tabs-aria-controls" );
  			if ( prev ) {
  				li
  					.attr( "aria-controls", prev )
  					.removeData( "ui-tabs-aria-controls" );
  			} else {
  				li.removeAttr( "aria-controls" );
  			}
  		} );

  		this.panels.show();

  		if ( this.options.heightStyle !== "content" ) {
  			this.panels.css( "height", "" );
  		}
  	},

  	enable: function( index ) {
  		var disabled = this.options.disabled;
  		if ( disabled === false ) {
  			return;
  		}

  		if ( index === undefined ) {
  			disabled = false;
  		} else {
  			index = this._getIndex( index );
  			if ( Array.isArray( disabled ) ) {
  				disabled = $.map( disabled, function( num ) {
  					return num !== index ? num : null;
  				} );
  			} else {
  				disabled = $.map( this.tabs, function( li, num ) {
  					return num !== index ? num : null;
  				} );
  			}
  		}
  		this._setOptionDisabled( disabled );
  	},

  	disable: function( index ) {
  		var disabled = this.options.disabled;
  		if ( disabled === true ) {
  			return;
  		}

  		if ( index === undefined ) {
  			disabled = true;
  		} else {
  			index = this._getIndex( index );
  			if ( $.inArray( index, disabled ) !== -1 ) {
  				return;
  			}
  			if ( Array.isArray( disabled ) ) {
  				disabled = $.merge( [ index ], disabled ).sort();
  			} else {
  				disabled = [ index ];
  			}
  		}
  		this._setOptionDisabled( disabled );
  	},

  	load: function( index, event ) {
  		index = this._getIndex( index );
  		var that = this,
  			tab = this.tabs.eq( index ),
  			anchor = tab.find( ".ui-tabs-anchor" ),
  			panel = this._getPanelForTab( tab ),
  			eventData = {
  				tab: tab,
  				panel: panel
  			},
  			complete = function( jqXHR, status ) {
  				if ( status === "abort" ) {
  					that.panels.stop( false, true );
  				}

  				that._removeClass( tab, "ui-tabs-loading" );
  				panel.removeAttr( "aria-busy" );

  				if ( jqXHR === that.xhr ) {
  					delete that.xhr;
  				}
  			};

  		// Not remote
  		if ( this._isLocal( anchor[ 0 ] ) ) {
  			return;
  		}

  		this.xhr = $.ajax( this._ajaxSettings( anchor, event, eventData ) );

  		if ( this.xhr.statusText !== "canceled" ) {
  			this._addClass( tab, "ui-tabs-loading" );
  			panel.attr( "aria-busy", "true" );

  			this.xhr
  				.done( function( response, status, jqXHR ) {
  					panel.html( response );
  					that._trigger( "load", event, eventData );

  					complete( jqXHR, status );
  				} )
  				.fail( function( jqXHR, status ) {
  					complete( jqXHR, status );
  				} );
  		}
  	},

  	_ajaxSettings: function( anchor, event, eventData ) {
  		var that = this;
  		return {
  			url: anchor.attr( "href" ),
  			beforeSend: function( jqXHR, settings ) {
  				return that._trigger( "beforeLoad", event,
  					$.extend( { jqXHR: jqXHR, ajaxSettings: settings }, eventData ) );
  			}
  		};
  	},

  	_getPanelForTab: function( tab ) {
  		var id = $( tab ).attr( "aria-controls" );
  		return this.element.find( this._sanitizeSelector( "#" + id ) );
  	}
  } );

  // DEPRECATED
  // TODO: Switch return back to widget declaration at top of file when this is removed
  if ( $.uiBackCompat === true ) {

  	// Backcompat for ui-tab class (now ui-tabs-tab)
  	$.widget( "ui.tabs", $.ui.tabs, {
  		_processTabs: function() {
  			this._superApply( arguments );
  			this._addClass( this.tabs, "ui-tab" );
  		}
  	} );
  }

  $.ui.tabs;


  /*!
   * jQuery UI Tooltip 1.14.0
   * https://jqueryui.com
   *
   * Copyright OpenJS Foundation and other contributors
   * Released under the MIT license.
   * https://jquery.org/license
   */

  //>>label: Tooltip
  //>>group: Widgets
  //>>description: Shows additional information for any element on hover or focus.
  //>>docs: https://api.jqueryui.com/tooltip/
  //>>demos: https://jqueryui.com/tooltip/
  //>>css.structure: ../../themes/base/core.css
  //>>css.structure: ../../themes/base/tooltip.css
  //>>css.theme: ../../themes/base/theme.css


  $.widget( "ui.tooltip", {
  	version: "1.14.0",
  	options: {
  		classes: {
  			"ui-tooltip": "ui-corner-all ui-widget-shadow"
  		},
  		content: function() {
  			var title = $( this ).attr( "title" );

  			// Escape title, since we're going from an attribute to raw HTML
  			return $( "<a>" ).text( title ).html();
  		},
  		hide: true,

  		// Disabled elements have inconsistent behavior across browsers (#8661)
  		items: "[title]:not([disabled])",
  		position: {
  			my: "left top+15",
  			at: "left bottom",
  			collision: "flipfit flip"
  		},
  		show: true,
  		track: false,

  		// Callbacks
  		close: null,
  		open: null
  	},

  	_addDescribedBy: function( elem, id ) {
  		var describedby = ( elem.attr( "aria-describedby" ) || "" ).split( /\s+/ );
  		describedby.push( id );
  		elem
  			.data( "ui-tooltip-id", id )
  			.attr( "aria-describedby", String.prototype.trim.call( describedby.join( " " ) ) );
  	},

  	_removeDescribedBy: function( elem ) {
  		var id = elem.data( "ui-tooltip-id" ),
  			describedby = ( elem.attr( "aria-describedby" ) || "" ).split( /\s+/ ),
  			index = $.inArray( id, describedby );

  		if ( index !== -1 ) {
  			describedby.splice( index, 1 );
  		}

  		elem.removeData( "ui-tooltip-id" );
  		describedby = String.prototype.trim.call( describedby.join( " " ) );
  		if ( describedby ) {
  			elem.attr( "aria-describedby", describedby );
  		} else {
  			elem.removeAttr( "aria-describedby" );
  		}
  	},

  	_create: function() {
  		this._on( {
  			mouseover: "open",
  			focusin: "open"
  		} );

  		// IDs of generated tooltips, needed for destroy
  		this.tooltips = {};

  		// IDs of parent tooltips where we removed the title attribute
  		this.parents = {};

  		// Append the aria-live region so tooltips announce correctly
  		this.liveRegion = $( "<div>" )
  			.attr( {
  				role: "log",
  				"aria-live": "assertive",
  				"aria-relevant": "additions"
  			} )
  			.appendTo( this.document[ 0 ].body );
  		this._addClass( this.liveRegion, null, "ui-helper-hidden-accessible" );

  		this.disabledTitles = $( [] );
  	},

  	_setOption: function( key, value ) {
  		var that = this;

  		this._super( key, value );

  		if ( key === "content" ) {
  			$.each( this.tooltips, function( id, tooltipData ) {
  				that._updateContent( tooltipData.element );
  			} );
  		}
  	},

  	_setOptionDisabled: function( value ) {
  		this[ value ? "_disable" : "_enable" ]();
  	},

  	_disable: function() {
  		var that = this;

  		// Close open tooltips
  		$.each( this.tooltips, function( id, tooltipData ) {
  			var event = $.Event( "blur" );
  			event.target = event.currentTarget = tooltipData.element[ 0 ];
  			that.close( event, true );
  		} );

  		// Remove title attributes to prevent native tooltips
  		this.disabledTitles = this.disabledTitles.add(
  			this.element.find( this.options.items ).addBack()
  				.filter( function() {
  					var element = $( this );
  					if ( element.is( "[title]" ) ) {
  						return element
  							.data( "ui-tooltip-title", element.attr( "title" ) )
  							.removeAttr( "title" );
  					}
  				} )
  		);
  	},

  	_enable: function() {

  		// restore title attributes
  		this.disabledTitles.each( function() {
  			var element = $( this );
  			if ( element.data( "ui-tooltip-title" ) ) {
  				element.attr( "title", element.data( "ui-tooltip-title" ) );
  			}
  		} );
  		this.disabledTitles = $( [] );
  	},

  	open: function( event ) {
  		var that = this,
  			target = $( event ? event.target : this.element )

  				// we need closest here due to mouseover bubbling,
  				// but always pointing at the same event target
  				.closest( this.options.items );

  		// No element to show a tooltip for or the tooltip is already open
  		if ( !target.length || target.data( "ui-tooltip-id" ) ) {
  			return;
  		}

  		if ( target.attr( "title" ) ) {
  			target.data( "ui-tooltip-title", target.attr( "title" ) );
  		}

  		target.data( "ui-tooltip-open", true );

  		// Kill parent tooltips, custom or native, for hover
  		if ( event && event.type === "mouseover" ) {
  			target.parents().each( function() {
  				var parent = $( this ),
  					blurEvent;
  				if ( parent.data( "ui-tooltip-open" ) ) {
  					blurEvent = $.Event( "blur" );
  					blurEvent.target = blurEvent.currentTarget = this;
  					that.close( blurEvent, true );
  				}
  				if ( parent.attr( "title" ) ) {
  					parent.uniqueId();
  					that.parents[ this.id ] = {
  						element: this,
  						title: parent.attr( "title" )
  					};
  					parent.attr( "title", "" );
  				}
  			} );
  		}

  		this._registerCloseHandlers( event, target );
  		this._updateContent( target, event );
  	},

  	_updateContent: function( target, event ) {
  		var content,
  			contentOption = this.options.content,
  			that = this,
  			eventType = event ? event.type : null;

  		if ( typeof contentOption === "string" || contentOption.nodeType ||
  				contentOption.jquery ) {
  			return this._open( event, target, contentOption );
  		}

  		content = contentOption.call( target[ 0 ], function( response ) {

  			// Ignore async response if tooltip was closed already
  			if ( !target.data( "ui-tooltip-open" ) ) {
  				return;
  			}

  			// JQuery creates a special event for focusin when it doesn't
  			// exist natively. To improve performance, the native event
  			// object is reused and the type is changed. Therefore, we can't
  			// rely on the type being correct after the event finished
  			// bubbling, so we set it back to the previous value. (#8740)
  			if ( event ) {
  				event.type = eventType;
  			}
  			that._open( event, target, response );
  		} );
  		if ( content ) {
  			this._open( event, target, content );
  		}
  	},

  	_open: function( event, target, content ) {
  		var tooltipData, tooltip, delayedShow, a11yContent,
  			positionOption = $.extend( {}, this.options.position );

  		if ( !content ) {
  			return;
  		}

  		// Content can be updated multiple times. If the tooltip already
  		// exists, then just update the content and bail.
  		tooltipData = this._find( target );
  		if ( tooltipData ) {
  			tooltipData.tooltip.find( ".ui-tooltip-content" ).html( content );
  			return;
  		}

  		// If we have a title, clear it to prevent the native tooltip
  		// we have to check first to avoid defining a title if none exists
  		// (we don't want to cause an element to start matching [title])
  		//
  		// We use removeAttr only for key events, to allow IE to export the correct
  		// accessible attributes. For mouse events, set to empty string to avoid
  		// native tooltip showing up (happens only when removing inside mouseover).
  		if ( target.is( "[title]" ) ) {
  			if ( event && event.type === "mouseover" ) {
  				target.attr( "title", "" );
  			} else {
  				target.removeAttr( "title" );
  			}
  		}

  		tooltipData = this._tooltip( target );
  		tooltip = tooltipData.tooltip;
  		this._addDescribedBy( target, tooltip.attr( "id" ) );
  		tooltip.find( ".ui-tooltip-content" ).html( content );

  		// Support: Voiceover on OS X, JAWS on IE <= 9
  		// JAWS announces deletions even when aria-relevant="additions"
  		// Voiceover will sometimes re-read the entire log region's contents from the beginning
  		this.liveRegion.children().hide();
  		a11yContent = $( "<div>" ).html( tooltip.find( ".ui-tooltip-content" ).html() );
  		a11yContent.removeAttr( "name" ).find( "[name]" ).removeAttr( "name" );
  		a11yContent.removeAttr( "id" ).find( "[id]" ).removeAttr( "id" );
  		a11yContent.appendTo( this.liveRegion );

  		function position( event ) {
  			positionOption.of = event;
  			if ( tooltip.is( ":hidden" ) ) {
  				return;
  			}
  			tooltip.position( positionOption );
  		}
  		if ( this.options.track && event && /^mouse/.test( event.type ) ) {
  			this._on( this.document, {
  				mousemove: position
  			} );

  			// trigger once to override element-relative positioning
  			position( event );
  		} else {
  			tooltip.position( $.extend( {
  				of: target
  			}, this.options.position ) );
  		}

  		tooltip.hide();

  		this._show( tooltip, this.options.show );

  		// Handle tracking tooltips that are shown with a delay (#8644). As soon
  		// as the tooltip is visible, position the tooltip using the most recent
  		// event.
  		// Adds the check to add the timers only when both delay and track options are set (#14682)
  		if ( this.options.track && this.options.show && this.options.show.delay ) {
  			delayedShow = this.delayedShow = setInterval( function() {
  				if ( tooltip.is( ":visible" ) ) {
  					position( positionOption.of );
  					clearInterval( delayedShow );
  				}
  			}, 13 );
  		}

  		this._trigger( "open", event, { tooltip: tooltip } );
  	},

  	_registerCloseHandlers: function( event, target ) {
  		var events = {
  			keyup: function( event ) {
  				if ( event.keyCode === $.ui.keyCode.ESCAPE ) {
  					var fakeEvent = $.Event( event );
  					fakeEvent.currentTarget = target[ 0 ];
  					this.close( fakeEvent, true );
  				}
  			}
  		};

  		// Only bind remove handler for delegated targets. Non-delegated
  		// tooltips will handle this in destroy.
  		if ( target[ 0 ] !== this.element[ 0 ] ) {
  			events.remove = function() {
  				var targetElement = this._find( target );
  				if ( targetElement ) {
  					this._removeTooltip( targetElement.tooltip );
  				}
  			};
  		}

  		if ( !event || event.type === "mouseover" ) {
  			events.mouseleave = "close";
  		}
  		if ( !event || event.type === "focusin" ) {
  			events.focusout = "close";
  		}
  		this._on( true, target, events );
  	},

  	close: function( event ) {
  		var tooltip,
  			that = this,
  			target = $( event ? event.currentTarget : this.element ),
  			tooltipData = this._find( target );

  		// The tooltip may already be closed
  		if ( !tooltipData ) {

  			// We set ui-tooltip-open immediately upon open (in open()), but only set the
  			// additional data once there's actually content to show (in _open()). So even if the
  			// tooltip doesn't have full data, we always remove ui-tooltip-open in case we're in
  			// the period between open() and _open().
  			target.removeData( "ui-tooltip-open" );
  			return;
  		}

  		tooltip = tooltipData.tooltip;

  		// Disabling closes the tooltip, so we need to track when we're closing
  		// to avoid an infinite loop in case the tooltip becomes disabled on close
  		if ( tooltipData.closing ) {
  			return;
  		}

  		// Clear the interval for delayed tracking tooltips
  		clearInterval( this.delayedShow );

  		// Only set title if we had one before (see comment in _open())
  		// If the title attribute has changed since open(), don't restore
  		if ( target.data( "ui-tooltip-title" ) && !target.attr( "title" ) ) {
  			target.attr( "title", target.data( "ui-tooltip-title" ) );
  		}

  		this._removeDescribedBy( target );

  		tooltipData.hiding = true;
  		tooltip.stop( true );
  		this._hide( tooltip, this.options.hide, function() {
  			that._removeTooltip( $( this ) );
  		} );

  		target.removeData( "ui-tooltip-open" );
  		this._off( target, "mouseleave focusout keyup" );

  		// Remove 'remove' binding only on delegated targets
  		if ( target[ 0 ] !== this.element[ 0 ] ) {
  			this._off( target, "remove" );
  		}
  		this._off( this.document, "mousemove" );

  		if ( event && event.type === "mouseleave" ) {
  			$.each( this.parents, function( id, parent ) {
  				$( parent.element ).attr( "title", parent.title );
  				delete that.parents[ id ];
  			} );
  		}

  		tooltipData.closing = true;
  		this._trigger( "close", event, { tooltip: tooltip } );
  		if ( !tooltipData.hiding ) {
  			tooltipData.closing = false;
  		}
  	},

  	_tooltip: function( element ) {
  		var tooltip = $( "<div>" ).attr( "role", "tooltip" ),
  			content = $( "<div>" ).appendTo( tooltip ),
  			id = tooltip.uniqueId().attr( "id" );

  		this._addClass( content, "ui-tooltip-content" );
  		this._addClass( tooltip, "ui-tooltip", "ui-widget ui-widget-content" );

  		tooltip.appendTo( this._appendTo( element ) );

  		return this.tooltips[ id ] = {
  			element: element,
  			tooltip: tooltip
  		};
  	},

  	_find: function( target ) {
  		var id = target.data( "ui-tooltip-id" );
  		return id ? this.tooltips[ id ] : null;
  	},

  	_removeTooltip: function( tooltip ) {

  		// Clear the interval for delayed tracking tooltips
  		clearInterval( this.delayedShow );

  		tooltip.remove();
  		delete this.tooltips[ tooltip.attr( "id" ) ];
  	},

  	_appendTo: function( target ) {
  		var element = target.closest( ".ui-front, dialog" );

  		if ( !element.length ) {
  			element = this.document[ 0 ].body;
  		}

  		return element;
  	},

  	_destroy: function() {
  		var that = this;

  		// Close open tooltips
  		$.each( this.tooltips, function( id, tooltipData ) {

  			// Delegate to close method to handle common cleanup
  			var event = $.Event( "blur" ),
  				element = tooltipData.element;
  			event.target = event.currentTarget = element[ 0 ];
  			that.close( event, true );

  			// Remove immediately; destroying an open tooltip doesn't use the
  			// hide animation
  			$( "#" + id ).remove();

  			// Restore the title
  			if ( element.data( "ui-tooltip-title" ) ) {

  				// If the title attribute has changed since open(), don't restore
  				if ( !element.attr( "title" ) ) {
  					element.attr( "title", element.data( "ui-tooltip-title" ) );
  				}
  				element.removeData( "ui-tooltip-title" );
  			}
  		} );
  		this.liveRegion.remove();
  	}
  } );

  // DEPRECATED
  // TODO: Switch return back to widget declaration at top of file when this is removed
  if ( $.uiBackCompat === true ) {

  	// Backcompat for tooltipClass option
  	$.widget( "ui.tooltip", $.ui.tooltip, {
  		options: {
  			tooltipClass: null
  		},
  		_tooltip: function() {
  			var tooltipData = this._superApply( arguments );
  			if ( this.options.tooltipClass ) {
  				tooltipData.tooltip.addClass( this.options.tooltipClass );
  			}
  			return tooltipData;
  		}
  	} );
  }

  $.ui.tooltip;




  } );

  // @fancyapps/ui/Fancybox v4.0.31
  const t=t=>"object"==typeof t&&null!==t&&t.constructor===Object&&"[object Object]"===Object.prototype.toString.call(t),e=(...i)=>{let s=!1;"boolean"==typeof i[0]&&(s=i.shift());let o=i[0];if(!o||"object"!=typeof o)throw new Error("extendee must be an object");const n=i.slice(1),a=n.length;for(let i=0;i<a;i++){const a=n[i];for(let i in a)if(a.hasOwnProperty(i)){const n=a[i];if(s&&(Array.isArray(n)||t(n))){const t=Array.isArray(n)?[]:{};o[i]=e(!0,o.hasOwnProperty(i)?o[i]:t,n);}else o[i]=n;}}return o},i$1=(t,e=1e4)=>(t=parseFloat(t)||0,Math.round((t+Number.EPSILON)*e)/e),s$1=function(t){return !!(t&&"object"==typeof t&&t instanceof Element&&t!==document.body)&&(!t.__Panzoom&&(function(t){const e=getComputedStyle(t)["overflow-y"],i=getComputedStyle(t)["overflow-x"],s=("scroll"===e||"auto"===e)&&Math.abs(t.scrollHeight-t.clientHeight)>1,o=("scroll"===i||"auto"===i)&&Math.abs(t.scrollWidth-t.clientWidth)>1;return s||o}(t)?t:s$1(t.parentNode)))},o="undefined"!=typeof window&&window.ResizeObserver||class{constructor(t){this.observables=[],this.boundCheck=this.check.bind(this),this.boundCheck(),this.callback=t;}observe(t){if(this.observables.some((e=>e.el===t)))return;const e={el:t,size:{height:t.clientHeight,width:t.clientWidth}};this.observables.push(e);}unobserve(t){this.observables=this.observables.filter((e=>e.el!==t));}disconnect(){this.observables=[];}check(){const t=this.observables.filter((t=>{const e=t.el.clientHeight,i=t.el.clientWidth;if(t.size.height!==e||t.size.width!==i)return t.size.height=e,t.size.width=i,!0})).map((t=>t.el));t.length>0&&this.callback(t),window.requestAnimationFrame(this.boundCheck);}};class n{constructor(t){this.id=self.Touch&&t instanceof Touch?t.identifier:-1,this.pageX=t.pageX,this.pageY=t.pageY,this.clientX=t.clientX,this.clientY=t.clientY;}}const a=(t,e)=>e?Math.sqrt((e.clientX-t.clientX)**2+(e.clientY-t.clientY)**2):0,r=(t,e)=>e?{clientX:(t.clientX+e.clientX)/2,clientY:(t.clientY+e.clientY)/2}:t;class h{constructor(t,{start:e=(()=>!0),move:i=(()=>{}),end:s=(()=>{})}={}){this._element=t,this.startPointers=[],this.currentPointers=[],this._pointerStart=t=>{if(t.buttons>0&&0!==t.button)return;const e=new n(t);this.currentPointers.some((t=>t.id===e.id))||this._triggerPointerStart(e,t)&&(window.addEventListener("mousemove",this._move),window.addEventListener("mouseup",this._pointerEnd));},this._touchStart=t=>{for(const e of Array.from(t.changedTouches||[]))this._triggerPointerStart(new n(e),t);},this._move=t=>{const e=this.currentPointers.slice(),i=(t=>"changedTouches"in t)(t)?Array.from(t.changedTouches).map((t=>new n(t))):[new n(t)];for(const t of i){const e=this.currentPointers.findIndex((e=>e.id===t.id));e<0||(this.currentPointers[e]=t);}this._moveCallback(e,this.currentPointers.slice(),t);},this._triggerPointerEnd=(t,e)=>{const i=this.currentPointers.findIndex((e=>e.id===t.id));return !(i<0)&&(this.currentPointers.splice(i,1),this.startPointers.splice(i,1),this._endCallback(t,e),!0)},this._pointerEnd=t=>{t.buttons>0&&0!==t.button||this._triggerPointerEnd(new n(t),t)&&(window.removeEventListener("mousemove",this._move,{passive:!1}),window.removeEventListener("mouseup",this._pointerEnd,{passive:!1}));},this._touchEnd=t=>{for(const e of Array.from(t.changedTouches||[]))this._triggerPointerEnd(new n(e),t);},this._startCallback=e,this._moveCallback=i,this._endCallback=s,this._element.addEventListener("mousedown",this._pointerStart,{passive:!1}),this._element.addEventListener("touchstart",this._touchStart,{passive:!1}),this._element.addEventListener("touchmove",this._move,{passive:!1}),this._element.addEventListener("touchend",this._touchEnd),this._element.addEventListener("touchcancel",this._touchEnd);}stop(){this._element.removeEventListener("mousedown",this._pointerStart,{passive:!1}),this._element.removeEventListener("touchstart",this._touchStart,{passive:!1}),this._element.removeEventListener("touchmove",this._move,{passive:!1}),this._element.removeEventListener("touchend",this._touchEnd),this._element.removeEventListener("touchcancel",this._touchEnd),window.removeEventListener("mousemove",this._move),window.removeEventListener("mouseup",this._pointerEnd);}_triggerPointerStart(t,e){return !!this._startCallback(t,e)&&(this.currentPointers.push(t),this.startPointers.push(t),!0)}}class l{constructor(t={}){this.options=e(!0,{},t),this.plugins=[],this.events={};for(const t of ["on","once"])for(const e of Object.entries(this.options[t]||{}))this[t](...e);}option(t,e,...i){t=String(t);let s=(o=t,n=this.options,o.split(".").reduce((function(t,e){return t&&t[e]}),n));var o,n;return "function"==typeof s&&(s=s.call(this,this,...i)),void 0===s?e:s}localize(t,e=[]){return t=(t=String(t).replace(/\{\{(\w+).?(\w+)?\}\}/g,((t,i,s)=>{let o="";s?o=this.option(`${i[0]+i.toLowerCase().substring(1)}.l10n.${s}`):i&&(o=this.option(`l10n.${i}`)),o||(o=t);for(let t=0;t<e.length;t++)o=o.split(e[t][0]).join(e[t][1]);return o}))).replace(/\{\{(.*)\}\}/,((t,e)=>e))}on(e,i){if(t(e)){for(const t of Object.entries(e))this.on(...t);return this}return String(e).split(" ").forEach((t=>{const e=this.events[t]=this.events[t]||[];-1==e.indexOf(i)&&e.push(i);})),this}once(e,i){if(t(e)){for(const t of Object.entries(e))this.once(...t);return this}return String(e).split(" ").forEach((t=>{const e=(...s)=>{this.off(t,e),i.call(this,this,...s);};e._=i,this.on(t,e);})),this}off(e,i){if(!t(e))return e.split(" ").forEach((t=>{const e=this.events[t];if(!e||!e.length)return this;let s=-1;for(let t=0,o=e.length;t<o;t++){const o=e[t];if(o&&(o===i||o._===i)){s=t;break}}-1!=s&&e.splice(s,1);})),this;for(const t of Object.entries(e))this.off(...t);}trigger(t,...e){for(const i of [...this.events[t]||[]].slice())if(i&&!1===i.call(this,this,...e))return !1;for(const i of [...this.events["*"]||[]].slice())if(i&&!1===i.call(this,t,this,...e))return !1;return !0}attachPlugins(t){const i={};for(const[s,o]of Object.entries(t||{}))!1===this.options[s]||this.plugins[s]||(this.options[s]=e({},o.defaults||{},this.options[s]),i[s]=new o(this));for(const[t,e]of Object.entries(i))e.attach(this);return this.plugins=Object.assign({},this.plugins,i),this}detachPlugins(){for(const t in this.plugins){let e;(e=this.plugins[t])&&"function"==typeof e.detach&&e.detach(this);}return this.plugins={},this}}const c={touch:!0,zoom:!0,pinchToZoom:!0,panOnlyZoomed:!1,lockAxis:!1,friction:.64,decelFriction:.88,zoomFriction:.74,bounceForce:.2,baseScale:1,minScale:1,maxScale:2,step:.5,textSelection:!1,click:"toggleZoom",wheel:"zoom",wheelFactor:42,wheelLimit:5,draggableClass:"is-draggable",draggingClass:"is-dragging",ratio:1};class d extends l{constructor(t,i={}){super(e(!0,{},c,i)),this.state="init",this.$container=t;for(const t of ["onLoad","onWheel","onClick"])this[t]=this[t].bind(this);this.initLayout(),this.resetValues(),this.attachPlugins(d.Plugins),this.trigger("init"),this.updateMetrics(),this.attachEvents(),this.trigger("ready"),!1===this.option("centerOnStart")?this.state="ready":this.panTo({friction:0}),t.__Panzoom=this;}initLayout(){const t=this.$container;if(!(t instanceof HTMLElement))throw new Error("Panzoom: Container not found");const e=this.option("content")||t.querySelector(".panzoom__content");if(!e)throw new Error("Panzoom: Content not found");this.$content=e;let i=this.option("viewport")||t.querySelector(".panzoom__viewport");i||!1===this.option("wrapInner")||(i=document.createElement("div"),i.classList.add("panzoom__viewport"),i.append(...t.childNodes),t.appendChild(i)),this.$viewport=i||e.parentNode;}resetValues(){this.updateRate=this.option("updateRate",/iPhone|iPad|iPod|Android/i.test(navigator.userAgent)?250:24),this.container={width:0,height:0},this.viewport={width:0,height:0},this.content={origWidth:0,origHeight:0,width:0,height:0,x:this.option("x",0),y:this.option("y",0),scale:this.option("baseScale")},this.transform={x:0,y:0,scale:1},this.resetDragPosition();}onLoad(t){this.updateMetrics(),this.panTo({scale:this.option("baseScale"),friction:0}),this.trigger("load",t);}onClick(t){if(t.defaultPrevented)return;if(document.activeElement&&document.activeElement.closest("[contenteditable]"))return;if(this.option("textSelection")&&window.getSelection().toString().length&&(!t.target||!t.target.hasAttribute("data-fancybox-close")))return void t.stopPropagation();const e=this.$content.getClientRects()[0];if("ready"!==this.state&&(this.dragPosition.midPoint||Math.abs(e.top-this.dragStart.rect.top)>1||Math.abs(e.left-this.dragStart.rect.left)>1))return t.preventDefault(),void t.stopPropagation();!1!==this.trigger("click",t)&&this.option("zoom")&&"toggleZoom"===this.option("click")&&(t.preventDefault(),t.stopPropagation(),this.zoomWithClick(t));}onWheel(t){!1!==this.trigger("wheel",t)&&this.option("zoom")&&this.option("wheel")&&this.zoomWithWheel(t);}zoomWithWheel(t){void 0===this.changedDelta&&(this.changedDelta=0);const e=Math.max(-1,Math.min(1,-t.deltaY||-t.deltaX||t.wheelDelta||-t.detail)),i=this.content.scale;let s=i*(100+e*this.option("wheelFactor"))/100;if(e<0&&Math.abs(i-this.option("minScale"))<.01||e>0&&Math.abs(i-this.option("maxScale"))<.01?(this.changedDelta+=Math.abs(e),s=i):(this.changedDelta=0,s=Math.max(Math.min(s,this.option("maxScale")),this.option("minScale"))),this.changedDelta>this.option("wheelLimit"))return;if(t.preventDefault(),s===i)return;const o=this.$content.getBoundingClientRect(),n=t.clientX-o.left,a=t.clientY-o.top;this.zoomTo(s,{x:n,y:a});}zoomWithClick(t){const e=this.$content.getClientRects()[0],i=t.clientX-e.left,s=t.clientY-e.top;this.toggleZoom({x:i,y:s});}attachEvents(){this.$content.addEventListener("load",this.onLoad),this.$container.addEventListener("wheel",this.onWheel,{passive:!1}),this.$container.addEventListener("click",this.onClick,{passive:!1}),this.initObserver();const t=new h(this.$container,{start:(e,i)=>{if(!this.option("touch"))return !1;if(this.velocity.scale<0)return !1;const o=i.composedPath()[0];if(!t.currentPointers.length){if(-1!==["BUTTON","TEXTAREA","OPTION","INPUT","SELECT","VIDEO"].indexOf(o.nodeName))return !1;if(this.option("textSelection")&&((t,e,i)=>{const s=t.childNodes,o=document.createRange();for(let t=0;t<s.length;t++){const n=s[t];if(n.nodeType!==Node.TEXT_NODE)continue;o.selectNodeContents(n);const a=o.getBoundingClientRect();if(e>=a.left&&i>=a.top&&e<=a.right&&i<=a.bottom)return n}return !1})(o,e.clientX,e.clientY))return !1}return !s$1(o)&&(!1!==this.trigger("touchStart",i)&&("mousedown"===i.type&&i.preventDefault(),this.state="pointerdown",this.resetDragPosition(),this.dragPosition.midPoint=null,this.dragPosition.time=Date.now(),!0))},move:(e,i,s)=>{if("pointerdown"!==this.state)return;if(!1===this.trigger("touchMove",s))return void s.preventDefault();if(i.length<2&&!0===this.option("panOnlyZoomed")&&this.content.width<=this.viewport.width&&this.content.height<=this.viewport.height&&this.transform.scale<=this.option("baseScale"))return;if(i.length>1&&(!this.option("zoom")||!1===this.option("pinchToZoom")))return;const o=r(e[0],e[1]),n=r(i[0],i[1]),h=n.clientX-o.clientX,l=n.clientY-o.clientY,c=a(e[0],e[1]),d=a(i[0],i[1]),u=c&&d?d/c:1;this.dragOffset.x+=h,this.dragOffset.y+=l,this.dragOffset.scale*=u,this.dragOffset.time=Date.now()-this.dragPosition.time;const f=1===this.dragStart.scale&&this.option("lockAxis");if(f&&!this.lockAxis){if(Math.abs(this.dragOffset.x)<6&&Math.abs(this.dragOffset.y)<6)return void s.preventDefault();const t=Math.abs(180*Math.atan2(this.dragOffset.y,this.dragOffset.x)/Math.PI);this.lockAxis=t>45&&t<135?"y":"x";}if("xy"===f||"y"!==this.lockAxis){if(s.preventDefault(),s.stopPropagation(),s.stopImmediatePropagation(),this.lockAxis&&(this.dragOffset["x"===this.lockAxis?"y":"x"]=0),this.$container.classList.add(this.option("draggingClass")),this.transform.scale===this.option("baseScale")&&"y"===this.lockAxis||(this.dragPosition.x=this.dragStart.x+this.dragOffset.x),this.transform.scale===this.option("baseScale")&&"x"===this.lockAxis||(this.dragPosition.y=this.dragStart.y+this.dragOffset.y),this.dragPosition.scale=this.dragStart.scale*this.dragOffset.scale,i.length>1){const e=r(t.startPointers[0],t.startPointers[1]),i=e.clientX-this.dragStart.rect.x,s=e.clientY-this.dragStart.rect.y,{deltaX:o,deltaY:a}=this.getZoomDelta(this.content.scale*this.dragOffset.scale,i,s);this.dragPosition.x-=o,this.dragPosition.y-=a,this.dragPosition.midPoint=n;}else this.setDragResistance();this.transform={x:this.dragPosition.x,y:this.dragPosition.y,scale:this.dragPosition.scale},this.startAnimation();}},end:(e,i)=>{if("pointerdown"!==this.state)return;if(this._dragOffset={...this.dragOffset},t.currentPointers.length)return void this.resetDragPosition();if(this.state="decel",this.friction=this.option("decelFriction"),this.recalculateTransform(),this.$container.classList.remove(this.option("draggingClass")),!1===this.trigger("touchEnd",i))return;if("decel"!==this.state)return;const s=this.option("minScale");if(this.transform.scale<s)return void this.zoomTo(s,{friction:.64});const o=this.option("maxScale");if(this.transform.scale-o>.01){const t=this.dragPosition.midPoint||e,i=this.$content.getClientRects()[0];this.zoomTo(o,{friction:.64,x:t.clientX-i.left,y:t.clientY-i.top});}}});this.pointerTracker=t;}initObserver(){this.resizeObserver||(this.resizeObserver=new o((()=>{this.updateTimer||(this.updateTimer=setTimeout((()=>{const t=this.$container.getBoundingClientRect();t.width&&t.height?((Math.abs(t.width-this.container.width)>1||Math.abs(t.height-this.container.height)>1)&&(this.isAnimating()&&this.endAnimation(!0),this.updateMetrics(),this.panTo({x:this.content.x,y:this.content.y,scale:this.option("baseScale"),friction:0})),this.updateTimer=null):this.updateTimer=null;}),this.updateRate));})),this.resizeObserver.observe(this.$container));}resetDragPosition(){this.lockAxis=null,this.friction=this.option("friction"),this.velocity={x:0,y:0,scale:0};const{x:t,y:e,scale:i}=this.content;this.dragStart={rect:this.$content.getBoundingClientRect(),x:t,y:e,scale:i},this.dragPosition={...this.dragPosition,x:t,y:e,scale:i},this.dragOffset={x:0,y:0,scale:1,time:0};}updateMetrics(t){!0!==t&&this.trigger("beforeUpdate");const e=this.$container,s=this.$content,o=this.$viewport,n=s instanceof HTMLImageElement,a=this.option("zoom"),r=this.option("resizeParent",a);let h=this.option("width"),l=this.option("height"),c=h||(d=s,Math.max(parseFloat(d.naturalWidth||0),parseFloat(d.width&&d.width.baseVal&&d.width.baseVal.value||0),parseFloat(d.offsetWidth||0),parseFloat(d.scrollWidth||0)));var d;let u=l||(t=>Math.max(parseFloat(t.naturalHeight||0),parseFloat(t.height&&t.height.baseVal&&t.height.baseVal.value||0),parseFloat(t.offsetHeight||0),parseFloat(t.scrollHeight||0)))(s);Object.assign(s.style,{width:h?`${h}px`:"",height:l?`${l}px`:"",maxWidth:"",maxHeight:""}),r&&Object.assign(o.style,{width:"",height:""});const f=this.option("ratio");c=i$1(c*f),u=i$1(u*f),h=c,l=u;const g=s.getBoundingClientRect(),p=o.getBoundingClientRect(),m=o==e?p:e.getBoundingClientRect();let y=Math.max(o.offsetWidth,i$1(p.width)),v=Math.max(o.offsetHeight,i$1(p.height)),b=window.getComputedStyle(o);if(y-=parseFloat(b.paddingLeft)+parseFloat(b.paddingRight),v-=parseFloat(b.paddingTop)+parseFloat(b.paddingBottom),this.viewport.width=y,this.viewport.height=v,a){if(Math.abs(c-g.width)>.1||Math.abs(u-g.height)>.1){const t=((t,e,i,s)=>{const o=Math.min(i/t||0,s/e);return {width:t*o||0,height:e*o||0}})(c,u,Math.min(c,g.width),Math.min(u,g.height));h=i$1(t.width),l=i$1(t.height);}Object.assign(s.style,{width:`${h}px`,height:`${l}px`,transform:""});}if(r&&(Object.assign(o.style,{width:`${h}px`,height:`${l}px`}),this.viewport={...this.viewport,width:h,height:l}),n&&a&&"function"!=typeof this.options.maxScale){const t=this.option("maxScale");this.options.maxScale=function(){return this.content.origWidth>0&&this.content.fitWidth>0?this.content.origWidth/this.content.fitWidth:t};}this.content={...this.content,origWidth:c,origHeight:u,fitWidth:h,fitHeight:l,width:h,height:l,scale:1,isZoomable:a},this.container={width:m.width,height:m.height},!0!==t&&this.trigger("afterUpdate");}zoomIn(t){this.zoomTo(this.content.scale+(t||this.option("step")));}zoomOut(t){this.zoomTo(this.content.scale-(t||this.option("step")));}toggleZoom(t={}){const e=this.option("maxScale"),i=this.option("baseScale"),s=this.content.scale>i+.5*(e-i)?i:e;this.zoomTo(s,t);}zoomTo(t=this.option("baseScale"),{x:e=null,y:s=null}={}){t=Math.max(Math.min(t,this.option("maxScale")),this.option("minScale"));const o=i$1(this.content.scale/(this.content.width/this.content.fitWidth),1e7);null===e&&(e=this.content.width*o*.5),null===s&&(s=this.content.height*o*.5);const{deltaX:n,deltaY:a}=this.getZoomDelta(t,e,s);e=this.content.x-n,s=this.content.y-a,this.panTo({x:e,y:s,scale:t,friction:this.option("zoomFriction")});}getZoomDelta(t,e=0,i=0){const s=this.content.fitWidth*this.content.scale,o=this.content.fitHeight*this.content.scale,n=e>0&&s?e/s:0,a=i>0&&o?i/o:0;return {deltaX:(this.content.fitWidth*t-s)*n,deltaY:(this.content.fitHeight*t-o)*a}}panTo({x:t=this.content.x,y:e=this.content.y,scale:i,friction:s=this.option("friction"),ignoreBounds:o=!1}={}){if(i=i||this.content.scale||1,!o){const{boundX:s,boundY:o}=this.getBounds(i);s&&(t=Math.max(Math.min(t,s.to),s.from)),o&&(e=Math.max(Math.min(e,o.to),o.from));}this.friction=s,this.transform={...this.transform,x:t,y:e,scale:i},s?(this.state="panning",this.velocity={x:(1/this.friction-1)*(t-this.content.x),y:(1/this.friction-1)*(e-this.content.y),scale:(1/this.friction-1)*(i-this.content.scale)},this.startAnimation()):this.endAnimation();}startAnimation(){this.rAF?cancelAnimationFrame(this.rAF):this.trigger("startAnimation"),this.rAF=requestAnimationFrame((()=>this.animate()));}animate(){if(this.setEdgeForce(),this.setDragForce(),this.velocity.x*=this.friction,this.velocity.y*=this.friction,this.velocity.scale*=this.friction,this.content.x+=this.velocity.x,this.content.y+=this.velocity.y,this.content.scale+=this.velocity.scale,this.isAnimating())this.setTransform();else if("pointerdown"!==this.state)return void this.endAnimation();this.rAF=requestAnimationFrame((()=>this.animate()));}getBounds(t){let e=this.boundX,s=this.boundY;if(void 0!==e&&void 0!==s)return {boundX:e,boundY:s};e={from:0,to:0},s={from:0,to:0},t=t||this.transform.scale;const o=this.content.fitWidth*t,n=this.content.fitHeight*t,a=this.viewport.width,r=this.viewport.height;if(o<a){const t=i$1(.5*(a-o));e.from=t,e.to=t;}else e.from=i$1(a-o);if(n<r){const t=.5*(r-n);s.from=t,s.to=t;}else s.from=i$1(r-n);return {boundX:e,boundY:s}}setEdgeForce(){if("decel"!==this.state)return;const t=this.option("bounceForce"),{boundX:e,boundY:i}=this.getBounds(Math.max(this.transform.scale,this.content.scale));let s,o,n,a;if(e&&(s=this.content.x<e.from,o=this.content.x>e.to),i&&(n=this.content.y<i.from,a=this.content.y>i.to),s||o){let i=((s?e.from:e.to)-this.content.x)*t;const o=this.content.x+(this.velocity.x+i)/this.friction;o>=e.from&&o<=e.to&&(i+=this.velocity.x),this.velocity.x=i,this.recalculateTransform();}if(n||a){let e=((n?i.from:i.to)-this.content.y)*t;const s=this.content.y+(e+this.velocity.y)/this.friction;s>=i.from&&s<=i.to&&(e+=this.velocity.y),this.velocity.y=e,this.recalculateTransform();}}setDragResistance(){if("pointerdown"!==this.state)return;const{boundX:t,boundY:e}=this.getBounds(this.dragPosition.scale);let i,s,o,n;if(t&&(i=this.dragPosition.x<t.from,s=this.dragPosition.x>t.to),e&&(o=this.dragPosition.y<e.from,n=this.dragPosition.y>e.to),(i||s)&&(!i||!s)){const e=i?t.from:t.to,s=e-this.dragPosition.x;this.dragPosition.x=e-.3*s;}if((o||n)&&(!o||!n)){const t=o?e.from:e.to,i=t-this.dragPosition.y;this.dragPosition.y=t-.3*i;}}setDragForce(){"pointerdown"===this.state&&(this.velocity.x=this.dragPosition.x-this.content.x,this.velocity.y=this.dragPosition.y-this.content.y,this.velocity.scale=this.dragPosition.scale-this.content.scale);}recalculateTransform(){this.transform.x=this.content.x+this.velocity.x/(1/this.friction-1),this.transform.y=this.content.y+this.velocity.y/(1/this.friction-1),this.transform.scale=this.content.scale+this.velocity.scale/(1/this.friction-1);}isAnimating(){return !(!this.friction||!(Math.abs(this.velocity.x)>.05||Math.abs(this.velocity.y)>.05||Math.abs(this.velocity.scale)>.05))}setTransform(t){let e,s,o;if(t?(e=i$1(this.transform.x),s=i$1(this.transform.y),o=this.transform.scale,this.content={...this.content,x:e,y:s,scale:o}):(e=i$1(this.content.x),s=i$1(this.content.y),o=this.content.scale/(this.content.width/this.content.fitWidth),this.content={...this.content,x:e,y:s}),this.trigger("beforeTransform"),e=i$1(this.content.x),s=i$1(this.content.y),t&&this.option("zoom")){let t,n;t=i$1(this.content.fitWidth*o),n=i$1(this.content.fitHeight*o),this.content.width=t,this.content.height=n,this.transform={...this.transform,width:t,height:n,scale:o},Object.assign(this.$content.style,{width:`${t}px`,height:`${n}px`,maxWidth:"none",maxHeight:"none",transform:`translate3d(${e}px, ${s}px, 0) scale(1)`});}else this.$content.style.transform=`translate3d(${e}px, ${s}px, 0) scale(${o})`;this.trigger("afterTransform");}endAnimation(t){cancelAnimationFrame(this.rAF),this.rAF=null,this.velocity={x:0,y:0,scale:0},this.setTransform(!0),this.state="ready",this.handleCursor(),!0!==t&&this.trigger("endAnimation");}handleCursor(){const t=this.option("draggableClass");t&&this.option("touch")&&(1==this.option("panOnlyZoomed")&&this.content.width<=this.viewport.width&&this.content.height<=this.viewport.height&&this.transform.scale<=this.option("baseScale")?this.$container.classList.remove(t):this.$container.classList.add(t));}detachEvents(){this.$content.removeEventListener("load",this.onLoad),this.$container.removeEventListener("wheel",this.onWheel,{passive:!1}),this.$container.removeEventListener("click",this.onClick,{passive:!1}),this.pointerTracker&&(this.pointerTracker.stop(),this.pointerTracker=null),this.resizeObserver&&(this.resizeObserver.disconnect(),this.resizeObserver=null);}destroy(){"destroy"!==this.state&&(this.state="destroy",clearTimeout(this.updateTimer),this.updateTimer=null,cancelAnimationFrame(this.rAF),this.rAF=null,this.detachEvents(),this.detachPlugins(),this.resetDragPosition());}}d.version="4.0.31",d.Plugins={};const u=(t,e)=>{let i=0;return function(...s){const o=(new Date).getTime();if(!(o-i<e))return i=o,t(...s)}};class f{constructor(t){this.$container=null,this.$prev=null,this.$next=null,this.carousel=t,this.onRefresh=this.onRefresh.bind(this);}option(t){return this.carousel.option(`Navigation.${t}`)}createButton(t){const e=document.createElement("button");e.setAttribute("title",this.carousel.localize(`{{${t.toUpperCase()}}}`));const i=this.option("classNames.button")+" "+this.option(`classNames.${t}`);return e.classList.add(...i.split(" ")),e.setAttribute("tabindex","0"),e.innerHTML=this.carousel.localize(this.option(`${t}Tpl`)),e.addEventListener("click",(e=>{e.preventDefault(),e.stopPropagation(),this.carousel["slide"+("next"===t?"Next":"Prev")]();})),e}build(){this.$container||(this.$container=document.createElement("div"),this.$container.classList.add(...this.option("classNames.main").split(" ")),this.carousel.$container.appendChild(this.$container)),this.$next||(this.$next=this.createButton("next"),this.$container.appendChild(this.$next)),this.$prev||(this.$prev=this.createButton("prev"),this.$container.appendChild(this.$prev));}onRefresh(){const t=this.carousel.pages.length;t<=1||t>1&&this.carousel.elemDimWidth<this.carousel.wrapDimWidth&&!Number.isInteger(this.carousel.option("slidesPerPage"))?this.cleanup():(this.build(),this.$prev.removeAttribute("disabled"),this.$next.removeAttribute("disabled"),this.carousel.option("infiniteX",this.carousel.option("infinite"))||(this.carousel.page<=0&&this.$prev.setAttribute("disabled",""),this.carousel.page>=t-1&&this.$next.setAttribute("disabled","")));}cleanup(){this.$prev&&this.$prev.remove(),this.$prev=null,this.$next&&this.$next.remove(),this.$next=null,this.$container&&this.$container.remove(),this.$container=null;}attach(){this.carousel.on("refresh change",this.onRefresh);}detach(){this.carousel.off("refresh change",this.onRefresh),this.cleanup();}}f.defaults={prevTpl:'<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" tabindex="-1"><path d="M15 3l-9 9 9 9"/></svg>',nextTpl:'<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" tabindex="-1"><path d="M9 3l9 9-9 9"/></svg>',classNames:{main:"carousel__nav",button:"carousel__button",next:"is-next",prev:"is-prev"}};class g{constructor(t){this.carousel=t,this.selectedIndex=null,this.friction=0,this.onNavReady=this.onNavReady.bind(this),this.onNavClick=this.onNavClick.bind(this),this.onNavCreateSlide=this.onNavCreateSlide.bind(this),this.onTargetChange=this.onTargetChange.bind(this);}addAsTargetFor(t){this.target=this.carousel,this.nav=t,this.attachEvents();}addAsNavFor(t){this.target=t,this.nav=this.carousel,this.attachEvents();}attachEvents(){this.nav.options.initialSlide=this.target.options.initialPage,this.nav.on("ready",this.onNavReady),this.nav.on("createSlide",this.onNavCreateSlide),this.nav.on("Panzoom.click",this.onNavClick),this.target.on("change",this.onTargetChange),this.target.on("Panzoom.afterUpdate",this.onTargetChange);}onNavReady(){this.onTargetChange(!0);}onNavClick(t,e,i){const s=i.target.closest(".carousel__slide");if(!s)return;i.stopPropagation();const o=parseInt(s.dataset.index,10),n=this.target.findPageForSlide(o);this.target.page!==n&&this.target.slideTo(n,{friction:this.friction}),this.markSelectedSlide(o);}onNavCreateSlide(t,e){e.index===this.selectedIndex&&this.markSelectedSlide(e.index);}onTargetChange(){const t=this.target.pages[this.target.page].indexes[0],e=this.nav.findPageForSlide(t);this.nav.slideTo(e),this.markSelectedSlide(t);}markSelectedSlide(t){this.selectedIndex=t,[...this.nav.slides].filter((t=>t.$el&&t.$el.classList.remove("is-nav-selected")));const e=this.nav.slides[t];e&&e.$el&&e.$el.classList.add("is-nav-selected");}attach(t){const e=t.options.Sync;(e.target||e.nav)&&(e.target?this.addAsNavFor(e.target):e.nav&&this.addAsTargetFor(e.nav),this.friction=e.friction);}detach(){this.nav&&(this.nav.off("ready",this.onNavReady),this.nav.off("Panzoom.click",this.onNavClick),this.nav.off("createSlide",this.onNavCreateSlide)),this.target&&(this.target.off("Panzoom.afterUpdate",this.onTargetChange),this.target.off("change",this.onTargetChange));}}g.defaults={friction:.92};const p={Navigation:f,Dots:class{constructor(t){this.carousel=t,this.$list=null,this.events={change:this.onChange.bind(this),refresh:this.onRefresh.bind(this)};}buildList(){if(this.carousel.pages.length<this.carousel.option("Dots.minSlideCount"))return;const t=document.createElement("ol");return t.classList.add("carousel__dots"),t.addEventListener("click",(t=>{if(!("page"in t.target.dataset))return;t.preventDefault(),t.stopPropagation();const e=parseInt(t.target.dataset.page,10),i=this.carousel;e!==i.page&&(i.pages.length<3&&i.option("infinite")?i[0==e?"slidePrev":"slideNext"]():i.slideTo(e));})),this.$list=t,this.carousel.$container.appendChild(t),this.carousel.$container.classList.add("has-dots"),t}removeList(){this.$list&&(this.$list.parentNode.removeChild(this.$list),this.$list=null),this.carousel.$container.classList.remove("has-dots");}rebuildDots(){let t=this.$list;const e=!!t,i=this.carousel.pages.length;if(i<2)return void(e&&this.removeList());e||(t=this.buildList());const s=this.$list.children.length;if(s>i)for(let t=i;t<s;t++)this.$list.removeChild(this.$list.lastChild);else {for(let t=s;t<i;t++){const e=document.createElement("li");e.classList.add("carousel__dot"),e.dataset.page=t,e.setAttribute("role","button"),e.setAttribute("tabindex","0"),e.setAttribute("title",this.carousel.localize("{{GOTO}}",[["%d",t+1]])),e.addEventListener("keydown",(t=>{const i=t.code;let s;"Enter"===i||"NumpadEnter"===i?s=e:"ArrowRight"===i?s=e.nextSibling:"ArrowLeft"===i&&(s=e.previousSibling),s&&s.click();})),this.$list.appendChild(e);}this.setActiveDot();}}setActiveDot(){if(!this.$list)return;this.$list.childNodes.forEach((t=>{t.classList.remove("is-selected");}));const t=this.$list.childNodes[this.carousel.page];t&&t.classList.add("is-selected");}onChange(){this.setActiveDot();}onRefresh(){this.rebuildDots();}attach(){this.carousel.on(this.events);}detach(){this.removeList(),this.carousel.off(this.events),this.carousel=null;}},Sync:g};const m={slides:[],preload:0,slidesPerPage:"auto",initialPage:null,initialSlide:null,friction:.92,center:!0,infinite:!0,fill:!0,dragFree:!1,prefix:"",classNames:{viewport:"carousel__viewport",track:"carousel__track",slide:"carousel__slide",slideSelected:"is-selected"},l10n:{NEXT:"Next slide",PREV:"Previous slide",GOTO:"Go to slide #%d"}};class y extends l{constructor(t,i={}){if(super(i=e(!0,{},m,i)),this.state="init",this.$container=t,!(this.$container instanceof HTMLElement))throw new Error("No root element provided");this.slideNext=u(this.slideNext.bind(this),250),this.slidePrev=u(this.slidePrev.bind(this),250),this.init(),t.__Carousel=this;}init(){this.pages=[],this.page=this.pageIndex=null,this.prevPage=this.prevPageIndex=null,this.attachPlugins(y.Plugins),this.trigger("init"),this.initLayout(),this.initSlides(),this.updateMetrics(),this.$track&&this.pages.length&&(this.$track.style.transform=`translate3d(${-1*this.pages[this.page].left}px, 0px, 0) scale(1)`),this.manageSlideVisiblity(),this.initPanzoom(),this.state="ready",this.trigger("ready");}initLayout(){const t=this.option("prefix"),e=this.option("classNames");this.$viewport=this.option("viewport")||this.$container.querySelector(`.${t}${e.viewport}`),this.$viewport||(this.$viewport=document.createElement("div"),this.$viewport.classList.add(...(t+e.viewport).split(" ")),this.$viewport.append(...this.$container.childNodes),this.$container.appendChild(this.$viewport)),this.$track=this.option("track")||this.$container.querySelector(`.${t}${e.track}`),this.$track||(this.$track=document.createElement("div"),this.$track.classList.add(...(t+e.track).split(" ")),this.$track.append(...this.$viewport.childNodes),this.$viewport.appendChild(this.$track));}initSlides(){this.slides=[];this.$viewport.querySelectorAll(`.${this.option("prefix")}${this.option("classNames.slide")}`).forEach((t=>{const e={$el:t,isDom:!0};this.slides.push(e),this.trigger("createSlide",e,this.slides.length);})),Array.isArray(this.options.slides)&&(this.slides=e(!0,[...this.slides],this.options.slides));}updateMetrics(){let t,e=0,s=[];this.slides.forEach(((i,o)=>{const n=i.$el,a=i.isDom||!t?this.getSlideMetrics(n):t;i.index=o,i.width=a,i.left=e,t=a,e+=a,s.push(o);}));let o=Math.max(this.$track.offsetWidth,i$1(this.$track.getBoundingClientRect().width)),n=getComputedStyle(this.$track);o-=parseFloat(n.paddingLeft)+parseFloat(n.paddingRight),this.contentWidth=e,this.viewportWidth=o;const a=[],r=this.option("slidesPerPage");if(Number.isInteger(r)&&e>o)for(let t=0;t<this.slides.length;t+=r)a.push({indexes:s.slice(t,t+r),slides:this.slides.slice(t,t+r)});else {let t=0,e=0;for(let i=0;i<this.slides.length;i+=1){let s=this.slides[i];(!a.length||e+s.width>o)&&(a.push({indexes:[],slides:[]}),t=a.length-1,e=0),e+=s.width,a[t].indexes.push(i),a[t].slides.push(s);}}const h=this.option("center"),l=this.option("fill");a.forEach(((t,i)=>{t.index=i,t.width=t.slides.reduce(((t,e)=>t+e.width),0),t.left=t.slides[0].left,h&&(t.left+=.5*(o-t.width)*-1),l&&!this.option("infiniteX",this.option("infinite"))&&e>o&&(t.left=Math.max(t.left,0),t.left=Math.min(t.left,e-o));}));const c=[];let d;a.forEach((t=>{const e={...t};d&&e.left===d.left?(d.width+=e.width,d.slides=[...d.slides,...e.slides],d.indexes=[...d.indexes,...e.indexes]):(e.index=c.length,d=e,c.push(e));})),this.pages=c;let u=this.page;if(null===u){const t=this.option("initialSlide");u=null!==t?this.findPageForSlide(t):parseInt(this.option("initialPage",0),10)||0,c[u]||(u=c.length&&u>c.length?c[c.length-1].index:0),this.page=u,this.pageIndex=u;}this.updatePanzoom(),this.trigger("refresh");}getSlideMetrics(t){if(!t){const e=this.slides[0];(t=document.createElement("div")).dataset.isTestEl=1,t.style.visibility="hidden",t.classList.add(...(this.option("prefix")+this.option("classNames.slide")).split(" ")),e.customClass&&t.classList.add(...e.customClass.split(" ")),this.$track.prepend(t);}let e=Math.max(t.offsetWidth,i$1(t.getBoundingClientRect().width));const s=t.currentStyle||window.getComputedStyle(t);return e=e+(parseFloat(s.marginLeft)||0)+(parseFloat(s.marginRight)||0),t.dataset.isTestEl&&t.remove(),e}findPageForSlide(t){t=parseInt(t,10)||0;const e=this.pages.find((e=>e.indexes.indexOf(t)>-1));return e?e.index:null}slideNext(){this.slideTo(this.pageIndex+1);}slidePrev(){this.slideTo(this.pageIndex-1);}slideTo(t,e={}){const{x:i=-1*this.setPage(t,!0),y:s=0,friction:o=this.option("friction")}=e;this.Panzoom.content.x===i&&!this.Panzoom.velocity.x&&o||(this.Panzoom.panTo({x:i,y:s,friction:o,ignoreBounds:!0}),"ready"===this.state&&"ready"===this.Panzoom.state&&this.trigger("settle"));}initPanzoom(){this.Panzoom&&this.Panzoom.destroy();const t=e(!0,{},{content:this.$track,wrapInner:!1,resizeParent:!1,zoom:!1,click:!1,lockAxis:"x",x:this.pages.length?-1*this.pages[this.page].left:0,centerOnStart:!1,textSelection:()=>this.option("textSelection",!1),panOnlyZoomed:function(){return this.content.width<=this.viewport.width}},this.option("Panzoom"));this.Panzoom=new d(this.$container,t),this.Panzoom.on({"*":(t,...e)=>this.trigger(`Panzoom.${t}`,...e),afterUpdate:()=>{this.updatePage();},beforeTransform:this.onBeforeTransform.bind(this),touchEnd:this.onTouchEnd.bind(this),endAnimation:()=>{this.trigger("settle");}}),this.updateMetrics(),this.manageSlideVisiblity();}updatePanzoom(){this.Panzoom&&(this.Panzoom.content={...this.Panzoom.content,fitWidth:this.contentWidth,origWidth:this.contentWidth,width:this.contentWidth},this.pages.length>1&&this.option("infiniteX",this.option("infinite"))?this.Panzoom.boundX=null:this.pages.length&&(this.Panzoom.boundX={from:-1*this.pages[this.pages.length-1].left,to:-1*this.pages[0].left}),this.option("infiniteY",this.option("infinite"))?this.Panzoom.boundY=null:this.Panzoom.boundY={from:0,to:0},this.Panzoom.handleCursor());}manageSlideVisiblity(){const t=this.contentWidth,e=this.viewportWidth;let i=this.Panzoom?-1*this.Panzoom.content.x:this.pages.length?this.pages[this.page].left:0;const s=this.option("preload"),o=this.option("infiniteX",this.option("infinite")),n=parseFloat(getComputedStyle(this.$viewport,null).getPropertyValue("padding-left")),a=parseFloat(getComputedStyle(this.$viewport,null).getPropertyValue("padding-right"));this.slides.forEach((r=>{let h,l,c=0;h=i-n,l=i+e+a,h-=s*(e+n+a),l+=s*(e+n+a);const d=r.left+r.width>h&&r.left<l;h=i+t-n,l=i+t+e+a,h-=s*(e+n+a);const u=o&&r.left+r.width>h&&r.left<l;h=i-t-n,l=i-t+e+a,h-=s*(e+n+a);const f=o&&r.left+r.width>h&&r.left<l;u||d||f?(this.createSlideEl(r),d&&(c=0),u&&(c=-1),f&&(c=1),r.left+r.width>i&&r.left<=i+e+a&&(c=0)):this.removeSlideEl(r),r.hasDiff=c;}));let r=0,h=0;this.slides.forEach(((e,i)=>{let s=0;e.$el?(i!==r||e.hasDiff?s=h+e.hasDiff*t:h=0,e.$el.style.left=Math.abs(s)>.1?`${h+e.hasDiff*t}px`:"",r++):h+=e.width;})),this.markSelectedSlides();}createSlideEl(t){if(!t)return;if(t.$el){let e=t.$el.dataset.index;if(!e||parseInt(e,10)!==t.index){let e;t.$el.dataset.index=t.index,t.$el.querySelectorAll("[data-lazy-srcset]").forEach((t=>{t.srcset=t.dataset.lazySrcset;})),t.$el.querySelectorAll("[data-lazy-src]").forEach((t=>{let e=t.dataset.lazySrc;t instanceof HTMLImageElement?t.src=e:t.style.backgroundImage=`url('${e}')`;})),(e=t.$el.dataset.lazySrc)&&(t.$el.style.backgroundImage=`url('${e}')`),t.state="ready";}return}const e=document.createElement("div");e.dataset.index=t.index,e.classList.add(...(this.option("prefix")+this.option("classNames.slide")).split(" ")),t.customClass&&e.classList.add(...t.customClass.split(" ")),t.html&&(e.innerHTML=t.html);const i=[];this.slides.forEach(((t,e)=>{t.$el&&i.push(e);}));const s=t.index;let o=null;if(i.length){let t=i.reduce(((t,e)=>Math.abs(e-s)<Math.abs(t-s)?e:t));o=this.slides[t];}return this.$track.insertBefore(e,o&&o.$el?o.index<t.index?o.$el.nextSibling:o.$el:null),t.$el=e,this.trigger("createSlide",t,s),t}removeSlideEl(t){t.$el&&!t.isDom&&(this.trigger("removeSlide",t),t.$el.remove(),t.$el=null);}markSelectedSlides(){const t=this.option("classNames.slideSelected"),e="aria-hidden";this.slides.forEach(((i,s)=>{const o=i.$el;if(!o)return;const n=this.pages[this.page];n&&n.indexes&&n.indexes.indexOf(s)>-1?(t&&!o.classList.contains(t)&&(o.classList.add(t),this.trigger("selectSlide",i)),o.removeAttribute(e)):(t&&o.classList.contains(t)&&(o.classList.remove(t),this.trigger("unselectSlide",i)),o.setAttribute(e,!0));}));}updatePage(){this.updateMetrics(),this.slideTo(this.page,{friction:0});}onBeforeTransform(){this.option("infiniteX",this.option("infinite"))&&this.manageInfiniteTrack(),this.manageSlideVisiblity();}manageInfiniteTrack(){const t=this.contentWidth,e=this.viewportWidth;if(!this.option("infiniteX",this.option("infinite"))||this.pages.length<2||t<e)return;const i=this.Panzoom;let s=!1;return i.content.x<-1*(t-e)&&(i.content.x+=t,this.pageIndex=this.pageIndex-this.pages.length,s=!0),i.content.x>e&&(i.content.x-=t,this.pageIndex=this.pageIndex+this.pages.length,s=!0),s&&"pointerdown"===i.state&&i.resetDragPosition(),s}onTouchEnd(t,e){const i=this.option("dragFree");if(!i&&this.pages.length>1&&t.dragOffset.time<350&&Math.abs(t.dragOffset.y)<1&&Math.abs(t.dragOffset.x)>5)this[t.dragOffset.x<0?"slideNext":"slidePrev"]();else if(i){const[,e]=this.getPageFromPosition(-1*t.transform.x);this.setPage(e);}else this.slideToClosest();}slideToClosest(t={}){let[,e]=this.getPageFromPosition(-1*this.Panzoom.content.x);this.slideTo(e,t);}getPageFromPosition(t){const e=this.pages.length;this.option("center")&&(t+=.5*this.viewportWidth);const i=Math.floor(t/this.contentWidth);t-=i*this.contentWidth;let s=this.slides.find((e=>e.left<=t&&e.left+e.width>t));if(s){let t=this.findPageForSlide(s.index);return [t,t+i*e]}return [0,0]}setPage(t,e){let i=0,s=parseInt(t,10)||0;const o=this.page,n=this.pageIndex,a=this.pages.length,r=this.contentWidth,h=this.viewportWidth;if(t=(s%a+a)%a,this.option("infiniteX",this.option("infinite"))&&r>h){const o=Math.floor(s/a)||0,n=r;if(i=this.pages[t].left+o*n,!0===e&&a>2){let t=-1*this.Panzoom.content.x;const e=i-n,o=i+n,r=Math.abs(t-i),h=Math.abs(t-e),l=Math.abs(t-o);l<r&&l<=h?(i=o,s+=a):h<r&&h<l&&(i=e,s-=a);}}else t=s=Math.max(0,Math.min(s,a-1)),i=this.pages.length?this.pages[t].left:0;return this.page=t,this.pageIndex=s,null!==o&&t!==o&&(this.prevPage=o,this.prevPageIndex=n,this.trigger("change",t,o)),i}destroy(){this.state="destroy",this.slides.forEach((t=>{this.removeSlideEl(t);})),this.slides=[],this.Panzoom.destroy(),this.detachPlugins();}}y.version="4.0.31",y.Plugins=p;const v=!("undefined"==typeof window||!window.document||!window.document.createElement);let b=null;const x$1=["a[href]","area[href]",'input:not([disabled]):not([type="hidden"]):not([aria-hidden])',"select:not([disabled]):not([aria-hidden])","textarea:not([disabled]):not([aria-hidden])","button:not([disabled]):not([aria-hidden])","iframe","object","embed","video","audio","[contenteditable]",'[tabindex]:not([tabindex^="-"]):not([disabled]):not([aria-hidden])'],w=t=>{if(t&&v){null===b&&document.createElement("div").focus({get preventScroll(){return b=!0,!1}});try{if(t.setActive)t.setActive();else if(b)t.focus({preventScroll:!0});else {const e=window.pageXOffset||document.body.scrollTop,i=window.pageYOffset||document.body.scrollLeft;t.focus(),document.body.scrollTo({top:e,left:i,behavior:"auto"});}}catch(t){}}};const $={minSlideCount:2,minScreenHeight:500,autoStart:!0,key:"t",Carousel:{},tpl:'<div class="fancybox__thumb" style="background-image:url(\'{{src}}\')"></div>'};class C{constructor(t){this.fancybox=t,this.$container=null,this.state="init";for(const t of ["onPrepare","onClosing","onKeydown"])this[t]=this[t].bind(this);this.events={prepare:this.onPrepare,closing:this.onClosing,keydown:this.onKeydown};}onPrepare(){this.getSlides().length<this.fancybox.option("Thumbs.minSlideCount")?this.state="disabled":!0===this.fancybox.option("Thumbs.autoStart")&&this.fancybox.Carousel.Panzoom.content.height>=this.fancybox.option("Thumbs.minScreenHeight")&&this.build();}onClosing(){this.Carousel&&this.Carousel.Panzoom.detachEvents();}onKeydown(t,e){e===t.option("Thumbs.key")&&this.toggle();}build(){if(this.$container)return;const t=document.createElement("div");t.classList.add("fancybox__thumbs"),this.fancybox.$carousel.parentNode.insertBefore(t,this.fancybox.$carousel.nextSibling),this.Carousel=new y(t,e(!0,{Dots:!1,Navigation:!1,Sync:{friction:0},infinite:!1,center:!0,fill:!0,dragFree:!0,slidesPerPage:1,preload:1},this.fancybox.option("Thumbs.Carousel"),{Sync:{target:this.fancybox.Carousel},slides:this.getSlides()})),this.Carousel.Panzoom.on("wheel",((t,e)=>{e.preventDefault(),this.fancybox[e.deltaY<0?"prev":"next"]();})),this.$container=t,this.state="visible";}getSlides(){const t=[];for(const e of this.fancybox.items){const i=e.thumb;i&&t.push({html:this.fancybox.option("Thumbs.tpl").replace(/\{\{src\}\}/gi,i),customClass:`has-thumb has-${e.type||"image"}`});}return t}toggle(){"visible"===this.state?this.hide():"hidden"===this.state?this.show():this.build();}show(){"hidden"===this.state&&(this.$container.style.display="",this.Carousel.Panzoom.attachEvents(),this.state="visible");}hide(){"visible"===this.state&&(this.Carousel.Panzoom.detachEvents(),this.$container.style.display="none",this.state="hidden");}cleanup(){this.Carousel&&(this.Carousel.destroy(),this.Carousel=null),this.$container&&(this.$container.remove(),this.$container=null),this.state="init";}attach(){this.fancybox.on(this.events);}detach(){this.fancybox.off(this.events),this.cleanup();}}C.defaults=$;const S=(t,e)=>{const i=new URL(t),s=new URLSearchParams(i.search);let o=new URLSearchParams;for(const[t,i]of [...s,...Object.entries(e)])"t"===t?o.set("start",parseInt(i)):o.set(t,i);o=o.toString();let n=t.match(/#t=((.*)?\d+s)/);return n&&(o+=`#t=${n[1]}`),o},E={video:{autoplay:!0,ratio:16/9},youtube:{autohide:1,fs:1,rel:0,hd:1,wmode:"transparent",enablejsapi:1,html5:1},vimeo:{hd:1,show_title:1,show_byline:1,show_portrait:0,fullscreen:1},html5video:{tpl:'<video class="fancybox__html5video" playsinline controls controlsList="nodownload" poster="{{poster}}">\n  <source src="{{src}}" type="{{format}}" />Sorry, your browser doesn\'t support embedded videos.</video>',format:""}};class P{constructor(t){this.fancybox=t;for(const t of ["onInit","onReady","onCreateSlide","onRemoveSlide","onSelectSlide","onUnselectSlide","onRefresh","onMessage"])this[t]=this[t].bind(this);this.events={init:this.onInit,ready:this.onReady,"Carousel.createSlide":this.onCreateSlide,"Carousel.removeSlide":this.onRemoveSlide,"Carousel.selectSlide":this.onSelectSlide,"Carousel.unselectSlide":this.onUnselectSlide,"Carousel.refresh":this.onRefresh};}onInit(){for(const t of this.fancybox.items)this.processType(t);}processType(t){if(t.html)return t.src=t.html,t.type="html",void delete t.html;const i=t.src||"";let s=t.type||this.fancybox.options.type,o=null;if(!i||"string"==typeof i){if(o=i.match(/(?:youtube\.com|youtu\.be|youtube\-nocookie\.com)\/(?:watch\?(?:.*&)?v=|v\/|u\/|embed\/?)?(videoseries\?list=(?:.*)|[\w-]{11}|\?listType=(?:.*)&list=(?:.*))(?:.*)/i)){const e=S(i,this.fancybox.option("Html.youtube")),n=encodeURIComponent(o[1]);t.videoId=n,t.src=`https://www.youtube-nocookie.com/embed/${n}?${e}`,t.thumb=t.thumb||`https://i.ytimg.com/vi/${n}/mqdefault.jpg`,t.vendor="youtube",s="video";}else if(o=i.match(/^.+vimeo.com\/(?:\/)?([\d]+)(.*)?/)){const e=S(i,this.fancybox.option("Html.vimeo")),n=encodeURIComponent(o[1]);t.videoId=n,t.src=`https://player.vimeo.com/video/${n}?${e}`,t.vendor="vimeo",s="video";}else (o=i.match(/(?:maps\.)?google\.([a-z]{2,3}(?:\.[a-z]{2})?)\/(?:(?:(?:maps\/(?:place\/(?:.*)\/)?\@(.*),(\d+.?\d+?)z))|(?:\?ll=))(.*)?/i))?(t.src=`//maps.google.${o[1]}/?ll=${(o[2]?o[2]+"&z="+Math.floor(o[3])+(o[4]?o[4].replace(/^\//,"&"):""):o[4]+"").replace(/\?/,"&")}&output=${o[4]&&o[4].indexOf("layer=c")>0?"svembed":"embed"}`,s="map"):(o=i.match(/(?:maps\.)?google\.([a-z]{2,3}(?:\.[a-z]{2})?)\/(?:maps\/search\/)(.*)/i))&&(t.src=`//maps.google.${o[1]}/maps?q=${o[2].replace("query=","q=").replace("api=1","")}&output=embed`,s="map");s||("#"===i.charAt(0)?s="inline":(o=i.match(/\.(mp4|mov|ogv|webm)((\?|#).*)?$/i))?(s="html5video",t.format=t.format||"video/"+("ogv"===o[1]?"ogg":o[1])):i.match(/(^data:image\/[a-z0-9+\/=]*,)|(\.(jp(e|g|eg)|gif|png|bmp|webp|svg|ico)((\?|#).*)?$)/i)?s="image":i.match(/\.(pdf)((\?|#).*)?$/i)&&(s="pdf")),t.type=s||this.fancybox.option("defaultType","image"),"html5video"!==s&&"video"!==s||(t.video=e({},this.fancybox.option("Html.video"),t.video),t._width&&t._height?t.ratio=parseFloat(t._width)/parseFloat(t._height):t.ratio=t.ratio||t.video.ratio||E.video.ratio);}}onReady(){this.fancybox.Carousel.slides.forEach((t=>{t.$el&&(this.setContent(t),t.index===this.fancybox.getSlide().index&&this.playVideo(t));}));}onCreateSlide(t,e,i){"ready"===this.fancybox.state&&this.setContent(i);}loadInlineContent(t){let e;if(t.src instanceof HTMLElement)e=t.src;else if("string"==typeof t.src){const i=t.src.split("#",2),s=2===i.length&&""===i[0]?i[1]:i[0];e=document.getElementById(s);}if(e){if("clone"===t.type||e.$placeHolder){e=e.cloneNode(!0);let i=e.getAttribute("id");i=i?`${i}--clone`:`clone-${this.fancybox.id}-${t.index}`,e.setAttribute("id",i);}else {const t=document.createElement("div");t.classList.add("fancybox-placeholder"),e.parentNode.insertBefore(t,e),e.$placeHolder=t;}this.fancybox.setContent(t,e);}else this.fancybox.setError(t,"{{ELEMENT_NOT_FOUND}}");}loadAjaxContent(t){const e=this.fancybox,i=new XMLHttpRequest;e.showLoading(t),i.onreadystatechange=function(){i.readyState===XMLHttpRequest.DONE&&"ready"===e.state&&(e.hideLoading(t),200===i.status?e.setContent(t,i.responseText):e.setError(t,404===i.status?"{{AJAX_NOT_FOUND}}":"{{AJAX_FORBIDDEN}}"));};const s=t.ajax||null;i.open(s?"POST":"GET",t.src),i.setRequestHeader("Content-Type","application/x-www-form-urlencoded"),i.setRequestHeader("X-Requested-With","XMLHttpRequest"),i.send(s),t.xhr=i;}loadIframeContent(t){const e=this.fancybox,i=document.createElement("iframe");if(i.className="fancybox__iframe",i.setAttribute("id",`fancybox__iframe_${e.id}_${t.index}`),i.setAttribute("allow","autoplay; fullscreen"),i.setAttribute("scrolling","auto"),t.$iframe=i,"iframe"!==t.type||!1===t.preload)return i.setAttribute("src",t.src),this.fancybox.setContent(t,i),void this.resizeIframe(t);e.showLoading(t);const s=document.createElement("div");s.style.visibility="hidden",this.fancybox.setContent(t,s),s.appendChild(i),i.onerror=()=>{e.setError(t,"{{IFRAME_ERROR}}");},i.onload=()=>{e.hideLoading(t);let s=!1;i.isReady||(i.isReady=!0,s=!0),i.src.length&&(i.parentNode.style.visibility="",this.resizeIframe(t),s&&e.revealContent(t));},i.setAttribute("src",t.src);}setAspectRatio(t){const e=t.$content,i=t.ratio;if(!e)return;let s=t._width,o=t._height;if(i||s&&o){Object.assign(e.style,{width:s&&o?"100%":"",height:s&&o?"100%":"",maxWidth:"",maxHeight:""});let t=e.offsetWidth,n=e.offsetHeight;if(s=s||t,o=o||n,s>t||o>n){let e=Math.min(t/s,n/o);s*=e,o*=e;}Math.abs(s/o-i)>.01&&(i<s/o?s=o*i:o=s/i),Object.assign(e.style,{width:`${s}px`,height:`${o}px`});}}resizeIframe(t){const e=t.$iframe;if(!e)return;let i=t._width||0,s=t._height||0;i&&s&&(t.autoSize=!1);const o=e.parentNode,n=o&&o.style;if(!1!==t.preload&&!1!==t.autoSize&&n)try{const t=window.getComputedStyle(o),a=parseFloat(t.paddingLeft)+parseFloat(t.paddingRight),r=parseFloat(t.paddingTop)+parseFloat(t.paddingBottom),h=e.contentWindow.document,l=h.getElementsByTagName("html")[0],c=h.body;n.width="",c.style.overflow="hidden",i=i||l.scrollWidth+a,n.width=`${i}px`,c.style.overflow="",n.flex="0 0 auto",n.height=`${c.scrollHeight}px`,s=l.scrollHeight+r;}catch(t){}if(i||s){const t={flex:"0 1 auto"};i&&(t.width=`${i}px`),s&&(t.height=`${s}px`),Object.assign(n,t);}}onRefresh(t,e){e.slides.forEach((t=>{t.$el&&(t.$iframe&&this.resizeIframe(t),t.ratio&&this.setAspectRatio(t));}));}setContent(t){if(t&&!t.isDom){switch(t.type){case"html":this.fancybox.setContent(t,t.src);break;case"html5video":this.fancybox.setContent(t,this.fancybox.option("Html.html5video.tpl").replace(/\{\{src\}\}/gi,t.src).replace("{{format}}",t.format||t.html5video&&t.html5video.format||"").replace("{{poster}}",t.poster||t.thumb||""));break;case"inline":case"clone":this.loadInlineContent(t);break;case"ajax":this.loadAjaxContent(t);break;case"pdf":case"video":case"map":t.preload=!1;case"iframe":this.loadIframeContent(t);}t.ratio&&this.setAspectRatio(t);}}onSelectSlide(t,e,i){"ready"===t.state&&this.playVideo(i);}playVideo(t){if("html5video"===t.type&&t.video.autoplay)try{const e=t.$el.querySelector("video");if(e){const t=e.play();void 0!==t&&t.then((()=>{})).catch((t=>{e.muted=!0,e.play();}));}}catch(t){}if("video"!==t.type||!t.$iframe||!t.$iframe.contentWindow)return;const e=()=>{if("done"===t.state&&t.$iframe&&t.$iframe.contentWindow){let e;if(t.$iframe.isReady)return t.video&&t.video.autoplay&&(e="youtube"==t.vendor?{event:"command",func:"playVideo"}:{method:"play",value:"true"}),void(e&&t.$iframe.contentWindow.postMessage(JSON.stringify(e),"*"));"youtube"===t.vendor&&(e={event:"listening",id:t.$iframe.getAttribute("id")},t.$iframe.contentWindow.postMessage(JSON.stringify(e),"*"));}t.poller=setTimeout(e,250);};e();}onUnselectSlide(t,e,i){if("html5video"===i.type){try{i.$el.querySelector("video").pause();}catch(t){}return}let s=!1;"vimeo"==i.vendor?s={method:"pause",value:"true"}:"youtube"===i.vendor&&(s={event:"command",func:"pauseVideo"}),s&&i.$iframe&&i.$iframe.contentWindow&&i.$iframe.contentWindow.postMessage(JSON.stringify(s),"*"),clearTimeout(i.poller);}onRemoveSlide(t,e,i){i.xhr&&(i.xhr.abort(),i.xhr=null),i.$iframe&&(i.$iframe.onload=i.$iframe.onerror=null,i.$iframe.src="//about:blank",i.$iframe=null);const s=i.$content;"inline"===i.type&&s&&(s.classList.remove("fancybox__content"),"none"!==s.style.display&&(s.style.display="none")),i.$closeButton&&(i.$closeButton.remove(),i.$closeButton=null);const o=s&&s.$placeHolder;o&&(o.parentNode.insertBefore(s,o),o.remove(),s.$placeHolder=null);}onMessage(t){try{let e=JSON.parse(t.data);if("https://player.vimeo.com"===t.origin){if("ready"===e.event)for(let e of document.getElementsByClassName("fancybox__iframe"))e.contentWindow===t.source&&(e.isReady=1);}else "https://www.youtube-nocookie.com"===t.origin&&"onReady"===e.event&&(document.getElementById(e.id).isReady=1);}catch(t){}}attach(){this.fancybox.on(this.events),window.addEventListener("message",this.onMessage,!1);}detach(){this.fancybox.off(this.events),window.removeEventListener("message",this.onMessage,!1);}}P.defaults=E;class T{constructor(t){this.fancybox=t;for(const t of ["onReady","onClosing","onDone","onPageChange","onCreateSlide","onRemoveSlide","onImageStatusChange"])this[t]=this[t].bind(this);this.events={ready:this.onReady,closing:this.onClosing,done:this.onDone,"Carousel.change":this.onPageChange,"Carousel.createSlide":this.onCreateSlide,"Carousel.removeSlide":this.onRemoveSlide};}onReady(){this.fancybox.Carousel.slides.forEach((t=>{t.$el&&this.setContent(t);}));}onDone(t,e){this.handleCursor(e);}onClosing(t){clearTimeout(this.clickTimer),this.clickTimer=null,t.Carousel.slides.forEach((t=>{t.$image&&(t.state="destroy"),t.Panzoom&&t.Panzoom.detachEvents();})),"closing"===this.fancybox.state&&this.canZoom(t.getSlide())&&this.zoomOut();}onCreateSlide(t,e,i){"ready"===this.fancybox.state&&this.setContent(i);}onRemoveSlide(t,e,i){i.$image&&(i.$el.classList.remove(t.option("Image.canZoomInClass")),i.$image.remove(),i.$image=null),i.Panzoom&&(i.Panzoom.destroy(),i.Panzoom=null),i.$el&&i.$el.dataset&&delete i.$el.dataset.imageFit;}setContent(t){if(t.isDom||t.html||t.type&&"image"!==t.type)return;if(t.$image)return;t.type="image",t.state="loading";const e=document.createElement("div");e.style.visibility="hidden";const i=document.createElement("img");i.addEventListener("load",(e=>{e.stopImmediatePropagation(),this.onImageStatusChange(t);})),i.addEventListener("error",(()=>{this.onImageStatusChange(t);})),i.src=t.src,i.alt="",i.draggable=!1,i.classList.add("fancybox__image"),t.srcset&&i.setAttribute("srcset",t.srcset),t.sizes&&i.setAttribute("sizes",t.sizes),t.$image=i;const s=this.fancybox.option("Image.wrap");if(s){const o=document.createElement("div");o.classList.add("string"==typeof s?s:"fancybox__image-wrap"),o.appendChild(i),e.appendChild(o),t.$wrap=o;}else e.appendChild(i);t.$el.dataset.imageFit=this.fancybox.option("Image.fit"),this.fancybox.setContent(t,e),i.complete||i.error?this.onImageStatusChange(t):this.fancybox.showLoading(t);}onImageStatusChange(t){const e=t.$image;e&&"loading"===t.state&&(e.complete&&e.naturalWidth&&e.naturalHeight?(this.fancybox.hideLoading(t),"contain"===this.fancybox.option("Image.fit")&&this.initSlidePanzoom(t),t.$el.addEventListener("wheel",(e=>this.onWheel(t,e)),{passive:!1}),t.$content.addEventListener("click",(e=>this.onClick(t,e)),{passive:!1}),this.revealContent(t)):this.fancybox.setError(t,"{{IMAGE_ERROR}}"));}initSlidePanzoom(t){t.Panzoom||(t.Panzoom=new d(t.$el,e(!0,this.fancybox.option("Image.Panzoom",{}),{viewport:t.$wrap,content:t.$image,width:t._width,height:t._height,wrapInner:!1,textSelection:!0,touch:this.fancybox.option("Image.touch"),panOnlyZoomed:!0,click:!1,wheel:!1})),t.Panzoom.on("startAnimation",(()=>{this.fancybox.trigger("Image.startAnimation",t);})),t.Panzoom.on("endAnimation",(()=>{"zoomIn"===t.state&&this.fancybox.done(t),this.handleCursor(t),this.fancybox.trigger("Image.endAnimation",t);})),t.Panzoom.on("afterUpdate",(()=>{this.handleCursor(t),this.fancybox.trigger("Image.afterUpdate",t);})));}revealContent(t){null===this.fancybox.Carousel.prevPage&&t.index===this.fancybox.options.startIndex&&this.canZoom(t)?this.zoomIn():this.fancybox.revealContent(t);}getZoomInfo(t){const e=t.$thumb.getBoundingClientRect(),i=e.width,s=e.height,o=t.$content.getBoundingClientRect(),n=o.width,a=o.height,r=o.top-e.top,h=o.left-e.left;let l=this.fancybox.option("Image.zoomOpacity");return "auto"===l&&(l=Math.abs(i/s-n/a)>.1),{top:r,left:h,scale:n&&i?i/n:1,opacity:l}}canZoom(t){const e=this.fancybox,i=e.$container;if(window.visualViewport&&1!==window.visualViewport.scale)return !1;if(t.Panzoom&&!t.Panzoom.content.width)return !1;if(!e.option("Image.zoom")||"contain"!==e.option("Image.fit"))return !1;const s=t.$thumb;if(!s||"loading"===t.state)return !1;i.classList.add("fancybox__no-click");const o=s.getBoundingClientRect();let n;if(this.fancybox.option("Image.ignoreCoveredThumbnail")){const t=document.elementFromPoint(o.left+1,o.top+1)===s,e=document.elementFromPoint(o.right-1,o.bottom-1)===s;n=t&&e;}else n=document.elementFromPoint(o.left+.5*o.width,o.top+.5*o.height)===s;return i.classList.remove("fancybox__no-click"),n}zoomIn(){const t=this.fancybox,e=t.getSlide(),i=e.Panzoom,{top:s,left:o,scale:n,opacity:a}=this.getZoomInfo(e);t.trigger("reveal",e),i.panTo({x:-1*o,y:-1*s,scale:n,friction:0,ignoreBounds:!0}),e.$content.style.visibility="",e.state="zoomIn",!0===a&&i.on("afterTransform",(t=>{"zoomIn"!==e.state&&"zoomOut"!==e.state||(t.$content.style.opacity=Math.min(1,1-(1-t.content.scale)/(1-n)));})),i.panTo({x:0,y:0,scale:1,friction:this.fancybox.option("Image.zoomFriction")});}zoomOut(){const t=this.fancybox,e=t.getSlide(),i=e.Panzoom;if(!i)return;e.state="zoomOut",t.state="customClosing",e.$caption&&(e.$caption.style.visibility="hidden");let s=this.fancybox.option("Image.zoomFriction");const o=t=>{const{top:o,left:n,scale:a,opacity:r}=this.getZoomInfo(e);t||r||(s*=.82),i.panTo({x:-1*n,y:-1*o,scale:a,friction:s,ignoreBounds:!0}),s*=.98;};window.addEventListener("scroll",o),i.once("endAnimation",(()=>{window.removeEventListener("scroll",o),t.destroy();})),o();}handleCursor(t){if("image"!==t.type||!t.$el)return;const e=t.Panzoom,i=this.fancybox.option("Image.click",!1,t),s=this.fancybox.option("Image.touch"),o=t.$el.classList,n=this.fancybox.option("Image.canZoomInClass"),a=this.fancybox.option("Image.canZoomOutClass");if(o.remove(a),o.remove(n),e&&"toggleZoom"===i){e&&1===e.content.scale&&e.option("maxScale")-e.content.scale>.01?o.add(n):e.content.scale>1&&!s&&o.add(a);}else "close"===i&&o.add(a);}onWheel(t,e){if("ready"===this.fancybox.state&&!1!==this.fancybox.trigger("Image.wheel",e))switch(this.fancybox.option("Image.wheel")){case"zoom":"done"===t.state&&t.Panzoom&&t.Panzoom.zoomWithWheel(e);break;case"close":this.fancybox.close();break;case"slide":this.fancybox[e.deltaY<0?"prev":"next"]();}}onClick(t,e){if("ready"!==this.fancybox.state)return;const i=t.Panzoom;if(i&&(i.dragPosition.midPoint||0!==i.dragOffset.x||0!==i.dragOffset.y||1!==i.dragOffset.scale))return;if(this.fancybox.Carousel.Panzoom.lockAxis)return !1;const s=i=>{switch(i){case"toggleZoom":e.stopPropagation(),t.Panzoom&&t.Panzoom.zoomWithClick(e);break;case"close":this.fancybox.close();break;case"next":e.stopPropagation(),this.fancybox.next();}},o=this.fancybox.option("Image.click"),n=this.fancybox.option("Image.doubleClick");n?this.clickTimer?(clearTimeout(this.clickTimer),this.clickTimer=null,s(n)):this.clickTimer=setTimeout((()=>{this.clickTimer=null,s(o);}),300):s(o);}onPageChange(t,e){const i=t.getSlide();e.slides.forEach((t=>{t.Panzoom&&"done"===t.state&&t.index!==i.index&&t.Panzoom.panTo({x:0,y:0,scale:1,friction:.8});}));}attach(){this.fancybox.on(this.events);}detach(){this.fancybox.off(this.events);}}T.defaults={canZoomInClass:"can-zoom_in",canZoomOutClass:"can-zoom_out",zoom:!0,zoomOpacity:"auto",zoomFriction:.82,ignoreCoveredThumbnail:!1,touch:!0,click:"toggleZoom",doubleClick:null,wheel:"zoom",fit:"contain",wrap:!1,Panzoom:{ratio:1}};class L{constructor(t){this.fancybox=t;for(const t of ["onChange","onClosing"])this[t]=this[t].bind(this);this.events={initCarousel:this.onChange,"Carousel.change":this.onChange,closing:this.onClosing},this.hasCreatedHistory=!1,this.origHash="",this.timer=null;}onChange(t){const e=t.Carousel;this.timer&&clearTimeout(this.timer);const i=null===e.prevPage,s=t.getSlide(),o=new URL(document.URL).hash;let n=!1;if(s.slug)n="#"+s.slug;else {const i=s.$trigger&&s.$trigger.dataset,o=t.option("slug")||i&&i.fancybox;o&&o.length&&"true"!==o&&(n="#"+o+(e.slides.length>1?"-"+(s.index+1):""));}i&&(this.origHash=o!==n?o:""),n&&o!==n&&(this.timer=setTimeout((()=>{try{window.history[i?"pushState":"replaceState"]({},document.title,window.location.pathname+window.location.search+n),i&&(this.hasCreatedHistory=!0);}catch(t){}}),300));}onClosing(){if(this.timer&&clearTimeout(this.timer),!0!==this.hasSilentClose)try{return void window.history.replaceState({},document.title,window.location.pathname+window.location.search+(this.origHash||""))}catch(t){}}attach(t){t.on(this.events);}detach(t){t.off(this.events);}static startFromUrl(){const t=L.Fancybox;if(!t||t.getInstance()||!1===t.defaults.Hash)return;const{hash:e,slug:i,index:s}=L.getParsedURL();if(!i)return;let o=document.querySelector(`[data-slug="${e}"]`);if(o&&o.dispatchEvent(new CustomEvent("click",{bubbles:!0,cancelable:!0})),t.getInstance())return;const n=document.querySelectorAll(`[data-fancybox="${i}"]`);n.length&&(null===s&&1===n.length?o=n[0]:s&&(o=n[s-1]),o&&o.dispatchEvent(new CustomEvent("click",{bubbles:!0,cancelable:!0})));}static onHashChange(){const{slug:t,index:e}=L.getParsedURL(),i=L.Fancybox,s=i&&i.getInstance();if(s&&s.plugins.Hash){if(t){const i=s.Carousel;if(t===s.option("slug"))return i.slideTo(e-1);for(let e of i.slides)if(e.slug&&e.slug===t)return i.slideTo(e.index);const o=s.getSlide(),n=o.$trigger&&o.$trigger.dataset;if(n&&n.fancybox===t)return i.slideTo(e-1)}s.plugins.Hash.hasSilentClose=!0,s.close();}L.startFromUrl();}static create(t){function e(){window.addEventListener("hashchange",L.onHashChange,!1),L.startFromUrl();}L.Fancybox=t,v&&window.requestAnimationFrame((()=>{/complete|interactive|loaded/.test(document.readyState)?e():document.addEventListener("DOMContentLoaded",e);}));}static destroy(){window.removeEventListener("hashchange",L.onHashChange,!1);}static getParsedURL(){const t=window.location.hash.substr(1),e=t.split("-"),i=e.length>1&&/^\+?\d+$/.test(e[e.length-1])&&parseInt(e.pop(-1),10)||null;return {hash:t,slug:e.join("-"),index:i}}}const _={pageXOffset:0,pageYOffset:0,element:()=>document.fullscreenElement||document.mozFullScreenElement||document.webkitFullscreenElement,activate(t){_.pageXOffset=window.pageXOffset,_.pageYOffset=window.pageYOffset,t.requestFullscreen?t.requestFullscreen():t.mozRequestFullScreen?t.mozRequestFullScreen():t.webkitRequestFullscreen?t.webkitRequestFullscreen():t.msRequestFullscreen&&t.msRequestFullscreen();},deactivate(){document.exitFullscreen?document.exitFullscreen():document.mozCancelFullScreen?document.mozCancelFullScreen():document.webkitExitFullscreen&&document.webkitExitFullscreen();}};class A{constructor(t){this.fancybox=t,this.active=!1,this.handleVisibilityChange=this.handleVisibilityChange.bind(this);}isActive(){return this.active}setTimer(){if(!this.active||this.timer)return;const t=this.fancybox.option("slideshow.delay",3e3);this.timer=setTimeout((()=>{this.timer=null,this.fancybox.option("infinite")||this.fancybox.getSlide().index!==this.fancybox.Carousel.slides.length-1?this.fancybox.next():this.fancybox.jumpTo(0,{friction:0});}),t);let e=this.$progress;e||(e=document.createElement("div"),e.classList.add("fancybox__progress"),this.fancybox.$carousel.parentNode.insertBefore(e,this.fancybox.$carousel),this.$progress=e,e.offsetHeight),e.style.transitionDuration=`${t}ms`,e.style.transform="scaleX(1)";}clearTimer(){clearTimeout(this.timer),this.timer=null,this.$progress&&(this.$progress.style.transitionDuration="",this.$progress.style.transform="",this.$progress.offsetHeight);}activate(){this.active||(this.active=!0,this.fancybox.$container.classList.add("has-slideshow"),"done"===this.fancybox.getSlide().state&&this.setTimer(),document.addEventListener("visibilitychange",this.handleVisibilityChange,!1));}handleVisibilityChange(){this.deactivate();}deactivate(){this.active=!1,this.clearTimer(),this.fancybox.$container.classList.remove("has-slideshow"),document.removeEventListener("visibilitychange",this.handleVisibilityChange,!1);}toggle(){this.active?this.deactivate():this.fancybox.Carousel.slides.length>1&&this.activate();}}const z={display:["counter","zoom","slideshow","fullscreen","thumbs","close"],autoEnable:!0,items:{counter:{position:"left",type:"div",class:"fancybox__counter",html:'<span data-fancybox-index=""></span>&nbsp;/&nbsp;<span data-fancybox-count=""></span>',attr:{tabindex:-1}},prev:{type:"button",class:"fancybox__button--prev",label:"PREV",html:'<svg viewBox="0 0 24 24"><path d="M15 4l-8 8 8 8"/></svg>',attr:{"data-fancybox-prev":""}},next:{type:"button",class:"fancybox__button--next",label:"NEXT",html:'<svg viewBox="0 0 24 24"><path d="M8 4l8 8-8 8"/></svg>',attr:{"data-fancybox-next":""}},fullscreen:{type:"button",class:"fancybox__button--fullscreen",label:"TOGGLE_FULLSCREEN",html:'<svg viewBox="0 0 24 24">\n                <g><path d="M3 8 V3h5"></path><path d="M21 8V3h-5"></path><path d="M8 21H3v-5"></path><path d="M16 21h5v-5"></path></g>\n                <g><path d="M7 2v5H2M17 2v5h5M2 17h5v5M22 17h-5v5"/></g>\n            </svg>',click:function(t){t.preventDefault(),_.element()?_.deactivate():_.activate(this.fancybox.$container);}},slideshow:{type:"button",class:"fancybox__button--slideshow",label:"TOGGLE_SLIDESHOW",html:'<svg viewBox="0 0 24 24">\n                <g><path d="M6 4v16"/><path d="M20 12L6 20"/><path d="M20 12L6 4"/></g>\n                <g><path d="M7 4v15M17 4v15"/></g>\n            </svg>',click:function(t){t.preventDefault(),this.Slideshow.toggle();}},zoom:{type:"button",class:"fancybox__button--zoom",label:"TOGGLE_ZOOM",html:'<svg viewBox="0 0 24 24"><circle cx="10" cy="10" r="7"></circle><path d="M16 16 L21 21"></svg>',click:function(t){t.preventDefault();const e=this.fancybox.getSlide().Panzoom;e&&e.toggleZoom();}},download:{type:"link",label:"DOWNLOAD",class:"fancybox__button--download",html:'<svg viewBox="0 0 24 24"><path d="M12 15V3m0 12l-4-4m4 4l4-4M2 17l.62 2.48A2 2 0 004.56 21h14.88a2 2 0 001.94-1.51L22 17"/></svg>',click:function(t){t.stopPropagation();}},thumbs:{type:"button",label:"TOGGLE_THUMBS",class:"fancybox__button--thumbs",html:'<svg viewBox="0 0 24 24"><circle cx="4" cy="4" r="1" /><circle cx="12" cy="4" r="1" transform="rotate(90 12 4)"/><circle cx="20" cy="4" r="1" transform="rotate(90 20 4)"/><circle cx="4" cy="12" r="1" transform="rotate(90 4 12)"/><circle cx="12" cy="12" r="1" transform="rotate(90 12 12)"/><circle cx="20" cy="12" r="1" transform="rotate(90 20 12)"/><circle cx="4" cy="20" r="1" transform="rotate(90 4 20)"/><circle cx="12" cy="20" r="1" transform="rotate(90 12 20)"/><circle cx="20" cy="20" r="1" transform="rotate(90 20 20)"/></svg>',click:function(t){t.stopPropagation();const e=this.fancybox.plugins.Thumbs;e&&e.toggle();}},close:{type:"button",label:"CLOSE",class:"fancybox__button--close",html:'<svg viewBox="0 0 24 24"><path d="M20 20L4 4m16 0L4 20"></path></svg>',attr:{"data-fancybox-close":"",tabindex:0}}}};class k{constructor(t){this.fancybox=t,this.$container=null,this.state="init";for(const t of ["onInit","onPrepare","onDone","onKeydown","onClosing","onChange","onSettle","onRefresh"])this[t]=this[t].bind(this);this.events={init:this.onInit,prepare:this.onPrepare,done:this.onDone,keydown:this.onKeydown,closing:this.onClosing,"Carousel.change":this.onChange,"Carousel.settle":this.onSettle,"Carousel.Panzoom.touchStart":()=>this.onRefresh(),"Image.startAnimation":(t,e)=>this.onRefresh(e),"Image.afterUpdate":(t,e)=>this.onRefresh(e)};}onInit(){if(this.fancybox.option("Toolbar.autoEnable")){let t=!1;for(const e of this.fancybox.items)if("image"===e.type){t=!0;break}if(!t)return void(this.state="disabled")}for(const e of this.fancybox.option("Toolbar.display")){if("close"===(t(e)?e.id:e)){this.fancybox.options.closeButton=!1;break}}}onPrepare(){const t=this.fancybox;if("init"===this.state&&(this.build(),this.update(),this.Slideshow=new A(t),!t.Carousel.prevPage&&(t.option("slideshow.autoStart")&&this.Slideshow.activate(),t.option("fullscreen.autoStart")&&!_.element())))try{_.activate(t.$container);}catch(t){}}onFsChange(){window.scrollTo(_.pageXOffset,_.pageYOffset);}onSettle(){const t=this.fancybox,e=this.Slideshow;e&&e.isActive()&&(t.getSlide().index!==t.Carousel.slides.length-1||t.option("infinite")?"done"===t.getSlide().state&&e.setTimer():e.deactivate());}onChange(){this.update(),this.Slideshow&&this.Slideshow.isActive()&&this.Slideshow.clearTimer();}onDone(t,e){const i=this.Slideshow;e.index===t.getSlide().index&&(this.update(),i&&i.isActive()&&(t.option("infinite")||e.index!==t.Carousel.slides.length-1?i.setTimer():i.deactivate()));}onRefresh(t){t&&t.index!==this.fancybox.getSlide().index||(this.update(),!this.Slideshow||!this.Slideshow.isActive()||t&&"done"!==t.state||this.Slideshow.deactivate());}onKeydown(t,e,i){" "===e&&this.Slideshow&&(this.Slideshow.toggle(),i.preventDefault());}onClosing(){this.Slideshow&&this.Slideshow.deactivate(),document.removeEventListener("fullscreenchange",this.onFsChange);}createElement(t){let e;"div"===t.type?e=document.createElement("div"):(e=document.createElement("link"===t.type?"a":"button"),e.classList.add("carousel__button")),e.innerHTML=t.html,e.setAttribute("tabindex",t.tabindex||0),t.class&&e.classList.add(...t.class.split(" "));for(const i in t.attr)e.setAttribute(i,t.attr[i]);t.label&&e.setAttribute("title",this.fancybox.localize(`{{${t.label}}}`)),t.click&&e.addEventListener("click",t.click.bind(this)),"prev"===t.id&&e.setAttribute("data-fancybox-prev",""),"next"===t.id&&e.setAttribute("data-fancybox-next","");const i=e.querySelector("svg");return i&&(i.setAttribute("role","img"),i.setAttribute("tabindex","-1"),i.setAttribute("xmlns","http://www.w3.org/2000/svg")),e}build(){this.cleanup();const i=this.fancybox.option("Toolbar.items"),s=[{position:"left",items:[]},{position:"center",items:[]},{position:"right",items:[]}],o=this.fancybox.plugins.Thumbs;for(const n of this.fancybox.option("Toolbar.display")){let a,r;if(t(n)?(a=n.id,r=e({},i[a],n)):(a=n,r=i[a]),["counter","next","prev","slideshow"].includes(a)&&this.fancybox.items.length<2)continue;if("fullscreen"===a){if(!document.fullscreenEnabled||window.fullScreen)continue;document.addEventListener("fullscreenchange",this.onFsChange);}if("thumbs"===a&&(!o||"disabled"===o.state))continue;if(!r)continue;let h=r.position||"right",l=s.find((t=>t.position===h));l&&l.items.push(r);}const n=document.createElement("div");n.classList.add("fancybox__toolbar");for(const t of s)if(t.items.length){const e=document.createElement("div");e.classList.add("fancybox__toolbar__items"),e.classList.add(`fancybox__toolbar__items--${t.position}`);for(const i of t.items)e.appendChild(this.createElement(i));n.appendChild(e);}this.fancybox.$carousel.parentNode.insertBefore(n,this.fancybox.$carousel),this.$container=n;}update(){const t=this.fancybox.getSlide(),e=t.index,i=this.fancybox.items.length,s=t.downloadSrc||("image"!==t.type||t.error?null:t.src);for(const t of this.fancybox.$container.querySelectorAll("a.fancybox__button--download"))s?(t.removeAttribute("disabled"),t.removeAttribute("tabindex"),t.setAttribute("href",s),t.setAttribute("download",s),t.setAttribute("target","_blank")):(t.setAttribute("disabled",""),t.setAttribute("tabindex",-1),t.removeAttribute("href"),t.removeAttribute("download"));const o=t.Panzoom,n=o&&o.option("maxScale")>o.option("baseScale");for(const t of this.fancybox.$container.querySelectorAll(".fancybox__button--zoom"))n?t.removeAttribute("disabled"):t.setAttribute("disabled","");for(const e of this.fancybox.$container.querySelectorAll("[data-fancybox-index]"))e.innerHTML=t.index+1;for(const t of this.fancybox.$container.querySelectorAll("[data-fancybox-count]"))t.innerHTML=i;if(!this.fancybox.option("infinite")){for(const t of this.fancybox.$container.querySelectorAll("[data-fancybox-prev]"))0===e?t.setAttribute("disabled",""):t.removeAttribute("disabled");for(const t of this.fancybox.$container.querySelectorAll("[data-fancybox-next]"))e===i-1?t.setAttribute("disabled",""):t.removeAttribute("disabled");}}cleanup(){this.Slideshow&&this.Slideshow.isActive()&&this.Slideshow.clearTimer(),this.$container&&this.$container.remove(),this.$container=null;}attach(){this.fancybox.on(this.events);}detach(){this.fancybox.off(this.events),this.cleanup();}}k.defaults=z;const O={ScrollLock:class{constructor(t){this.fancybox=t,this.viewport=null,this.pendingUpdate=null;for(const t of ["onReady","onResize","onTouchstart","onTouchmove"])this[t]=this[t].bind(this);}onReady(){const t=window.visualViewport;t&&(this.viewport=t,this.startY=0,t.addEventListener("resize",this.onResize),this.updateViewport()),window.addEventListener("touchstart",this.onTouchstart,{passive:!1}),window.addEventListener("touchmove",this.onTouchmove,{passive:!1}),window.addEventListener("wheel",this.onWheel,{passive:!1});}onResize(){this.updateViewport();}updateViewport(){const t=this.fancybox,e=this.viewport,i=e.scale||1,s=t.$container;if(!s)return;let o="",n="",a="";i-1>.1&&(o=e.width*i+"px",n=e.height*i+"px",a=`translate3d(${e.offsetLeft}px, ${e.offsetTop}px, 0) scale(${1/i})`),s.style.width=o,s.style.height=n,s.style.transform=a;}onTouchstart(t){this.startY=t.touches?t.touches[0].screenY:t.screenY;}onTouchmove(t){const e=this.startY,i=window.innerWidth/window.document.documentElement.clientWidth;if(!t.cancelable)return;if(t.touches.length>1||1!==i)return;const o=s$1(t.composedPath()[0]);if(!o)return void t.preventDefault();const n=window.getComputedStyle(o),a=parseInt(n.getPropertyValue("height"),10),r=t.touches?t.touches[0].screenY:t.screenY,h=e<=r&&0===o.scrollTop,l=e>=r&&o.scrollHeight-o.scrollTop===a;(h||l)&&t.preventDefault();}onWheel(t){s$1(t.composedPath()[0])||t.preventDefault();}cleanup(){this.pendingUpdate&&(cancelAnimationFrame(this.pendingUpdate),this.pendingUpdate=null);const t=this.viewport;t&&(t.removeEventListener("resize",this.onResize),this.viewport=null),window.removeEventListener("touchstart",this.onTouchstart,!1),window.removeEventListener("touchmove",this.onTouchmove,!1),window.removeEventListener("wheel",this.onWheel,{passive:!1});}attach(){this.fancybox.on("initLayout",this.onReady);}detach(){this.fancybox.off("initLayout",this.onReady),this.cleanup();}},Thumbs:C,Html:P,Toolbar:k,Image:T,Hash:L};const M={startIndex:0,preload:1,infinite:!0,showClass:"fancybox-zoomInUp",hideClass:"fancybox-fadeOut",animated:!0,hideScrollbar:!0,parentEl:null,mainClass:null,autoFocus:!0,trapFocus:!0,placeFocusBack:!0,click:"close",closeButton:"inside",dragToClose:!0,keyboard:{Escape:"close",Delete:"close",Backspace:"close",PageUp:"next",PageDown:"prev",ArrowUp:"next",ArrowDown:"prev",ArrowRight:"next",ArrowLeft:"prev"},template:{closeButton:'<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" tabindex="-1"><path d="M20 20L4 4m16 0L4 20"/></svg>',spinner:'<svg xmlns="http://www.w3.org/2000/svg" width="50" height="50" viewBox="25 25 50 50" tabindex="-1"><circle cx="50" cy="50" r="20"/></svg>',main:null},l10n:{CLOSE:"Close",NEXT:"Next",PREV:"Previous",MODAL:"You can close this modal content with the ESC key",ERROR:"Something Went Wrong, Please Try Again Later",IMAGE_ERROR:"Image Not Found",ELEMENT_NOT_FOUND:"HTML Element Not Found",AJAX_NOT_FOUND:"Error Loading AJAX : Not Found",AJAX_FORBIDDEN:"Error Loading AJAX : Forbidden",IFRAME_ERROR:"Error Loading Page",TOGGLE_ZOOM:"Toggle zoom level",TOGGLE_THUMBS:"Toggle thumbnails",TOGGLE_SLIDESHOW:"Toggle slideshow",TOGGLE_FULLSCREEN:"Toggle full-screen mode",DOWNLOAD:"Download"}},I=new Map;let F=0;class R extends l{constructor(t,i={}){t=t.map((t=>(t.width&&(t._width=t.width),t.height&&(t._height=t.height),t))),super(e(!0,{},M,i)),this.bindHandlers(),this.state="init",this.setItems(t),this.attachPlugins(R.Plugins),this.trigger("init"),!0===this.option("hideScrollbar")&&this.hideScrollbar(),this.initLayout(),this.initCarousel(),this.attachEvents(),I.set(this.id,this),this.trigger("prepare"),this.state="ready",this.trigger("ready"),this.$container.setAttribute("aria-hidden","false"),this.option("trapFocus")&&this.focus();}option(t,...e){const i=this.getSlide();let s=i?i[t]:void 0;return void 0!==s?("function"==typeof s&&(s=s.call(this,this,...e)),s):super.option(t,...e)}bindHandlers(){for(const t of ["onMousedown","onKeydown","onClick","onFocus","onCreateSlide","onSettle","onTouchMove","onTouchEnd","onTransform"])this[t]=this[t].bind(this);}attachEvents(){document.addEventListener("mousedown",this.onMousedown),document.addEventListener("keydown",this.onKeydown,!0),this.option("trapFocus")&&document.addEventListener("focus",this.onFocus,!0),this.$container.addEventListener("click",this.onClick);}detachEvents(){document.removeEventListener("mousedown",this.onMousedown),document.removeEventListener("keydown",this.onKeydown,!0),document.removeEventListener("focus",this.onFocus,!0),this.$container.removeEventListener("click",this.onClick);}initLayout(){this.$root=this.option("parentEl")||document.body;let t=this.option("template.main");t&&(this.$root.insertAdjacentHTML("beforeend",this.localize(t)),this.$container=this.$root.querySelector(".fancybox__container")),this.$container||(this.$container=document.createElement("div"),this.$root.appendChild(this.$container)),this.$container.onscroll=()=>(this.$container.scrollLeft=0,!1),Object.entries({class:"fancybox__container",role:"dialog",tabIndex:"-1","aria-modal":"true","aria-hidden":"true","aria-label":this.localize("{{MODAL}}")}).forEach((t=>this.$container.setAttribute(...t))),this.option("animated")&&this.$container.classList.add("is-animated"),this.$backdrop=this.$container.querySelector(".fancybox__backdrop"),this.$backdrop||(this.$backdrop=document.createElement("div"),this.$backdrop.classList.add("fancybox__backdrop"),this.$container.appendChild(this.$backdrop)),this.$carousel=this.$container.querySelector(".fancybox__carousel"),this.$carousel||(this.$carousel=document.createElement("div"),this.$carousel.classList.add("fancybox__carousel"),this.$container.appendChild(this.$carousel)),this.$container.Fancybox=this,this.id=this.$container.getAttribute("id"),this.id||(this.id=this.options.id||++F,this.$container.setAttribute("id","fancybox-"+this.id));const e=this.option("mainClass");return e&&this.$container.classList.add(...e.split(" ")),document.documentElement.classList.add("with-fancybox"),this.trigger("initLayout"),this}setItems(t){const e=[];for(const i of t){const t=i.$trigger;if(t){const e=t.dataset||{};i.src=e.src||t.getAttribute("href")||i.src,i.type=e.type||i.type,!i.src&&t instanceof HTMLImageElement&&(i.src=t.currentSrc||i.$trigger.src);}let s=i.$thumb;if(!s){let t=i.$trigger&&i.$trigger.origTarget;t&&(s=t instanceof HTMLImageElement?t:t.querySelector("img:not([aria-hidden])")),!s&&i.$trigger&&(s=i.$trigger instanceof HTMLImageElement?i.$trigger:i.$trigger.querySelector("img:not([aria-hidden])"));}i.$thumb=s||null;let o=i.thumb;!o&&s&&(o=s.currentSrc||s.src,!o&&s.dataset&&(o=s.dataset.lazySrc||s.dataset.src)),o||"image"!==i.type||(o=i.src),i.thumb=o||null,i.caption=i.caption||"",e.push(i);}this.items=e;}initCarousel(){return this.Carousel=new y(this.$carousel,e(!0,{},{prefix:"",classNames:{viewport:"fancybox__viewport",track:"fancybox__track",slide:"fancybox__slide"},textSelection:!0,preload:this.option("preload"),friction:.88,slides:this.items,initialPage:this.options.startIndex,slidesPerPage:1,infiniteX:this.option("infinite"),infiniteY:!0,l10n:this.option("l10n"),Dots:!1,Navigation:{classNames:{main:"fancybox__nav",button:"carousel__button",next:"is-next",prev:"is-prev"}},Panzoom:{textSelection:!0,panOnlyZoomed:()=>this.Carousel&&this.Carousel.pages&&this.Carousel.pages.length<2&&!this.option("dragToClose"),lockAxis:()=>{if(this.Carousel){let t="x";return this.option("dragToClose")&&(t+="y"),t}}},on:{"*":(t,...e)=>this.trigger(`Carousel.${t}`,...e),init:t=>this.Carousel=t,createSlide:this.onCreateSlide,settle:this.onSettle}},this.option("Carousel"))),this.option("dragToClose")&&this.Carousel.Panzoom.on({touchMove:this.onTouchMove,afterTransform:this.onTransform,touchEnd:this.onTouchEnd}),this.trigger("initCarousel"),this}onCreateSlide(t,e){let i=e.caption||"";if("function"==typeof this.options.caption&&(i=this.options.caption.call(this,this,this.Carousel,e)),"string"==typeof i&&i.length){const t=document.createElement("div"),s=`fancybox__caption_${this.id}_${e.index}`;t.className="fancybox__caption",t.innerHTML=i,t.setAttribute("id",s),e.$caption=e.$el.appendChild(t),e.$el.classList.add("has-caption"),e.$el.setAttribute("aria-labelledby",s);}}onSettle(){this.option("autoFocus")&&this.focus();}onFocus(t){this.isTopmost()&&this.focus(t);}onClick(t){if(t.defaultPrevented)return;let e=t.composedPath()[0];if(e.matches("[data-fancybox-close]"))return t.preventDefault(),void R.close(!1,t);if(e.matches("[data-fancybox-next]"))return t.preventDefault(),void R.next();if(e.matches("[data-fancybox-prev]"))return t.preventDefault(),void R.prev();const i=document.activeElement;if(i){if(i.closest("[contenteditable]"))return;e.matches(x$1)||i.blur();}if(e.closest(".fancybox__content"))return;if(getSelection().toString().length)return;if(!1===this.trigger("click",t))return;switch(this.option("click")){case"close":this.close();break;case"next":this.next();}}onTouchMove(){const t=this.getSlide().Panzoom;return !t||1===t.content.scale}onTouchEnd(t){const e=t.dragOffset.y;Math.abs(e)>=150||Math.abs(e)>=35&&t.dragOffset.time<350?(this.option("hideClass")&&(this.getSlide().hideClass="fancybox-throwOut"+(t.content.y<0?"Up":"Down")),this.close()):"y"===t.lockAxis&&t.panTo({y:0});}onTransform(t){if(this.$backdrop){const e=Math.abs(t.content.y),i=e<1?"":Math.max(.33,Math.min(1,1-e/t.content.fitHeight*1.5));this.$container.style.setProperty("--fancybox-ts",i?"0s":""),this.$container.style.setProperty("--fancybox-opacity",i);}}onMousedown(){"ready"===this.state&&document.body.classList.add("is-using-mouse");}onKeydown(t){if(!this.isTopmost())return;document.body.classList.remove("is-using-mouse");const e=t.key,i=this.option("keyboard");if(!i||t.ctrlKey||t.altKey||t.shiftKey)return;const s=t.composedPath()[0],o=document.activeElement&&document.activeElement.classList,n=o&&o.contains("carousel__button");if("Escape"!==e&&!n){if(t.target.isContentEditable||-1!==["BUTTON","TEXTAREA","OPTION","INPUT","SELECT","VIDEO"].indexOf(s.nodeName))return}if(!1===this.trigger("keydown",e,t))return;const a=i[e];"function"==typeof this[a]&&this[a]();}getSlide(){const t=this.Carousel;if(!t)return null;const e=null===t.page?t.option("initialPage"):t.page,i=t.pages||[];return i.length&&i[e]?i[e].slides[0]:null}focus(t){if(R.ignoreFocusChange)return;if(["init","closing","customClosing","destroy"].indexOf(this.state)>-1)return;const e=this.$container,i=this.getSlide(),s="done"===i.state?i.$el:null;if(s&&s.contains(document.activeElement))return;t&&t.preventDefault(),R.ignoreFocusChange=!0;const o=Array.from(e.querySelectorAll(x$1));let n,a=[];for(let t of o){const e=t.offsetParent,i=s&&s.contains(t),o=!this.Carousel.$viewport.contains(t);e&&(i||o)?(a.push(t),void 0!==t.dataset.origTabindex&&(t.tabIndex=t.dataset.origTabindex,t.removeAttribute("data-orig-tabindex")),(t.hasAttribute("autoFocus")||!n&&i&&!t.classList.contains("carousel__button"))&&(n=t)):(t.dataset.origTabindex=void 0===t.dataset.origTabindex?t.getAttribute("tabindex"):t.dataset.origTabindex,t.tabIndex=-1);}t?a.indexOf(t.target)>-1?this.lastFocus=t.target:this.lastFocus===e?w(a[a.length-1]):w(e):this.option("autoFocus")&&n?w(n):a.indexOf(document.activeElement)<0&&w(e),this.lastFocus=document.activeElement,R.ignoreFocusChange=!1;}hideScrollbar(){if(!v)return;const t=window.innerWidth-document.documentElement.getBoundingClientRect().width,e="fancybox-style-noscroll";let i=document.getElementById(e);i||t>0&&(i=document.createElement("style"),i.id=e,i.type="text/css",i.innerHTML=`.compensate-for-scrollbar {padding-right: ${t}px;}`,document.getElementsByTagName("head")[0].appendChild(i),document.body.classList.add("compensate-for-scrollbar"));}revealScrollbar(){document.body.classList.remove("compensate-for-scrollbar");const t=document.getElementById("fancybox-style-noscroll");t&&t.remove();}clearContent(t){this.Carousel.trigger("removeSlide",t),t.$content&&(t.$content.remove(),t.$content=null),t.$closeButton&&(t.$closeButton.remove(),t.$closeButton=null),t._className&&t.$el.classList.remove(t._className);}setContent(t,e,i={}){let s;const o=t.$el;if(e instanceof HTMLElement)["img","iframe","video","audio"].indexOf(e.nodeName.toLowerCase())>-1?(s=document.createElement("div"),s.appendChild(e)):s=e;else {const t=document.createRange().createContextualFragment(e);s=document.createElement("div"),s.appendChild(t);}if(t.filter&&!t.error&&(s=s.querySelector(t.filter)),s instanceof Element)return t._className=`has-${i.suffix||t.type||"unknown"}`,o.classList.add(t._className),s.classList.add("fancybox__content"),"none"!==s.style.display&&"none"!==getComputedStyle(s).getPropertyValue("display")||(s.style.display=t.display||this.option("defaultDisplay")||"flex"),t.id&&s.setAttribute("id",t.id),t.$content=s,o.prepend(s),this.manageCloseButton(t),"loading"!==t.state&&this.revealContent(t),s;this.setError(t,"{{ELEMENT_NOT_FOUND}}");}manageCloseButton(t){const e=void 0===t.closeButton?this.option("closeButton"):t.closeButton;if(!e||"top"===e&&this.$closeButton)return;const i=document.createElement("button");i.classList.add("carousel__button","is-close"),i.setAttribute("title",this.options.l10n.CLOSE),i.innerHTML=this.option("template.closeButton"),i.addEventListener("click",(t=>this.close(t))),"inside"===e?(t.$closeButton&&t.$closeButton.remove(),t.$closeButton=t.$content.appendChild(i)):this.$closeButton=this.$container.insertBefore(i,this.$container.firstChild);}revealContent(t){this.trigger("reveal",t),t.$content.style.visibility="";let e=!1;t.error||"loading"===t.state||null!==this.Carousel.prevPage||t.index!==this.options.startIndex||(e=void 0===t.showClass?this.option("showClass"):t.showClass),e?(t.state="animating",this.animateCSS(t.$content,e,(()=>{this.done(t);}))):this.done(t);}animateCSS(t,e,i){if(t&&t.dispatchEvent(new CustomEvent("animationend",{bubbles:!0,cancelable:!0})),!t||!e)return void("function"==typeof i&&i());const s=function(o){o.currentTarget===this&&(t.removeEventListener("animationend",s),i&&i(),t.classList.remove(e));};t.addEventListener("animationend",s),t.classList.add(e);}done(t){t.state="done",this.trigger("done",t);const e=this.getSlide();e&&t.index===e.index&&this.option("autoFocus")&&this.focus();}setError(t,e){t.error=e,this.hideLoading(t),this.clearContent(t);const i=document.createElement("div");i.classList.add("fancybox-error"),i.innerHTML=this.localize(e||"<p>{{ERROR}}</p>"),this.setContent(t,i,{suffix:"error"});}showLoading(t){t.state="loading",t.$el.classList.add("is-loading");let e=t.$el.querySelector(".fancybox__spinner");e||(e=document.createElement("div"),e.classList.add("fancybox__spinner"),e.innerHTML=this.option("template.spinner"),e.addEventListener("click",(()=>{this.Carousel.Panzoom.velocity||this.close();})),t.$el.prepend(e));}hideLoading(t){const e=t.$el&&t.$el.querySelector(".fancybox__spinner");e&&(e.remove(),t.$el.classList.remove("is-loading")),"loading"===t.state&&(this.trigger("load",t),t.state="ready");}next(){const t=this.Carousel;t&&t.pages.length>1&&t.slideNext();}prev(){const t=this.Carousel;t&&t.pages.length>1&&t.slidePrev();}jumpTo(...t){this.Carousel&&this.Carousel.slideTo(...t);}isClosing(){return ["closing","customClosing","destroy"].includes(this.state)}isTopmost(){return R.getInstance().id==this.id}close(t){if(t&&t.preventDefault(),this.isClosing())return;if(!1===this.trigger("shouldClose",t))return;if(this.state="closing",this.Carousel.Panzoom.destroy(),this.detachEvents(),this.trigger("closing",t),"destroy"===this.state)return;this.$container.setAttribute("aria-hidden","true"),this.$container.classList.add("is-closing");const e=this.getSlide();if(this.Carousel.slides.forEach((t=>{t.$content&&t.index!==e.index&&this.Carousel.trigger("removeSlide",t);})),"closing"===this.state){const t=void 0===e.hideClass?this.option("hideClass"):e.hideClass;this.animateCSS(e.$content,t,(()=>{this.destroy();}),!0);}}destroy(){if("destroy"===this.state)return;this.state="destroy",this.trigger("destroy");const t=this.option("placeFocusBack")?this.option("triggerTarget",this.getSlide().$trigger):null;this.Carousel.destroy(),this.detachPlugins(),this.Carousel=null,this.options={},this.events={},this.$container.remove(),this.$container=this.$backdrop=this.$carousel=null,t&&w(t),I.delete(this.id);const e=R.getInstance();e?e.focus():(document.documentElement.classList.remove("with-fancybox"),document.body.classList.remove("is-using-mouse"),this.revealScrollbar());}static show(t,e={}){return new R(t,e)}static fromEvent(t,e={}){if(t.defaultPrevented)return;if(t.button&&0!==t.button)return;if(t.ctrlKey||t.metaKey||t.shiftKey)return;const i=t.composedPath()[0];let s,o,n,a=i;if((a.matches("[data-fancybox-trigger]")||(a=a.closest("[data-fancybox-trigger]")))&&(e.triggerTarget=a,s=a&&a.dataset&&a.dataset.fancyboxTrigger),s){const t=document.querySelectorAll(`[data-fancybox="${s}"]`),e=parseInt(a.dataset.fancyboxIndex,10)||0;a=t.length?t[e]:a;}Array.from(R.openers.keys()).reverse().some((e=>{n=a||i;let s=!1;try{n instanceof Element&&("string"==typeof e||e instanceof String)&&(s=n.matches(e)||(n=n.closest(e)));}catch(t){}return !!s&&(t.preventDefault(),o=e,!0)}));let r=!1;if(o){e.event=t,e.target=n,n.origTarget=i,r=R.fromOpener(o,e);const s=R.getInstance();s&&"ready"===s.state&&t.detail&&document.body.classList.add("is-using-mouse");}return r}static fromOpener(t,i={}){let s=[],o=i.startIndex||0,n=i.target||null;const a=void 0!==(i=e({},i,R.openers.get(t))).groupAll&&i.groupAll,r=void 0===i.groupAttr?"data-fancybox":i.groupAttr,h=r&&n?n.getAttribute(`${r}`):"";if(!n||h||a){const e=i.root||(n?n.getRootNode():document.body);s=[].slice.call(e.querySelectorAll(t));}if(n&&!a&&(s=h?s.filter((t=>t.getAttribute(`${r}`)===h)):[n]),!s.length)return !1;const l=R.getInstance();return !(l&&s.indexOf(l.options.$trigger)>-1)&&(o=n?s.indexOf(n):o,s=s.map((function(t){const e=["false","0","no","null","undefined"],i=["true","1","yes"],s=Object.assign({},t.dataset),o={};for(let[t,n]of Object.entries(s))if("fancybox"!==t)if("width"===t||"height"===t)o[`_${t}`]=n;else if("string"==typeof n||n instanceof String)if(e.indexOf(n)>-1)o[t]=!1;else if(i.indexOf(o[t])>-1)o[t]=!0;else try{o[t]=JSON.parse(n);}catch(e){o[t]=n;}else o[t]=n;return t instanceof Element&&(o.$trigger=t),o})),new R(s,e({},i,{startIndex:o,$trigger:n})))}static bind(t,e={}){function i(){document.body.addEventListener("click",R.fromEvent,!1);}v&&(R.openers.size||(/complete|interactive|loaded/.test(document.readyState)?i():document.addEventListener("DOMContentLoaded",i)),R.openers.set(t,e));}static unbind(t){R.openers.delete(t),R.openers.size||R.destroy();}static destroy(){let t;for(;t=R.getInstance();)t.destroy();R.openers=new Map,document.body.removeEventListener("click",R.fromEvent,!1);}static getInstance(t){if(t)return I.get(t);return Array.from(I.values()).reverse().find((t=>!t.isClosing()&&t))||null}static close(t=!0,e){if(t)for(const t of I.values())t.close(e);else {const t=R.getInstance();t&&t.close(e);}}static next(){const t=R.getInstance();t&&t.next();}static prev(){const t=R.getInstance();t&&t.prev();}}R.version="4.0.31",R.defaults=M,R.openers=new Map,R.Plugins=O,R.bind("[data-fancybox]");for(const[t,e]of Object.entries(R.Plugins||{}))"function"==typeof e.create&&e.create(R);

  var PipsMode;
  (function (PipsMode) {
      PipsMode["Range"] = "range";
      PipsMode["Steps"] = "steps";
      PipsMode["Positions"] = "positions";
      PipsMode["Count"] = "count";
      PipsMode["Values"] = "values";
  })(PipsMode || (PipsMode = {}));
  var PipsType;
  (function (PipsType) {
      PipsType[PipsType["None"] = -1] = "None";
      PipsType[PipsType["NoValue"] = 0] = "NoValue";
      PipsType[PipsType["LargeValue"] = 1] = "LargeValue";
      PipsType[PipsType["SmallValue"] = 2] = "SmallValue";
  })(PipsType || (PipsType = {}));
  //region Helper Methods
  function isValidFormatter(entry) {
      return isValidPartialFormatter(entry) && typeof entry.from === "function";
  }
  function isValidPartialFormatter(entry) {
      // partial formatters only need a to function and not a from function
      return typeof entry === "object" && typeof entry.to === "function";
  }
  function removeElement(el) {
      el.parentElement.removeChild(el);
  }
  function isSet(value) {
      return value !== null && value !== undefined;
  }
  // Bindable version
  function preventDefault(e) {
      e.preventDefault();
  }
  // Removes duplicates from an array.
  function unique(array) {
      return array.filter(function (a) {
          return !this[a] ? (this[a] = true) : false;
      }, {});
  }
  // Round a value to the closest 'to'.
  function closest$1(value, to) {
      return Math.round(value / to) * to;
  }
  // Current position of an element relative to the document.
  function offset(elem, orientation) {
      var rect = elem.getBoundingClientRect();
      var doc = elem.ownerDocument;
      var docElem = doc.documentElement;
      var pageOffset = getPageOffset(doc);
      // getBoundingClientRect contains left scroll in Chrome on Android.
      // I haven't found a feature detection that proves this. Worst case
      // scenario on mis-match: the 'tap' feature on horizontal sliders breaks.
      if (/webkit.*Chrome.*Mobile/i.test(navigator.userAgent)) {
          pageOffset.x = 0;
      }
      return orientation ? rect.top + pageOffset.y - docElem.clientTop : rect.left + pageOffset.x - docElem.clientLeft;
  }
  // Checks whether a value is numerical.
  function isNumeric(a) {
      return typeof a === "number" && !isNaN(a) && isFinite(a);
  }
  // Sets a class and removes it after [duration] ms.
  function addClassFor(element, className, duration) {
      if (duration > 0) {
          addClass(element, className);
          setTimeout(function () {
              removeClass(element, className);
          }, duration);
      }
  }
  // Limits a value to 0 - 100
  function limit(a) {
      return Math.max(Math.min(a, 100), 0);
  }
  // Wraps a variable as an array, if it isn't one yet.
  // Note that an input array is returned by reference!
  function asArray(a) {
      return Array.isArray(a) ? a : [a];
  }
  // Counts decimals
  function countDecimals(numStr) {
      numStr = String(numStr);
      var pieces = numStr.split(".");
      return pieces.length > 1 ? pieces[1].length : 0;
  }
  // http://youmightnotneedjquery.com/#add_class
  function addClass(el, className) {
      if (el.classList && !/\s/.test(className)) {
          el.classList.add(className);
      }
      else {
          el.className += " " + className;
      }
  }
  // http://youmightnotneedjquery.com/#remove_class
  function removeClass(el, className) {
      if (el.classList && !/\s/.test(className)) {
          el.classList.remove(className);
      }
      else {
          el.className = el.className.replace(new RegExp("(^|\\b)" + className.split(" ").join("|") + "(\\b|$)", "gi"), " ");
      }
  }
  // https://plainjs.com/javascript/attributes/adding-removing-and-testing-for-classes-9/
  function hasClass(el, className) {
      return el.classList ? el.classList.contains(className) : new RegExp("\\b" + className + "\\b").test(el.className);
  }
  // https://developer.mozilla.org/en-US/docs/Web/API/Window/scrollY#Notes
  function getPageOffset(doc) {
      var supportPageOffset = window.pageXOffset !== undefined;
      var isCSS1Compat = (doc.compatMode || "") === "CSS1Compat";
      var x = supportPageOffset
          ? window.pageXOffset
          : isCSS1Compat
              ? doc.documentElement.scrollLeft
              : doc.body.scrollLeft;
      var y = supportPageOffset
          ? window.pageYOffset
          : isCSS1Compat
              ? doc.documentElement.scrollTop
              : doc.body.scrollTop;
      return {
          x: x,
          y: y,
      };
  }
  // we provide a function to compute constants instead
  // of accessing window.* as soon as the module needs it
  // so that we do not compute anything if not needed
  function getActions() {
      // Determine the events to bind. IE11 implements pointerEvents without
      // a prefix, which breaks compatibility with the IE10 implementation.
      return window.navigator.pointerEnabled
          ? {
              start: "pointerdown",
              move: "pointermove",
              end: "pointerup",
          }
          : window.navigator.msPointerEnabled
              ? {
                  start: "MSPointerDown",
                  move: "MSPointerMove",
                  end: "MSPointerUp",
              }
              : {
                  start: "mousedown touchstart",
                  move: "mousemove touchmove",
                  end: "mouseup touchend",
              };
  }
  // https://github.com/WICG/EventListenerOptions/blob/gh-pages/explainer.md
  // Issue #785
  function getSupportsPassive() {
      var supportsPassive = false;
      /* eslint-disable */
      try {
          var opts = Object.defineProperty({}, "passive", {
              get: function () {
                  supportsPassive = true;
              },
          });
          // @ts-ignore
          window.addEventListener("test", null, opts);
      }
      catch (e) { }
      /* eslint-enable */
      return supportsPassive;
  }
  function getSupportsTouchActionNone() {
      return window.CSS && CSS.supports && CSS.supports("touch-action", "none");
  }
  //endregion
  //region Range Calculation
  // Determine the size of a sub-range in relation to a full range.
  function subRangeRatio(pa, pb) {
      return 100 / (pb - pa);
  }
  // (percentage) How many percent is this value of this range?
  function fromPercentage(range, value, startRange) {
      return (value * 100) / (range[startRange + 1] - range[startRange]);
  }
  // (percentage) Where is this value on this range?
  function toPercentage$1(range, value) {
      return fromPercentage(range, range[0] < 0 ? value + Math.abs(range[0]) : value - range[0], 0);
  }
  // (value) How much is this percentage on this range?
  function isPercentage(range, value) {
      return (value * (range[1] - range[0])) / 100 + range[0];
  }
  function getJ(value, arr) {
      var j = 1;
      while (value >= arr[j]) {
          j += 1;
      }
      return j;
  }
  // (percentage) Input a value, find where, on a scale of 0-100, it applies.
  function toStepping(xVal, xPct, value) {
      if (value >= xVal.slice(-1)[0]) {
          return 100;
      }
      var j = getJ(value, xVal);
      var va = xVal[j - 1];
      var vb = xVal[j];
      var pa = xPct[j - 1];
      var pb = xPct[j];
      return pa + toPercentage$1([va, vb], value) / subRangeRatio(pa, pb);
  }
  // (value) Input a percentage, find where it is on the specified range.
  function fromStepping(xVal, xPct, value) {
      // There is no range group that fits 100
      if (value >= 100) {
          return xVal.slice(-1)[0];
      }
      var j = getJ(value, xPct);
      var va = xVal[j - 1];
      var vb = xVal[j];
      var pa = xPct[j - 1];
      var pb = xPct[j];
      return isPercentage([va, vb], (value - pa) * subRangeRatio(pa, pb));
  }
  // (percentage) Get the step that applies at a certain value.
  function getStep(xPct, xSteps, snap, value) {
      if (value === 100) {
          return value;
      }
      var j = getJ(value, xPct);
      var a = xPct[j - 1];
      var b = xPct[j];
      // If 'snap' is set, steps are used as fixed points on the slider.
      if (snap) {
          // Find the closest position, a or b.
          if (value - a > (b - a) / 2) {
              return b;
          }
          return a;
      }
      if (!xSteps[j - 1]) {
          return value;
      }
      return xPct[j - 1] + closest$1(value - xPct[j - 1], xSteps[j - 1]);
  }
  //endregion
  //region Spectrum
  var Spectrum = /** @class */ (function () {
      function Spectrum(entry, snap, singleStep) {
          this.xPct = [];
          this.xVal = [];
          this.xSteps = [];
          this.xNumSteps = [];
          this.xHighestCompleteStep = [];
          this.xSteps = [singleStep || false];
          this.xNumSteps = [false];
          this.snap = snap;
          var index;
          var ordered = [];
          // Map the object keys to an array.
          Object.keys(entry).forEach(function (index) {
              ordered.push([asArray(entry[index]), index]);
          });
          // Sort all entries by value (numeric sort).
          ordered.sort(function (a, b) {
              return a[0][0] - b[0][0];
          });
          // Convert all entries to subranges.
          for (index = 0; index < ordered.length; index++) {
              this.handleEntryPoint(ordered[index][1], ordered[index][0]);
          }
          // Store the actual step values.
          // xSteps is sorted in the same order as xPct and xVal.
          this.xNumSteps = this.xSteps.slice(0);
          // Convert all numeric steps to the percentage of the subrange they represent.
          for (index = 0; index < this.xNumSteps.length; index++) {
              this.handleStepPoint(index, this.xNumSteps[index]);
          }
      }
      Spectrum.prototype.getDistance = function (value) {
          var distances = [];
          for (var index = 0; index < this.xNumSteps.length - 1; index++) {
              distances[index] = fromPercentage(this.xVal, value, index);
          }
          return distances;
      };
      // Calculate the percentual distance over the whole scale of ranges.
      // direction: 0 = backwards / 1 = forwards
      Spectrum.prototype.getAbsoluteDistance = function (value, distances, direction) {
          var xPct_index = 0;
          // Calculate range where to start calculation
          if (value < this.xPct[this.xPct.length - 1]) {
              while (value > this.xPct[xPct_index + 1]) {
                  xPct_index++;
              }
          }
          else if (value === this.xPct[this.xPct.length - 1]) {
              xPct_index = this.xPct.length - 2;
          }
          // If looking backwards and the value is exactly at a range separator then look one range further
          if (!direction && value === this.xPct[xPct_index + 1]) {
              xPct_index++;
          }
          if (distances === null) {
              distances = [];
          }
          var start_factor;
          var rest_factor = 1;
          var rest_rel_distance = distances[xPct_index];
          var range_pct = 0;
          var rel_range_distance = 0;
          var abs_distance_counter = 0;
          var range_counter = 0;
          // Calculate what part of the start range the value is
          if (direction) {
              start_factor = (value - this.xPct[xPct_index]) / (this.xPct[xPct_index + 1] - this.xPct[xPct_index]);
          }
          else {
              start_factor = (this.xPct[xPct_index + 1] - value) / (this.xPct[xPct_index + 1] - this.xPct[xPct_index]);
          }
          // Do until the complete distance across ranges is calculated
          while (rest_rel_distance > 0) {
              // Calculate the percentage of total range
              range_pct = this.xPct[xPct_index + 1 + range_counter] - this.xPct[xPct_index + range_counter];
              // Detect if the margin, padding or limit is larger then the current range and calculate
              if (distances[xPct_index + range_counter] * rest_factor + 100 - start_factor * 100 > 100) {
                  // If larger then take the percentual distance of the whole range
                  rel_range_distance = range_pct * start_factor;
                  // Rest factor of relative percentual distance still to be calculated
                  rest_factor = (rest_rel_distance - 100 * start_factor) / distances[xPct_index + range_counter];
                  // Set start factor to 1 as for next range it does not apply.
                  start_factor = 1;
              }
              else {
                  // If smaller or equal then take the percentual distance of the calculate percentual part of that range
                  rel_range_distance = ((distances[xPct_index + range_counter] * range_pct) / 100) * rest_factor;
                  // No rest left as the rest fits in current range
                  rest_factor = 0;
              }
              if (direction) {
                  abs_distance_counter = abs_distance_counter - rel_range_distance;
                  // Limit range to first range when distance becomes outside of minimum range
                  if (this.xPct.length + range_counter >= 1) {
                      range_counter--;
                  }
              }
              else {
                  abs_distance_counter = abs_distance_counter + rel_range_distance;
                  // Limit range to last range when distance becomes outside of maximum range
                  if (this.xPct.length - range_counter >= 1) {
                      range_counter++;
                  }
              }
              // Rest of relative percentual distance still to be calculated
              rest_rel_distance = distances[xPct_index + range_counter] * rest_factor;
          }
          return value + abs_distance_counter;
      };
      Spectrum.prototype.toStepping = function (value) {
          value = toStepping(this.xVal, this.xPct, value);
          return value;
      };
      Spectrum.prototype.fromStepping = function (value) {
          return fromStepping(this.xVal, this.xPct, value);
      };
      Spectrum.prototype.getStep = function (value) {
          value = getStep(this.xPct, this.xSteps, this.snap, value);
          return value;
      };
      Spectrum.prototype.getDefaultStep = function (value, isDown, size) {
          var j = getJ(value, this.xPct);
          // When at the top or stepping down, look at the previous sub-range
          if (value === 100 || (isDown && value === this.xPct[j - 1])) {
              j = Math.max(j - 1, 1);
          }
          return (this.xVal[j] - this.xVal[j - 1]) / size;
      };
      Spectrum.prototype.getNearbySteps = function (value) {
          var j = getJ(value, this.xPct);
          return {
              stepBefore: {
                  startValue: this.xVal[j - 2],
                  step: this.xNumSteps[j - 2],
                  highestStep: this.xHighestCompleteStep[j - 2],
              },
              thisStep: {
                  startValue: this.xVal[j - 1],
                  step: this.xNumSteps[j - 1],
                  highestStep: this.xHighestCompleteStep[j - 1],
              },
              stepAfter: {
                  startValue: this.xVal[j],
                  step: this.xNumSteps[j],
                  highestStep: this.xHighestCompleteStep[j],
              },
          };
      };
      Spectrum.prototype.countStepDecimals = function () {
          var stepDecimals = this.xNumSteps.map(countDecimals);
          return Math.max.apply(null, stepDecimals);
      };
      Spectrum.prototype.hasNoSize = function () {
          return this.xVal[0] === this.xVal[this.xVal.length - 1];
      };
      // Outside testing
      Spectrum.prototype.convert = function (value) {
          return this.getStep(this.toStepping(value));
      };
      Spectrum.prototype.handleEntryPoint = function (index, value) {
          var percentage;
          // Covert min/max syntax to 0 and 100.
          if (index === "min") {
              percentage = 0;
          }
          else if (index === "max") {
              percentage = 100;
          }
          else {
              percentage = parseFloat(index);
          }
          // Check for correct input.
          if (!isNumeric(percentage) || !isNumeric(value[0])) {
              throw new Error("noUiSlider: 'range' value isn't numeric.");
          }
          // Store values.
          this.xPct.push(percentage);
          this.xVal.push(value[0]);
          var value1 = Number(value[1]);
          // NaN will evaluate to false too, but to keep
          // logging clear, set step explicitly. Make sure
          // not to override the 'step' setting with false.
          if (!percentage) {
              if (!isNaN(value1)) {
                  this.xSteps[0] = value1;
              }
          }
          else {
              this.xSteps.push(isNaN(value1) ? false : value1);
          }
          this.xHighestCompleteStep.push(0);
      };
      Spectrum.prototype.handleStepPoint = function (i, n) {
          // Ignore 'false' stepping.
          if (!n) {
              return;
          }
          // Step over zero-length ranges (#948);
          if (this.xVal[i] === this.xVal[i + 1]) {
              this.xSteps[i] = this.xHighestCompleteStep[i] = this.xVal[i];
              return;
          }
          // Factor to range ratio
          this.xSteps[i] =
              fromPercentage([this.xVal[i], this.xVal[i + 1]], n, 0) / subRangeRatio(this.xPct[i], this.xPct[i + 1]);
          var totalSteps = (this.xVal[i + 1] - this.xVal[i]) / this.xNumSteps[i];
          var highestStep = Math.ceil(Number(totalSteps.toFixed(3)) - 1);
          var step = this.xVal[i] + this.xNumSteps[i] * highestStep;
          this.xHighestCompleteStep[i] = step;
      };
      return Spectrum;
  }());
  //endregion
  //region Options
  /*	Every input option is tested and parsed. This will prevent
      endless validation in internal methods. These tests are
      structured with an item for every option available. An
      option can be marked as required by setting the 'r' flag.
      The testing function is provided with three arguments:
          - The provided value for the option;
          - A reference to the options object;
          - The name for the option;

      The testing function returns false when an error is detected,
      or true when everything is OK. It can also modify the option
      object, to make sure all values can be correctly looped elsewhere. */
  //region Defaults
  var defaultFormatter = {
      to: function (value) {
          return value === undefined ? "" : value.toFixed(2);
      },
      from: Number,
  };
  var cssClasses = {
      target: "target",
      base: "base",
      origin: "origin",
      handle: "handle",
      handleLower: "handle-lower",
      handleUpper: "handle-upper",
      touchArea: "touch-area",
      horizontal: "horizontal",
      vertical: "vertical",
      background: "background",
      connect: "connect",
      connects: "connects",
      ltr: "ltr",
      rtl: "rtl",
      textDirectionLtr: "txt-dir-ltr",
      textDirectionRtl: "txt-dir-rtl",
      draggable: "draggable",
      drag: "state-drag",
      tap: "state-tap",
      active: "active",
      tooltip: "tooltip",
      pips: "pips",
      pipsHorizontal: "pips-horizontal",
      pipsVertical: "pips-vertical",
      marker: "marker",
      markerHorizontal: "marker-horizontal",
      markerVertical: "marker-vertical",
      markerNormal: "marker-normal",
      markerLarge: "marker-large",
      markerSub: "marker-sub",
      value: "value",
      valueHorizontal: "value-horizontal",
      valueVertical: "value-vertical",
      valueNormal: "value-normal",
      valueLarge: "value-large",
      valueSub: "value-sub",
  };
  // Namespaces of internal event listeners
  var INTERNAL_EVENT_NS = {
      tooltips: ".__tooltips",
      aria: ".__aria",
  };
  //endregion
  function testStep(parsed, entry) {
      if (!isNumeric(entry)) {
          throw new Error("noUiSlider: 'step' is not numeric.");
      }
      // The step option can still be used to set stepping
      // for linear sliders. Overwritten if set in 'range'.
      parsed.singleStep = entry;
  }
  function testKeyboardPageMultiplier(parsed, entry) {
      if (!isNumeric(entry)) {
          throw new Error("noUiSlider: 'keyboardPageMultiplier' is not numeric.");
      }
      parsed.keyboardPageMultiplier = entry;
  }
  function testKeyboardMultiplier(parsed, entry) {
      if (!isNumeric(entry)) {
          throw new Error("noUiSlider: 'keyboardMultiplier' is not numeric.");
      }
      parsed.keyboardMultiplier = entry;
  }
  function testKeyboardDefaultStep(parsed, entry) {
      if (!isNumeric(entry)) {
          throw new Error("noUiSlider: 'keyboardDefaultStep' is not numeric.");
      }
      parsed.keyboardDefaultStep = entry;
  }
  function testRange(parsed, entry) {
      // Filter incorrect input.
      if (typeof entry !== "object" || Array.isArray(entry)) {
          throw new Error("noUiSlider: 'range' is not an object.");
      }
      // Catch missing start or end.
      if (entry.min === undefined || entry.max === undefined) {
          throw new Error("noUiSlider: Missing 'min' or 'max' in 'range'.");
      }
      parsed.spectrum = new Spectrum(entry, parsed.snap || false, parsed.singleStep);
  }
  function testStart(parsed, entry) {
      entry = asArray(entry);
      // Validate input. Values aren't tested, as the public .val method
      // will always provide a valid location.
      if (!Array.isArray(entry) || !entry.length) {
          throw new Error("noUiSlider: 'start' option is incorrect.");
      }
      // Store the number of handles.
      parsed.handles = entry.length;
      // When the slider is initialized, the .val method will
      // be called with the start options.
      parsed.start = entry;
  }
  function testSnap(parsed, entry) {
      if (typeof entry !== "boolean") {
          throw new Error("noUiSlider: 'snap' option must be a boolean.");
      }
      // Enforce 100% stepping within subranges.
      parsed.snap = entry;
  }
  function testAnimate(parsed, entry) {
      if (typeof entry !== "boolean") {
          throw new Error("noUiSlider: 'animate' option must be a boolean.");
      }
      // Enforce 100% stepping within subranges.
      parsed.animate = entry;
  }
  function testAnimationDuration(parsed, entry) {
      if (typeof entry !== "number") {
          throw new Error("noUiSlider: 'animationDuration' option must be a number.");
      }
      parsed.animationDuration = entry;
  }
  function testConnect(parsed, entry) {
      var connect = [false];
      var i;
      // Map legacy options
      if (entry === "lower") {
          entry = [true, false];
      }
      else if (entry === "upper") {
          entry = [false, true];
      }
      // Handle boolean options
      if (entry === true || entry === false) {
          for (i = 1; i < parsed.handles; i++) {
              connect.push(entry);
          }
          connect.push(false);
      }
      // Reject invalid input
      else if (!Array.isArray(entry) || !entry.length || entry.length !== parsed.handles + 1) {
          throw new Error("noUiSlider: 'connect' option doesn't match handle count.");
      }
      else {
          connect = entry;
      }
      parsed.connect = connect;
  }
  function testOrientation(parsed, entry) {
      // Set orientation to an a numerical value for easy
      // array selection.
      switch (entry) {
          case "horizontal":
              parsed.ort = 0;
              break;
          case "vertical":
              parsed.ort = 1;
              break;
          default:
              throw new Error("noUiSlider: 'orientation' option is invalid.");
      }
  }
  function testMargin(parsed, entry) {
      if (!isNumeric(entry)) {
          throw new Error("noUiSlider: 'margin' option must be numeric.");
      }
      // Issue #582
      if (entry === 0) {
          return;
      }
      parsed.margin = parsed.spectrum.getDistance(entry);
  }
  function testLimit(parsed, entry) {
      if (!isNumeric(entry)) {
          throw new Error("noUiSlider: 'limit' option must be numeric.");
      }
      parsed.limit = parsed.spectrum.getDistance(entry);
      if (!parsed.limit || parsed.handles < 2) {
          throw new Error("noUiSlider: 'limit' option is only supported on linear sliders with 2 or more handles.");
      }
  }
  function testPadding(parsed, entry) {
      var index;
      if (!isNumeric(entry) && !Array.isArray(entry)) {
          throw new Error("noUiSlider: 'padding' option must be numeric or array of exactly 2 numbers.");
      }
      if (Array.isArray(entry) && !(entry.length === 2 || isNumeric(entry[0]) || isNumeric(entry[1]))) {
          throw new Error("noUiSlider: 'padding' option must be numeric or array of exactly 2 numbers.");
      }
      if (entry === 0) {
          return;
      }
      if (!Array.isArray(entry)) {
          entry = [entry, entry];
      }
      // 'getDistance' returns false for invalid values.
      parsed.padding = [parsed.spectrum.getDistance(entry[0]), parsed.spectrum.getDistance(entry[1])];
      for (index = 0; index < parsed.spectrum.xNumSteps.length - 1; index++) {
          // last "range" can't contain step size as it is purely an endpoint.
          if (parsed.padding[0][index] < 0 || parsed.padding[1][index] < 0) {
              throw new Error("noUiSlider: 'padding' option must be a positive number(s).");
          }
      }
      var totalPadding = entry[0] + entry[1];
      var firstValue = parsed.spectrum.xVal[0];
      var lastValue = parsed.spectrum.xVal[parsed.spectrum.xVal.length - 1];
      if (totalPadding / (lastValue - firstValue) > 1) {
          throw new Error("noUiSlider: 'padding' option must not exceed 100% of the range.");
      }
  }
  function testDirection(parsed, entry) {
      // Set direction as a numerical value for easy parsing.
      // Invert connection for RTL sliders, so that the proper
      // handles get the connect/background classes.
      switch (entry) {
          case "ltr":
              parsed.dir = 0;
              break;
          case "rtl":
              parsed.dir = 1;
              break;
          default:
              throw new Error("noUiSlider: 'direction' option was not recognized.");
      }
  }
  function testBehaviour(parsed, entry) {
      // Make sure the input is a string.
      if (typeof entry !== "string") {
          throw new Error("noUiSlider: 'behaviour' must be a string containing options.");
      }
      // Check if the string contains any keywords.
      // None are required.
      var tap = entry.indexOf("tap") >= 0;
      var drag = entry.indexOf("drag") >= 0;
      var fixed = entry.indexOf("fixed") >= 0;
      var snap = entry.indexOf("snap") >= 0;
      var hover = entry.indexOf("hover") >= 0;
      var unconstrained = entry.indexOf("unconstrained") >= 0;
      var invertConnects = entry.indexOf("invert-connects") >= 0;
      var dragAll = entry.indexOf("drag-all") >= 0;
      var smoothSteps = entry.indexOf("smooth-steps") >= 0;
      if (fixed) {
          if (parsed.handles !== 2) {
              throw new Error("noUiSlider: 'fixed' behaviour must be used with 2 handles");
          }
          // Use margin to enforce fixed state
          testMargin(parsed, parsed.start[1] - parsed.start[0]);
      }
      if (invertConnects && parsed.handles !== 2) {
          throw new Error("noUiSlider: 'invert-connects' behaviour must be used with 2 handles");
      }
      if (unconstrained && (parsed.margin || parsed.limit)) {
          throw new Error("noUiSlider: 'unconstrained' behaviour cannot be used with margin or limit");
      }
      parsed.events = {
          tap: tap || snap,
          drag: drag,
          dragAll: dragAll,
          smoothSteps: smoothSteps,
          fixed: fixed,
          snap: snap,
          hover: hover,
          unconstrained: unconstrained,
          invertConnects: invertConnects,
      };
  }
  function testTooltips(parsed, entry) {
      if (entry === false) {
          return;
      }
      if (entry === true || isValidPartialFormatter(entry)) {
          parsed.tooltips = [];
          for (var i = 0; i < parsed.handles; i++) {
              parsed.tooltips.push(entry);
          }
      }
      else {
          entry = asArray(entry);
          if (entry.length !== parsed.handles) {
              throw new Error("noUiSlider: must pass a formatter for all handles.");
          }
          entry.forEach(function (formatter) {
              if (typeof formatter !== "boolean" && !isValidPartialFormatter(formatter)) {
                  throw new Error("noUiSlider: 'tooltips' must be passed a formatter or 'false'.");
              }
          });
          parsed.tooltips = entry;
      }
  }
  function testHandleAttributes(parsed, entry) {
      if (entry.length !== parsed.handles) {
          throw new Error("noUiSlider: must pass a attributes for all handles.");
      }
      parsed.handleAttributes = entry;
  }
  function testAriaFormat(parsed, entry) {
      if (!isValidPartialFormatter(entry)) {
          throw new Error("noUiSlider: 'ariaFormat' requires 'to' method.");
      }
      parsed.ariaFormat = entry;
  }
  function testFormat(parsed, entry) {
      if (!isValidFormatter(entry)) {
          throw new Error("noUiSlider: 'format' requires 'to' and 'from' methods.");
      }
      parsed.format = entry;
  }
  function testKeyboardSupport(parsed, entry) {
      if (typeof entry !== "boolean") {
          throw new Error("noUiSlider: 'keyboardSupport' option must be a boolean.");
      }
      parsed.keyboardSupport = entry;
  }
  function testDocumentElement(parsed, entry) {
      // This is an advanced option. Passed values are used without validation.
      parsed.documentElement = entry;
  }
  function testCssPrefix(parsed, entry) {
      if (typeof entry !== "string" && entry !== false) {
          throw new Error("noUiSlider: 'cssPrefix' must be a string or `false`.");
      }
      parsed.cssPrefix = entry;
  }
  function testCssClasses(parsed, entry) {
      if (typeof entry !== "object") {
          throw new Error("noUiSlider: 'cssClasses' must be an object.");
      }
      if (typeof parsed.cssPrefix === "string") {
          parsed.cssClasses = {};
          Object.keys(entry).forEach(function (key) {
              parsed.cssClasses[key] = parsed.cssPrefix + entry[key];
          });
      }
      else {
          parsed.cssClasses = entry;
      }
  }
  // Test all developer settings and parse to assumption-safe values.
  function testOptions(options) {
      // To prove a fix for #537, freeze options here.
      // If the object is modified, an error will be thrown.
      // Object.freeze(options);
      var parsed = {
          margin: null,
          limit: null,
          padding: null,
          animate: true,
          animationDuration: 300,
          ariaFormat: defaultFormatter,
          format: defaultFormatter,
      };
      // Tests are executed in the order they are presented here.
      var tests = {
          step: { r: false, t: testStep },
          keyboardPageMultiplier: { r: false, t: testKeyboardPageMultiplier },
          keyboardMultiplier: { r: false, t: testKeyboardMultiplier },
          keyboardDefaultStep: { r: false, t: testKeyboardDefaultStep },
          start: { r: true, t: testStart },
          connect: { r: true, t: testConnect },
          direction: { r: true, t: testDirection },
          snap: { r: false, t: testSnap },
          animate: { r: false, t: testAnimate },
          animationDuration: { r: false, t: testAnimationDuration },
          range: { r: true, t: testRange },
          orientation: { r: false, t: testOrientation },
          margin: { r: false, t: testMargin },
          limit: { r: false, t: testLimit },
          padding: { r: false, t: testPadding },
          behaviour: { r: true, t: testBehaviour },
          ariaFormat: { r: false, t: testAriaFormat },
          format: { r: false, t: testFormat },
          tooltips: { r: false, t: testTooltips },
          keyboardSupport: { r: true, t: testKeyboardSupport },
          documentElement: { r: false, t: testDocumentElement },
          cssPrefix: { r: true, t: testCssPrefix },
          cssClasses: { r: true, t: testCssClasses },
          handleAttributes: { r: false, t: testHandleAttributes },
      };
      var defaults = {
          connect: false,
          direction: "ltr",
          behaviour: "tap",
          orientation: "horizontal",
          keyboardSupport: true,
          cssPrefix: "noUi-",
          cssClasses: cssClasses,
          keyboardPageMultiplier: 5,
          keyboardMultiplier: 1,
          keyboardDefaultStep: 10,
      };
      // AriaFormat defaults to regular format, if any.
      if (options.format && !options.ariaFormat) {
          options.ariaFormat = options.format;
      }
      // Run all options through a testing mechanism to ensure correct
      // input. It should be noted that options might get modified to
      // be handled properly. E.g. wrapping integers in arrays.
      Object.keys(tests).forEach(function (name) {
          // If the option isn't set, but it is required, throw an error.
          if (!isSet(options[name]) && defaults[name] === undefined) {
              if (tests[name].r) {
                  throw new Error("noUiSlider: '" + name + "' is required.");
              }
              return;
          }
          tests[name].t(parsed, !isSet(options[name]) ? defaults[name] : options[name]);
      });
      // Forward pips options
      parsed.pips = options.pips;
      // All recent browsers accept unprefixed transform.
      // We need -ms- for IE9 and -webkit- for older Android;
      // Assume use of -webkit- if unprefixed and -ms- are not supported.
      // https://caniuse.com/#feat=transforms2d
      var d = document.createElement("div");
      var msPrefix = d.style.msTransform !== undefined;
      var noPrefix = d.style.transform !== undefined;
      parsed.transformRule = noPrefix ? "transform" : msPrefix ? "msTransform" : "webkitTransform";
      // Pips don't move, so we can place them using left/top.
      var styles = [
          ["left", "top"],
          ["right", "bottom"],
      ];
      parsed.style = styles[parsed.dir][parsed.ort];
      return parsed;
  }
  //endregion
  function scope(target, options, originalOptions) {
      var actions = getActions();
      var supportsTouchActionNone = getSupportsTouchActionNone();
      var supportsPassive = supportsTouchActionNone && getSupportsPassive();
      // All variables local to 'scope' are prefixed with 'scope_'
      // Slider DOM Nodes
      var scope_Target = target;
      var scope_Base;
      var scope_ConnectBase;
      var scope_Handles;
      var scope_Connects;
      var scope_Pips;
      var scope_Tooltips;
      // Slider state values
      var scope_Spectrum = options.spectrum;
      var scope_Values = [];
      var scope_Locations = [];
      var scope_HandleNumbers = [];
      var scope_ActiveHandlesCount = 0;
      var scope_Events = {};
      var scope_ConnectsInverted = false;
      // Document Nodes
      var scope_Document = target.ownerDocument;
      var scope_DocumentElement = options.documentElement || scope_Document.documentElement;
      var scope_Body = scope_Document.body;
      // For horizontal sliders in standard ltr documents,
      // make .noUi-origin overflow to the left so the document doesn't scroll.
      var scope_DirOffset = scope_Document.dir === "rtl" || options.ort === 1 ? 0 : 100;
      // Creates a node, adds it to target, returns the new node.
      function addNodeTo(addTarget, className) {
          var div = scope_Document.createElement("div");
          if (className) {
              addClass(div, className);
          }
          addTarget.appendChild(div);
          return div;
      }
      // Append a origin to the base
      function addOrigin(base, handleNumber) {
          var origin = addNodeTo(base, options.cssClasses.origin);
          var handle = addNodeTo(origin, options.cssClasses.handle);
          addNodeTo(handle, options.cssClasses.touchArea);
          handle.setAttribute("data-handle", String(handleNumber));
          if (options.keyboardSupport) {
              // https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/tabindex
              // 0 = focusable and reachable
              handle.setAttribute("tabindex", "0");
              handle.addEventListener("keydown", function (event) {
                  return eventKeydown(event, handleNumber);
              });
          }
          if (options.handleAttributes !== undefined) {
              var attributes_1 = options.handleAttributes[handleNumber];
              Object.keys(attributes_1).forEach(function (attribute) {
                  handle.setAttribute(attribute, attributes_1[attribute]);
              });
          }
          handle.setAttribute("role", "slider");
          handle.setAttribute("aria-orientation", options.ort ? "vertical" : "horizontal");
          if (handleNumber === 0) {
              addClass(handle, options.cssClasses.handleLower);
          }
          else if (handleNumber === options.handles - 1) {
              addClass(handle, options.cssClasses.handleUpper);
          }
          origin.handle = handle;
          return origin;
      }
      // Insert nodes for connect elements
      function addConnect(base, add) {
          if (!add) {
              return false;
          }
          return addNodeTo(base, options.cssClasses.connect);
      }
      // Add handles to the slider base.
      function addElements(connectOptions, base) {
          scope_ConnectBase = addNodeTo(base, options.cssClasses.connects);
          scope_Handles = [];
          scope_Connects = [];
          scope_Connects.push(addConnect(scope_ConnectBase, connectOptions[0]));
          // [::::O====O====O====]
          // connectOptions = [0, 1, 1, 1]
          for (var i = 0; i < options.handles; i++) {
              // Keep a list of all added handles.
              scope_Handles.push(addOrigin(base, i));
              scope_HandleNumbers[i] = i;
              scope_Connects.push(addConnect(scope_ConnectBase, connectOptions[i + 1]));
          }
      }
      // Initialize a single slider.
      function addSlider(addTarget) {
          // Apply classes and data to the target.
          addClass(addTarget, options.cssClasses.target);
          if (options.dir === 0) {
              addClass(addTarget, options.cssClasses.ltr);
          }
          else {
              addClass(addTarget, options.cssClasses.rtl);
          }
          if (options.ort === 0) {
              addClass(addTarget, options.cssClasses.horizontal);
          }
          else {
              addClass(addTarget, options.cssClasses.vertical);
          }
          var textDirection = getComputedStyle(addTarget).direction;
          if (textDirection === "rtl") {
              addClass(addTarget, options.cssClasses.textDirectionRtl);
          }
          else {
              addClass(addTarget, options.cssClasses.textDirectionLtr);
          }
          return addNodeTo(addTarget, options.cssClasses.base);
      }
      function addTooltip(handle, handleNumber) {
          if (!options.tooltips || !options.tooltips[handleNumber]) {
              return false;
          }
          return addNodeTo(handle.firstChild, options.cssClasses.tooltip);
      }
      function isSliderDisabled() {
          return scope_Target.hasAttribute("disabled");
      }
      // Disable the slider dragging if any handle is disabled
      function isHandleDisabled(handleNumber) {
          var handleOrigin = scope_Handles[handleNumber];
          return handleOrigin.hasAttribute("disabled");
      }
      function disable(handleNumber) {
          if (handleNumber !== null && handleNumber !== undefined) {
              scope_Handles[handleNumber].setAttribute("disabled", "");
              scope_Handles[handleNumber].handle.removeAttribute("tabindex");
          }
          else {
              scope_Target.setAttribute("disabled", "");
              scope_Handles.forEach(function (handle) {
                  handle.handle.removeAttribute("tabindex");
              });
          }
      }
      function enable(handleNumber) {
          if (handleNumber !== null && handleNumber !== undefined) {
              scope_Handles[handleNumber].removeAttribute("disabled");
              scope_Handles[handleNumber].handle.setAttribute("tabindex", "0");
          }
          else {
              scope_Target.removeAttribute("disabled");
              scope_Handles.forEach(function (handle) {
                  handle.removeAttribute("disabled");
                  handle.handle.setAttribute("tabindex", "0");
              });
          }
      }
      function removeTooltips() {
          if (scope_Tooltips) {
              removeEvent("update" + INTERNAL_EVENT_NS.tooltips);
              scope_Tooltips.forEach(function (tooltip) {
                  if (tooltip) {
                      removeElement(tooltip);
                  }
              });
              scope_Tooltips = null;
          }
      }
      // The tooltips option is a shorthand for using the 'update' event.
      function tooltips() {
          removeTooltips();
          // Tooltips are added with options.tooltips in original order.
          scope_Tooltips = scope_Handles.map(addTooltip);
          bindEvent("update" + INTERNAL_EVENT_NS.tooltips, function (values, handleNumber, unencoded) {
              if (!scope_Tooltips || !options.tooltips) {
                  return;
              }
              if (scope_Tooltips[handleNumber] === false) {
                  return;
              }
              var formattedValue = values[handleNumber];
              if (options.tooltips[handleNumber] !== true) {
                  formattedValue = options.tooltips[handleNumber].to(unencoded[handleNumber]);
              }
              scope_Tooltips[handleNumber].innerHTML = formattedValue;
          });
      }
      function aria() {
          removeEvent("update" + INTERNAL_EVENT_NS.aria);
          bindEvent("update" + INTERNAL_EVENT_NS.aria, function (values, handleNumber, unencoded, tap, positions) {
              // Update Aria Values for all handles, as a change in one changes min and max values for the next.
              scope_HandleNumbers.forEach(function (index) {
                  var handle = scope_Handles[index];
                  var min = checkHandlePosition(scope_Locations, index, 0, true, true, true);
                  var max = checkHandlePosition(scope_Locations, index, 100, true, true, true);
                  var now = positions[index];
                  // Formatted value for display
                  var text = String(options.ariaFormat.to(unencoded[index]));
                  // Map to slider range values
                  min = scope_Spectrum.fromStepping(min).toFixed(1);
                  max = scope_Spectrum.fromStepping(max).toFixed(1);
                  now = scope_Spectrum.fromStepping(now).toFixed(1);
                  handle.children[0].setAttribute("aria-valuemin", min);
                  handle.children[0].setAttribute("aria-valuemax", max);
                  handle.children[0].setAttribute("aria-valuenow", now);
                  handle.children[0].setAttribute("aria-valuetext", text);
              });
          });
      }
      function getGroup(pips) {
          // Use the range.
          if (pips.mode === PipsMode.Range || pips.mode === PipsMode.Steps) {
              return scope_Spectrum.xVal;
          }
          if (pips.mode === PipsMode.Count) {
              if (pips.values < 2) {
                  throw new Error("noUiSlider: 'values' (>= 2) required for mode 'count'.");
              }
              // Divide 0 - 100 in 'count' parts.
              var interval = pips.values - 1;
              var spread = 100 / interval;
              var values = [];
              // List these parts and have them handled as 'positions'.
              while (interval--) {
                  values[interval] = interval * spread;
              }
              values.push(100);
              return mapToRange(values, pips.stepped);
          }
          if (pips.mode === PipsMode.Positions) {
              // Map all percentages to on-range values.
              return mapToRange(pips.values, pips.stepped);
          }
          if (pips.mode === PipsMode.Values) {
              // If the value must be stepped, it needs to be converted to a percentage first.
              if (pips.stepped) {
                  return pips.values.map(function (value) {
                      // Convert to percentage, apply step, return to value.
                      return scope_Spectrum.fromStepping(scope_Spectrum.getStep(scope_Spectrum.toStepping(value)));
                  });
              }
              // Otherwise, we can simply use the values.
              return pips.values;
          }
          return []; // pips.mode = never
      }
      function mapToRange(values, stepped) {
          return values.map(function (value) {
              return scope_Spectrum.fromStepping(stepped ? scope_Spectrum.getStep(value) : value);
          });
      }
      function generateSpread(pips) {
          function safeIncrement(value, increment) {
              // Avoid floating point variance by dropping the smallest decimal places.
              return Number((value + increment).toFixed(7));
          }
          var group = getGroup(pips);
          var indexes = {};
          var firstInRange = scope_Spectrum.xVal[0];
          var lastInRange = scope_Spectrum.xVal[scope_Spectrum.xVal.length - 1];
          var ignoreFirst = false;
          var ignoreLast = false;
          var prevPct = 0;
          // Create a copy of the group, sort it and filter away all duplicates.
          group = unique(group.slice().sort(function (a, b) {
              return a - b;
          }));
          // Make sure the range starts with the first element.
          if (group[0] !== firstInRange) {
              group.unshift(firstInRange);
              ignoreFirst = true;
          }
          // Likewise for the last one.
          if (group[group.length - 1] !== lastInRange) {
              group.push(lastInRange);
              ignoreLast = true;
          }
          group.forEach(function (current, index) {
              // Get the current step and the lower + upper positions.
              var step;
              var i;
              var q;
              var low = current;
              var high = group[index + 1];
              var newPct;
              var pctDifference;
              var pctPos;
              var type;
              var steps;
              var realSteps;
              var stepSize;
              var isSteps = pips.mode === PipsMode.Steps;
              // When using 'steps' mode, use the provided steps.
              // Otherwise, we'll step on to the next subrange.
              if (isSteps) {
                  step = scope_Spectrum.xNumSteps[index];
              }
              // Default to a 'full' step.
              if (!step) {
                  step = high - low;
              }
              // If high is undefined we are at the last subrange. Make sure it iterates once (#1088)
              if (high === undefined) {
                  high = low;
              }
              // Make sure step isn't 0, which would cause an infinite loop (#654)
              step = Math.max(step, 0.0000001);
              // Find all steps in the subrange.
              for (i = low; i <= high; i = safeIncrement(i, step)) {
                  // Get the percentage value for the current step,
                  // calculate the size for the subrange.
                  newPct = scope_Spectrum.toStepping(i);
                  pctDifference = newPct - prevPct;
                  steps = pctDifference / (pips.density || 1);
                  realSteps = Math.round(steps);
                  // This ratio represents the amount of percentage-space a point indicates.
                  // For a density 1 the points/percentage = 1. For density 2, that percentage needs to be re-divided.
                  // Round the percentage offset to an even number, then divide by two
                  // to spread the offset on both sides of the range.
                  stepSize = pctDifference / realSteps;
                  // Divide all points evenly, adding the correct number to this subrange.
                  // Run up to <= so that 100% gets a point, event if ignoreLast is set.
                  for (q = 1; q <= realSteps; q += 1) {
                      // The ratio between the rounded value and the actual size might be ~1% off.
                      // Correct the percentage offset by the number of points
                      // per subrange. density = 1 will result in 100 points on the
                      // full range, 2 for 50, 4 for 25, etc.
                      pctPos = prevPct + q * stepSize;
                      indexes[pctPos.toFixed(5)] = [scope_Spectrum.fromStepping(pctPos), 0];
                  }
                  // Determine the point type.
                  type = group.indexOf(i) > -1 ? PipsType.LargeValue : isSteps ? PipsType.SmallValue : PipsType.NoValue;
                  // Enforce the 'ignoreFirst' option by overwriting the type for 0.
                  if (!index && ignoreFirst && i !== high) {
                      type = 0;
                  }
                  if (!(i === high && ignoreLast)) {
                      // Mark the 'type' of this point. 0 = plain, 1 = real value, 2 = step value.
                      indexes[newPct.toFixed(5)] = [i, type];
                  }
                  // Update the percentage count.
                  prevPct = newPct;
              }
          });
          return indexes;
      }
      function addMarking(spread, filterFunc, formatter) {
          var _a, _b;
          var element = scope_Document.createElement("div");
          var valueSizeClasses = (_a = {},
              _a[PipsType.None] = "",
              _a[PipsType.NoValue] = options.cssClasses.valueNormal,
              _a[PipsType.LargeValue] = options.cssClasses.valueLarge,
              _a[PipsType.SmallValue] = options.cssClasses.valueSub,
              _a);
          var markerSizeClasses = (_b = {},
              _b[PipsType.None] = "",
              _b[PipsType.NoValue] = options.cssClasses.markerNormal,
              _b[PipsType.LargeValue] = options.cssClasses.markerLarge,
              _b[PipsType.SmallValue] = options.cssClasses.markerSub,
              _b);
          var valueOrientationClasses = [options.cssClasses.valueHorizontal, options.cssClasses.valueVertical];
          var markerOrientationClasses = [options.cssClasses.markerHorizontal, options.cssClasses.markerVertical];
          addClass(element, options.cssClasses.pips);
          addClass(element, options.ort === 0 ? options.cssClasses.pipsHorizontal : options.cssClasses.pipsVertical);
          function getClasses(type, source) {
              var a = source === options.cssClasses.value;
              var orientationClasses = a ? valueOrientationClasses : markerOrientationClasses;
              var sizeClasses = a ? valueSizeClasses : markerSizeClasses;
              return source + " " + orientationClasses[options.ort] + " " + sizeClasses[type];
          }
          function addSpread(offset, value, type) {
              // Apply the filter function, if it is set.
              type = filterFunc ? filterFunc(value, type) : type;
              if (type === PipsType.None) {
                  return;
              }
              // Add a marker for every point
              var node = addNodeTo(element, false);
              node.className = getClasses(type, options.cssClasses.marker);
              node.style[options.style] = offset + "%";
              // Values are only appended for points marked '1' or '2'.
              if (type > PipsType.NoValue) {
                  node = addNodeTo(element, false);
                  node.className = getClasses(type, options.cssClasses.value);
                  node.setAttribute("data-value", String(value));
                  node.style[options.style] = offset + "%";
                  node.innerHTML = String(formatter.to(value));
              }
          }
          // Append all points.
          Object.keys(spread).forEach(function (offset) {
              addSpread(offset, spread[offset][0], spread[offset][1]);
          });
          return element;
      }
      function removePips() {
          if (scope_Pips) {
              removeElement(scope_Pips);
              scope_Pips = null;
          }
      }
      function pips(pips) {
          // Fix #669
          removePips();
          var spread = generateSpread(pips);
          var filter = pips.filter;
          var format = pips.format || {
              to: function (value) {
                  return String(Math.round(value));
              },
          };
          scope_Pips = scope_Target.appendChild(addMarking(spread, filter, format));
          return scope_Pips;
      }
      // Shorthand for base dimensions.
      function baseSize() {
          var rect = scope_Base.getBoundingClientRect();
          var alt = ("offset" + ["Width", "Height"][options.ort]);
          return options.ort === 0 ? rect.width || scope_Base[alt] : rect.height || scope_Base[alt];
      }
      // Handler for attaching events trough a proxy.
      function attachEvent(events, element, callback, data) {
          // This function can be used to 'filter' events to the slider.
          // element is a node, not a nodeList
          var method = function (event) {
              var e = fixEvent(event, data.pageOffset, data.target || element);
              // fixEvent returns false if this event has a different target
              // when handling (multi-) touch events;
              if (!e) {
                  return false;
              }
              // doNotReject is passed by all end events to make sure released touches
              // are not rejected, leaving the slider "stuck" to the cursor;
              if (isSliderDisabled() && !data.doNotReject) {
                  return false;
              }
              // Stop if an active 'tap' transition is taking place.
              if (hasClass(scope_Target, options.cssClasses.tap) && !data.doNotReject) {
                  return false;
              }
              // Ignore right or middle clicks on start #454
              if (events === actions.start && e.buttons !== undefined && e.buttons > 1) {
                  return false;
              }
              // Ignore right or middle clicks on start #454
              if (data.hover && e.buttons) {
                  return false;
              }
              // 'supportsPassive' is only true if a browser also supports touch-action: none in CSS.
              // iOS safari does not, so it doesn't get to benefit from passive scrolling. iOS does support
              // touch-action: manipulation, but that allows panning, which breaks
              // sliders after zooming/on non-responsive pages.
              // See: https://bugs.webkit.org/show_bug.cgi?id=133112
              if (!supportsPassive) {
                  e.preventDefault();
              }
              e.calcPoint = e.points[options.ort];
              // Call the event handler with the event [ and additional data ].
              callback(e, data);
              return;
          };
          var methods = [];
          // Bind a closure on the target for every event type.
          events.split(" ").forEach(function (eventName) {
              element.addEventListener(eventName, method, supportsPassive ? { passive: true } : false);
              methods.push([eventName, method]);
          });
          return methods;
      }
      // Provide a clean event with standardized offset values.
      function fixEvent(e, pageOffset, eventTarget) {
          // Filter the event to register the type, which can be
          // touch, mouse or pointer. Offset changes need to be
          // made on an event specific basis.
          var touch = e.type.indexOf("touch") === 0;
          var mouse = e.type.indexOf("mouse") === 0;
          var pointer = e.type.indexOf("pointer") === 0;
          var x = 0;
          var y = 0;
          // IE10 implemented pointer events with a prefix;
          if (e.type.indexOf("MSPointer") === 0) {
              pointer = true;
          }
          // Erroneous events seem to be passed in occasionally on iOS/iPadOS after user finishes interacting with
          // the slider. They appear to be of type MouseEvent, yet they don't have usual properties set. Ignore
          // events that have no touches or buttons associated with them. (#1057, #1079, #1095)
          if (e.type === "mousedown" && !e.buttons && !e.touches) {
              return false;
          }
          // The only thing one handle should be concerned about is the touches that originated on top of it.
          if (touch) {
              // Returns true if a touch originated on the target.
              var isTouchOnTarget = function (checkTouch) {
                  var target = checkTouch.target;
                  return (target === eventTarget ||
                      eventTarget.contains(target) ||
                      (e.composed && e.composedPath().shift() === eventTarget));
              };
              // In the case of touchstart events, we need to make sure there is still no more than one
              // touch on the target so we look amongst all touches.
              if (e.type === "touchstart") {
                  var targetTouches = Array.prototype.filter.call(e.touches, isTouchOnTarget);
                  // Do not support more than one touch per handle.
                  if (targetTouches.length > 1) {
                      return false;
                  }
                  x = targetTouches[0].pageX;
                  y = targetTouches[0].pageY;
              }
              else {
                  // In the other cases, find on changedTouches is enough.
                  var targetTouch = Array.prototype.find.call(e.changedTouches, isTouchOnTarget);
                  // Cancel if the target touch has not moved.
                  if (!targetTouch) {
                      return false;
                  }
                  x = targetTouch.pageX;
                  y = targetTouch.pageY;
              }
          }
          pageOffset = pageOffset || getPageOffset(scope_Document);
          if (mouse || pointer) {
              x = e.clientX + pageOffset.x;
              y = e.clientY + pageOffset.y;
          }
          e.pageOffset = pageOffset;
          e.points = [x, y];
          e.cursor = mouse || pointer; // Fix #435
          return e;
      }
      // Translate a coordinate in the document to a percentage on the slider
      function calcPointToPercentage(calcPoint) {
          var location = calcPoint - offset(scope_Base, options.ort);
          var proposal = (location * 100) / baseSize();
          // Clamp proposal between 0% and 100%
          // Out-of-bound coordinates may occur when .noUi-base pseudo-elements
          // are used (e.g. contained handles feature)
          proposal = limit(proposal);
          return options.dir ? 100 - proposal : proposal;
      }
      // Find handle closest to a certain percentage on the slider
      function getClosestHandle(clickedPosition) {
          var smallestDifference = 100;
          var handleNumber = false;
          scope_Handles.forEach(function (handle, index) {
              // Disabled handles are ignored
              if (isHandleDisabled(index)) {
                  return;
              }
              var handlePosition = scope_Locations[index];
              var differenceWithThisHandle = Math.abs(handlePosition - clickedPosition);
              // Initial state
              var clickAtEdge = differenceWithThisHandle === 100 && smallestDifference === 100;
              // Difference with this handle is smaller than the previously checked handle
              var isCloser = differenceWithThisHandle < smallestDifference;
              var isCloserAfter = differenceWithThisHandle <= smallestDifference && clickedPosition > handlePosition;
              if (isCloser || isCloserAfter || clickAtEdge) {
                  handleNumber = index;
                  smallestDifference = differenceWithThisHandle;
              }
          });
          return handleNumber;
      }
      // Fire 'end' when a mouse or pen leaves the document.
      function documentLeave(event, data) {
          if (event.type === "mouseout" &&
              event.target.nodeName === "HTML" &&
              event.relatedTarget === null) {
              eventEnd(event, data);
          }
      }
      // Handle movement on document for handle and range drag.
      function eventMove(event, data) {
          // Fix #498
          // Check value of .buttons in 'start' to work around a bug in IE10 mobile (data.buttonsProperty).
          // https://connect.microsoft.com/IE/feedback/details/927005/mobile-ie10-windows-phone-buttons-property-of-pointermove-event-always-zero
          // IE9 has .buttons and .which zero on mousemove.
          // Firefox breaks the spec MDN defines.
          if (navigator.appVersion.indexOf("MSIE 9") === -1 && event.buttons === 0 && data.buttonsProperty !== 0) {
              return eventEnd(event, data);
          }
          // Check if we are moving up or down
          var movement = (options.dir ? -1 : 1) * (event.calcPoint - data.startCalcPoint);
          // Convert the movement into a percentage of the slider width/height
          var proposal = (movement * 100) / data.baseSize;
          moveHandles(movement > 0, proposal, data.locations, data.handleNumbers, data.connect);
      }
      // Unbind move events on document, call callbacks.
      function eventEnd(event, data) {
          // The handle is no longer active, so remove the class.
          if (data.handle) {
              removeClass(data.handle, options.cssClasses.active);
              scope_ActiveHandlesCount -= 1;
          }
          // Unbind the move and end events, which are added on 'start'.
          data.listeners.forEach(function (c) {
              scope_DocumentElement.removeEventListener(c[0], c[1]);
          });
          if (scope_ActiveHandlesCount === 0) {
              // Remove dragging class.
              removeClass(scope_Target, options.cssClasses.drag);
              setZindex();
              // Remove cursor styles and text-selection events bound to the body.
              if (event.cursor) {
                  scope_Body.style.cursor = "";
                  scope_Body.removeEventListener("selectstart", preventDefault);
              }
          }
          if (options.events.smoothSteps) {
              data.handleNumbers.forEach(function (handleNumber) {
                  setHandle(handleNumber, scope_Locations[handleNumber], true, true, false, false);
              });
              data.handleNumbers.forEach(function (handleNumber) {
                  fireEvent("update", handleNumber);
              });
          }
          data.handleNumbers.forEach(function (handleNumber) {
              fireEvent("change", handleNumber);
              fireEvent("set", handleNumber);
              fireEvent("end", handleNumber);
          });
      }
      // Bind move events on document.
      function eventStart(event, data) {
          // Ignore event if any handle is disabled
          if (data.handleNumbers.some(isHandleDisabled)) {
              return;
          }
          var handle;
          if (data.handleNumbers.length === 1) {
              var handleOrigin = scope_Handles[data.handleNumbers[0]];
              handle = handleOrigin.children[0];
              scope_ActiveHandlesCount += 1;
              // Mark the handle as 'active' so it can be styled.
              addClass(handle, options.cssClasses.active);
          }
          // A drag should never propagate up to the 'tap' event.
          event.stopPropagation();
          // Record the event listeners.
          var listeners = [];
          // Attach the move and end events.
          var moveEvent = attachEvent(actions.move, scope_DocumentElement, eventMove, {
              // The event target has changed so we need to propagate the original one so that we keep
              // relying on it to extract target touches.
              target: event.target,
              handle: handle,
              connect: data.connect,
              listeners: listeners,
              startCalcPoint: event.calcPoint,
              baseSize: baseSize(),
              pageOffset: event.pageOffset,
              handleNumbers: data.handleNumbers,
              buttonsProperty: event.buttons,
              locations: scope_Locations.slice(),
          });
          var endEvent = attachEvent(actions.end, scope_DocumentElement, eventEnd, {
              target: event.target,
              handle: handle,
              listeners: listeners,
              doNotReject: true,
              handleNumbers: data.handleNumbers,
          });
          var outEvent = attachEvent("mouseout", scope_DocumentElement, documentLeave, {
              target: event.target,
              handle: handle,
              listeners: listeners,
              doNotReject: true,
              handleNumbers: data.handleNumbers,
          });
          // We want to make sure we pushed the listeners in the listener list rather than creating
          // a new one as it has already been passed to the event handlers.
          listeners.push.apply(listeners, moveEvent.concat(endEvent, outEvent));
          // Text selection isn't an issue on touch devices,
          // so adding cursor styles can be skipped.
          if (event.cursor) {
              // Prevent the 'I' cursor and extend the range-drag cursor.
              scope_Body.style.cursor = getComputedStyle(event.target).cursor;
              // Mark the target with a dragging state.
              if (scope_Handles.length > 1) {
                  addClass(scope_Target, options.cssClasses.drag);
              }
              // Prevent text selection when dragging the handles.
              // In noUiSlider <= 9.2.0, this was handled by calling preventDefault on mouse/touch start/move,
              // which is scroll blocking. The selectstart event is supported by FireFox starting from version 52,
              // meaning the only holdout is iOS Safari. This doesn't matter: text selection isn't triggered there.
              // The 'cursor' flag is false.
              // See: http://caniuse.com/#search=selectstart
              scope_Body.addEventListener("selectstart", preventDefault, false);
          }
          data.handleNumbers.forEach(function (handleNumber) {
              fireEvent("start", handleNumber);
          });
      }
      // Move closest handle to tapped location.
      function eventTap(event) {
          // The tap event shouldn't propagate up
          event.stopPropagation();
          var proposal = calcPointToPercentage(event.calcPoint);
          var handleNumber = getClosestHandle(proposal);
          // Tackle the case that all handles are 'disabled'.
          if (handleNumber === false) {
              return;
          }
          // Flag the slider as it is now in a transitional state.
          // Transition takes a configurable amount of ms (default 300). Re-enable the slider after that.
          if (!options.events.snap) {
              addClassFor(scope_Target, options.cssClasses.tap, options.animationDuration);
          }
          setHandle(handleNumber, proposal, true, true);
          setZindex();
          fireEvent("slide", handleNumber, true);
          fireEvent("update", handleNumber, true);
          if (!options.events.snap) {
              fireEvent("change", handleNumber, true);
              fireEvent("set", handleNumber, true);
          }
          else {
              eventStart(event, { handleNumbers: [handleNumber] });
          }
      }
      // Fires a 'hover' event for a hovered mouse/pen position.
      function eventHover(event) {
          var proposal = calcPointToPercentage(event.calcPoint);
          var to = scope_Spectrum.getStep(proposal);
          var value = scope_Spectrum.fromStepping(to);
          Object.keys(scope_Events).forEach(function (targetEvent) {
              if ("hover" === targetEvent.split(".")[0]) {
                  scope_Events[targetEvent].forEach(function (callback) {
                      callback.call(scope_Self, value);
                  });
              }
          });
      }
      // Handles keydown on focused handles
      // Don't move the document when pressing arrow keys on focused handles
      function eventKeydown(event, handleNumber) {
          if (isSliderDisabled() || isHandleDisabled(handleNumber)) {
              return false;
          }
          var horizontalKeys = ["Left", "Right"];
          var verticalKeys = ["Down", "Up"];
          var largeStepKeys = ["PageDown", "PageUp"];
          var edgeKeys = ["Home", "End"];
          if (options.dir && !options.ort) {
              // On an right-to-left slider, the left and right keys act inverted
              horizontalKeys.reverse();
          }
          else if (options.ort && !options.dir) {
              // On a top-to-bottom slider, the up and down keys act inverted
              verticalKeys.reverse();
              largeStepKeys.reverse();
          }
          // Strip "Arrow" for IE compatibility. https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/key
          var key = event.key.replace("Arrow", "");
          var isLargeDown = key === largeStepKeys[0];
          var isLargeUp = key === largeStepKeys[1];
          var isDown = key === verticalKeys[0] || key === horizontalKeys[0] || isLargeDown;
          var isUp = key === verticalKeys[1] || key === horizontalKeys[1] || isLargeUp;
          var isMin = key === edgeKeys[0];
          var isMax = key === edgeKeys[1];
          if (!isDown && !isUp && !isMin && !isMax) {
              return true;
          }
          event.preventDefault();
          var to;
          if (isUp || isDown) {
              var direction = isDown ? 0 : 1;
              var steps = getNextStepsForHandle(handleNumber);
              var step = steps[direction];
              // At the edge of a slider, do nothing
              if (step === null) {
                  return false;
              }
              // No step set, use the default of 10% of the sub-range
              if (step === false) {
                  step = scope_Spectrum.getDefaultStep(scope_Locations[handleNumber], isDown, options.keyboardDefaultStep);
              }
              if (isLargeUp || isLargeDown) {
                  step *= options.keyboardPageMultiplier;
              }
              else {
                  step *= options.keyboardMultiplier;
              }
              // Step over zero-length ranges (#948);
              step = Math.max(step, 0.0000001);
              // Decrement for down steps
              step = (isDown ? -1 : 1) * step;
              to = scope_Values[handleNumber] + step;
          }
          else if (isMax) {
              // End key
              to = options.spectrum.xVal[options.spectrum.xVal.length - 1];
          }
          else {
              // Home key
              to = options.spectrum.xVal[0];
          }
          setHandle(handleNumber, scope_Spectrum.toStepping(to), true, true);
          fireEvent("slide", handleNumber);
          fireEvent("update", handleNumber);
          fireEvent("change", handleNumber);
          fireEvent("set", handleNumber);
          return false;
      }
      // Attach events to several slider parts.
      function bindSliderEvents(behaviour) {
          // Attach the standard drag event to the handles.
          if (!behaviour.fixed) {
              scope_Handles.forEach(function (handle, index) {
                  // These events are only bound to the visual handle
                  // element, not the 'real' origin element.
                  attachEvent(actions.start, handle.children[0], eventStart, {
                      handleNumbers: [index],
                  });
              });
          }
          // Attach the tap event to the slider base.
          if (behaviour.tap) {
              attachEvent(actions.start, scope_Base, eventTap, {});
          }
          // Fire hover events
          if (behaviour.hover) {
              attachEvent(actions.move, scope_Base, eventHover, {
                  hover: true,
              });
          }
          // Make the range draggable.
          if (behaviour.drag) {
              scope_Connects.forEach(function (connect, index) {
                  if (connect === false || index === 0 || index === scope_Connects.length - 1) {
                      return;
                  }
                  var handleBefore = scope_Handles[index - 1];
                  var handleAfter = scope_Handles[index];
                  var eventHolders = [connect];
                  var handlesToDrag = [handleBefore, handleAfter];
                  var handleNumbersToDrag = [index - 1, index];
                  addClass(connect, options.cssClasses.draggable);
                  // When the range is fixed, the entire range can
                  // be dragged by the handles. The handle in the first
                  // origin will propagate the start event upward,
                  // but it needs to be bound manually on the other.
                  if (behaviour.fixed) {
                      eventHolders.push(handleBefore.children[0]);
                      eventHolders.push(handleAfter.children[0]);
                  }
                  if (behaviour.dragAll) {
                      handlesToDrag = scope_Handles;
                      handleNumbersToDrag = scope_HandleNumbers;
                  }
                  eventHolders.forEach(function (eventHolder) {
                      attachEvent(actions.start, eventHolder, eventStart, {
                          handles: handlesToDrag,
                          handleNumbers: handleNumbersToDrag,
                          connect: connect,
                      });
                  });
              });
          }
      }
      // Attach an event to this slider, possibly including a namespace
      function bindEvent(namespacedEvent, callback) {
          scope_Events[namespacedEvent] = scope_Events[namespacedEvent] || [];
          scope_Events[namespacedEvent].push(callback);
          // If the event bound is 'update,' fire it immediately for all handles.
          if (namespacedEvent.split(".")[0] === "update") {
              scope_Handles.forEach(function (a, index) {
                  fireEvent("update", index);
              });
          }
      }
      function isInternalNamespace(namespace) {
          return namespace === INTERNAL_EVENT_NS.aria || namespace === INTERNAL_EVENT_NS.tooltips;
      }
      // Undo attachment of event
      function removeEvent(namespacedEvent) {
          var event = namespacedEvent && namespacedEvent.split(".")[0];
          var namespace = event ? namespacedEvent.substring(event.length) : namespacedEvent;
          Object.keys(scope_Events).forEach(function (bind) {
              var tEvent = bind.split(".")[0];
              var tNamespace = bind.substring(tEvent.length);
              if ((!event || event === tEvent) && (!namespace || namespace === tNamespace)) {
                  // only delete protected internal event if intentional
                  if (!isInternalNamespace(tNamespace) || namespace === tNamespace) {
                      delete scope_Events[bind];
                  }
              }
          });
      }
      // External event handling
      function fireEvent(eventName, handleNumber, tap) {
          Object.keys(scope_Events).forEach(function (targetEvent) {
              var eventType = targetEvent.split(".")[0];
              if (eventName === eventType) {
                  scope_Events[targetEvent].forEach(function (callback) {
                      callback.call(
                      // Use the slider public API as the scope ('this')
                      scope_Self, 
                      // Return values as array, so arg_1[arg_2] is always valid.
                      scope_Values.map(options.format.to), 
                      // Handle index, 0 or 1
                      handleNumber, 
                      // Un-formatted slider values
                      scope_Values.slice(), 
                      // Event is fired by tap, true or false
                      tap || false, 
                      // Left offset of the handle, in relation to the slider
                      scope_Locations.slice(), 
                      // add the slider public API to an accessible parameter when this is unavailable
                      scope_Self);
                  });
              }
          });
      }
      // Split out the handle positioning logic so the Move event can use it, too
      function checkHandlePosition(reference, handleNumber, to, lookBackward, lookForward, getValue, smoothSteps) {
          var distance;
          // For sliders with multiple handles, limit movement to the other handle.
          // Apply the margin option by adding it to the handle positions.
          if (scope_Handles.length > 1 && !options.events.unconstrained) {
              if (lookBackward && handleNumber > 0) {
                  distance = scope_Spectrum.getAbsoluteDistance(reference[handleNumber - 1], options.margin, false);
                  to = Math.max(to, distance);
              }
              if (lookForward && handleNumber < scope_Handles.length - 1) {
                  distance = scope_Spectrum.getAbsoluteDistance(reference[handleNumber + 1], options.margin, true);
                  to = Math.min(to, distance);
              }
          }
          // The limit option has the opposite effect, limiting handles to a
          // maximum distance from another. Limit must be > 0, as otherwise
          // handles would be unmovable.
          if (scope_Handles.length > 1 && options.limit) {
              if (lookBackward && handleNumber > 0) {
                  distance = scope_Spectrum.getAbsoluteDistance(reference[handleNumber - 1], options.limit, false);
                  to = Math.min(to, distance);
              }
              if (lookForward && handleNumber < scope_Handles.length - 1) {
                  distance = scope_Spectrum.getAbsoluteDistance(reference[handleNumber + 1], options.limit, true);
                  to = Math.max(to, distance);
              }
          }
          // The padding option keeps the handles a certain distance from the
          // edges of the slider. Padding must be > 0.
          if (options.padding) {
              if (handleNumber === 0) {
                  distance = scope_Spectrum.getAbsoluteDistance(0, options.padding[0], false);
                  to = Math.max(to, distance);
              }
              if (handleNumber === scope_Handles.length - 1) {
                  distance = scope_Spectrum.getAbsoluteDistance(100, options.padding[1], true);
                  to = Math.min(to, distance);
              }
          }
          if (!smoothSteps) {
              to = scope_Spectrum.getStep(to);
          }
          // Limit percentage to the 0 - 100 range
          to = limit(to);
          // Return false if handle can't move
          if (to === reference[handleNumber] && !getValue) {
              return false;
          }
          return to;
      }
      // Uses slider orientation to create CSS rules. a = base value;
      function inRuleOrder(v, a) {
          var o = options.ort;
          return (o ? a : v) + ", " + (o ? v : a);
      }
      // Moves handle(s) by a percentage
      // (bool, % to move, [% where handle started, ...], [index in scope_Handles, ...])
      function moveHandles(upward, proposal, locations, handleNumbers, connect) {
          var proposals = locations.slice();
          // Store first handle now, so we still have it in case handleNumbers is reversed
          var firstHandle = handleNumbers[0];
          var smoothSteps = options.events.smoothSteps;
          var b = [!upward, upward];
          var f = [upward, !upward];
          // Copy handleNumbers so we don't change the dataset
          handleNumbers = handleNumbers.slice();
          // Check to see which handle is 'leading'.
          // If that one can't move the second can't either.
          if (upward) {
              handleNumbers.reverse();
          }
          // Step 1: get the maximum percentage that any of the handles can move
          if (handleNumbers.length > 1) {
              handleNumbers.forEach(function (handleNumber, o) {
                  var to = checkHandlePosition(proposals, handleNumber, proposals[handleNumber] + proposal, b[o], f[o], false, smoothSteps);
                  // Stop if one of the handles can't move.
                  if (to === false) {
                      proposal = 0;
                  }
                  else {
                      proposal = to - proposals[handleNumber];
                      proposals[handleNumber] = to;
                  }
              });
          }
          // If using one handle, check backward AND forward
          else {
              b = f = [true];
          }
          var state = false;
          // Step 2: Try to set the handles with the found percentage
          handleNumbers.forEach(function (handleNumber, o) {
              state =
                  setHandle(handleNumber, locations[handleNumber] + proposal, b[o], f[o], false, smoothSteps) || state;
          });
          // Step 3: If a handle moved, fire events
          if (state) {
              handleNumbers.forEach(function (handleNumber) {
                  fireEvent("update", handleNumber);
                  fireEvent("slide", handleNumber);
              });
              // If target is a connect, then fire drag event
              if (connect != undefined) {
                  fireEvent("drag", firstHandle);
              }
          }
      }
      // Takes a base value and an offset. This offset is used for the connect bar size.
      // In the initial design for this feature, the origin element was 1% wide.
      // Unfortunately, a rounding bug in Chrome makes it impossible to implement this feature
      // in this manner: https://bugs.chromium.org/p/chromium/issues/detail?id=798223
      function transformDirection(a, b) {
          return options.dir ? 100 - a - b : a;
      }
      // Updates scope_Locations and scope_Values, updates visual state
      function updateHandlePosition(handleNumber, to) {
          // Update locations.
          scope_Locations[handleNumber] = to;
          // Convert the value to the slider stepping/range.
          scope_Values[handleNumber] = scope_Spectrum.fromStepping(to);
          var translation = transformDirection(to, 0) - scope_DirOffset;
          var translateRule = "translate(" + inRuleOrder(translation + "%", "0") + ")";
          scope_Handles[handleNumber].style[options.transformRule] = translateRule;
          // sanity check for at least 2 handles (e.g. during setup)
          if (options.events.invertConnects && scope_Locations.length > 1) {
              // check if handles passed each other, but don't match the ConnectsInverted state
              var handlesAreInOrder = scope_Locations.every(function (position, index, locations) {
                  return index === 0 || position >= locations[index - 1];
              });
              if (scope_ConnectsInverted !== !handlesAreInOrder) {
                  // invert connects when handles pass each other
                  invertConnects();
                  // invertConnects already updates all connect elements
                  return;
              }
          }
          updateConnect(handleNumber);
          updateConnect(handleNumber + 1);
          if (scope_ConnectsInverted) {
              // When connects are inverted, we also have to update adjacent connects
              updateConnect(handleNumber - 1);
              updateConnect(handleNumber + 2);
          }
      }
      // Handles before the slider middle are stacked later = higher,
      // Handles after the middle later is lower
      // [[7] [8] .......... | .......... [5] [4]
      function setZindex() {
          scope_HandleNumbers.forEach(function (handleNumber) {
              var dir = scope_Locations[handleNumber] > 50 ? -1 : 1;
              var zIndex = 3 + (scope_Handles.length + dir * handleNumber);
              scope_Handles[handleNumber].style.zIndex = String(zIndex);
          });
      }
      // Test suggested values and apply margin, step.
      // if exactInput is true, don't run checkHandlePosition, then the handle can be placed in between steps (#436)
      function setHandle(handleNumber, to, lookBackward, lookForward, exactInput, smoothSteps) {
          if (!exactInput) {
              to = checkHandlePosition(scope_Locations, handleNumber, to, lookBackward, lookForward, false, smoothSteps);
          }
          if (to === false) {
              return false;
          }
          updateHandlePosition(handleNumber, to);
          return true;
      }
      // Updates style attribute for connect nodes
      function updateConnect(index) {
          // Skip connects set to false
          if (!scope_Connects[index]) {
              return;
          }
          // Create a copy of locations, so we can sort them for the local scope logic
          var locations = scope_Locations.slice();
          if (scope_ConnectsInverted) {
              locations.sort(function (a, b) {
                  return a - b;
              });
          }
          var l = 0;
          var h = 100;
          if (index !== 0) {
              l = locations[index - 1];
          }
          if (index !== scope_Connects.length - 1) {
              h = locations[index];
          }
          // We use two rules:
          // 'translate' to change the left/top offset;
          // 'scale' to change the width of the element;
          // As the element has a width of 100%, a translation of 100% is equal to 100% of the parent (.noUi-base)
          var connectWidth = h - l;
          var translateRule = "translate(" + inRuleOrder(transformDirection(l, connectWidth) + "%", "0") + ")";
          var scaleRule = "scale(" + inRuleOrder(connectWidth / 100, "1") + ")";
          scope_Connects[index].style[options.transformRule] =
              translateRule + " " + scaleRule;
      }
      // Parses value passed to .set method. Returns current value if not parse-able.
      function resolveToValue(to, handleNumber) {
          // Setting with null indicates an 'ignore'.
          // Inputting 'false' is invalid.
          if (to === null || to === false || to === undefined) {
              return scope_Locations[handleNumber];
          }
          // If a formatted number was passed, attempt to decode it.
          if (typeof to === "number") {
              to = String(to);
          }
          to = options.format.from(to);
          if (to !== false) {
              to = scope_Spectrum.toStepping(to);
          }
          // If parsing the number failed, use the current value.
          if (to === false || isNaN(to)) {
              return scope_Locations[handleNumber];
          }
          return to;
      }
      // Set the slider value.
      function valueSet(input, fireSetEvent, exactInput) {
          var values = asArray(input);
          var isInit = scope_Locations[0] === undefined;
          // Event fires by default
          fireSetEvent = fireSetEvent === undefined ? true : fireSetEvent;
          // Animation is optional.
          // Make sure the initial values were set before using animated placement.
          if (options.animate && !isInit) {
              addClassFor(scope_Target, options.cssClasses.tap, options.animationDuration);
          }
          // First pass, without lookAhead but with lookBackward. Values are set from left to right.
          scope_HandleNumbers.forEach(function (handleNumber) {
              setHandle(handleNumber, resolveToValue(values[handleNumber], handleNumber), true, false, exactInput);
          });
          var i = scope_HandleNumbers.length === 1 ? 0 : 1;
          // Spread handles evenly across the slider if the range has no size (min=max)
          if (isInit && scope_Spectrum.hasNoSize()) {
              exactInput = true;
              scope_Locations[0] = 0;
              if (scope_HandleNumbers.length > 1) {
                  var space_1 = 100 / (scope_HandleNumbers.length - 1);
                  scope_HandleNumbers.forEach(function (handleNumber) {
                      scope_Locations[handleNumber] = handleNumber * space_1;
                  });
              }
          }
          // Secondary passes. Now that all base values are set, apply constraints.
          // Iterate all handles to ensure constraints are applied for the entire slider (Issue #1009)
          for (; i < scope_HandleNumbers.length; ++i) {
              scope_HandleNumbers.forEach(function (handleNumber) {
                  setHandle(handleNumber, scope_Locations[handleNumber], true, true, exactInput);
              });
          }
          setZindex();
          scope_HandleNumbers.forEach(function (handleNumber) {
              fireEvent("update", handleNumber);
              // Fire the event only for handles that received a new value, as per #579
              if (values[handleNumber] !== null && fireSetEvent) {
                  fireEvent("set", handleNumber);
              }
          });
      }
      // Reset slider to initial values
      function valueReset(fireSetEvent) {
          valueSet(options.start, fireSetEvent);
      }
      // Set value for a single handle
      function valueSetHandle(handleNumber, value, fireSetEvent, exactInput) {
          // Ensure numeric input
          handleNumber = Number(handleNumber);
          if (!(handleNumber >= 0 && handleNumber < scope_HandleNumbers.length)) {
              throw new Error("noUiSlider: invalid handle number, got: " + handleNumber);
          }
          // Look both backward and forward, since we don't want this handle to "push" other handles (#960);
          // The exactInput argument can be used to ignore slider stepping (#436)
          setHandle(handleNumber, resolveToValue(value, handleNumber), true, true, exactInput);
          fireEvent("update", handleNumber);
          if (fireSetEvent) {
              fireEvent("set", handleNumber);
          }
      }
      // Get the slider value.
      function valueGet(unencoded) {
          if (unencoded === void 0) { unencoded = false; }
          if (unencoded) {
              // return a copy of the raw values
              return scope_Values.length === 1 ? scope_Values[0] : scope_Values.slice(0);
          }
          var values = scope_Values.map(options.format.to);
          // If only one handle is used, return a single value.
          if (values.length === 1) {
              return values[0];
          }
          return values;
      }
      // Removes classes from the root and empties it.
      function destroy() {
          // remove protected internal listeners
          removeEvent(INTERNAL_EVENT_NS.aria);
          removeEvent(INTERNAL_EVENT_NS.tooltips);
          Object.keys(options.cssClasses).forEach(function (key) {
              removeClass(scope_Target, options.cssClasses[key]);
          });
          while (scope_Target.firstChild) {
              scope_Target.removeChild(scope_Target.firstChild);
          }
          delete scope_Target.noUiSlider;
      }
      function getNextStepsForHandle(handleNumber) {
          var location = scope_Locations[handleNumber];
          var nearbySteps = scope_Spectrum.getNearbySteps(location);
          var value = scope_Values[handleNumber];
          var increment = nearbySteps.thisStep.step;
          var decrement = null;
          // If snapped, directly use defined step value
          if (options.snap) {
              return [
                  value - nearbySteps.stepBefore.startValue || null,
                  nearbySteps.stepAfter.startValue - value || null,
              ];
          }
          // If the next value in this step moves into the next step,
          // the increment is the start of the next step - the current value
          if (increment !== false) {
              if (value + increment > nearbySteps.stepAfter.startValue) {
                  increment = nearbySteps.stepAfter.startValue - value;
              }
          }
          // If the value is beyond the starting point
          if (value > nearbySteps.thisStep.startValue) {
              decrement = nearbySteps.thisStep.step;
          }
          else if (nearbySteps.stepBefore.step === false) {
              decrement = false;
          }
          // If a handle is at the start of a step, it always steps back into the previous step first
          else {
              decrement = value - nearbySteps.stepBefore.highestStep;
          }
          // Now, if at the slider edges, there is no in/decrement
          if (location === 100) {
              increment = null;
          }
          else if (location === 0) {
              decrement = null;
          }
          // As per #391, the comparison for the decrement step can have some rounding issues.
          var stepDecimals = scope_Spectrum.countStepDecimals();
          // Round per #391
          if (increment !== null && increment !== false) {
              increment = Number(increment.toFixed(stepDecimals));
          }
          if (decrement !== null && decrement !== false) {
              decrement = Number(decrement.toFixed(stepDecimals));
          }
          return [decrement, increment];
      }
      // Get the current step size for the slider.
      function getNextSteps() {
          return scope_HandleNumbers.map(getNextStepsForHandle);
      }
      // Updatable: margin, limit, padding, step, range, animate, snap
      function updateOptions(optionsToUpdate, fireSetEvent) {
          // Spectrum is created using the range, snap, direction and step options.
          // 'snap' and 'step' can be updated.
          // If 'snap' and 'step' are not passed, they should remain unchanged.
          var v = valueGet();
          var updateAble = [
              "margin",
              "limit",
              "padding",
              "range",
              "animate",
              "snap",
              "step",
              "format",
              "pips",
              "tooltips",
              "connect",
          ];
          // Only change options that we're actually passed to update.
          updateAble.forEach(function (name) {
              // Check for undefined. null removes the value.
              if (optionsToUpdate[name] !== undefined) {
                  originalOptions[name] = optionsToUpdate[name];
              }
          });
          var newOptions = testOptions(originalOptions);
          // Load new options into the slider state
          updateAble.forEach(function (name) {
              if (optionsToUpdate[name] !== undefined) {
                  options[name] = newOptions[name];
              }
          });
          scope_Spectrum = newOptions.spectrum;
          // Limit, margin and padding depend on the spectrum but are stored outside of it. (#677)
          options.margin = newOptions.margin;
          options.limit = newOptions.limit;
          options.padding = newOptions.padding;
          // Update pips, removes existing.
          if (options.pips) {
              pips(options.pips);
          }
          else {
              removePips();
          }
          // Update tooltips, removes existing.
          if (options.tooltips) {
              tooltips();
          }
          else {
              removeTooltips();
          }
          // Invalidate the current positioning so valueSet forces an update.
          scope_Locations = [];
          valueSet(isSet(optionsToUpdate.start) ? optionsToUpdate.start : v, fireSetEvent);
          // Update connects only if it was set
          if (optionsToUpdate.connect) {
              updateConnectOption();
          }
      }
      function updateConnectOption() {
          // IE supported way of removing children including event handlers
          while (scope_ConnectBase.firstChild) {
              scope_ConnectBase.removeChild(scope_ConnectBase.firstChild);
          }
          // Adding new connects according to the new connect options
          for (var i = 0; i <= options.handles; i++) {
              scope_Connects[i] = addConnect(scope_ConnectBase, options.connect[i]);
              updateConnect(i);
          }
          // re-adding drag events for the new connect elements
          // to ignore the other events we have to negate the 'if (!behaviour.fixed)' check
          bindSliderEvents({ drag: options.events.drag, fixed: true });
      }
      // Invert options for connect handles
      function invertConnects() {
          scope_ConnectsInverted = !scope_ConnectsInverted;
          testConnect(options, 
          // inverse the connect boolean array
          options.connect.map(function (b) { return !b; }));
          updateConnectOption();
      }
      // Initialization steps
      function setupSlider() {
          // Create the base element, initialize HTML and set classes.
          // Add handles and connect elements.
          scope_Base = addSlider(scope_Target);
          addElements(options.connect, scope_Base);
          // Attach user events.
          bindSliderEvents(options.events);
          // Use the public value method to set the start values.
          valueSet(options.start);
          if (options.pips) {
              pips(options.pips);
          }
          if (options.tooltips) {
              tooltips();
          }
          aria();
      }
      setupSlider();
      var scope_Self = {
          destroy: destroy,
          steps: getNextSteps,
          on: bindEvent,
          off: removeEvent,
          get: valueGet,
          set: valueSet,
          setHandle: valueSetHandle,
          reset: valueReset,
          disable: disable,
          enable: enable,
          // Exposed for unit testing, don't use this in your application.
          __moveHandles: function (upward, proposal, handleNumbers) {
              moveHandles(upward, proposal, scope_Locations, handleNumbers);
          },
          options: originalOptions,
          updateOptions: updateOptions,
          target: scope_Target,
          removePips: removePips,
          removeTooltips: removeTooltips,
          getPositions: function () {
              return scope_Locations.slice();
          },
          getTooltips: function () {
              return scope_Tooltips;
          },
          getOrigins: function () {
              return scope_Handles;
          },
          pips: pips, // Issue #594
      };
      return scope_Self;
  }
  // Run the standard initializer
  function initialize(target, originalOptions) {
      if (!target || !target.nodeName) {
          throw new Error("noUiSlider: create requires a single element, got: " + target);
      }
      // Throw an error if the slider was already initialized.
      if (target.noUiSlider) {
          throw new Error("noUiSlider: Slider was already initialized.");
      }
      // Test the options and create the slider environment;
      var options = testOptions(originalOptions);
      var api = scope(target, options, originalOptions);
      target.noUiSlider = api;
      return api;
  }
  var nouislider = {
      // Exposed for unit testing, don't use this in your application.
      __spectrum: Spectrum,
      // A reference to the default classes, allows global changes.
      // Use the cssClasses option for changes to one slider.
      cssClasses: cssClasses,
      create: initialize,
  };

  var flv$1 = {exports: {}};

  (function (module, exports) {
  	(function webpackUniversalModuleDefinition(root, factory) {
  		module.exports = factory();
  	})(self, function() {
  	return /******/ (function() { // webpackBootstrap
  	/******/ 	var __webpack_modules__ = ({

  	/***/ "./node_modules/es6-promise/dist/es6-promise.js":
  	/*!******************************************************!*\
  	  !*** ./node_modules/es6-promise/dist/es6-promise.js ***!
  	  \******************************************************/
  	/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

  	/*!
  	 * @overview es6-promise - a tiny implementation of Promises/A+.
  	 * @copyright Copyright (c) 2014 Yehuda Katz, Tom Dale, Stefan Penner and contributors (Conversion to ES6 API by Jake Archibald)
  	 * @license   Licensed under MIT license
  	 *            See https://raw.githubusercontent.com/stefanpenner/es6-promise/master/LICENSE
  	 * @version   v4.2.8+1e68dce6
  	 */
  	(function (global, factory) {
  	     module.exports = factory() ;
  	}(this, (function () {
  	    function objectOrFunction(x) {
  	        var type = typeof x;
  	        return x !== null && (type === 'object' || type === 'function');
  	    }
  	    function isFunction(x) {
  	        return typeof x === 'function';
  	    }
  	    var _isArray = void 0;
  	    if (Array.isArray) {
  	        _isArray = Array.isArray;
  	    }
  	    else {
  	        _isArray = function (x) {
  	            return Object.prototype.toString.call(x) === '[object Array]';
  	        };
  	    }
  	    var isArray = _isArray;
  	    var len = 0;
  	    var vertxNext = void 0;
  	    var customSchedulerFn = void 0;
  	    var asap = function asap(callback, arg) {
  	        queue[len] = callback;
  	        queue[len + 1] = arg;
  	        len += 2;
  	        if (len === 2) {
  	            // If len is 2, that means that we need to schedule an async flush.
  	            // If additional callbacks are queued before the queue is flushed, they
  	            // will be processed by this flush that we are scheduling.
  	            if (customSchedulerFn) {
  	                customSchedulerFn(flush);
  	            }
  	            else {
  	                scheduleFlush();
  	            }
  	        }
  	    };
  	    function setScheduler(scheduleFn) {
  	        customSchedulerFn = scheduleFn;
  	    }
  	    function setAsap(asapFn) {
  	        asap = asapFn;
  	    }
  	    var browserWindow = typeof window !== 'undefined' ? window : undefined;
  	    var browserGlobal = browserWindow || {};
  	    var BrowserMutationObserver = browserGlobal.MutationObserver || browserGlobal.WebKitMutationObserver;
  	    var isNode = typeof self === 'undefined' && typeof process !== 'undefined' && {}.toString.call(process) === '[object process]';
  	    // test for web worker but not in IE10
  	    var isWorker = typeof Uint8ClampedArray !== 'undefined' && typeof importScripts !== 'undefined' && typeof MessageChannel !== 'undefined';
  	    // node
  	    function useNextTick() {
  	        // node version 0.10.x displays a deprecation warning when nextTick is used recursively
  	        // see https://github.com/cujojs/when/issues/410 for details
  	        return function () {
  	            return process.nextTick(flush);
  	        };
  	    }
  	    // vertx
  	    function useVertxTimer() {
  	        if (typeof vertxNext !== 'undefined') {
  	            return function () {
  	                vertxNext(flush);
  	            };
  	        }
  	        return useSetTimeout();
  	    }
  	    function useMutationObserver() {
  	        var iterations = 0;
  	        var observer = new BrowserMutationObserver(flush);
  	        var node = document.createTextNode('');
  	        observer.observe(node, { characterData: true });
  	        return function () {
  	            node.data = iterations = ++iterations % 2;
  	        };
  	    }
  	    // web worker
  	    function useMessageChannel() {
  	        var channel = new MessageChannel();
  	        channel.port1.onmessage = flush;
  	        return function () {
  	            return channel.port2.postMessage(0);
  	        };
  	    }
  	    function useSetTimeout() {
  	        // Store setTimeout reference so es6-promise will be unaffected by
  	        // other code modifying setTimeout (like sinon.useFakeTimers())
  	        var globalSetTimeout = setTimeout;
  	        return function () {
  	            return globalSetTimeout(flush, 1);
  	        };
  	    }
  	    var queue = new Array(1000);
  	    function flush() {
  	        for (var i = 0; i < len; i += 2) {
  	            var callback = queue[i];
  	            var arg = queue[i + 1];
  	            callback(arg);
  	            queue[i] = undefined;
  	            queue[i + 1] = undefined;
  	        }
  	        len = 0;
  	    }
  	    function attemptVertx() {
  	        try {
  	            var vertx = Function('return this')().require('vertx');
  	            vertxNext = vertx.runOnLoop || vertx.runOnContext;
  	            return useVertxTimer();
  	        }
  	        catch (e) {
  	            return useSetTimeout();
  	        }
  	    }
  	    var scheduleFlush = void 0;
  	    // Decide what async method to use to triggering processing of queued callbacks:
  	    if (isNode) {
  	        scheduleFlush = useNextTick();
  	    }
  	    else if (BrowserMutationObserver) {
  	        scheduleFlush = useMutationObserver();
  	    }
  	    else if (isWorker) {
  	        scheduleFlush = useMessageChannel();
  	    }
  	    else if (browserWindow === undefined && "function" === 'function') {
  	        scheduleFlush = attemptVertx();
  	    }
  	    else {
  	        scheduleFlush = useSetTimeout();
  	    }
  	    function then(onFulfillment, onRejection) {
  	        var parent = this;
  	        var child = new this.constructor(noop);
  	        if (child[PROMISE_ID] === undefined) {
  	            makePromise(child);
  	        }
  	        var _state = parent._state;
  	        if (_state) {
  	            var callback = arguments[_state - 1];
  	            asap(function () {
  	                return invokeCallback(_state, child, callback, parent._result);
  	            });
  	        }
  	        else {
  	            subscribe(parent, child, onFulfillment, onRejection);
  	        }
  	        return child;
  	    }
  	    /**
  	      `Promise.resolve` returns a promise that will become resolved with the
  	      passed `value`. It is shorthand for the following:
  	    
  	      ```javascript
  	      let promise = new Promise(function(resolve, reject){
  	        resolve(1);
  	      });
  	    
  	      promise.then(function(value){
  	        // value === 1
  	      });
  	      ```
  	    
  	      Instead of writing the above, your code now simply becomes the following:
  	    
  	      ```javascript
  	      let promise = Promise.resolve(1);
  	    
  	      promise.then(function(value){
  	        // value === 1
  	      });
  	      ```
  	    
  	      @method resolve
  	      @static
  	      @param {Any} value value that the returned promise will be resolved with
  	      Useful for tooling.
  	      @return {Promise} a promise that will become fulfilled with the given
  	      `value`
  	    */
  	    function resolve$1(object) {
  	        /*jshint validthis:true */
  	        var Constructor = this;
  	        if (object && typeof object === 'object' && object.constructor === Constructor) {
  	            return object;
  	        }
  	        var promise = new Constructor(noop);
  	        resolve(promise, object);
  	        return promise;
  	    }
  	    var PROMISE_ID = Math.random().toString(36).substring(2);
  	    function noop() { }
  	    var PENDING = void 0;
  	    var FULFILLED = 1;
  	    var REJECTED = 2;
  	    function selfFulfillment() {
  	        return new TypeError("You cannot resolve a promise with itself");
  	    }
  	    function cannotReturnOwn() {
  	        return new TypeError('A promises callback cannot return that same promise.');
  	    }
  	    function tryThen(then$$1, value, fulfillmentHandler, rejectionHandler) {
  	        try {
  	            then$$1.call(value, fulfillmentHandler, rejectionHandler);
  	        }
  	        catch (e) {
  	            return e;
  	        }
  	    }
  	    function handleForeignThenable(promise, thenable, then$$1) {
  	        asap(function (promise) {
  	            var sealed = false;
  	            var error = tryThen(then$$1, thenable, function (value) {
  	                if (sealed) {
  	                    return;
  	                }
  	                sealed = true;
  	                if (thenable !== value) {
  	                    resolve(promise, value);
  	                }
  	                else {
  	                    fulfill(promise, value);
  	                }
  	            }, function (reason) {
  	                if (sealed) {
  	                    return;
  	                }
  	                sealed = true;
  	                reject(promise, reason);
  	            }, 'Settle: ' + (promise._label || ' unknown promise'));
  	            if (!sealed && error) {
  	                sealed = true;
  	                reject(promise, error);
  	            }
  	        }, promise);
  	    }
  	    function handleOwnThenable(promise, thenable) {
  	        if (thenable._state === FULFILLED) {
  	            fulfill(promise, thenable._result);
  	        }
  	        else if (thenable._state === REJECTED) {
  	            reject(promise, thenable._result);
  	        }
  	        else {
  	            subscribe(thenable, undefined, function (value) {
  	                return resolve(promise, value);
  	            }, function (reason) {
  	                return reject(promise, reason);
  	            });
  	        }
  	    }
  	    function handleMaybeThenable(promise, maybeThenable, then$$1) {
  	        if (maybeThenable.constructor === promise.constructor && then$$1 === then && maybeThenable.constructor.resolve === resolve$1) {
  	            handleOwnThenable(promise, maybeThenable);
  	        }
  	        else {
  	            if (then$$1 === undefined) {
  	                fulfill(promise, maybeThenable);
  	            }
  	            else if (isFunction(then$$1)) {
  	                handleForeignThenable(promise, maybeThenable, then$$1);
  	            }
  	            else {
  	                fulfill(promise, maybeThenable);
  	            }
  	        }
  	    }
  	    function resolve(promise, value) {
  	        if (promise === value) {
  	            reject(promise, selfFulfillment());
  	        }
  	        else if (objectOrFunction(value)) {
  	            var then$$1 = void 0;
  	            try {
  	                then$$1 = value.then;
  	            }
  	            catch (error) {
  	                reject(promise, error);
  	                return;
  	            }
  	            handleMaybeThenable(promise, value, then$$1);
  	        }
  	        else {
  	            fulfill(promise, value);
  	        }
  	    }
  	    function publishRejection(promise) {
  	        if (promise._onerror) {
  	            promise._onerror(promise._result);
  	        }
  	        publish(promise);
  	    }
  	    function fulfill(promise, value) {
  	        if (promise._state !== PENDING) {
  	            return;
  	        }
  	        promise._result = value;
  	        promise._state = FULFILLED;
  	        if (promise._subscribers.length !== 0) {
  	            asap(publish, promise);
  	        }
  	    }
  	    function reject(promise, reason) {
  	        if (promise._state !== PENDING) {
  	            return;
  	        }
  	        promise._state = REJECTED;
  	        promise._result = reason;
  	        asap(publishRejection, promise);
  	    }
  	    function subscribe(parent, child, onFulfillment, onRejection) {
  	        var _subscribers = parent._subscribers;
  	        var length = _subscribers.length;
  	        parent._onerror = null;
  	        _subscribers[length] = child;
  	        _subscribers[length + FULFILLED] = onFulfillment;
  	        _subscribers[length + REJECTED] = onRejection;
  	        if (length === 0 && parent._state) {
  	            asap(publish, parent);
  	        }
  	    }
  	    function publish(promise) {
  	        var subscribers = promise._subscribers;
  	        var settled = promise._state;
  	        if (subscribers.length === 0) {
  	            return;
  	        }
  	        var child = void 0, callback = void 0, detail = promise._result;
  	        for (var i = 0; i < subscribers.length; i += 3) {
  	            child = subscribers[i];
  	            callback = subscribers[i + settled];
  	            if (child) {
  	                invokeCallback(settled, child, callback, detail);
  	            }
  	            else {
  	                callback(detail);
  	            }
  	        }
  	        promise._subscribers.length = 0;
  	    }
  	    function invokeCallback(settled, promise, callback, detail) {
  	        var hasCallback = isFunction(callback), value = void 0, error = void 0, succeeded = true;
  	        if (hasCallback) {
  	            try {
  	                value = callback(detail);
  	            }
  	            catch (e) {
  	                succeeded = false;
  	                error = e;
  	            }
  	            if (promise === value) {
  	                reject(promise, cannotReturnOwn());
  	                return;
  	            }
  	        }
  	        else {
  	            value = detail;
  	        }
  	        if (promise._state !== PENDING) ;
  	        else if (hasCallback && succeeded) {
  	            resolve(promise, value);
  	        }
  	        else if (succeeded === false) {
  	            reject(promise, error);
  	        }
  	        else if (settled === FULFILLED) {
  	            fulfill(promise, value);
  	        }
  	        else if (settled === REJECTED) {
  	            reject(promise, value);
  	        }
  	    }
  	    function initializePromise(promise, resolver) {
  	        try {
  	            resolver(function resolvePromise(value) {
  	                resolve(promise, value);
  	            }, function rejectPromise(reason) {
  	                reject(promise, reason);
  	            });
  	        }
  	        catch (e) {
  	            reject(promise, e);
  	        }
  	    }
  	    var id = 0;
  	    function nextId() {
  	        return id++;
  	    }
  	    function makePromise(promise) {
  	        promise[PROMISE_ID] = id++;
  	        promise._state = undefined;
  	        promise._result = undefined;
  	        promise._subscribers = [];
  	    }
  	    function validationError() {
  	        return new Error('Array Methods must be provided an Array');
  	    }
  	    var Enumerator = function () {
  	        function Enumerator(Constructor, input) {
  	            this._instanceConstructor = Constructor;
  	            this.promise = new Constructor(noop);
  	            if (!this.promise[PROMISE_ID]) {
  	                makePromise(this.promise);
  	            }
  	            if (isArray(input)) {
  	                this.length = input.length;
  	                this._remaining = input.length;
  	                this._result = new Array(this.length);
  	                if (this.length === 0) {
  	                    fulfill(this.promise, this._result);
  	                }
  	                else {
  	                    this.length = this.length || 0;
  	                    this._enumerate(input);
  	                    if (this._remaining === 0) {
  	                        fulfill(this.promise, this._result);
  	                    }
  	                }
  	            }
  	            else {
  	                reject(this.promise, validationError());
  	            }
  	        }
  	        Enumerator.prototype._enumerate = function _enumerate(input) {
  	            for (var i = 0; this._state === PENDING && i < input.length; i++) {
  	                this._eachEntry(input[i], i);
  	            }
  	        };
  	        Enumerator.prototype._eachEntry = function _eachEntry(entry, i) {
  	            var c = this._instanceConstructor;
  	            var resolve$$1 = c.resolve;
  	            if (resolve$$1 === resolve$1) {
  	                var _then = void 0;
  	                var error = void 0;
  	                var didError = false;
  	                try {
  	                    _then = entry.then;
  	                }
  	                catch (e) {
  	                    didError = true;
  	                    error = e;
  	                }
  	                if (_then === then && entry._state !== PENDING) {
  	                    this._settledAt(entry._state, i, entry._result);
  	                }
  	                else if (typeof _then !== 'function') {
  	                    this._remaining--;
  	                    this._result[i] = entry;
  	                }
  	                else if (c === Promise$1) {
  	                    var promise = new c(noop);
  	                    if (didError) {
  	                        reject(promise, error);
  	                    }
  	                    else {
  	                        handleMaybeThenable(promise, entry, _then);
  	                    }
  	                    this._willSettleAt(promise, i);
  	                }
  	                else {
  	                    this._willSettleAt(new c(function (resolve$$1) {
  	                        return resolve$$1(entry);
  	                    }), i);
  	                }
  	            }
  	            else {
  	                this._willSettleAt(resolve$$1(entry), i);
  	            }
  	        };
  	        Enumerator.prototype._settledAt = function _settledAt(state, i, value) {
  	            var promise = this.promise;
  	            if (promise._state === PENDING) {
  	                this._remaining--;
  	                if (state === REJECTED) {
  	                    reject(promise, value);
  	                }
  	                else {
  	                    this._result[i] = value;
  	                }
  	            }
  	            if (this._remaining === 0) {
  	                fulfill(promise, this._result);
  	            }
  	        };
  	        Enumerator.prototype._willSettleAt = function _willSettleAt(promise, i) {
  	            var enumerator = this;
  	            subscribe(promise, undefined, function (value) {
  	                return enumerator._settledAt(FULFILLED, i, value);
  	            }, function (reason) {
  	                return enumerator._settledAt(REJECTED, i, reason);
  	            });
  	        };
  	        return Enumerator;
  	    }();
  	    /**
  	      `Promise.all` accepts an array of promises, and returns a new promise which
  	      is fulfilled with an array of fulfillment values for the passed promises, or
  	      rejected with the reason of the first passed promise to be rejected. It casts all
  	      elements of the passed iterable to promises as it runs this algorithm.
  	    
  	      Example:
  	    
  	      ```javascript
  	      let promise1 = resolve(1);
  	      let promise2 = resolve(2);
  	      let promise3 = resolve(3);
  	      let promises = [ promise1, promise2, promise3 ];
  	    
  	      Promise.all(promises).then(function(array){
  	        // The array here would be [ 1, 2, 3 ];
  	      });
  	      ```
  	    
  	      If any of the `promises` given to `all` are rejected, the first promise
  	      that is rejected will be given as an argument to the returned promises's
  	      rejection handler. For example:
  	    
  	      Example:
  	    
  	      ```javascript
  	      let promise1 = resolve(1);
  	      let promise2 = reject(new Error("2"));
  	      let promise3 = reject(new Error("3"));
  	      let promises = [ promise1, promise2, promise3 ];
  	    
  	      Promise.all(promises).then(function(array){
  	        // Code here never runs because there are rejected promises!
  	      }, function(error) {
  	        // error.message === "2"
  	      });
  	      ```
  	    
  	      @method all
  	      @static
  	      @param {Array} entries array of promises
  	      @param {String} label optional string for labeling the promise.
  	      Useful for tooling.
  	      @return {Promise} promise that is fulfilled when all `promises` have been
  	      fulfilled, or rejected if any of them become rejected.
  	      @static
  	    */
  	    function all(entries) {
  	        return new Enumerator(this, entries).promise;
  	    }
  	    /**
  	      `Promise.race` returns a new promise which is settled in the same way as the
  	      first passed promise to settle.
  	    
  	      Example:
  	    
  	      ```javascript
  	      let promise1 = new Promise(function(resolve, reject){
  	        setTimeout(function(){
  	          resolve('promise 1');
  	        }, 200);
  	      });
  	    
  	      let promise2 = new Promise(function(resolve, reject){
  	        setTimeout(function(){
  	          resolve('promise 2');
  	        }, 100);
  	      });
  	    
  	      Promise.race([promise1, promise2]).then(function(result){
  	        // result === 'promise 2' because it was resolved before promise1
  	        // was resolved.
  	      });
  	      ```
  	    
  	      `Promise.race` is deterministic in that only the state of the first
  	      settled promise matters. For example, even if other promises given to the
  	      `promises` array argument are resolved, but the first settled promise has
  	      become rejected before the other promises became fulfilled, the returned
  	      promise will become rejected:
  	    
  	      ```javascript
  	      let promise1 = new Promise(function(resolve, reject){
  	        setTimeout(function(){
  	          resolve('promise 1');
  	        }, 200);
  	      });
  	    
  	      let promise2 = new Promise(function(resolve, reject){
  	        setTimeout(function(){
  	          reject(new Error('promise 2'));
  	        }, 100);
  	      });
  	    
  	      Promise.race([promise1, promise2]).then(function(result){
  	        // Code here never runs
  	      }, function(reason){
  	        // reason.message === 'promise 2' because promise 2 became rejected before
  	        // promise 1 became fulfilled
  	      });
  	      ```
  	    
  	      An example real-world use case is implementing timeouts:
  	    
  	      ```javascript
  	      Promise.race([ajax('foo.json'), timeout(5000)])
  	      ```
  	    
  	      @method race
  	      @static
  	      @param {Array} promises array of promises to observe
  	      Useful for tooling.
  	      @return {Promise} a promise which settles in the same way as the first passed
  	      promise to settle.
  	    */
  	    function race(entries) {
  	        /*jshint validthis:true */
  	        var Constructor = this;
  	        if (!isArray(entries)) {
  	            return new Constructor(function (_, reject) {
  	                return reject(new TypeError('You must pass an array to race.'));
  	            });
  	        }
  	        else {
  	            return new Constructor(function (resolve, reject) {
  	                var length = entries.length;
  	                for (var i = 0; i < length; i++) {
  	                    Constructor.resolve(entries[i]).then(resolve, reject);
  	                }
  	            });
  	        }
  	    }
  	    /**
  	      `Promise.reject` returns a promise rejected with the passed `reason`.
  	      It is shorthand for the following:
  	    
  	      ```javascript
  	      let promise = new Promise(function(resolve, reject){
  	        reject(new Error('WHOOPS'));
  	      });
  	    
  	      promise.then(function(value){
  	        // Code here doesn't run because the promise is rejected!
  	      }, function(reason){
  	        // reason.message === 'WHOOPS'
  	      });
  	      ```
  	    
  	      Instead of writing the above, your code now simply becomes the following:
  	    
  	      ```javascript
  	      let promise = Promise.reject(new Error('WHOOPS'));
  	    
  	      promise.then(function(value){
  	        // Code here doesn't run because the promise is rejected!
  	      }, function(reason){
  	        // reason.message === 'WHOOPS'
  	      });
  	      ```
  	    
  	      @method reject
  	      @static
  	      @param {Any} reason value that the returned promise will be rejected with.
  	      Useful for tooling.
  	      @return {Promise} a promise rejected with the given `reason`.
  	    */
  	    function reject$1(reason) {
  	        /*jshint validthis:true */
  	        var Constructor = this;
  	        var promise = new Constructor(noop);
  	        reject(promise, reason);
  	        return promise;
  	    }
  	    function needsResolver() {
  	        throw new TypeError('You must pass a resolver function as the first argument to the promise constructor');
  	    }
  	    function needsNew() {
  	        throw new TypeError("Failed to construct 'Promise': Please use the 'new' operator, this object constructor cannot be called as a function.");
  	    }
  	    /**
  	      Promise objects represent the eventual result of an asynchronous operation. The
  	      primary way of interacting with a promise is through its `then` method, which
  	      registers callbacks to receive either a promise's eventual value or the reason
  	      why the promise cannot be fulfilled.
  	    
  	      Terminology
  	      -----------
  	    
  	      - `promise` is an object or function with a `then` method whose behavior conforms to this specification.
  	      - `thenable` is an object or function that defines a `then` method.
  	      - `value` is any legal JavaScript value (including undefined, a thenable, or a promise).
  	      - `exception` is a value that is thrown using the throw statement.
  	      - `reason` is a value that indicates why a promise was rejected.
  	      - `settled` the final resting state of a promise, fulfilled or rejected.
  	    
  	      A promise can be in one of three states: pending, fulfilled, or rejected.
  	    
  	      Promises that are fulfilled have a fulfillment value and are in the fulfilled
  	      state.  Promises that are rejected have a rejection reason and are in the
  	      rejected state.  A fulfillment value is never a thenable.
  	    
  	      Promises can also be said to *resolve* a value.  If this value is also a
  	      promise, then the original promise's settled state will match the value's
  	      settled state.  So a promise that *resolves* a promise that rejects will
  	      itself reject, and a promise that *resolves* a promise that fulfills will
  	      itself fulfill.
  	    
  	    
  	      Basic Usage:
  	      ------------
  	    
  	      ```js
  	      let promise = new Promise(function(resolve, reject) {
  	        // on success
  	        resolve(value);
  	    
  	        // on failure
  	        reject(reason);
  	      });
  	    
  	      promise.then(function(value) {
  	        // on fulfillment
  	      }, function(reason) {
  	        // on rejection
  	      });
  	      ```
  	    
  	      Advanced Usage:
  	      ---------------
  	    
  	      Promises shine when abstracting away asynchronous interactions such as
  	      `XMLHttpRequest`s.
  	    
  	      ```js
  	      function getJSON(url) {
  	        return new Promise(function(resolve, reject){
  	          let xhr = new XMLHttpRequest();
  	    
  	          xhr.open('GET', url);
  	          xhr.onreadystatechange = handler;
  	          xhr.responseType = 'json';
  	          xhr.setRequestHeader('Accept', 'application/json');
  	          xhr.send();
  	    
  	          function handler() {
  	            if (this.readyState === this.DONE) {
  	              if (this.status === 200) {
  	                resolve(this.response);
  	              } else {
  	                reject(new Error('getJSON: `' + url + '` failed with status: [' + this.status + ']'));
  	              }
  	            }
  	          };
  	        });
  	      }
  	    
  	      getJSON('/posts.json').then(function(json) {
  	        // on fulfillment
  	      }, function(reason) {
  	        // on rejection
  	      });
  	      ```
  	    
  	      Unlike callbacks, promises are great composable primitives.
  	    
  	      ```js
  	      Promise.all([
  	        getJSON('/posts'),
  	        getJSON('/comments')
  	      ]).then(function(values){
  	        values[0] // => postsJSON
  	        values[1] // => commentsJSON
  	    
  	        return values;
  	      });
  	      ```
  	    
  	      @class Promise
  	      @param {Function} resolver
  	      Useful for tooling.
  	      @constructor
  	    */
  	    var Promise$1 = function () {
  	        function Promise(resolver) {
  	            this[PROMISE_ID] = nextId();
  	            this._result = this._state = undefined;
  	            this._subscribers = [];
  	            if (noop !== resolver) {
  	                typeof resolver !== 'function' && needsResolver();
  	                this instanceof Promise ? initializePromise(this, resolver) : needsNew();
  	            }
  	        }
  	        /**
  	        The primary way of interacting with a promise is through its `then` method,
  	        which registers callbacks to receive either a promise's eventual value or the
  	        reason why the promise cannot be fulfilled.
  	         ```js
  	        findUser().then(function(user){
  	          // user is available
  	        }, function(reason){
  	          // user is unavailable, and you are given the reason why
  	        });
  	        ```
  	         Chaining
  	        --------
  	         The return value of `then` is itself a promise.  This second, 'downstream'
  	        promise is resolved with the return value of the first promise's fulfillment
  	        or rejection handler, or rejected if the handler throws an exception.
  	         ```js
  	        findUser().then(function (user) {
  	          return user.name;
  	        }, function (reason) {
  	          return 'default name';
  	        }).then(function (userName) {
  	          // If `findUser` fulfilled, `userName` will be the user's name, otherwise it
  	          // will be `'default name'`
  	        });
  	         findUser().then(function (user) {
  	          throw new Error('Found user, but still unhappy');
  	        }, function (reason) {
  	          throw new Error('`findUser` rejected and we're unhappy');
  	        }).then(function (value) {
  	          // never reached
  	        }, function (reason) {
  	          // if `findUser` fulfilled, `reason` will be 'Found user, but still unhappy'.
  	          // If `findUser` rejected, `reason` will be '`findUser` rejected and we're unhappy'.
  	        });
  	        ```
  	        If the downstream promise does not specify a rejection handler, rejection reasons will be propagated further downstream.
  	         ```js
  	        findUser().then(function (user) {
  	          throw new PedagogicalException('Upstream error');
  	        }).then(function (value) {
  	          // never reached
  	        }).then(function (value) {
  	          // never reached
  	        }, function (reason) {
  	          // The `PedgagocialException` is propagated all the way down to here
  	        });
  	        ```
  	         Assimilation
  	        ------------
  	         Sometimes the value you want to propagate to a downstream promise can only be
  	        retrieved asynchronously. This can be achieved by returning a promise in the
  	        fulfillment or rejection handler. The downstream promise will then be pending
  	        until the returned promise is settled. This is called *assimilation*.
  	         ```js
  	        findUser().then(function (user) {
  	          return findCommentsByAuthor(user);
  	        }).then(function (comments) {
  	          // The user's comments are now available
  	        });
  	        ```
  	         If the assimliated promise rejects, then the downstream promise will also reject.
  	         ```js
  	        findUser().then(function (user) {
  	          return findCommentsByAuthor(user);
  	        }).then(function (comments) {
  	          // If `findCommentsByAuthor` fulfills, we'll have the value here
  	        }, function (reason) {
  	          // If `findCommentsByAuthor` rejects, we'll have the reason here
  	        });
  	        ```
  	         Simple Example
  	        --------------
  	         Synchronous Example
  	         ```javascript
  	        let result;
  	         try {
  	          result = findResult();
  	          // success
  	        } catch(reason) {
  	          // failure
  	        }
  	        ```
  	         Errback Example
  	         ```js
  	        findResult(function(result, err){
  	          if (err) {
  	            // failure
  	          } else {
  	            // success
  	          }
  	        });
  	        ```
  	         Promise Example;
  	         ```javascript
  	        findResult().then(function(result){
  	          // success
  	        }, function(reason){
  	          // failure
  	        });
  	        ```
  	         Advanced Example
  	        --------------
  	         Synchronous Example
  	         ```javascript
  	        let author, books;
  	         try {
  	          author = findAuthor();
  	          books  = findBooksByAuthor(author);
  	          // success
  	        } catch(reason) {
  	          // failure
  	        }
  	        ```
  	         Errback Example
  	         ```js
  	         function foundBooks(books) {
  	         }
  	         function failure(reason) {
  	         }
  	         findAuthor(function(author, err){
  	          if (err) {
  	            failure(err);
  	            // failure
  	          } else {
  	            try {
  	              findBoooksByAuthor(author, function(books, err) {
  	                if (err) {
  	                  failure(err);
  	                } else {
  	                  try {
  	                    foundBooks(books);
  	                  } catch(reason) {
  	                    failure(reason);
  	                  }
  	                }
  	              });
  	            } catch(error) {
  	              failure(err);
  	            }
  	            // success
  	          }
  	        });
  	        ```
  	         Promise Example;
  	         ```javascript
  	        findAuthor().
  	          then(findBooksByAuthor).
  	          then(function(books){
  	            // found books
  	        }).catch(function(reason){
  	          // something went wrong
  	        });
  	        ```
  	         @method then
  	        @param {Function} onFulfilled
  	        @param {Function} onRejected
  	        Useful for tooling.
  	        @return {Promise}
  	        */
  	        /**
  	        `catch` is simply sugar for `then(undefined, onRejection)` which makes it the same
  	        as the catch block of a try/catch statement.
  	        ```js
  	        function findAuthor(){
  	        throw new Error('couldn't find that author');
  	        }
  	        // synchronous
  	        try {
  	        findAuthor();
  	        } catch(reason) {
  	        // something went wrong
  	        }
  	        // async with promises
  	        findAuthor().catch(function(reason){
  	        // something went wrong
  	        });
  	        ```
  	        @method catch
  	        @param {Function} onRejection
  	        Useful for tooling.
  	        @return {Promise}
  	        */
  	        Promise.prototype.catch = function _catch(onRejection) {
  	            return this.then(null, onRejection);
  	        };
  	        /**
  	          `finally` will be invoked regardless of the promise's fate just as native
  	          try/catch/finally behaves
  	        
  	          Synchronous example:
  	        
  	          ```js
  	          findAuthor() {
  	            if (Math.random() > 0.5) {
  	              throw new Error();
  	            }
  	            return new Author();
  	          }
  	        
  	          try {
  	            return findAuthor(); // succeed or fail
  	          } catch(error) {
  	            return findOtherAuther();
  	          } finally {
  	            // always runs
  	            // doesn't affect the return value
  	          }
  	          ```
  	        
  	          Asynchronous example:
  	        
  	          ```js
  	          findAuthor().catch(function(reason){
  	            return findOtherAuther();
  	          }).finally(function(){
  	            // author was either found, or not
  	          });
  	          ```
  	        
  	          @method finally
  	          @param {Function} callback
  	          @return {Promise}
  	        */
  	        Promise.prototype.finally = function _finally(callback) {
  	            var promise = this;
  	            var constructor = promise.constructor;
  	            if (isFunction(callback)) {
  	                return promise.then(function (value) {
  	                    return constructor.resolve(callback()).then(function () {
  	                        return value;
  	                    });
  	                }, function (reason) {
  	                    return constructor.resolve(callback()).then(function () {
  	                        throw reason;
  	                    });
  	                });
  	            }
  	            return promise.then(callback, callback);
  	        };
  	        return Promise;
  	    }();
  	    Promise$1.prototype.then = then;
  	    Promise$1.all = all;
  	    Promise$1.race = race;
  	    Promise$1.resolve = resolve$1;
  	    Promise$1.reject = reject$1;
  	    Promise$1._setScheduler = setScheduler;
  	    Promise$1._setAsap = setAsap;
  	    Promise$1._asap = asap;
  	    /*global self*/
  	    function polyfill() {
  	        var local = void 0;
  	        if (typeof __webpack_require__.g !== 'undefined') {
  	            local = __webpack_require__.g;
  	        }
  	        else if (typeof self !== 'undefined') {
  	            local = self;
  	        }
  	        else {
  	            try {
  	                local = Function('return this')();
  	            }
  	            catch (e) {
  	                throw new Error('polyfill failed because global object is unavailable in this environment');
  	            }
  	        }
  	        var P = local.Promise;
  	        if (P) {
  	            var promiseToString = null;
  	            try {
  	                promiseToString = Object.prototype.toString.call(P.resolve());
  	            }
  	            catch (e) {
  	                // silently ignored
  	            }
  	            if (promiseToString === '[object Promise]' && !P.cast) {
  	                return;
  	            }
  	        }
  	        local.Promise = Promise$1;
  	    }
  	    // Strange compat..
  	    Promise$1.polyfill = polyfill;
  	    Promise$1.Promise = Promise$1;
  	    return Promise$1;
  	})));


  	/***/ }),

  	/***/ "./node_modules/events/events.js":
  	/*!***************************************!*\
  	  !*** ./node_modules/events/events.js ***!
  	  \***************************************/
  	/***/ (function(module) {
  	// Copyright Joyent, Inc. and other Node contributors.
  	//
  	// Permission is hereby granted, free of charge, to any person obtaining a
  	// copy of this software and associated documentation files (the
  	// "Software"), to deal in the Software without restriction, including
  	// without limitation the rights to use, copy, modify, merge, publish,
  	// distribute, sublicense, and/or sell copies of the Software, and to permit
  	// persons to whom the Software is furnished to do so, subject to the
  	// following conditions:
  	//
  	// The above copyright notice and this permission notice shall be included
  	// in all copies or substantial portions of the Software.
  	//
  	// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
  	// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
  	// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
  	// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
  	// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
  	// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
  	// USE OR OTHER DEALINGS IN THE SOFTWARE.

  	var R = typeof Reflect === 'object' ? Reflect : null;
  	var ReflectApply = R && typeof R.apply === 'function'
  	    ? R.apply
  	    : function ReflectApply(target, receiver, args) {
  	        return Function.prototype.apply.call(target, receiver, args);
  	    };
  	var ReflectOwnKeys;
  	if (R && typeof R.ownKeys === 'function') {
  	    ReflectOwnKeys = R.ownKeys;
  	}
  	else if (Object.getOwnPropertySymbols) {
  	    ReflectOwnKeys = function ReflectOwnKeys(target) {
  	        return Object.getOwnPropertyNames(target)
  	            .concat(Object.getOwnPropertySymbols(target));
  	    };
  	}
  	else {
  	    ReflectOwnKeys = function ReflectOwnKeys(target) {
  	        return Object.getOwnPropertyNames(target);
  	    };
  	}
  	function ProcessEmitWarning(warning) {
  	    if (console && console.warn)
  	        console.warn(warning);
  	}
  	var NumberIsNaN = Number.isNaN || function NumberIsNaN(value) {
  	    return value !== value;
  	};
  	function EventEmitter() {
  	    EventEmitter.init.call(this);
  	}
  	module.exports = EventEmitter;
  	module.exports.once = once;
  	// Backwards-compat with node 0.10.x
  	EventEmitter.EventEmitter = EventEmitter;
  	EventEmitter.prototype._events = undefined;
  	EventEmitter.prototype._eventsCount = 0;
  	EventEmitter.prototype._maxListeners = undefined;
  	// By default EventEmitters will print a warning if more than 10 listeners are
  	// added to it. This is a useful default which helps finding memory leaks.
  	var defaultMaxListeners = 10;
  	function checkListener(listener) {
  	    if (typeof listener !== 'function') {
  	        throw new TypeError('The "listener" argument must be of type Function. Received type ' + typeof listener);
  	    }
  	}
  	Object.defineProperty(EventEmitter, 'defaultMaxListeners', {
  	    enumerable: true,
  	    get: function () {
  	        return defaultMaxListeners;
  	    },
  	    set: function (arg) {
  	        if (typeof arg !== 'number' || arg < 0 || NumberIsNaN(arg)) {
  	            throw new RangeError('The value of "defaultMaxListeners" is out of range. It must be a non-negative number. Received ' + arg + '.');
  	        }
  	        defaultMaxListeners = arg;
  	    }
  	});
  	EventEmitter.init = function () {
  	    if (this._events === undefined ||
  	        this._events === Object.getPrototypeOf(this)._events) {
  	        this._events = Object.create(null);
  	        this._eventsCount = 0;
  	    }
  	    this._maxListeners = this._maxListeners || undefined;
  	};
  	// Obviously not all Emitters should be limited to 10. This function allows
  	// that to be increased. Set to zero for unlimited.
  	EventEmitter.prototype.setMaxListeners = function setMaxListeners(n) {
  	    if (typeof n !== 'number' || n < 0 || NumberIsNaN(n)) {
  	        throw new RangeError('The value of "n" is out of range. It must be a non-negative number. Received ' + n + '.');
  	    }
  	    this._maxListeners = n;
  	    return this;
  	};
  	function _getMaxListeners(that) {
  	    if (that._maxListeners === undefined)
  	        return EventEmitter.defaultMaxListeners;
  	    return that._maxListeners;
  	}
  	EventEmitter.prototype.getMaxListeners = function getMaxListeners() {
  	    return _getMaxListeners(this);
  	};
  	EventEmitter.prototype.emit = function emit(type) {
  	    var args = [];
  	    for (var i = 1; i < arguments.length; i++)
  	        args.push(arguments[i]);
  	    var doError = (type === 'error');
  	    var events = this._events;
  	    if (events !== undefined)
  	        doError = (doError && events.error === undefined);
  	    else if (!doError)
  	        return false;
  	    // If there is no 'error' event listener then throw.
  	    if (doError) {
  	        var er;
  	        if (args.length > 0)
  	            er = args[0];
  	        if (er instanceof Error) {
  	            // Note: The comments on the `throw` lines are intentional, they show
  	            // up in Node's output if this results in an unhandled exception.
  	            throw er; // Unhandled 'error' event
  	        }
  	        // At least give some kind of context to the user
  	        var err = new Error('Unhandled error.' + (er ? ' (' + er.message + ')' : ''));
  	        err.context = er;
  	        throw err; // Unhandled 'error' event
  	    }
  	    var handler = events[type];
  	    if (handler === undefined)
  	        return false;
  	    if (typeof handler === 'function') {
  	        ReflectApply(handler, this, args);
  	    }
  	    else {
  	        var len = handler.length;
  	        var listeners = arrayClone(handler, len);
  	        for (var i = 0; i < len; ++i)
  	            ReflectApply(listeners[i], this, args);
  	    }
  	    return true;
  	};
  	function _addListener(target, type, listener, prepend) {
  	    var m;
  	    var events;
  	    var existing;
  	    checkListener(listener);
  	    events = target._events;
  	    if (events === undefined) {
  	        events = target._events = Object.create(null);
  	        target._eventsCount = 0;
  	    }
  	    else {
  	        // To avoid recursion in the case that type === "newListener"! Before
  	        // adding it to the listeners, first emit "newListener".
  	        if (events.newListener !== undefined) {
  	            target.emit('newListener', type, listener.listener ? listener.listener : listener);
  	            // Re-assign `events` because a newListener handler could have caused the
  	            // this._events to be assigned to a new object
  	            events = target._events;
  	        }
  	        existing = events[type];
  	    }
  	    if (existing === undefined) {
  	        // Optimize the case of one listener. Don't need the extra array object.
  	        existing = events[type] = listener;
  	        ++target._eventsCount;
  	    }
  	    else {
  	        if (typeof existing === 'function') {
  	            // Adding the second element, need to change to array.
  	            existing = events[type] =
  	                prepend ? [listener, existing] : [existing, listener];
  	            // If we've already got an array, just append.
  	        }
  	        else if (prepend) {
  	            existing.unshift(listener);
  	        }
  	        else {
  	            existing.push(listener);
  	        }
  	        // Check for listener leak
  	        m = _getMaxListeners(target);
  	        if (m > 0 && existing.length > m && !existing.warned) {
  	            existing.warned = true;
  	            // No error code for this since it is a Warning
  	            // eslint-disable-next-line no-restricted-syntax
  	            var w = new Error('Possible EventEmitter memory leak detected. ' +
  	                existing.length + ' ' + String(type) + ' listeners ' +
  	                'added. Use emitter.setMaxListeners() to ' +
  	                'increase limit');
  	            w.name = 'MaxListenersExceededWarning';
  	            w.emitter = target;
  	            w.type = type;
  	            w.count = existing.length;
  	            ProcessEmitWarning(w);
  	        }
  	    }
  	    return target;
  	}
  	EventEmitter.prototype.addListener = function addListener(type, listener) {
  	    return _addListener(this, type, listener, false);
  	};
  	EventEmitter.prototype.on = EventEmitter.prototype.addListener;
  	EventEmitter.prototype.prependListener =
  	    function prependListener(type, listener) {
  	        return _addListener(this, type, listener, true);
  	    };
  	function onceWrapper() {
  	    if (!this.fired) {
  	        this.target.removeListener(this.type, this.wrapFn);
  	        this.fired = true;
  	        if (arguments.length === 0)
  	            return this.listener.call(this.target);
  	        return this.listener.apply(this.target, arguments);
  	    }
  	}
  	function _onceWrap(target, type, listener) {
  	    var state = { fired: false, wrapFn: undefined, target: target, type: type, listener: listener };
  	    var wrapped = onceWrapper.bind(state);
  	    wrapped.listener = listener;
  	    state.wrapFn = wrapped;
  	    return wrapped;
  	}
  	EventEmitter.prototype.once = function once(type, listener) {
  	    checkListener(listener);
  	    this.on(type, _onceWrap(this, type, listener));
  	    return this;
  	};
  	EventEmitter.prototype.prependOnceListener =
  	    function prependOnceListener(type, listener) {
  	        checkListener(listener);
  	        this.prependListener(type, _onceWrap(this, type, listener));
  	        return this;
  	    };
  	// Emits a 'removeListener' event if and only if the listener was removed.
  	EventEmitter.prototype.removeListener =
  	    function removeListener(type, listener) {
  	        var list, events, position, i, originalListener;
  	        checkListener(listener);
  	        events = this._events;
  	        if (events === undefined)
  	            return this;
  	        list = events[type];
  	        if (list === undefined)
  	            return this;
  	        if (list === listener || list.listener === listener) {
  	            if (--this._eventsCount === 0)
  	                this._events = Object.create(null);
  	            else {
  	                delete events[type];
  	                if (events.removeListener)
  	                    this.emit('removeListener', type, list.listener || listener);
  	            }
  	        }
  	        else if (typeof list !== 'function') {
  	            position = -1;
  	            for (i = list.length - 1; i >= 0; i--) {
  	                if (list[i] === listener || list[i].listener === listener) {
  	                    originalListener = list[i].listener;
  	                    position = i;
  	                    break;
  	                }
  	            }
  	            if (position < 0)
  	                return this;
  	            if (position === 0)
  	                list.shift();
  	            else {
  	                spliceOne(list, position);
  	            }
  	            if (list.length === 1)
  	                events[type] = list[0];
  	            if (events.removeListener !== undefined)
  	                this.emit('removeListener', type, originalListener || listener);
  	        }
  	        return this;
  	    };
  	EventEmitter.prototype.off = EventEmitter.prototype.removeListener;
  	EventEmitter.prototype.removeAllListeners =
  	    function removeAllListeners(type) {
  	        var listeners, events, i;
  	        events = this._events;
  	        if (events === undefined)
  	            return this;
  	        // not listening for removeListener, no need to emit
  	        if (events.removeListener === undefined) {
  	            if (arguments.length === 0) {
  	                this._events = Object.create(null);
  	                this._eventsCount = 0;
  	            }
  	            else if (events[type] !== undefined) {
  	                if (--this._eventsCount === 0)
  	                    this._events = Object.create(null);
  	                else
  	                    delete events[type];
  	            }
  	            return this;
  	        }
  	        // emit removeListener for all listeners on all events
  	        if (arguments.length === 0) {
  	            var keys = Object.keys(events);
  	            var key;
  	            for (i = 0; i < keys.length; ++i) {
  	                key = keys[i];
  	                if (key === 'removeListener')
  	                    continue;
  	                this.removeAllListeners(key);
  	            }
  	            this.removeAllListeners('removeListener');
  	            this._events = Object.create(null);
  	            this._eventsCount = 0;
  	            return this;
  	        }
  	        listeners = events[type];
  	        if (typeof listeners === 'function') {
  	            this.removeListener(type, listeners);
  	        }
  	        else if (listeners !== undefined) {
  	            // LIFO order
  	            for (i = listeners.length - 1; i >= 0; i--) {
  	                this.removeListener(type, listeners[i]);
  	            }
  	        }
  	        return this;
  	    };
  	function _listeners(target, type, unwrap) {
  	    var events = target._events;
  	    if (events === undefined)
  	        return [];
  	    var evlistener = events[type];
  	    if (evlistener === undefined)
  	        return [];
  	    if (typeof evlistener === 'function')
  	        return unwrap ? [evlistener.listener || evlistener] : [evlistener];
  	    return unwrap ?
  	        unwrapListeners(evlistener) : arrayClone(evlistener, evlistener.length);
  	}
  	EventEmitter.prototype.listeners = function listeners(type) {
  	    return _listeners(this, type, true);
  	};
  	EventEmitter.prototype.rawListeners = function rawListeners(type) {
  	    return _listeners(this, type, false);
  	};
  	EventEmitter.listenerCount = function (emitter, type) {
  	    if (typeof emitter.listenerCount === 'function') {
  	        return emitter.listenerCount(type);
  	    }
  	    else {
  	        return listenerCount.call(emitter, type);
  	    }
  	};
  	EventEmitter.prototype.listenerCount = listenerCount;
  	function listenerCount(type) {
  	    var events = this._events;
  	    if (events !== undefined) {
  	        var evlistener = events[type];
  	        if (typeof evlistener === 'function') {
  	            return 1;
  	        }
  	        else if (evlistener !== undefined) {
  	            return evlistener.length;
  	        }
  	    }
  	    return 0;
  	}
  	EventEmitter.prototype.eventNames = function eventNames() {
  	    return this._eventsCount > 0 ? ReflectOwnKeys(this._events) : [];
  	};
  	function arrayClone(arr, n) {
  	    var copy = new Array(n);
  	    for (var i = 0; i < n; ++i)
  	        copy[i] = arr[i];
  	    return copy;
  	}
  	function spliceOne(list, index) {
  	    for (; index + 1 < list.length; index++)
  	        list[index] = list[index + 1];
  	    list.pop();
  	}
  	function unwrapListeners(arr) {
  	    var ret = new Array(arr.length);
  	    for (var i = 0; i < ret.length; ++i) {
  	        ret[i] = arr[i].listener || arr[i];
  	    }
  	    return ret;
  	}
  	function once(emitter, name) {
  	    return new Promise(function (resolve, reject) {
  	        function errorListener(err) {
  	            emitter.removeListener(name, resolver);
  	            reject(err);
  	        }
  	        function resolver() {
  	            if (typeof emitter.removeListener === 'function') {
  	                emitter.removeListener('error', errorListener);
  	            }
  	            resolve([].slice.call(arguments));
  	        }
  	        eventTargetAgnosticAddListener(emitter, name, resolver, { once: true });
  	        if (name !== 'error') {
  	            addErrorHandlerIfEventEmitter(emitter, errorListener, { once: true });
  	        }
  	    });
  	}
  	function addErrorHandlerIfEventEmitter(emitter, handler, flags) {
  	    if (typeof emitter.on === 'function') {
  	        eventTargetAgnosticAddListener(emitter, 'error', handler, flags);
  	    }
  	}
  	function eventTargetAgnosticAddListener(emitter, name, listener, flags) {
  	    if (typeof emitter.on === 'function') {
  	        if (flags.once) {
  	            emitter.once(name, listener);
  	        }
  	        else {
  	            emitter.on(name, listener);
  	        }
  	    }
  	    else if (typeof emitter.addEventListener === 'function') {
  	        // EventTarget does not have `error` event semantics like Node
  	        // EventEmitters, we do not listen for `error` events here.
  	        emitter.addEventListener(name, function wrapListener(arg) {
  	            // IE does not have builtin `{ once: true }` support so we
  	            // have to do it manually.
  	            if (flags.once) {
  	                emitter.removeEventListener(name, wrapListener);
  	            }
  	            listener(arg);
  	        });
  	    }
  	    else {
  	        throw new TypeError('The "emitter" argument must be of type EventEmitter. Received type ' + typeof emitter);
  	    }
  	}


  	/***/ }),

  	/***/ "./node_modules/webworkify-webpack/index.js":
  	/*!**************************************************!*\
  	  !*** ./node_modules/webworkify-webpack/index.js ***!
  	  \**************************************************/
  	/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

  	function webpackBootstrapFunc(modules) {
  	    /******/ // The module cache
  	    /******/ var installedModules = {};
  	    /******/ // The require function
  	    /******/ function __nested_webpack_require_164__(moduleId) {
  	        /******/ // Check if module is in cache
  	        /******/ if (installedModules[moduleId])
  	            /******/ return installedModules[moduleId].exports;
  	        /******/ // Create a new module (and put it into the cache)
  	        /******/ var module = installedModules[moduleId] = {
  	            /******/ i: moduleId,
  	            /******/ l: false,
  	            /******/ exports: {}
  	            /******/ 
  	        };
  	        /******/ // Execute the module function
  	        /******/ modules[moduleId].call(module.exports, module, module.exports, __nested_webpack_require_164__);
  	        /******/ // Flag the module as loaded
  	        /******/ module.l = true;
  	        /******/ // Return the exports of the module
  	        /******/ return module.exports;
  	        /******/ 
  	    }
  	    /******/ // expose the modules object (__webpack_modules__)
  	    /******/ __nested_webpack_require_164__.m = modules;
  	    /******/ // expose the module cache
  	    /******/ __nested_webpack_require_164__.c = installedModules;
  	    /******/ // identity function for calling harmony imports with the correct context
  	    /******/ __nested_webpack_require_164__.i = function (value) { return value; };
  	    /******/ // define getter function for harmony exports
  	    /******/ __nested_webpack_require_164__.d = function (exports, name, getter) {
  	        /******/ if (!__nested_webpack_require_164__.o(exports, name)) {
  	            /******/ Object.defineProperty(exports, name, {
  	                /******/ configurable: false,
  	                /******/ enumerable: true,
  	                /******/ get: getter
  	                /******/ 
  	            });
  	            /******/ }
  	        /******/ 
  	    };
  	    /******/ // define __esModule on exports
  	    /******/ __nested_webpack_require_164__.r = function (exports) {
  	        /******/ Object.defineProperty(exports, '__esModule', { value: true });
  	        /******/ 
  	    };
  	    /******/ // getDefaultExport function for compatibility with non-harmony modules
  	    /******/ __nested_webpack_require_164__.n = function (module) {
  	        /******/ var getter = module && module.__esModule ?
  	            /******/ function getDefault() { return module['default']; } :
  	            /******/ function getModuleExports() { return module; };
  	        /******/ __nested_webpack_require_164__.d(getter, 'a', getter);
  	        /******/ return getter;
  	        /******/ 
  	    };
  	    /******/ // Object.prototype.hasOwnProperty.call
  	    /******/ __nested_webpack_require_164__.o = function (object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
  	    /******/ // __webpack_public_path__
  	    /******/ __nested_webpack_require_164__.p = "/";
  	    /******/ // on error function for async loading
  	    /******/ __nested_webpack_require_164__.oe = function (err) { console.error(err); throw err; };
  	    var f = __nested_webpack_require_164__(__nested_webpack_require_164__.s = ENTRY_MODULE);
  	    return f.default || f; // try to call default if defined to also support babel esmodule exports
  	}
  	var moduleNameReqExp = '[\\.|\\-|\\+|\\w|\/|@]+';
  	var dependencyRegExp = '\\(\\s*(\/\\*.*?\\*\/)?\\s*.*?(' + moduleNameReqExp + ').*?\\)'; // additional chars when output.pathinfo is true
  	// http://stackoverflow.com/a/2593661/130442
  	function quoteRegExp(str) {
  	    return (str + '').replace(/[.?*+^$[\]\\(){}|-]/g, '\\$&');
  	}
  	function isNumeric(n) {
  	    return !isNaN(1 * n); // 1 * n converts integers, integers as string ("123"), 1e3 and "1e3" to integers and strings to NaN
  	}
  	function getModuleDependencies(sources, module, queueName) {
  	    var retval = {};
  	    retval[queueName] = [];
  	    var fnString = module.toString();
  	    var wrapperSignature = fnString.match(/^function\s?\w*\(\w+,\s*\w+,\s*(\w+)\)/);
  	    if (!wrapperSignature)
  	        return retval;
  	    var webpackRequireName = wrapperSignature[1];
  	    // main bundle deps
  	    var re = new RegExp('(\\\\n|\\W)' + quoteRegExp(webpackRequireName) + dependencyRegExp, 'g');
  	    var match;
  	    while ((match = re.exec(fnString))) {
  	        if (match[3] === 'dll-reference')
  	            continue;
  	        retval[queueName].push(match[3]);
  	    }
  	    // dll deps
  	    re = new RegExp('\\(' + quoteRegExp(webpackRequireName) + '\\("(dll-reference\\s(' + moduleNameReqExp + '))"\\)\\)' + dependencyRegExp, 'g');
  	    while ((match = re.exec(fnString))) {
  	        if (!sources[match[2]]) {
  	            retval[queueName].push(match[1]);
  	            sources[match[2]] = __webpack_require__(match[1]).m;
  	        }
  	        retval[match[2]] = retval[match[2]] || [];
  	        retval[match[2]].push(match[4]);
  	    }
  	    // convert 1e3 back to 1000 - this can be important after uglify-js converted 1000 to 1e3
  	    var keys = Object.keys(retval);
  	    for (var i = 0; i < keys.length; i++) {
  	        for (var j = 0; j < retval[keys[i]].length; j++) {
  	            if (isNumeric(retval[keys[i]][j])) {
  	                retval[keys[i]][j] = 1 * retval[keys[i]][j];
  	            }
  	        }
  	    }
  	    return retval;
  	}
  	function hasValuesInQueues(queues) {
  	    var keys = Object.keys(queues);
  	    return keys.reduce(function (hasValues, key) {
  	        return hasValues || queues[key].length > 0;
  	    }, false);
  	}
  	function getRequiredModules(sources, moduleId) {
  	    var modulesQueue = {
  	        main: [moduleId]
  	    };
  	    var requiredModules = {
  	        main: []
  	    };
  	    var seenModules = {
  	        main: {}
  	    };
  	    while (hasValuesInQueues(modulesQueue)) {
  	        var queues = Object.keys(modulesQueue);
  	        for (var i = 0; i < queues.length; i++) {
  	            var queueName = queues[i];
  	            var queue = modulesQueue[queueName];
  	            var moduleToCheck = queue.pop();
  	            seenModules[queueName] = seenModules[queueName] || {};
  	            if (seenModules[queueName][moduleToCheck] || !sources[queueName][moduleToCheck])
  	                continue;
  	            seenModules[queueName][moduleToCheck] = true;
  	            requiredModules[queueName] = requiredModules[queueName] || [];
  	            requiredModules[queueName].push(moduleToCheck);
  	            var newModules = getModuleDependencies(sources, sources[queueName][moduleToCheck], queueName);
  	            var newModulesKeys = Object.keys(newModules);
  	            for (var j = 0; j < newModulesKeys.length; j++) {
  	                modulesQueue[newModulesKeys[j]] = modulesQueue[newModulesKeys[j]] || [];
  	                modulesQueue[newModulesKeys[j]] = modulesQueue[newModulesKeys[j]].concat(newModules[newModulesKeys[j]]);
  	            }
  	        }
  	    }
  	    return requiredModules;
  	}
  	module.exports = function (moduleId, options) {
  	    options = options || {};
  	    var sources = {
  	        main: __webpack_require__.m
  	    };
  	    var requiredModules = options.all ? { main: Object.keys(sources.main) } : getRequiredModules(sources, moduleId);
  	    var src = '';
  	    Object.keys(requiredModules).filter(function (m) { return m !== 'main'; }).forEach(function (module) {
  	        var entryModule = 0;
  	        while (requiredModules[module][entryModule]) {
  	            entryModule++;
  	        }
  	        requiredModules[module].push(entryModule);
  	        sources[module][entryModule] = '(function(module, exports, __webpack_require__) { module.exports = __webpack_require__; })';
  	        src = src + 'var ' + module + ' = (' + webpackBootstrapFunc.toString().replace('ENTRY_MODULE', JSON.stringify(entryModule)) + ')({' + requiredModules[module].map(function (id) { return '' + JSON.stringify(id) + ': ' + sources[module][id].toString(); }).join(',') + '});\n';
  	    });
  	    src = src + 'new ((' + webpackBootstrapFunc.toString().replace('ENTRY_MODULE', JSON.stringify(moduleId)) + ')({' + requiredModules.main.map(function (id) { return '' + JSON.stringify(id) + ': ' + sources.main[id].toString(); }).join(',') + '}))(self);';
  	    var blob = new window.Blob([src], { type: 'text/javascript' });
  	    if (options.bare) {
  	        return blob;
  	    }
  	    var URL = window.URL || window.webkitURL || window.mozURL || window.msURL;
  	    var workerUrl = URL.createObjectURL(blob);
  	    var worker = new window.Worker(workerUrl);
  	    worker.objectURL = workerUrl;
  	    return worker;
  	};


  	/***/ }),

  	/***/ "./src/config.js":
  	/*!***********************!*\
  	  !*** ./src/config.js ***!
  	  \***********************/
  	/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {
  	__webpack_require__.r(__webpack_exports__);
  	/* harmony export */ __webpack_require__.d(__webpack_exports__, {
  	/* harmony export */   "defaultConfig": function() { return /* binding */ defaultConfig; },
  	/* harmony export */   "createDefaultConfig": function() { return /* binding */ createDefaultConfig; }
  	/* harmony export */ });
  	/*
  	 * Copyright (C) 2016 Bilibili. All Rights Reserved.
  	 *
  	 * @author zheng qian <xqq@xqq.im>
  	 *
  	 * Licensed under the Apache License, Version 2.0 (the "License");
  	 * you may not use this file except in compliance with the License.
  	 * You may obtain a copy of the License at
  	 *
  	 *     http://www.apache.org/licenses/LICENSE-2.0
  	 *
  	 * Unless required by applicable law or agreed to in writing, software
  	 * distributed under the License is distributed on an "AS IS" BASIS,
  	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  	 * See the License for the specific language governing permissions and
  	 * limitations under the License.
  	 */
  	var defaultConfig = {
  	    enableWorker: false,
  	    enableStashBuffer: true,
  	    stashInitialSize: undefined,
  	    isLive: false,
  	    lazyLoad: true,
  	    lazyLoadMaxDuration: 3 * 60,
  	    lazyLoadRecoverDuration: 30,
  	    deferLoadAfterSourceOpen: true,
  	    // autoCleanupSourceBuffer: default as false, leave unspecified
  	    autoCleanupMaxBackwardDuration: 3 * 60,
  	    autoCleanupMinBackwardDuration: 2 * 60,
  	    statisticsInfoReportInterval: 600,
  	    fixAudioTimestampGap: true,
  	    accurateSeek: false,
  	    seekType: 'range',
  	    seekParamStart: 'bstart',
  	    seekParamEnd: 'bend',
  	    rangeLoadZeroStart: false,
  	    customSeekHandler: undefined,
  	    reuseRedirectedURL: false,
  	    // referrerPolicy: leave as unspecified
  	    headers: undefined,
  	    customLoader: undefined
  	};
  	function createDefaultConfig() {
  	    return Object.assign({}, defaultConfig);
  	}


  	/***/ }),

  	/***/ "./src/core/features.js":
  	/*!******************************!*\
  	  !*** ./src/core/features.js ***!
  	  \******************************/
  	/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {
  	__webpack_require__.r(__webpack_exports__);
  	/* harmony import */ var _io_io_controller_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../io/io-controller.js */ "./src/io/io-controller.js");
  	/* harmony import */ var _config_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../config.js */ "./src/config.js");
  	/*
  	 * Copyright (C) 2016 Bilibili. All Rights Reserved.
  	 *
  	 * @author zheng qian <xqq@xqq.im>
  	 *
  	 * Licensed under the Apache License, Version 2.0 (the "License");
  	 * you may not use this file except in compliance with the License.
  	 * You may obtain a copy of the License at
  	 *
  	 *     http://www.apache.org/licenses/LICENSE-2.0
  	 *
  	 * Unless required by applicable law or agreed to in writing, software
  	 * distributed under the License is distributed on an "AS IS" BASIS,
  	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  	 * See the License for the specific language governing permissions and
  	 * limitations under the License.
  	 */


  	var Features = /** @class */ (function () {
  	    function Features() {
  	    }
  	    Features.supportMSEH264Playback = function () {
  	        return window.MediaSource &&
  	            window.MediaSource.isTypeSupported('video/mp4; codecs="avc1.42E01E,mp4a.40.2"');
  	    };
  	    Features.supportNetworkStreamIO = function () {
  	        var ioctl = new _io_io_controller_js__WEBPACK_IMPORTED_MODULE_0__.default({}, (0, _config_js__WEBPACK_IMPORTED_MODULE_1__.createDefaultConfig)());
  	        var loaderType = ioctl.loaderType;
  	        ioctl.destroy();
  	        return loaderType == 'fetch-stream-loader' || loaderType == 'xhr-moz-chunked-loader';
  	    };
  	    Features.getNetworkLoaderTypeName = function () {
  	        var ioctl = new _io_io_controller_js__WEBPACK_IMPORTED_MODULE_0__.default({}, (0, _config_js__WEBPACK_IMPORTED_MODULE_1__.createDefaultConfig)());
  	        var loaderType = ioctl.loaderType;
  	        ioctl.destroy();
  	        return loaderType;
  	    };
  	    Features.supportNativeMediaPlayback = function (mimeType) {
  	        if (Features.videoElement == undefined) {
  	            Features.videoElement = window.document.createElement('video');
  	        }
  	        var canPlay = Features.videoElement.canPlayType(mimeType);
  	        return canPlay === 'probably' || canPlay == 'maybe';
  	    };
  	    Features.getFeatureList = function () {
  	        var features = {
  	            mseFlvPlayback: false,
  	            mseLiveFlvPlayback: false,
  	            networkStreamIO: false,
  	            networkLoaderName: '',
  	            nativeMP4H264Playback: false,
  	            nativeWebmVP8Playback: false,
  	            nativeWebmVP9Playback: false
  	        };
  	        features.mseFlvPlayback = Features.supportMSEH264Playback();
  	        features.networkStreamIO = Features.supportNetworkStreamIO();
  	        features.networkLoaderName = Features.getNetworkLoaderTypeName();
  	        features.mseLiveFlvPlayback = features.mseFlvPlayback && features.networkStreamIO;
  	        features.nativeMP4H264Playback = Features.supportNativeMediaPlayback('video/mp4; codecs="avc1.42001E, mp4a.40.2"');
  	        features.nativeWebmVP8Playback = Features.supportNativeMediaPlayback('video/webm; codecs="vp8.0, vorbis"');
  	        features.nativeWebmVP9Playback = Features.supportNativeMediaPlayback('video/webm; codecs="vp9"');
  	        return features;
  	    };
  	    return Features;
  	}());
  	/* harmony default export */ __webpack_exports__["default"] = (Features);


  	/***/ }),

  	/***/ "./src/core/media-info.js":
  	/*!********************************!*\
  	  !*** ./src/core/media-info.js ***!
  	  \********************************/
  	/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {
  	__webpack_require__.r(__webpack_exports__);
  	/*
  	 * Copyright (C) 2016 Bilibili. All Rights Reserved.
  	 *
  	 * @author zheng qian <xqq@xqq.im>
  	 *
  	 * Licensed under the Apache License, Version 2.0 (the "License");
  	 * you may not use this file except in compliance with the License.
  	 * You may obtain a copy of the License at
  	 *
  	 *     http://www.apache.org/licenses/LICENSE-2.0
  	 *
  	 * Unless required by applicable law or agreed to in writing, software
  	 * distributed under the License is distributed on an "AS IS" BASIS,
  	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  	 * See the License for the specific language governing permissions and
  	 * limitations under the License.
  	 */
  	var MediaInfo = /** @class */ (function () {
  	    function MediaInfo() {
  	        this.mimeType = null;
  	        this.duration = null;
  	        this.hasAudio = null;
  	        this.hasVideo = null;
  	        this.audioCodec = null;
  	        this.videoCodec = null;
  	        this.audioDataRate = null;
  	        this.videoDataRate = null;
  	        this.audioSampleRate = null;
  	        this.audioChannelCount = null;
  	        this.width = null;
  	        this.height = null;
  	        this.fps = null;
  	        this.profile = null;
  	        this.level = null;
  	        this.refFrames = null;
  	        this.chromaFormat = null;
  	        this.sarNum = null;
  	        this.sarDen = null;
  	        this.metadata = null;
  	        this.segments = null; // MediaInfo[]
  	        this.segmentCount = null;
  	        this.hasKeyframesIndex = null;
  	        this.keyframesIndex = null;
  	    }
  	    MediaInfo.prototype.isComplete = function () {
  	        var audioInfoComplete = (this.hasAudio === false) ||
  	            (this.hasAudio === true &&
  	                this.audioCodec != null &&
  	                this.audioSampleRate != null &&
  	                this.audioChannelCount != null);
  	        var videoInfoComplete = (this.hasVideo === false) ||
  	            (this.hasVideo === true &&
  	                this.videoCodec != null &&
  	                this.width != null &&
  	                this.height != null &&
  	                this.fps != null &&
  	                this.profile != null &&
  	                this.level != null &&
  	                this.refFrames != null &&
  	                this.chromaFormat != null &&
  	                this.sarNum != null &&
  	                this.sarDen != null);
  	        // keyframesIndex may not be present
  	        return this.mimeType != null &&
  	            this.duration != null &&
  	            this.metadata != null &&
  	            this.hasKeyframesIndex != null &&
  	            audioInfoComplete &&
  	            videoInfoComplete;
  	    };
  	    MediaInfo.prototype.isSeekable = function () {
  	        return this.hasKeyframesIndex === true;
  	    };
  	    MediaInfo.prototype.getNearestKeyframe = function (milliseconds) {
  	        if (this.keyframesIndex == null) {
  	            return null;
  	        }
  	        var table = this.keyframesIndex;
  	        var keyframeIdx = this._search(table.times, milliseconds);
  	        return {
  	            index: keyframeIdx,
  	            milliseconds: table.times[keyframeIdx],
  	            fileposition: table.filepositions[keyframeIdx]
  	        };
  	    };
  	    MediaInfo.prototype._search = function (list, value) {
  	        var idx = 0;
  	        var last = list.length - 1;
  	        var mid = 0;
  	        var lbound = 0;
  	        var ubound = last;
  	        if (value < list[0]) {
  	            idx = 0;
  	            lbound = ubound + 1; // skip search
  	        }
  	        while (lbound <= ubound) {
  	            mid = lbound + Math.floor((ubound - lbound) / 2);
  	            if (mid === last || (value >= list[mid] && value < list[mid + 1])) {
  	                idx = mid;
  	                break;
  	            }
  	            else if (list[mid] < value) {
  	                lbound = mid + 1;
  	            }
  	            else {
  	                ubound = mid - 1;
  	            }
  	        }
  	        return idx;
  	    };
  	    return MediaInfo;
  	}());
  	/* harmony default export */ __webpack_exports__["default"] = (MediaInfo);


  	/***/ }),

  	/***/ "./src/core/media-segment-info.js":
  	/*!****************************************!*\
  	  !*** ./src/core/media-segment-info.js ***!
  	  \****************************************/
  	/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {
  	__webpack_require__.r(__webpack_exports__);
  	/* harmony export */ __webpack_require__.d(__webpack_exports__, {
  	/* harmony export */   "SampleInfo": function() { return /* binding */ SampleInfo; },
  	/* harmony export */   "MediaSegmentInfo": function() { return /* binding */ MediaSegmentInfo; },
  	/* harmony export */   "IDRSampleList": function() { return /* binding */ IDRSampleList; },
  	/* harmony export */   "MediaSegmentInfoList": function() { return /* binding */ MediaSegmentInfoList; }
  	/* harmony export */ });
  	/*
  	 * Copyright (C) 2016 Bilibili. All Rights Reserved.
  	 *
  	 * @author zheng qian <xqq@xqq.im>
  	 *
  	 * Licensed under the Apache License, Version 2.0 (the "License");
  	 * you may not use this file except in compliance with the License.
  	 * You may obtain a copy of the License at
  	 *
  	 *     http://www.apache.org/licenses/LICENSE-2.0
  	 *
  	 * Unless required by applicable law or agreed to in writing, software
  	 * distributed under the License is distributed on an "AS IS" BASIS,
  	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  	 * See the License for the specific language governing permissions and
  	 * limitations under the License.
  	 */
  	// Represents an media sample (audio / video)
  	var SampleInfo = /** @class */ (function () {
  	    function SampleInfo(dts, pts, duration, originalDts, isSync) {
  	        this.dts = dts;
  	        this.pts = pts;
  	        this.duration = duration;
  	        this.originalDts = originalDts;
  	        this.isSyncPoint = isSync;
  	        this.fileposition = null;
  	    }
  	    return SampleInfo;
  	}());

  	// Media Segment concept is defined in Media Source Extensions spec.
  	// Particularly in ISO BMFF format, an Media Segment contains a moof box followed by a mdat box.
  	var MediaSegmentInfo = /** @class */ (function () {
  	    function MediaSegmentInfo() {
  	        this.beginDts = 0;
  	        this.endDts = 0;
  	        this.beginPts = 0;
  	        this.endPts = 0;
  	        this.originalBeginDts = 0;
  	        this.originalEndDts = 0;
  	        this.syncPoints = []; // SampleInfo[n], for video IDR frames only
  	        this.firstSample = null; // SampleInfo
  	        this.lastSample = null; // SampleInfo
  	    }
  	    MediaSegmentInfo.prototype.appendSyncPoint = function (sampleInfo) {
  	        sampleInfo.isSyncPoint = true;
  	        this.syncPoints.push(sampleInfo);
  	    };
  	    return MediaSegmentInfo;
  	}());

  	// Ordered list for recording video IDR frames, sorted by originalDts
  	var IDRSampleList = /** @class */ (function () {
  	    function IDRSampleList() {
  	        this._list = [];
  	    }
  	    IDRSampleList.prototype.clear = function () {
  	        this._list = [];
  	    };
  	    IDRSampleList.prototype.appendArray = function (syncPoints) {
  	        var list = this._list;
  	        if (syncPoints.length === 0) {
  	            return;
  	        }
  	        if (list.length > 0 && syncPoints[0].originalDts < list[list.length - 1].originalDts) {
  	            this.clear();
  	        }
  	        Array.prototype.push.apply(list, syncPoints);
  	    };
  	    IDRSampleList.prototype.getLastSyncPointBeforeDts = function (dts) {
  	        if (this._list.length == 0) {
  	            return null;
  	        }
  	        var list = this._list;
  	        var idx = 0;
  	        var last = list.length - 1;
  	        var mid = 0;
  	        var lbound = 0;
  	        var ubound = last;
  	        if (dts < list[0].dts) {
  	            idx = 0;
  	            lbound = ubound + 1;
  	        }
  	        while (lbound <= ubound) {
  	            mid = lbound + Math.floor((ubound - lbound) / 2);
  	            if (mid === last || (dts >= list[mid].dts && dts < list[mid + 1].dts)) {
  	                idx = mid;
  	                break;
  	            }
  	            else if (list[mid].dts < dts) {
  	                lbound = mid + 1;
  	            }
  	            else {
  	                ubound = mid - 1;
  	            }
  	        }
  	        return this._list[idx];
  	    };
  	    return IDRSampleList;
  	}());

  	// Data structure for recording information of media segments in single track.
  	var MediaSegmentInfoList = /** @class */ (function () {
  	    function MediaSegmentInfoList(type) {
  	        this._type = type;
  	        this._list = [];
  	        this._lastAppendLocation = -1; // cached last insert location
  	    }
  	    Object.defineProperty(MediaSegmentInfoList.prototype, "type", {
  	        get: function () {
  	            return this._type;
  	        },
  	        enumerable: false,
  	        configurable: true
  	    });
  	    Object.defineProperty(MediaSegmentInfoList.prototype, "length", {
  	        get: function () {
  	            return this._list.length;
  	        },
  	        enumerable: false,
  	        configurable: true
  	    });
  	    MediaSegmentInfoList.prototype.isEmpty = function () {
  	        return this._list.length === 0;
  	    };
  	    MediaSegmentInfoList.prototype.clear = function () {
  	        this._list = [];
  	        this._lastAppendLocation = -1;
  	    };
  	    MediaSegmentInfoList.prototype._searchNearestSegmentBefore = function (originalBeginDts) {
  	        var list = this._list;
  	        if (list.length === 0) {
  	            return -2;
  	        }
  	        var last = list.length - 1;
  	        var mid = 0;
  	        var lbound = 0;
  	        var ubound = last;
  	        var idx = 0;
  	        if (originalBeginDts < list[0].originalBeginDts) {
  	            idx = -1;
  	            return idx;
  	        }
  	        while (lbound <= ubound) {
  	            mid = lbound + Math.floor((ubound - lbound) / 2);
  	            if (mid === last || (originalBeginDts > list[mid].lastSample.originalDts &&
  	                (originalBeginDts < list[mid + 1].originalBeginDts))) {
  	                idx = mid;
  	                break;
  	            }
  	            else if (list[mid].originalBeginDts < originalBeginDts) {
  	                lbound = mid + 1;
  	            }
  	            else {
  	                ubound = mid - 1;
  	            }
  	        }
  	        return idx;
  	    };
  	    MediaSegmentInfoList.prototype._searchNearestSegmentAfter = function (originalBeginDts) {
  	        return this._searchNearestSegmentBefore(originalBeginDts) + 1;
  	    };
  	    MediaSegmentInfoList.prototype.append = function (mediaSegmentInfo) {
  	        var list = this._list;
  	        var msi = mediaSegmentInfo;
  	        var lastAppendIdx = this._lastAppendLocation;
  	        var insertIdx = 0;
  	        if (lastAppendIdx !== -1 && lastAppendIdx < list.length &&
  	            msi.originalBeginDts >= list[lastAppendIdx].lastSample.originalDts &&
  	            ((lastAppendIdx === list.length - 1) ||
  	                (lastAppendIdx < list.length - 1 &&
  	                    msi.originalBeginDts < list[lastAppendIdx + 1].originalBeginDts))) {
  	            insertIdx = lastAppendIdx + 1; // use cached location idx
  	        }
  	        else {
  	            if (list.length > 0) {
  	                insertIdx = this._searchNearestSegmentBefore(msi.originalBeginDts) + 1;
  	            }
  	        }
  	        this._lastAppendLocation = insertIdx;
  	        this._list.splice(insertIdx, 0, msi);
  	    };
  	    MediaSegmentInfoList.prototype.getLastSegmentBefore = function (originalBeginDts) {
  	        var idx = this._searchNearestSegmentBefore(originalBeginDts);
  	        if (idx >= 0) {
  	            return this._list[idx];
  	        }
  	        else { // -1
  	            return null;
  	        }
  	    };
  	    MediaSegmentInfoList.prototype.getLastSampleBefore = function (originalBeginDts) {
  	        var segment = this.getLastSegmentBefore(originalBeginDts);
  	        if (segment != null) {
  	            return segment.lastSample;
  	        }
  	        else {
  	            return null;
  	        }
  	    };
  	    MediaSegmentInfoList.prototype.getLastSyncPointBefore = function (originalBeginDts) {
  	        var segmentIdx = this._searchNearestSegmentBefore(originalBeginDts);
  	        var syncPoints = this._list[segmentIdx].syncPoints;
  	        while (syncPoints.length === 0 && segmentIdx > 0) {
  	            segmentIdx--;
  	            syncPoints = this._list[segmentIdx].syncPoints;
  	        }
  	        if (syncPoints.length > 0) {
  	            return syncPoints[syncPoints.length - 1];
  	        }
  	        else {
  	            return null;
  	        }
  	    };
  	    return MediaSegmentInfoList;
  	}());



  	/***/ }),

  	/***/ "./src/core/mse-controller.js":
  	/*!************************************!*\
  	  !*** ./src/core/mse-controller.js ***!
  	  \************************************/
  	/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {
  	__webpack_require__.r(__webpack_exports__);
  	/* harmony import */ var events__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! events */ "./node_modules/events/events.js");
  	/* harmony import */ var events__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(events__WEBPACK_IMPORTED_MODULE_0__);
  	/* harmony import */ var _utils_logger_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../utils/logger.js */ "./src/utils/logger.js");
  	/* harmony import */ var _utils_browser_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../utils/browser.js */ "./src/utils/browser.js");
  	/* harmony import */ var _mse_events_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./mse-events.js */ "./src/core/mse-events.js");
  	/* harmony import */ var _media_segment_info_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./media-segment-info.js */ "./src/core/media-segment-info.js");
  	/* harmony import */ var _utils_exception_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../utils/exception.js */ "./src/utils/exception.js");
  	/*
  	 * Copyright (C) 2016 Bilibili. All Rights Reserved.
  	 *
  	 * @author zheng qian <xqq@xqq.im>
  	 *
  	 * Licensed under the Apache License, Version 2.0 (the "License");
  	 * you may not use this file except in compliance with the License.
  	 * You may obtain a copy of the License at
  	 *
  	 *     http://www.apache.org/licenses/LICENSE-2.0
  	 *
  	 * Unless required by applicable law or agreed to in writing, software
  	 * distributed under the License is distributed on an "AS IS" BASIS,
  	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  	 * See the License for the specific language governing permissions and
  	 * limitations under the License.
  	 */






  	// Media Source Extensions controller
  	var MSEController = /** @class */ (function () {
  	    function MSEController(config) {
  	        this.TAG = 'MSEController';
  	        this._config = config;
  	        this._emitter = new (events__WEBPACK_IMPORTED_MODULE_0___default())();
  	        if (this._config.isLive && this._config.autoCleanupSourceBuffer == undefined) {
  	            // For live stream, do auto cleanup by default
  	            this._config.autoCleanupSourceBuffer = true;
  	        }
  	        this.e = {
  	            onSourceOpen: this._onSourceOpen.bind(this),
  	            onSourceEnded: this._onSourceEnded.bind(this),
  	            onSourceClose: this._onSourceClose.bind(this),
  	            onSourceBufferError: this._onSourceBufferError.bind(this),
  	            onSourceBufferUpdateEnd: this._onSourceBufferUpdateEnd.bind(this)
  	        };
  	        this._mediaSource = null;
  	        this._mediaSourceObjectURL = null;
  	        this._mediaElement = null;
  	        this._isBufferFull = false;
  	        this._hasPendingEos = false;
  	        this._requireSetMediaDuration = false;
  	        this._pendingMediaDuration = 0;
  	        this._pendingSourceBufferInit = [];
  	        this._mimeTypes = {
  	            video: null,
  	            audio: null
  	        };
  	        this._sourceBuffers = {
  	            video: null,
  	            audio: null
  	        };
  	        this._lastInitSegments = {
  	            video: null,
  	            audio: null
  	        };
  	        this._pendingSegments = {
  	            video: [],
  	            audio: []
  	        };
  	        this._pendingRemoveRanges = {
  	            video: [],
  	            audio: []
  	        };
  	        this._idrList = new _media_segment_info_js__WEBPACK_IMPORTED_MODULE_4__.IDRSampleList();
  	    }
  	    MSEController.prototype.destroy = function () {
  	        if (this._mediaElement || this._mediaSource) {
  	            this.detachMediaElement();
  	        }
  	        this.e = null;
  	        this._emitter.removeAllListeners();
  	        this._emitter = null;
  	    };
  	    MSEController.prototype.on = function (event, listener) {
  	        this._emitter.addListener(event, listener);
  	    };
  	    MSEController.prototype.off = function (event, listener) {
  	        this._emitter.removeListener(event, listener);
  	    };
  	    MSEController.prototype.attachMediaElement = function (mediaElement) {
  	        if (this._mediaSource) {
  	            throw new _utils_exception_js__WEBPACK_IMPORTED_MODULE_5__.IllegalStateException('MediaSource has been attached to an HTMLMediaElement!');
  	        }
  	        var ms = this._mediaSource = new window.MediaSource();
  	        ms.addEventListener('sourceopen', this.e.onSourceOpen);
  	        ms.addEventListener('sourceended', this.e.onSourceEnded);
  	        ms.addEventListener('sourceclose', this.e.onSourceClose);
  	        this._mediaElement = mediaElement;
  	        this._mediaSourceObjectURL = window.URL.createObjectURL(this._mediaSource);
  	        mediaElement.src = this._mediaSourceObjectURL;
  	    };
  	    MSEController.prototype.detachMediaElement = function () {
  	        if (this._mediaSource) {
  	            var ms = this._mediaSource;
  	            for (var type in this._sourceBuffers) {
  	                // pending segments should be discard
  	                var ps = this._pendingSegments[type];
  	                ps.splice(0, ps.length);
  	                this._pendingSegments[type] = null;
  	                this._pendingRemoveRanges[type] = null;
  	                this._lastInitSegments[type] = null;
  	                // remove all sourcebuffers
  	                var sb = this._sourceBuffers[type];
  	                if (sb) {
  	                    if (ms.readyState !== 'closed') {
  	                        // ms edge can throw an error: Unexpected call to method or property access
  	                        try {
  	                            ms.removeSourceBuffer(sb);
  	                        }
  	                        catch (error) {
  	                            _utils_logger_js__WEBPACK_IMPORTED_MODULE_1__.default.e(this.TAG, error.message);
  	                        }
  	                        sb.removeEventListener('error', this.e.onSourceBufferError);
  	                        sb.removeEventListener('updateend', this.e.onSourceBufferUpdateEnd);
  	                    }
  	                    this._mimeTypes[type] = null;
  	                    this._sourceBuffers[type] = null;
  	                }
  	            }
  	            if (ms.readyState === 'open') {
  	                try {
  	                    ms.endOfStream();
  	                }
  	                catch (error) {
  	                    _utils_logger_js__WEBPACK_IMPORTED_MODULE_1__.default.e(this.TAG, error.message);
  	                }
  	            }
  	            ms.removeEventListener('sourceopen', this.e.onSourceOpen);
  	            ms.removeEventListener('sourceended', this.e.onSourceEnded);
  	            ms.removeEventListener('sourceclose', this.e.onSourceClose);
  	            this._pendingSourceBufferInit = [];
  	            this._isBufferFull = false;
  	            this._idrList.clear();
  	            this._mediaSource = null;
  	        }
  	        if (this._mediaElement) {
  	            this._mediaElement.src = '';
  	            this._mediaElement.removeAttribute('src');
  	            this._mediaElement = null;
  	        }
  	        if (this._mediaSourceObjectURL) {
  	            window.URL.revokeObjectURL(this._mediaSourceObjectURL);
  	            this._mediaSourceObjectURL = null;
  	        }
  	    };
  	    MSEController.prototype.appendInitSegment = function (initSegment, deferred) {
  	        if (!this._mediaSource || this._mediaSource.readyState !== 'open') {
  	            // sourcebuffer creation requires mediaSource.readyState === 'open'
  	            // so we defer the sourcebuffer creation, until sourceopen event triggered
  	            this._pendingSourceBufferInit.push(initSegment);
  	            // make sure that this InitSegment is in the front of pending segments queue
  	            this._pendingSegments[initSegment.type].push(initSegment);
  	            return;
  	        }
  	        var is = initSegment;
  	        var mimeType = "" + is.container;
  	        if (is.codec && is.codec.length > 0) {
  	            mimeType += ";codecs=" + is.codec;
  	        }
  	        var firstInitSegment = false;
  	        _utils_logger_js__WEBPACK_IMPORTED_MODULE_1__.default.v(this.TAG, 'Received Initialization Segment, mimeType: ' + mimeType);
  	        this._lastInitSegments[is.type] = is;
  	        if (mimeType !== this._mimeTypes[is.type]) {
  	            if (!this._mimeTypes[is.type]) { // empty, first chance create sourcebuffer
  	                firstInitSegment = true;
  	                try {
  	                    var sb = this._sourceBuffers[is.type] = this._mediaSource.addSourceBuffer(mimeType);
  	                    sb.addEventListener('error', this.e.onSourceBufferError);
  	                    sb.addEventListener('updateend', this.e.onSourceBufferUpdateEnd);
  	                }
  	                catch (error) {
  	                    _utils_logger_js__WEBPACK_IMPORTED_MODULE_1__.default.e(this.TAG, error.message);
  	                    this._emitter.emit(_mse_events_js__WEBPACK_IMPORTED_MODULE_3__.default.ERROR, { code: error.code, msg: error.message });
  	                    return;
  	                }
  	            }
  	            else {
  	                _utils_logger_js__WEBPACK_IMPORTED_MODULE_1__.default.v(this.TAG, "Notice: " + is.type + " mimeType changed, origin: " + this._mimeTypes[is.type] + ", target: " + mimeType);
  	            }
  	            this._mimeTypes[is.type] = mimeType;
  	        }
  	        if (!deferred) {
  	            // deferred means this InitSegment has been pushed to pendingSegments queue
  	            this._pendingSegments[is.type].push(is);
  	        }
  	        if (!firstInitSegment) { // append immediately only if init segment in subsequence
  	            if (this._sourceBuffers[is.type] && !this._sourceBuffers[is.type].updating) {
  	                this._doAppendSegments();
  	            }
  	        }
  	        if (_utils_browser_js__WEBPACK_IMPORTED_MODULE_2__.default.safari && is.container === 'audio/mpeg' && is.mediaDuration > 0) {
  	            // 'audio/mpeg' track under Safari may cause MediaElement's duration to be NaN
  	            // Manually correct MediaSource.duration to make progress bar seekable, and report right duration
  	            this._requireSetMediaDuration = true;
  	            this._pendingMediaDuration = is.mediaDuration / 1000; // in seconds
  	            this._updateMediaSourceDuration();
  	        }
  	    };
  	    MSEController.prototype.appendMediaSegment = function (mediaSegment) {
  	        var ms = mediaSegment;
  	        this._pendingSegments[ms.type].push(ms);
  	        if (this._config.autoCleanupSourceBuffer && this._needCleanupSourceBuffer()) {
  	            this._doCleanupSourceBuffer();
  	        }
  	        var sb = this._sourceBuffers[ms.type];
  	        if (sb && !sb.updating && !this._hasPendingRemoveRanges()) {
  	            this._doAppendSegments();
  	        }
  	    };
  	    MSEController.prototype.seek = function (seconds) {
  	        // remove all appended buffers
  	        for (var type in this._sourceBuffers) {
  	            if (!this._sourceBuffers[type]) {
  	                continue;
  	            }
  	            // abort current buffer append algorithm
  	            var sb = this._sourceBuffers[type];
  	            if (this._mediaSource.readyState === 'open') {
  	                try {
  	                    // If range removal algorithm is running, InvalidStateError will be throwed
  	                    // Ignore it.
  	                    sb.abort();
  	                }
  	                catch (error) {
  	                    _utils_logger_js__WEBPACK_IMPORTED_MODULE_1__.default.e(this.TAG, error.message);
  	                }
  	            }
  	            // IDRList should be clear
  	            this._idrList.clear();
  	            // pending segments should be discard
  	            var ps = this._pendingSegments[type];
  	            ps.splice(0, ps.length);
  	            if (this._mediaSource.readyState === 'closed') {
  	                // Parent MediaSource object has been detached from HTMLMediaElement
  	                continue;
  	            }
  	            // record ranges to be remove from SourceBuffer
  	            for (var i = 0; i < sb.buffered.length; i++) {
  	                var start = sb.buffered.start(i);
  	                var end = sb.buffered.end(i);
  	                this._pendingRemoveRanges[type].push({ start: start, end: end });
  	            }
  	            // if sb is not updating, let's remove ranges now!
  	            if (!sb.updating) {
  	                this._doRemoveRanges();
  	            }
  	            // Safari 10 may get InvalidStateError in the later appendBuffer() after SourceBuffer.remove() call
  	            // Internal parser's state may be invalid at this time. Re-append last InitSegment to workaround.
  	            // Related issue: https://bugs.webkit.org/show_bug.cgi?id=159230
  	            if (_utils_browser_js__WEBPACK_IMPORTED_MODULE_2__.default.safari) {
  	                var lastInitSegment = this._lastInitSegments[type];
  	                if (lastInitSegment) {
  	                    this._pendingSegments[type].push(lastInitSegment);
  	                    if (!sb.updating) {
  	                        this._doAppendSegments();
  	                    }
  	                }
  	            }
  	        }
  	    };
  	    MSEController.prototype.endOfStream = function () {
  	        var ms = this._mediaSource;
  	        var sb = this._sourceBuffers;
  	        if (!ms || ms.readyState !== 'open') {
  	            if (ms && ms.readyState === 'closed' && this._hasPendingSegments()) {
  	                // If MediaSource hasn't turned into open state, and there're pending segments
  	                // Mark pending endOfStream, defer call until all pending segments appended complete
  	                this._hasPendingEos = true;
  	            }
  	            return;
  	        }
  	        if (sb.video && sb.video.updating || sb.audio && sb.audio.updating) {
  	            // If any sourcebuffer is updating, defer endOfStream operation
  	            // See _onSourceBufferUpdateEnd()
  	            this._hasPendingEos = true;
  	        }
  	        else {
  	            this._hasPendingEos = false;
  	            // Notify media data loading complete
  	            // This is helpful for correcting total duration to match last media segment
  	            // Otherwise MediaElement's ended event may not be triggered
  	            ms.endOfStream();
  	        }
  	    };
  	    MSEController.prototype.getNearestKeyframe = function (dts) {
  	        return this._idrList.getLastSyncPointBeforeDts(dts);
  	    };
  	    MSEController.prototype._needCleanupSourceBuffer = function () {
  	        if (!this._config.autoCleanupSourceBuffer) {
  	            return false;
  	        }
  	        var currentTime = this._mediaElement.currentTime;
  	        for (var type in this._sourceBuffers) {
  	            var sb = this._sourceBuffers[type];
  	            if (sb) {
  	                var buffered = sb.buffered;
  	                if (buffered.length >= 1) {
  	                    if (currentTime - buffered.start(0) >= this._config.autoCleanupMaxBackwardDuration) {
  	                        return true;
  	                    }
  	                }
  	            }
  	        }
  	        return false;
  	    };
  	    MSEController.prototype._doCleanupSourceBuffer = function () {
  	        var currentTime = this._mediaElement.currentTime;
  	        for (var type in this._sourceBuffers) {
  	            var sb = this._sourceBuffers[type];
  	            if (sb) {
  	                var buffered = sb.buffered;
  	                var doRemove = false;
  	                for (var i = 0; i < buffered.length; i++) {
  	                    var start = buffered.start(i);
  	                    var end = buffered.end(i);
  	                    if (start <= currentTime && currentTime < end + 3) { // padding 3 seconds
  	                        if (currentTime - start >= this._config.autoCleanupMaxBackwardDuration) {
  	                            doRemove = true;
  	                            var removeEnd = currentTime - this._config.autoCleanupMinBackwardDuration;
  	                            this._pendingRemoveRanges[type].push({ start: start, end: removeEnd });
  	                        }
  	                    }
  	                    else if (end < currentTime) {
  	                        doRemove = true;
  	                        this._pendingRemoveRanges[type].push({ start: start, end: end });
  	                    }
  	                }
  	                if (doRemove && !sb.updating) {
  	                    this._doRemoveRanges();
  	                }
  	            }
  	        }
  	    };
  	    MSEController.prototype._updateMediaSourceDuration = function () {
  	        var sb = this._sourceBuffers;
  	        if (this._mediaElement.readyState === 0 || this._mediaSource.readyState !== 'open') {
  	            return;
  	        }
  	        if ((sb.video && sb.video.updating) || (sb.audio && sb.audio.updating)) {
  	            return;
  	        }
  	        var current = this._mediaSource.duration;
  	        var target = this._pendingMediaDuration;
  	        if (target > 0 && (isNaN(current) || target > current)) {
  	            _utils_logger_js__WEBPACK_IMPORTED_MODULE_1__.default.v(this.TAG, "Update MediaSource duration from " + current + " to " + target);
  	            this._mediaSource.duration = target;
  	        }
  	        this._requireSetMediaDuration = false;
  	        this._pendingMediaDuration = 0;
  	    };
  	    MSEController.prototype._doRemoveRanges = function () {
  	        for (var type in this._pendingRemoveRanges) {
  	            if (!this._sourceBuffers[type] || this._sourceBuffers[type].updating) {
  	                continue;
  	            }
  	            var sb = this._sourceBuffers[type];
  	            var ranges = this._pendingRemoveRanges[type];
  	            while (ranges.length && !sb.updating) {
  	                var range = ranges.shift();
  	                sb.remove(range.start, range.end);
  	            }
  	        }
  	    };
  	    MSEController.prototype._doAppendSegments = function () {
  	        var pendingSegments = this._pendingSegments;
  	        for (var type in pendingSegments) {
  	            if (!this._sourceBuffers[type] || this._sourceBuffers[type].updating) {
  	                continue;
  	            }
  	            if (pendingSegments[type].length > 0) {
  	                var segment = pendingSegments[type].shift();
  	                if (segment.timestampOffset) {
  	                    // For MPEG audio stream in MSE, if unbuffered-seeking occurred
  	                    // We need explicitly set timestampOffset to the desired point in timeline for mpeg SourceBuffer.
  	                    var currentOffset = this._sourceBuffers[type].timestampOffset;
  	                    var targetOffset = segment.timestampOffset / 1000; // in seconds
  	                    var delta = Math.abs(currentOffset - targetOffset);
  	                    if (delta > 0.1) { // If time delta > 100ms
  	                        _utils_logger_js__WEBPACK_IMPORTED_MODULE_1__.default.v(this.TAG, "Update MPEG audio timestampOffset from " + currentOffset + " to " + targetOffset);
  	                        this._sourceBuffers[type].timestampOffset = targetOffset;
  	                    }
  	                    delete segment.timestampOffset;
  	                }
  	                if (!segment.data || segment.data.byteLength === 0) {
  	                    // Ignore empty buffer
  	                    continue;
  	                }
  	                try {
  	                    this._sourceBuffers[type].appendBuffer(segment.data);
  	                    this._isBufferFull = false;
  	                    if (type === 'video' && segment.hasOwnProperty('info')) {
  	                        this._idrList.appendArray(segment.info.syncPoints);
  	                    }
  	                }
  	                catch (error) {
  	                    this._pendingSegments[type].unshift(segment);
  	                    if (error.code === 22) { // QuotaExceededError
  	                        /* Notice that FireFox may not throw QuotaExceededError if SourceBuffer is full
  	                         * Currently we can only do lazy-load to avoid SourceBuffer become scattered.
  	                         * SourceBuffer eviction policy may be changed in future version of FireFox.
  	                         *
  	                         * Related issues:
  	                         * https://bugzilla.mozilla.org/show_bug.cgi?id=1279885
  	                         * https://bugzilla.mozilla.org/show_bug.cgi?id=1280023
  	                         */
  	                        // report buffer full, abort network IO
  	                        if (!this._isBufferFull) {
  	                            this._emitter.emit(_mse_events_js__WEBPACK_IMPORTED_MODULE_3__.default.BUFFER_FULL);
  	                        }
  	                        this._isBufferFull = true;
  	                    }
  	                    else {
  	                        _utils_logger_js__WEBPACK_IMPORTED_MODULE_1__.default.e(this.TAG, error.message);
  	                        this._emitter.emit(_mse_events_js__WEBPACK_IMPORTED_MODULE_3__.default.ERROR, { code: error.code, msg: error.message });
  	                    }
  	                }
  	            }
  	        }
  	    };
  	    MSEController.prototype._onSourceOpen = function () {
  	        _utils_logger_js__WEBPACK_IMPORTED_MODULE_1__.default.v(this.TAG, 'MediaSource onSourceOpen');
  	        this._mediaSource.removeEventListener('sourceopen', this.e.onSourceOpen);
  	        // deferred sourcebuffer creation / initialization
  	        if (this._pendingSourceBufferInit.length > 0) {
  	            var pendings = this._pendingSourceBufferInit;
  	            while (pendings.length) {
  	                var segment = pendings.shift();
  	                this.appendInitSegment(segment, true);
  	            }
  	        }
  	        // there may be some pending media segments, append them
  	        if (this._hasPendingSegments()) {
  	            this._doAppendSegments();
  	        }
  	        this._emitter.emit(_mse_events_js__WEBPACK_IMPORTED_MODULE_3__.default.SOURCE_OPEN);
  	    };
  	    MSEController.prototype._onSourceEnded = function () {
  	        // fired on endOfStream
  	        _utils_logger_js__WEBPACK_IMPORTED_MODULE_1__.default.v(this.TAG, 'MediaSource onSourceEnded');
  	    };
  	    MSEController.prototype._onSourceClose = function () {
  	        // fired on detaching from media element
  	        _utils_logger_js__WEBPACK_IMPORTED_MODULE_1__.default.v(this.TAG, 'MediaSource onSourceClose');
  	        if (this._mediaSource && this.e != null) {
  	            this._mediaSource.removeEventListener('sourceopen', this.e.onSourceOpen);
  	            this._mediaSource.removeEventListener('sourceended', this.e.onSourceEnded);
  	            this._mediaSource.removeEventListener('sourceclose', this.e.onSourceClose);
  	        }
  	    };
  	    MSEController.prototype._hasPendingSegments = function () {
  	        var ps = this._pendingSegments;
  	        return ps.video.length > 0 || ps.audio.length > 0;
  	    };
  	    MSEController.prototype._hasPendingRemoveRanges = function () {
  	        var prr = this._pendingRemoveRanges;
  	        return prr.video.length > 0 || prr.audio.length > 0;
  	    };
  	    MSEController.prototype._onSourceBufferUpdateEnd = function () {
  	        if (this._requireSetMediaDuration) {
  	            this._updateMediaSourceDuration();
  	        }
  	        else if (this._hasPendingRemoveRanges()) {
  	            this._doRemoveRanges();
  	        }
  	        else if (this._hasPendingSegments()) {
  	            this._doAppendSegments();
  	        }
  	        else if (this._hasPendingEos) {
  	            this.endOfStream();
  	        }
  	        this._emitter.emit(_mse_events_js__WEBPACK_IMPORTED_MODULE_3__.default.UPDATE_END);
  	    };
  	    MSEController.prototype._onSourceBufferError = function (e) {
  	        _utils_logger_js__WEBPACK_IMPORTED_MODULE_1__.default.e(this.TAG, "SourceBuffer Error: " + e);
  	        // this error might not always be fatal, just ignore it
  	    };
  	    return MSEController;
  	}());
  	/* harmony default export */ __webpack_exports__["default"] = (MSEController);


  	/***/ }),

  	/***/ "./src/core/mse-events.js":
  	/*!********************************!*\
  	  !*** ./src/core/mse-events.js ***!
  	  \********************************/
  	/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {
  	__webpack_require__.r(__webpack_exports__);
  	/*
  	 * Copyright (C) 2016 Bilibili. All Rights Reserved.
  	 *
  	 * @author zheng qian <xqq@xqq.im>
  	 *
  	 * Licensed under the Apache License, Version 2.0 (the "License");
  	 * you may not use this file except in compliance with the License.
  	 * You may obtain a copy of the License at
  	 *
  	 *     http://www.apache.org/licenses/LICENSE-2.0
  	 *
  	 * Unless required by applicable law or agreed to in writing, software
  	 * distributed under the License is distributed on an "AS IS" BASIS,
  	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  	 * See the License for the specific language governing permissions and
  	 * limitations under the License.
  	 */
  	var MSEEvents = {
  	    ERROR: 'error',
  	    SOURCE_OPEN: 'source_open',
  	    UPDATE_END: 'update_end',
  	    BUFFER_FULL: 'buffer_full'
  	};
  	/* harmony default export */ __webpack_exports__["default"] = (MSEEvents);


  	/***/ }),

  	/***/ "./src/core/transmuxer.js":
  	/*!********************************!*\
  	  !*** ./src/core/transmuxer.js ***!
  	  \********************************/
  	/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {
  	__webpack_require__.r(__webpack_exports__);
  	/* harmony import */ var events__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! events */ "./node_modules/events/events.js");
  	/* harmony import */ var events__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(events__WEBPACK_IMPORTED_MODULE_0__);
  	/* harmony import */ var webworkify_webpack__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! webworkify-webpack */ "./node_modules/webworkify-webpack/index.js");
  	/* harmony import */ var webworkify_webpack__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(webworkify_webpack__WEBPACK_IMPORTED_MODULE_1__);
  	/* harmony import */ var _utils_logger_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../utils/logger.js */ "./src/utils/logger.js");
  	/* harmony import */ var _utils_logging_control_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../utils/logging-control.js */ "./src/utils/logging-control.js");
  	/* harmony import */ var _transmuxing_controller_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./transmuxing-controller.js */ "./src/core/transmuxing-controller.js");
  	/* harmony import */ var _transmuxing_events_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./transmuxing-events.js */ "./src/core/transmuxing-events.js");
  	/* harmony import */ var _media_info_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./media-info.js */ "./src/core/media-info.js");
  	/*
  	 * Copyright (C) 2016 Bilibili. All Rights Reserved.
  	 *
  	 * @author zheng qian <xqq@xqq.im>
  	 *
  	 * Licensed under the Apache License, Version 2.0 (the "License");
  	 * you may not use this file except in compliance with the License.
  	 * You may obtain a copy of the License at
  	 *
  	 *     http://www.apache.org/licenses/LICENSE-2.0
  	 *
  	 * Unless required by applicable law or agreed to in writing, software
  	 * distributed under the License is distributed on an "AS IS" BASIS,
  	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  	 * See the License for the specific language governing permissions and
  	 * limitations under the License.
  	 */







  	var Transmuxer = /** @class */ (function () {
  	    function Transmuxer(mediaDataSource, config) {
  	        this.TAG = 'Transmuxer';
  	        this._emitter = new (events__WEBPACK_IMPORTED_MODULE_0___default())();
  	        if (config.enableWorker && typeof (Worker) !== 'undefined') {
  	            try {
  	                this._worker = webworkify_webpack__WEBPACK_IMPORTED_MODULE_1___default()(/*require.resolve*/(/*! ./transmuxing-worker */ "./src/core/transmuxing-worker.js"));
  	                this._workerDestroying = false;
  	                this._worker.addEventListener('message', this._onWorkerMessage.bind(this));
  	                this._worker.postMessage({ cmd: 'init', param: [mediaDataSource, config] });
  	                this.e = {
  	                    onLoggingConfigChanged: this._onLoggingConfigChanged.bind(this)
  	                };
  	                _utils_logging_control_js__WEBPACK_IMPORTED_MODULE_3__.default.registerListener(this.e.onLoggingConfigChanged);
  	                this._worker.postMessage({ cmd: 'logging_config', param: _utils_logging_control_js__WEBPACK_IMPORTED_MODULE_3__.default.getConfig() });
  	            }
  	            catch (error) {
  	                _utils_logger_js__WEBPACK_IMPORTED_MODULE_2__.default.e(this.TAG, 'Error while initialize transmuxing worker, fallback to inline transmuxing');
  	                this._worker = null;
  	                this._controller = new _transmuxing_controller_js__WEBPACK_IMPORTED_MODULE_4__.default(mediaDataSource, config);
  	            }
  	        }
  	        else {
  	            this._controller = new _transmuxing_controller_js__WEBPACK_IMPORTED_MODULE_4__.default(mediaDataSource, config);
  	        }
  	        if (this._controller) {
  	            var ctl = this._controller;
  	            ctl.on(_transmuxing_events_js__WEBPACK_IMPORTED_MODULE_5__.default.IO_ERROR, this._onIOError.bind(this));
  	            ctl.on(_transmuxing_events_js__WEBPACK_IMPORTED_MODULE_5__.default.DEMUX_ERROR, this._onDemuxError.bind(this));
  	            ctl.on(_transmuxing_events_js__WEBPACK_IMPORTED_MODULE_5__.default.INIT_SEGMENT, this._onInitSegment.bind(this));
  	            ctl.on(_transmuxing_events_js__WEBPACK_IMPORTED_MODULE_5__.default.MEDIA_SEGMENT, this._onMediaSegment.bind(this));
  	            ctl.on(_transmuxing_events_js__WEBPACK_IMPORTED_MODULE_5__.default.LOADING_COMPLETE, this._onLoadingComplete.bind(this));
  	            ctl.on(_transmuxing_events_js__WEBPACK_IMPORTED_MODULE_5__.default.RECOVERED_EARLY_EOF, this._onRecoveredEarlyEof.bind(this));
  	            ctl.on(_transmuxing_events_js__WEBPACK_IMPORTED_MODULE_5__.default.MEDIA_INFO, this._onMediaInfo.bind(this));
  	            ctl.on(_transmuxing_events_js__WEBPACK_IMPORTED_MODULE_5__.default.METADATA_ARRIVED, this._onMetaDataArrived.bind(this));
  	            ctl.on(_transmuxing_events_js__WEBPACK_IMPORTED_MODULE_5__.default.SCRIPTDATA_ARRIVED, this._onScriptDataArrived.bind(this));
  	            ctl.on(_transmuxing_events_js__WEBPACK_IMPORTED_MODULE_5__.default.STATISTICS_INFO, this._onStatisticsInfo.bind(this));
  	            ctl.on(_transmuxing_events_js__WEBPACK_IMPORTED_MODULE_5__.default.RECOMMEND_SEEKPOINT, this._onRecommendSeekpoint.bind(this));
  	        }
  	    }
  	    Transmuxer.prototype.destroy = function () {
  	        if (this._worker) {
  	            if (!this._workerDestroying) {
  	                this._workerDestroying = true;
  	                this._worker.postMessage({ cmd: 'destroy' });
  	                _utils_logging_control_js__WEBPACK_IMPORTED_MODULE_3__.default.removeListener(this.e.onLoggingConfigChanged);
  	                this.e = null;
  	            }
  	        }
  	        else {
  	            this._controller.destroy();
  	            this._controller = null;
  	        }
  	        this._emitter.removeAllListeners();
  	        this._emitter = null;
  	    };
  	    Transmuxer.prototype.on = function (event, listener) {
  	        this._emitter.addListener(event, listener);
  	    };
  	    Transmuxer.prototype.off = function (event, listener) {
  	        this._emitter.removeListener(event, listener);
  	    };
  	    Transmuxer.prototype.hasWorker = function () {
  	        return this._worker != null;
  	    };
  	    Transmuxer.prototype.open = function () {
  	        if (this._worker) {
  	            this._worker.postMessage({ cmd: 'start' });
  	        }
  	        else {
  	            this._controller.start();
  	        }
  	    };
  	    Transmuxer.prototype.close = function () {
  	        if (this._worker) {
  	            this._worker.postMessage({ cmd: 'stop' });
  	        }
  	        else {
  	            this._controller.stop();
  	        }
  	    };
  	    Transmuxer.prototype.seek = function (milliseconds) {
  	        if (this._worker) {
  	            this._worker.postMessage({ cmd: 'seek', param: milliseconds });
  	        }
  	        else {
  	            this._controller.seek(milliseconds);
  	        }
  	    };
  	    Transmuxer.prototype.pause = function () {
  	        if (this._worker) {
  	            this._worker.postMessage({ cmd: 'pause' });
  	        }
  	        else {
  	            this._controller.pause();
  	        }
  	    };
  	    Transmuxer.prototype.resume = function () {
  	        if (this._worker) {
  	            this._worker.postMessage({ cmd: 'resume' });
  	        }
  	        else {
  	            this._controller.resume();
  	        }
  	    };
  	    Transmuxer.prototype._onInitSegment = function (type, initSegment) {
  	        var _this = this;
  	        // do async invoke
  	        Promise.resolve().then(function () {
  	            _this._emitter.emit(_transmuxing_events_js__WEBPACK_IMPORTED_MODULE_5__.default.INIT_SEGMENT, type, initSegment);
  	        });
  	    };
  	    Transmuxer.prototype._onMediaSegment = function (type, mediaSegment) {
  	        var _this = this;
  	        Promise.resolve().then(function () {
  	            _this._emitter.emit(_transmuxing_events_js__WEBPACK_IMPORTED_MODULE_5__.default.MEDIA_SEGMENT, type, mediaSegment);
  	        });
  	    };
  	    Transmuxer.prototype._onLoadingComplete = function () {
  	        var _this = this;
  	        Promise.resolve().then(function () {
  	            _this._emitter.emit(_transmuxing_events_js__WEBPACK_IMPORTED_MODULE_5__.default.LOADING_COMPLETE);
  	        });
  	    };
  	    Transmuxer.prototype._onRecoveredEarlyEof = function () {
  	        var _this = this;
  	        Promise.resolve().then(function () {
  	            _this._emitter.emit(_transmuxing_events_js__WEBPACK_IMPORTED_MODULE_5__.default.RECOVERED_EARLY_EOF);
  	        });
  	    };
  	    Transmuxer.prototype._onMediaInfo = function (mediaInfo) {
  	        var _this = this;
  	        Promise.resolve().then(function () {
  	            _this._emitter.emit(_transmuxing_events_js__WEBPACK_IMPORTED_MODULE_5__.default.MEDIA_INFO, mediaInfo);
  	        });
  	    };
  	    Transmuxer.prototype._onMetaDataArrived = function (metadata) {
  	        var _this = this;
  	        Promise.resolve().then(function () {
  	            _this._emitter.emit(_transmuxing_events_js__WEBPACK_IMPORTED_MODULE_5__.default.METADATA_ARRIVED, metadata);
  	        });
  	    };
  	    Transmuxer.prototype._onScriptDataArrived = function (data) {
  	        var _this = this;
  	        Promise.resolve().then(function () {
  	            _this._emitter.emit(_transmuxing_events_js__WEBPACK_IMPORTED_MODULE_5__.default.SCRIPTDATA_ARRIVED, data);
  	        });
  	    };
  	    Transmuxer.prototype._onStatisticsInfo = function (statisticsInfo) {
  	        var _this = this;
  	        Promise.resolve().then(function () {
  	            _this._emitter.emit(_transmuxing_events_js__WEBPACK_IMPORTED_MODULE_5__.default.STATISTICS_INFO, statisticsInfo);
  	        });
  	    };
  	    Transmuxer.prototype._onIOError = function (type, info) {
  	        var _this = this;
  	        Promise.resolve().then(function () {
  	            _this._emitter.emit(_transmuxing_events_js__WEBPACK_IMPORTED_MODULE_5__.default.IO_ERROR, type, info);
  	        });
  	    };
  	    Transmuxer.prototype._onDemuxError = function (type, info) {
  	        var _this = this;
  	        Promise.resolve().then(function () {
  	            _this._emitter.emit(_transmuxing_events_js__WEBPACK_IMPORTED_MODULE_5__.default.DEMUX_ERROR, type, info);
  	        });
  	    };
  	    Transmuxer.prototype._onRecommendSeekpoint = function (milliseconds) {
  	        var _this = this;
  	        Promise.resolve().then(function () {
  	            _this._emitter.emit(_transmuxing_events_js__WEBPACK_IMPORTED_MODULE_5__.default.RECOMMEND_SEEKPOINT, milliseconds);
  	        });
  	    };
  	    Transmuxer.prototype._onLoggingConfigChanged = function (config) {
  	        if (this._worker) {
  	            this._worker.postMessage({ cmd: 'logging_config', param: config });
  	        }
  	    };
  	    Transmuxer.prototype._onWorkerMessage = function (e) {
  	        var message = e.data;
  	        var data = message.data;
  	        if (message.msg === 'destroyed' || this._workerDestroying) {
  	            this._workerDestroying = false;
  	            this._worker.terminate();
  	            this._worker = null;
  	            return;
  	        }
  	        switch (message.msg) {
  	            case _transmuxing_events_js__WEBPACK_IMPORTED_MODULE_5__.default.INIT_SEGMENT:
  	            case _transmuxing_events_js__WEBPACK_IMPORTED_MODULE_5__.default.MEDIA_SEGMENT:
  	                this._emitter.emit(message.msg, data.type, data.data);
  	                break;
  	            case _transmuxing_events_js__WEBPACK_IMPORTED_MODULE_5__.default.LOADING_COMPLETE:
  	            case _transmuxing_events_js__WEBPACK_IMPORTED_MODULE_5__.default.RECOVERED_EARLY_EOF:
  	                this._emitter.emit(message.msg);
  	                break;
  	            case _transmuxing_events_js__WEBPACK_IMPORTED_MODULE_5__.default.MEDIA_INFO:
  	                Object.setPrototypeOf(data, _media_info_js__WEBPACK_IMPORTED_MODULE_6__.default.prototype);
  	                this._emitter.emit(message.msg, data);
  	                break;
  	            case _transmuxing_events_js__WEBPACK_IMPORTED_MODULE_5__.default.METADATA_ARRIVED:
  	            case _transmuxing_events_js__WEBPACK_IMPORTED_MODULE_5__.default.SCRIPTDATA_ARRIVED:
  	            case _transmuxing_events_js__WEBPACK_IMPORTED_MODULE_5__.default.STATISTICS_INFO:
  	                this._emitter.emit(message.msg, data);
  	                break;
  	            case _transmuxing_events_js__WEBPACK_IMPORTED_MODULE_5__.default.IO_ERROR:
  	            case _transmuxing_events_js__WEBPACK_IMPORTED_MODULE_5__.default.DEMUX_ERROR:
  	                this._emitter.emit(message.msg, data.type, data.info);
  	                break;
  	            case _transmuxing_events_js__WEBPACK_IMPORTED_MODULE_5__.default.RECOMMEND_SEEKPOINT:
  	                this._emitter.emit(message.msg, data);
  	                break;
  	            case 'logcat_callback':
  	                _utils_logger_js__WEBPACK_IMPORTED_MODULE_2__.default.emitter.emit('log', data.type, data.logcat);
  	                break;
  	        }
  	    };
  	    return Transmuxer;
  	}());
  	/* harmony default export */ __webpack_exports__["default"] = (Transmuxer);


  	/***/ }),

  	/***/ "./src/core/transmuxing-controller.js":
  	/*!********************************************!*\
  	  !*** ./src/core/transmuxing-controller.js ***!
  	  \********************************************/
  	/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {
  	__webpack_require__.r(__webpack_exports__);
  	/* harmony import */ var events__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! events */ "./node_modules/events/events.js");
  	/* harmony import */ var events__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(events__WEBPACK_IMPORTED_MODULE_0__);
  	/* harmony import */ var _utils_logger_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../utils/logger.js */ "./src/utils/logger.js");
  	/* harmony import */ var _utils_browser_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../utils/browser.js */ "./src/utils/browser.js");
  	/* harmony import */ var _media_info_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./media-info.js */ "./src/core/media-info.js");
  	/* harmony import */ var _demux_flv_demuxer_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../demux/flv-demuxer.js */ "./src/demux/flv-demuxer.js");
  	/* harmony import */ var _remux_mp4_remuxer_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../remux/mp4-remuxer.js */ "./src/remux/mp4-remuxer.js");
  	/* harmony import */ var _demux_demux_errors_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../demux/demux-errors.js */ "./src/demux/demux-errors.js");
  	/* harmony import */ var _io_io_controller_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../io/io-controller.js */ "./src/io/io-controller.js");
  	/* harmony import */ var _transmuxing_events_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./transmuxing-events.js */ "./src/core/transmuxing-events.js");
  	/*
  	 * Copyright (C) 2016 Bilibili. All Rights Reserved.
  	 *
  	 * @author zheng qian <xqq@xqq.im>
  	 *
  	 * Licensed under the Apache License, Version 2.0 (the "License");
  	 * you may not use this file except in compliance with the License.
  	 * You may obtain a copy of the License at
  	 *
  	 *     http://www.apache.org/licenses/LICENSE-2.0
  	 *
  	 * Unless required by applicable law or agreed to in writing, software
  	 * distributed under the License is distributed on an "AS IS" BASIS,
  	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  	 * See the License for the specific language governing permissions and
  	 * limitations under the License.
  	 */









  	// Transmuxing (IO, Demuxing, Remuxing) controller, with multipart support
  	var TransmuxingController = /** @class */ (function () {
  	    function TransmuxingController(mediaDataSource, config) {
  	        this.TAG = 'TransmuxingController';
  	        this._emitter = new (events__WEBPACK_IMPORTED_MODULE_0___default())();
  	        this._config = config;
  	        // treat single part media as multipart media, which has only one segment
  	        if (!mediaDataSource.segments) {
  	            mediaDataSource.segments = [{
  	                    duration: mediaDataSource.duration,
  	                    filesize: mediaDataSource.filesize,
  	                    url: mediaDataSource.url
  	                }];
  	        }
  	        // fill in default IO params if not exists
  	        if (typeof mediaDataSource.cors !== 'boolean') {
  	            mediaDataSource.cors = true;
  	        }
  	        if (typeof mediaDataSource.withCredentials !== 'boolean') {
  	            mediaDataSource.withCredentials = false;
  	        }
  	        this._mediaDataSource = mediaDataSource;
  	        this._currentSegmentIndex = 0;
  	        var totalDuration = 0;
  	        this._mediaDataSource.segments.forEach(function (segment) {
  	            // timestampBase for each segment, and calculate total duration
  	            segment.timestampBase = totalDuration;
  	            totalDuration += segment.duration;
  	            // params needed by IOController
  	            segment.cors = mediaDataSource.cors;
  	            segment.withCredentials = mediaDataSource.withCredentials;
  	            // referrer policy control, if exist
  	            if (config.referrerPolicy) {
  	                segment.referrerPolicy = config.referrerPolicy;
  	            }
  	        });
  	        if (!isNaN(totalDuration) && this._mediaDataSource.duration !== totalDuration) {
  	            this._mediaDataSource.duration = totalDuration;
  	        }
  	        this._mediaInfo = null;
  	        this._demuxer = null;
  	        this._remuxer = null;
  	        this._ioctl = null;
  	        this._pendingSeekTime = null;
  	        this._pendingResolveSeekPoint = null;
  	        this._statisticsReporter = null;
  	    }
  	    TransmuxingController.prototype.destroy = function () {
  	        this._mediaInfo = null;
  	        this._mediaDataSource = null;
  	        if (this._statisticsReporter) {
  	            this._disableStatisticsReporter();
  	        }
  	        if (this._ioctl) {
  	            this._ioctl.destroy();
  	            this._ioctl = null;
  	        }
  	        if (this._demuxer) {
  	            this._demuxer.destroy();
  	            this._demuxer = null;
  	        }
  	        if (this._remuxer) {
  	            this._remuxer.destroy();
  	            this._remuxer = null;
  	        }
  	        this._emitter.removeAllListeners();
  	        this._emitter = null;
  	    };
  	    TransmuxingController.prototype.on = function (event, listener) {
  	        this._emitter.addListener(event, listener);
  	    };
  	    TransmuxingController.prototype.off = function (event, listener) {
  	        this._emitter.removeListener(event, listener);
  	    };
  	    TransmuxingController.prototype.start = function () {
  	        this._loadSegment(0);
  	        this._enableStatisticsReporter();
  	    };
  	    TransmuxingController.prototype._loadSegment = function (segmentIndex, optionalFrom) {
  	        this._currentSegmentIndex = segmentIndex;
  	        var dataSource = this._mediaDataSource.segments[segmentIndex];
  	        var ioctl = this._ioctl = new _io_io_controller_js__WEBPACK_IMPORTED_MODULE_7__.default(dataSource, this._config, segmentIndex);
  	        ioctl.onError = this._onIOException.bind(this);
  	        ioctl.onSeeked = this._onIOSeeked.bind(this);
  	        ioctl.onComplete = this._onIOComplete.bind(this);
  	        ioctl.onRedirect = this._onIORedirect.bind(this);
  	        ioctl.onRecoveredEarlyEof = this._onIORecoveredEarlyEof.bind(this);
  	        if (optionalFrom) {
  	            this._demuxer.bindDataSource(this._ioctl);
  	        }
  	        else {
  	            ioctl.onDataArrival = this._onInitChunkArrival.bind(this);
  	        }
  	        ioctl.open(optionalFrom);
  	    };
  	    TransmuxingController.prototype.stop = function () {
  	        this._internalAbort();
  	        this._disableStatisticsReporter();
  	    };
  	    TransmuxingController.prototype._internalAbort = function () {
  	        if (this._ioctl) {
  	            this._ioctl.destroy();
  	            this._ioctl = null;
  	        }
  	    };
  	    TransmuxingController.prototype.pause = function () {
  	        if (this._ioctl && this._ioctl.isWorking()) {
  	            this._ioctl.pause();
  	            this._disableStatisticsReporter();
  	        }
  	    };
  	    TransmuxingController.prototype.resume = function () {
  	        if (this._ioctl && this._ioctl.isPaused()) {
  	            this._ioctl.resume();
  	            this._enableStatisticsReporter();
  	        }
  	    };
  	    TransmuxingController.prototype.seek = function (milliseconds) {
  	        if (this._mediaInfo == null || !this._mediaInfo.isSeekable()) {
  	            return;
  	        }
  	        var targetSegmentIndex = this._searchSegmentIndexContains(milliseconds);
  	        if (targetSegmentIndex === this._currentSegmentIndex) {
  	            // intra-segment seeking
  	            var segmentInfo = this._mediaInfo.segments[targetSegmentIndex];
  	            if (segmentInfo == undefined) {
  	                // current segment loading started, but mediainfo hasn't received yet
  	                // wait for the metadata loaded, then seek to expected position
  	                this._pendingSeekTime = milliseconds;
  	            }
  	            else {
  	                var keyframe = segmentInfo.getNearestKeyframe(milliseconds);
  	                this._remuxer.seek(keyframe.milliseconds);
  	                this._ioctl.seek(keyframe.fileposition);
  	                // Will be resolved in _onRemuxerMediaSegmentArrival()
  	                this._pendingResolveSeekPoint = keyframe.milliseconds;
  	            }
  	        }
  	        else {
  	            // cross-segment seeking
  	            var targetSegmentInfo = this._mediaInfo.segments[targetSegmentIndex];
  	            if (targetSegmentInfo == undefined) {
  	                // target segment hasn't been loaded. We need metadata then seek to expected time
  	                this._pendingSeekTime = milliseconds;
  	                this._internalAbort();
  	                this._remuxer.seek();
  	                this._remuxer.insertDiscontinuity();
  	                this._loadSegment(targetSegmentIndex);
  	                // Here we wait for the metadata loaded, then seek to expected position
  	            }
  	            else {
  	                // We have target segment's metadata, direct seek to target position
  	                var keyframe = targetSegmentInfo.getNearestKeyframe(milliseconds);
  	                this._internalAbort();
  	                this._remuxer.seek(milliseconds);
  	                this._remuxer.insertDiscontinuity();
  	                this._demuxer.resetMediaInfo();
  	                this._demuxer.timestampBase = this._mediaDataSource.segments[targetSegmentIndex].timestampBase;
  	                this._loadSegment(targetSegmentIndex, keyframe.fileposition);
  	                this._pendingResolveSeekPoint = keyframe.milliseconds;
  	                this._reportSegmentMediaInfo(targetSegmentIndex);
  	            }
  	        }
  	        this._enableStatisticsReporter();
  	    };
  	    TransmuxingController.prototype._searchSegmentIndexContains = function (milliseconds) {
  	        var segments = this._mediaDataSource.segments;
  	        var idx = segments.length - 1;
  	        for (var i = 0; i < segments.length; i++) {
  	            if (milliseconds < segments[i].timestampBase) {
  	                idx = i - 1;
  	                break;
  	            }
  	        }
  	        return idx;
  	    };
  	    TransmuxingController.prototype._onInitChunkArrival = function (data, byteStart) {
  	        var _this = this;
  	        var probeData = null;
  	        var consumed = 0;
  	        if (byteStart > 0) {
  	            // IOController seeked immediately after opened, byteStart > 0 callback may received
  	            this._demuxer.bindDataSource(this._ioctl);
  	            this._demuxer.timestampBase = this._mediaDataSource.segments[this._currentSegmentIndex].timestampBase;
  	            consumed = this._demuxer.parseChunks(data, byteStart);
  	        }
  	        else if ((probeData = _demux_flv_demuxer_js__WEBPACK_IMPORTED_MODULE_4__.default.probe(data)).match) {
  	            // Always create new FLVDemuxer
  	            this._demuxer = new _demux_flv_demuxer_js__WEBPACK_IMPORTED_MODULE_4__.default(probeData, this._config);
  	            if (!this._remuxer) {
  	                this._remuxer = new _remux_mp4_remuxer_js__WEBPACK_IMPORTED_MODULE_5__.default(this._config);
  	            }
  	            var mds = this._mediaDataSource;
  	            if (mds.duration != undefined && !isNaN(mds.duration)) {
  	                this._demuxer.overridedDuration = mds.duration;
  	            }
  	            if (typeof mds.hasAudio === 'boolean') {
  	                this._demuxer.overridedHasAudio = mds.hasAudio;
  	            }
  	            if (typeof mds.hasVideo === 'boolean') {
  	                this._demuxer.overridedHasVideo = mds.hasVideo;
  	            }
  	            this._demuxer.timestampBase = mds.segments[this._currentSegmentIndex].timestampBase;
  	            this._demuxer.onError = this._onDemuxException.bind(this);
  	            this._demuxer.onMediaInfo = this._onMediaInfo.bind(this);
  	            this._demuxer.onMetaDataArrived = this._onMetaDataArrived.bind(this);
  	            this._demuxer.onScriptDataArrived = this._onScriptDataArrived.bind(this);
  	            this._remuxer.bindDataSource(this._demuxer
  	                .bindDataSource(this._ioctl));
  	            this._remuxer.onInitSegment = this._onRemuxerInitSegmentArrival.bind(this);
  	            this._remuxer.onMediaSegment = this._onRemuxerMediaSegmentArrival.bind(this);
  	            consumed = this._demuxer.parseChunks(data, byteStart);
  	        }
  	        else {
  	            probeData = null;
  	            _utils_logger_js__WEBPACK_IMPORTED_MODULE_1__.default.e(this.TAG, 'Non-FLV, Unsupported media type!');
  	            Promise.resolve().then(function () {
  	                _this._internalAbort();
  	            });
  	            this._emitter.emit(_transmuxing_events_js__WEBPACK_IMPORTED_MODULE_8__.default.DEMUX_ERROR, _demux_demux_errors_js__WEBPACK_IMPORTED_MODULE_6__.default.FORMAT_UNSUPPORTED, 'Non-FLV, Unsupported media type');
  	            consumed = 0;
  	        }
  	        return consumed;
  	    };
  	    TransmuxingController.prototype._onMediaInfo = function (mediaInfo) {
  	        var _this = this;
  	        if (this._mediaInfo == null) {
  	            // Store first segment's mediainfo as global mediaInfo
  	            this._mediaInfo = Object.assign({}, mediaInfo);
  	            this._mediaInfo.keyframesIndex = null;
  	            this._mediaInfo.segments = [];
  	            this._mediaInfo.segmentCount = this._mediaDataSource.segments.length;
  	            Object.setPrototypeOf(this._mediaInfo, _media_info_js__WEBPACK_IMPORTED_MODULE_3__.default.prototype);
  	        }
  	        var segmentInfo = Object.assign({}, mediaInfo);
  	        Object.setPrototypeOf(segmentInfo, _media_info_js__WEBPACK_IMPORTED_MODULE_3__.default.prototype);
  	        this._mediaInfo.segments[this._currentSegmentIndex] = segmentInfo;
  	        // notify mediaInfo update
  	        this._reportSegmentMediaInfo(this._currentSegmentIndex);
  	        if (this._pendingSeekTime != null) {
  	            Promise.resolve().then(function () {
  	                var target = _this._pendingSeekTime;
  	                _this._pendingSeekTime = null;
  	                _this.seek(target);
  	            });
  	        }
  	    };
  	    TransmuxingController.prototype._onMetaDataArrived = function (metadata) {
  	        this._emitter.emit(_transmuxing_events_js__WEBPACK_IMPORTED_MODULE_8__.default.METADATA_ARRIVED, metadata);
  	    };
  	    TransmuxingController.prototype._onScriptDataArrived = function (data) {
  	        this._emitter.emit(_transmuxing_events_js__WEBPACK_IMPORTED_MODULE_8__.default.SCRIPTDATA_ARRIVED, data);
  	    };
  	    TransmuxingController.prototype._onIOSeeked = function () {
  	        this._remuxer.insertDiscontinuity();
  	    };
  	    TransmuxingController.prototype._onIOComplete = function (extraData) {
  	        var segmentIndex = extraData;
  	        var nextSegmentIndex = segmentIndex + 1;
  	        if (nextSegmentIndex < this._mediaDataSource.segments.length) {
  	            this._internalAbort();
  	            this._remuxer.flushStashedSamples();
  	            this._loadSegment(nextSegmentIndex);
  	        }
  	        else {
  	            this._remuxer.flushStashedSamples();
  	            this._emitter.emit(_transmuxing_events_js__WEBPACK_IMPORTED_MODULE_8__.default.LOADING_COMPLETE);
  	            this._disableStatisticsReporter();
  	        }
  	    };
  	    TransmuxingController.prototype._onIORedirect = function (redirectedURL) {
  	        var segmentIndex = this._ioctl.extraData;
  	        this._mediaDataSource.segments[segmentIndex].redirectedURL = redirectedURL;
  	    };
  	    TransmuxingController.prototype._onIORecoveredEarlyEof = function () {
  	        this._emitter.emit(_transmuxing_events_js__WEBPACK_IMPORTED_MODULE_8__.default.RECOVERED_EARLY_EOF);
  	    };
  	    TransmuxingController.prototype._onIOException = function (type, info) {
  	        _utils_logger_js__WEBPACK_IMPORTED_MODULE_1__.default.e(this.TAG, "IOException: type = " + type + ", code = " + info.code + ", msg = " + info.msg);
  	        this._emitter.emit(_transmuxing_events_js__WEBPACK_IMPORTED_MODULE_8__.default.IO_ERROR, type, info);
  	        this._disableStatisticsReporter();
  	    };
  	    TransmuxingController.prototype._onDemuxException = function (type, info) {
  	        _utils_logger_js__WEBPACK_IMPORTED_MODULE_1__.default.e(this.TAG, "DemuxException: type = " + type + ", info = " + info);
  	        this._emitter.emit(_transmuxing_events_js__WEBPACK_IMPORTED_MODULE_8__.default.DEMUX_ERROR, type, info);
  	    };
  	    TransmuxingController.prototype._onRemuxerInitSegmentArrival = function (type, initSegment) {
  	        this._emitter.emit(_transmuxing_events_js__WEBPACK_IMPORTED_MODULE_8__.default.INIT_SEGMENT, type, initSegment);
  	    };
  	    TransmuxingController.prototype._onRemuxerMediaSegmentArrival = function (type, mediaSegment) {
  	        if (this._pendingSeekTime != null) {
  	            // Media segments after new-segment cross-seeking should be dropped.
  	            return;
  	        }
  	        this._emitter.emit(_transmuxing_events_js__WEBPACK_IMPORTED_MODULE_8__.default.MEDIA_SEGMENT, type, mediaSegment);
  	        // Resolve pending seekPoint
  	        if (this._pendingResolveSeekPoint != null && type === 'video') {
  	            var syncPoints = mediaSegment.info.syncPoints;
  	            var seekpoint = this._pendingResolveSeekPoint;
  	            this._pendingResolveSeekPoint = null;
  	            // Safari: Pass PTS for recommend_seekpoint
  	            if (_utils_browser_js__WEBPACK_IMPORTED_MODULE_2__.default.safari && syncPoints.length > 0 && syncPoints[0].originalDts === seekpoint) {
  	                seekpoint = syncPoints[0].pts;
  	            }
  	            // else: use original DTS (keyframe.milliseconds)
  	            this._emitter.emit(_transmuxing_events_js__WEBPACK_IMPORTED_MODULE_8__.default.RECOMMEND_SEEKPOINT, seekpoint);
  	        }
  	    };
  	    TransmuxingController.prototype._enableStatisticsReporter = function () {
  	        if (this._statisticsReporter == null) {
  	            this._statisticsReporter = self.setInterval(this._reportStatisticsInfo.bind(this), this._config.statisticsInfoReportInterval);
  	        }
  	    };
  	    TransmuxingController.prototype._disableStatisticsReporter = function () {
  	        if (this._statisticsReporter) {
  	            self.clearInterval(this._statisticsReporter);
  	            this._statisticsReporter = null;
  	        }
  	    };
  	    TransmuxingController.prototype._reportSegmentMediaInfo = function (segmentIndex) {
  	        var segmentInfo = this._mediaInfo.segments[segmentIndex];
  	        var exportInfo = Object.assign({}, segmentInfo);
  	        exportInfo.duration = this._mediaInfo.duration;
  	        exportInfo.segmentCount = this._mediaInfo.segmentCount;
  	        delete exportInfo.segments;
  	        delete exportInfo.keyframesIndex;
  	        this._emitter.emit(_transmuxing_events_js__WEBPACK_IMPORTED_MODULE_8__.default.MEDIA_INFO, exportInfo);
  	    };
  	    TransmuxingController.prototype._reportStatisticsInfo = function () {
  	        var info = {};
  	        info.url = this._ioctl.currentURL;
  	        info.hasRedirect = this._ioctl.hasRedirect;
  	        if (info.hasRedirect) {
  	            info.redirectedURL = this._ioctl.currentRedirectedURL;
  	        }
  	        info.speed = this._ioctl.currentSpeed;
  	        info.loaderType = this._ioctl.loaderType;
  	        info.currentSegmentIndex = this._currentSegmentIndex;
  	        info.totalSegmentCount = this._mediaDataSource.segments.length;
  	        this._emitter.emit(_transmuxing_events_js__WEBPACK_IMPORTED_MODULE_8__.default.STATISTICS_INFO, info);
  	    };
  	    return TransmuxingController;
  	}());
  	/* harmony default export */ __webpack_exports__["default"] = (TransmuxingController);


  	/***/ }),

  	/***/ "./src/core/transmuxing-events.js":
  	/*!****************************************!*\
  	  !*** ./src/core/transmuxing-events.js ***!
  	  \****************************************/
  	/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {
  	__webpack_require__.r(__webpack_exports__);
  	/*
  	 * Copyright (C) 2016 Bilibili. All Rights Reserved.
  	 *
  	 * @author zheng qian <xqq@xqq.im>
  	 *
  	 * Licensed under the Apache License, Version 2.0 (the "License");
  	 * you may not use this file except in compliance with the License.
  	 * You may obtain a copy of the License at
  	 *
  	 *     http://www.apache.org/licenses/LICENSE-2.0
  	 *
  	 * Unless required by applicable law or agreed to in writing, software
  	 * distributed under the License is distributed on an "AS IS" BASIS,
  	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  	 * See the License for the specific language governing permissions and
  	 * limitations under the License.
  	 */
  	var TransmuxingEvents = {
  	    IO_ERROR: 'io_error',
  	    DEMUX_ERROR: 'demux_error',
  	    INIT_SEGMENT: 'init_segment',
  	    MEDIA_SEGMENT: 'media_segment',
  	    LOADING_COMPLETE: 'loading_complete',
  	    RECOVERED_EARLY_EOF: 'recovered_early_eof',
  	    MEDIA_INFO: 'media_info',
  	    METADATA_ARRIVED: 'metadata_arrived',
  	    SCRIPTDATA_ARRIVED: 'scriptdata_arrived',
  	    STATISTICS_INFO: 'statistics_info',
  	    RECOMMEND_SEEKPOINT: 'recommend_seekpoint'
  	};
  	/* harmony default export */ __webpack_exports__["default"] = (TransmuxingEvents);


  	/***/ }),

  	/***/ "./src/core/transmuxing-worker.js":
  	/*!****************************************!*\
  	  !*** ./src/core/transmuxing-worker.js ***!
  	  \****************************************/
  	/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {
  	__webpack_require__.r(__webpack_exports__);
  	/* harmony import */ var _utils_logging_control_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utils/logging-control.js */ "./src/utils/logging-control.js");
  	/* harmony import */ var _utils_polyfill_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../utils/polyfill.js */ "./src/utils/polyfill.js");
  	/* harmony import */ var _transmuxing_controller_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./transmuxing-controller.js */ "./src/core/transmuxing-controller.js");
  	/* harmony import */ var _transmuxing_events_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./transmuxing-events.js */ "./src/core/transmuxing-events.js");
  	/*
  	 * Copyright (C) 2016 Bilibili. All Rights Reserved.
  	 *
  	 * @author zheng qian <xqq@xqq.im>
  	 *
  	 * Licensed under the Apache License, Version 2.0 (the "License");
  	 * you may not use this file except in compliance with the License.
  	 * You may obtain a copy of the License at
  	 *
  	 *     http://www.apache.org/licenses/LICENSE-2.0
  	 *
  	 * Unless required by applicable law or agreed to in writing, software
  	 * distributed under the License is distributed on an "AS IS" BASIS,
  	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  	 * See the License for the specific language governing permissions and
  	 * limitations under the License.
  	 */




  	/* post message to worker:
  	   data: {
  	       cmd: string
  	       param: any
  	   }

  	   receive message from worker:
  	   data: {
  	       msg: string,
  	       data: any
  	   }
  	 */
  	var TransmuxingWorker = function (self) {
  	    var controller = null;
  	    var logcatListener = onLogcatCallback.bind(this);
  	    _utils_polyfill_js__WEBPACK_IMPORTED_MODULE_1__.default.install();
  	    self.addEventListener('message', function (e) {
  	        switch (e.data.cmd) {
  	            case 'init':
  	                controller = new _transmuxing_controller_js__WEBPACK_IMPORTED_MODULE_2__.default(e.data.param[0], e.data.param[1]);
  	                controller.on(_transmuxing_events_js__WEBPACK_IMPORTED_MODULE_3__.default.IO_ERROR, onIOError.bind(this));
  	                controller.on(_transmuxing_events_js__WEBPACK_IMPORTED_MODULE_3__.default.DEMUX_ERROR, onDemuxError.bind(this));
  	                controller.on(_transmuxing_events_js__WEBPACK_IMPORTED_MODULE_3__.default.INIT_SEGMENT, onInitSegment.bind(this));
  	                controller.on(_transmuxing_events_js__WEBPACK_IMPORTED_MODULE_3__.default.MEDIA_SEGMENT, onMediaSegment.bind(this));
  	                controller.on(_transmuxing_events_js__WEBPACK_IMPORTED_MODULE_3__.default.LOADING_COMPLETE, onLoadingComplete.bind(this));
  	                controller.on(_transmuxing_events_js__WEBPACK_IMPORTED_MODULE_3__.default.RECOVERED_EARLY_EOF, onRecoveredEarlyEof.bind(this));
  	                controller.on(_transmuxing_events_js__WEBPACK_IMPORTED_MODULE_3__.default.MEDIA_INFO, onMediaInfo.bind(this));
  	                controller.on(_transmuxing_events_js__WEBPACK_IMPORTED_MODULE_3__.default.METADATA_ARRIVED, onMetaDataArrived.bind(this));
  	                controller.on(_transmuxing_events_js__WEBPACK_IMPORTED_MODULE_3__.default.SCRIPTDATA_ARRIVED, onScriptDataArrived.bind(this));
  	                controller.on(_transmuxing_events_js__WEBPACK_IMPORTED_MODULE_3__.default.STATISTICS_INFO, onStatisticsInfo.bind(this));
  	                controller.on(_transmuxing_events_js__WEBPACK_IMPORTED_MODULE_3__.default.RECOMMEND_SEEKPOINT, onRecommendSeekpoint.bind(this));
  	                break;
  	            case 'destroy':
  	                if (controller) {
  	                    controller.destroy();
  	                    controller = null;
  	                }
  	                self.postMessage({ msg: 'destroyed' });
  	                break;
  	            case 'start':
  	                controller.start();
  	                break;
  	            case 'stop':
  	                controller.stop();
  	                break;
  	            case 'seek':
  	                controller.seek(e.data.param);
  	                break;
  	            case 'pause':
  	                controller.pause();
  	                break;
  	            case 'resume':
  	                controller.resume();
  	                break;
  	            case 'logging_config': {
  	                var config = e.data.param;
  	                _utils_logging_control_js__WEBPACK_IMPORTED_MODULE_0__.default.applyConfig(config);
  	                if (config.enableCallback === true) {
  	                    _utils_logging_control_js__WEBPACK_IMPORTED_MODULE_0__.default.addLogListener(logcatListener);
  	                }
  	                else {
  	                    _utils_logging_control_js__WEBPACK_IMPORTED_MODULE_0__.default.removeLogListener(logcatListener);
  	                }
  	                break;
  	            }
  	        }
  	    });
  	    function onInitSegment(type, initSegment) {
  	        var obj = {
  	            msg: _transmuxing_events_js__WEBPACK_IMPORTED_MODULE_3__.default.INIT_SEGMENT,
  	            data: {
  	                type: type,
  	                data: initSegment
  	            }
  	        };
  	        self.postMessage(obj, [initSegment.data]); // data: ArrayBuffer
  	    }
  	    function onMediaSegment(type, mediaSegment) {
  	        var obj = {
  	            msg: _transmuxing_events_js__WEBPACK_IMPORTED_MODULE_3__.default.MEDIA_SEGMENT,
  	            data: {
  	                type: type,
  	                data: mediaSegment
  	            }
  	        };
  	        self.postMessage(obj, [mediaSegment.data]); // data: ArrayBuffer
  	    }
  	    function onLoadingComplete() {
  	        var obj = {
  	            msg: _transmuxing_events_js__WEBPACK_IMPORTED_MODULE_3__.default.LOADING_COMPLETE
  	        };
  	        self.postMessage(obj);
  	    }
  	    function onRecoveredEarlyEof() {
  	        var obj = {
  	            msg: _transmuxing_events_js__WEBPACK_IMPORTED_MODULE_3__.default.RECOVERED_EARLY_EOF
  	        };
  	        self.postMessage(obj);
  	    }
  	    function onMediaInfo(mediaInfo) {
  	        var obj = {
  	            msg: _transmuxing_events_js__WEBPACK_IMPORTED_MODULE_3__.default.MEDIA_INFO,
  	            data: mediaInfo
  	        };
  	        self.postMessage(obj);
  	    }
  	    function onMetaDataArrived(metadata) {
  	        var obj = {
  	            msg: _transmuxing_events_js__WEBPACK_IMPORTED_MODULE_3__.default.METADATA_ARRIVED,
  	            data: metadata
  	        };
  	        self.postMessage(obj);
  	    }
  	    function onScriptDataArrived(data) {
  	        var obj = {
  	            msg: _transmuxing_events_js__WEBPACK_IMPORTED_MODULE_3__.default.SCRIPTDATA_ARRIVED,
  	            data: data
  	        };
  	        self.postMessage(obj);
  	    }
  	    function onStatisticsInfo(statInfo) {
  	        var obj = {
  	            msg: _transmuxing_events_js__WEBPACK_IMPORTED_MODULE_3__.default.STATISTICS_INFO,
  	            data: statInfo
  	        };
  	        self.postMessage(obj);
  	    }
  	    function onIOError(type, info) {
  	        self.postMessage({
  	            msg: _transmuxing_events_js__WEBPACK_IMPORTED_MODULE_3__.default.IO_ERROR,
  	            data: {
  	                type: type,
  	                info: info
  	            }
  	        });
  	    }
  	    function onDemuxError(type, info) {
  	        self.postMessage({
  	            msg: _transmuxing_events_js__WEBPACK_IMPORTED_MODULE_3__.default.DEMUX_ERROR,
  	            data: {
  	                type: type,
  	                info: info
  	            }
  	        });
  	    }
  	    function onRecommendSeekpoint(milliseconds) {
  	        self.postMessage({
  	            msg: _transmuxing_events_js__WEBPACK_IMPORTED_MODULE_3__.default.RECOMMEND_SEEKPOINT,
  	            data: milliseconds
  	        });
  	    }
  	    function onLogcatCallback(type, str) {
  	        self.postMessage({
  	            msg: 'logcat_callback',
  	            data: {
  	                type: type,
  	                logcat: str
  	            }
  	        });
  	    }
  	};
  	/* harmony default export */ __webpack_exports__["default"] = (TransmuxingWorker);


  	/***/ }),

  	/***/ "./src/demux/amf-parser.js":
  	/*!*********************************!*\
  	  !*** ./src/demux/amf-parser.js ***!
  	  \*********************************/
  	/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {
  	__webpack_require__.r(__webpack_exports__);
  	/* harmony import */ var _utils_logger_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utils/logger.js */ "./src/utils/logger.js");
  	/* harmony import */ var _utils_utf8_conv_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../utils/utf8-conv.js */ "./src/utils/utf8-conv.js");
  	/* harmony import */ var _utils_exception_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../utils/exception.js */ "./src/utils/exception.js");
  	/*
  	 * Copyright (C) 2016 Bilibili. All Rights Reserved.
  	 *
  	 * @author zheng qian <xqq@xqq.im>
  	 *
  	 * Licensed under the Apache License, Version 2.0 (the "License");
  	 * you may not use this file except in compliance with the License.
  	 * You may obtain a copy of the License at
  	 *
  	 *     http://www.apache.org/licenses/LICENSE-2.0
  	 *
  	 * Unless required by applicable law or agreed to in writing, software
  	 * distributed under the License is distributed on an "AS IS" BASIS,
  	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  	 * See the License for the specific language governing permissions and
  	 * limitations under the License.
  	 */



  	var le = (function () {
  	    var buf = new ArrayBuffer(2);
  	    (new DataView(buf)).setInt16(0, 256, true); // little-endian write
  	    return (new Int16Array(buf))[0] === 256; // platform-spec read, if equal then LE
  	})();
  	var AMF = /** @class */ (function () {
  	    function AMF() {
  	    }
  	    AMF.parseScriptData = function (arrayBuffer, dataOffset, dataSize) {
  	        var data = {};
  	        try {
  	            var name_1 = AMF.parseValue(arrayBuffer, dataOffset, dataSize);
  	            var value = AMF.parseValue(arrayBuffer, dataOffset + name_1.size, dataSize - name_1.size);
  	            data[name_1.data] = value.data;
  	        }
  	        catch (e) {
  	            _utils_logger_js__WEBPACK_IMPORTED_MODULE_0__.default.e('AMF', e.toString());
  	        }
  	        return data;
  	    };
  	    AMF.parseObject = function (arrayBuffer, dataOffset, dataSize) {
  	        if (dataSize < 3) {
  	            throw new _utils_exception_js__WEBPACK_IMPORTED_MODULE_2__.IllegalStateException('Data not enough when parse ScriptDataObject');
  	        }
  	        var name = AMF.parseString(arrayBuffer, dataOffset, dataSize);
  	        var value = AMF.parseValue(arrayBuffer, dataOffset + name.size, dataSize - name.size);
  	        var isObjectEnd = value.objectEnd;
  	        return {
  	            data: {
  	                name: name.data,
  	                value: value.data
  	            },
  	            size: name.size + value.size,
  	            objectEnd: isObjectEnd
  	        };
  	    };
  	    AMF.parseVariable = function (arrayBuffer, dataOffset, dataSize) {
  	        return AMF.parseObject(arrayBuffer, dataOffset, dataSize);
  	    };
  	    AMF.parseString = function (arrayBuffer, dataOffset, dataSize) {
  	        if (dataSize < 2) {
  	            throw new _utils_exception_js__WEBPACK_IMPORTED_MODULE_2__.IllegalStateException('Data not enough when parse String');
  	        }
  	        var v = new DataView(arrayBuffer, dataOffset, dataSize);
  	        var length = v.getUint16(0, !le);
  	        var str;
  	        if (length > 0) {
  	            str = (0, _utils_utf8_conv_js__WEBPACK_IMPORTED_MODULE_1__.default)(new Uint8Array(arrayBuffer, dataOffset + 2, length));
  	        }
  	        else {
  	            str = '';
  	        }
  	        return {
  	            data: str,
  	            size: 2 + length
  	        };
  	    };
  	    AMF.parseLongString = function (arrayBuffer, dataOffset, dataSize) {
  	        if (dataSize < 4) {
  	            throw new _utils_exception_js__WEBPACK_IMPORTED_MODULE_2__.IllegalStateException('Data not enough when parse LongString');
  	        }
  	        var v = new DataView(arrayBuffer, dataOffset, dataSize);
  	        var length = v.getUint32(0, !le);
  	        var str;
  	        if (length > 0) {
  	            str = (0, _utils_utf8_conv_js__WEBPACK_IMPORTED_MODULE_1__.default)(new Uint8Array(arrayBuffer, dataOffset + 4, length));
  	        }
  	        else {
  	            str = '';
  	        }
  	        return {
  	            data: str,
  	            size: 4 + length
  	        };
  	    };
  	    AMF.parseDate = function (arrayBuffer, dataOffset, dataSize) {
  	        if (dataSize < 10) {
  	            throw new _utils_exception_js__WEBPACK_IMPORTED_MODULE_2__.IllegalStateException('Data size invalid when parse Date');
  	        }
  	        var v = new DataView(arrayBuffer, dataOffset, dataSize);
  	        var timestamp = v.getFloat64(0, !le);
  	        var localTimeOffset = v.getInt16(8, !le);
  	        timestamp += localTimeOffset * 60 * 1000; // get UTC time
  	        return {
  	            data: new Date(timestamp),
  	            size: 8 + 2
  	        };
  	    };
  	    AMF.parseValue = function (arrayBuffer, dataOffset, dataSize) {
  	        if (dataSize < 1) {
  	            throw new _utils_exception_js__WEBPACK_IMPORTED_MODULE_2__.IllegalStateException('Data not enough when parse Value');
  	        }
  	        var v = new DataView(arrayBuffer, dataOffset, dataSize);
  	        var offset = 1;
  	        var type = v.getUint8(0);
  	        var value;
  	        var objectEnd = false;
  	        try {
  	            switch (type) {
  	                case 0: // Number(Double) type
  	                    value = v.getFloat64(1, !le);
  	                    offset += 8;
  	                    break;
  	                case 1: { // Boolean type
  	                    var b = v.getUint8(1);
  	                    value = b ? true : false;
  	                    offset += 1;
  	                    break;
  	                }
  	                case 2: { // String type
  	                    var amfstr = AMF.parseString(arrayBuffer, dataOffset + 1, dataSize - 1);
  	                    value = amfstr.data;
  	                    offset += amfstr.size;
  	                    break;
  	                }
  	                case 3: { // Object(s) type
  	                    value = {};
  	                    var terminal = 0; // workaround for malformed Objects which has missing ScriptDataObjectEnd
  	                    if ((v.getUint32(dataSize - 4, !le) & 0x00FFFFFF) === 9) {
  	                        terminal = 3;
  	                    }
  	                    while (offset < dataSize - 4) { // 4 === type(UI8) + ScriptDataObjectEnd(UI24)
  	                        var amfobj = AMF.parseObject(arrayBuffer, dataOffset + offset, dataSize - offset - terminal);
  	                        if (amfobj.objectEnd)
  	                            break;
  	                        value[amfobj.data.name] = amfobj.data.value;
  	                        offset += amfobj.size;
  	                    }
  	                    if (offset <= dataSize - 3) {
  	                        var marker = v.getUint32(offset - 1, !le) & 0x00FFFFFF;
  	                        if (marker === 9) {
  	                            offset += 3;
  	                        }
  	                    }
  	                    break;
  	                }
  	                case 8: { // ECMA array type (Mixed array)
  	                    value = {};
  	                    offset += 4; // ECMAArrayLength(UI32)
  	                    var terminal = 0; // workaround for malformed MixedArrays which has missing ScriptDataObjectEnd
  	                    if ((v.getUint32(dataSize - 4, !le) & 0x00FFFFFF) === 9) {
  	                        terminal = 3;
  	                    }
  	                    while (offset < dataSize - 8) { // 8 === type(UI8) + ECMAArrayLength(UI32) + ScriptDataVariableEnd(UI24)
  	                        var amfvar = AMF.parseVariable(arrayBuffer, dataOffset + offset, dataSize - offset - terminal);
  	                        if (amfvar.objectEnd)
  	                            break;
  	                        value[amfvar.data.name] = amfvar.data.value;
  	                        offset += amfvar.size;
  	                    }
  	                    if (offset <= dataSize - 3) {
  	                        var marker = v.getUint32(offset - 1, !le) & 0x00FFFFFF;
  	                        if (marker === 9) {
  	                            offset += 3;
  	                        }
  	                    }
  	                    break;
  	                }
  	                case 9: // ScriptDataObjectEnd
  	                    value = undefined;
  	                    offset = 1;
  	                    objectEnd = true;
  	                    break;
  	                case 10: { // Strict array type
  	                    // ScriptDataValue[n]. NOTE: according to video_file_format_spec_v10_1.pdf
  	                    value = [];
  	                    var strictArrayLength = v.getUint32(1, !le);
  	                    offset += 4;
  	                    for (var i = 0; i < strictArrayLength; i++) {
  	                        var val = AMF.parseValue(arrayBuffer, dataOffset + offset, dataSize - offset);
  	                        value.push(val.data);
  	                        offset += val.size;
  	                    }
  	                    break;
  	                }
  	                case 11: { // Date type
  	                    var date = AMF.parseDate(arrayBuffer, dataOffset + 1, dataSize - 1);
  	                    value = date.data;
  	                    offset += date.size;
  	                    break;
  	                }
  	                case 12: { // Long string type
  	                    var amfLongStr = AMF.parseString(arrayBuffer, dataOffset + 1, dataSize - 1);
  	                    value = amfLongStr.data;
  	                    offset += amfLongStr.size;
  	                    break;
  	                }
  	                default:
  	                    // ignore and skip
  	                    offset = dataSize;
  	                    _utils_logger_js__WEBPACK_IMPORTED_MODULE_0__.default.w('AMF', 'Unsupported AMF value type ' + type);
  	            }
  	        }
  	        catch (e) {
  	            _utils_logger_js__WEBPACK_IMPORTED_MODULE_0__.default.e('AMF', e.toString());
  	        }
  	        return {
  	            data: value,
  	            size: offset,
  	            objectEnd: objectEnd
  	        };
  	    };
  	    return AMF;
  	}());
  	/* harmony default export */ __webpack_exports__["default"] = (AMF);


  	/***/ }),

  	/***/ "./src/demux/demux-errors.js":
  	/*!***********************************!*\
  	  !*** ./src/demux/demux-errors.js ***!
  	  \***********************************/
  	/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {
  	__webpack_require__.r(__webpack_exports__);
  	/*
  	 * Copyright (C) 2016 Bilibili. All Rights Reserved.
  	 *
  	 * @author zheng qian <xqq@xqq.im>
  	 *
  	 * Licensed under the Apache License, Version 2.0 (the "License");
  	 * you may not use this file except in compliance with the License.
  	 * You may obtain a copy of the License at
  	 *
  	 *     http://www.apache.org/licenses/LICENSE-2.0
  	 *
  	 * Unless required by applicable law or agreed to in writing, software
  	 * distributed under the License is distributed on an "AS IS" BASIS,
  	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  	 * See the License for the specific language governing permissions and
  	 * limitations under the License.
  	 */
  	var DemuxErrors = {
  	    OK: 'OK',
  	    FORMAT_ERROR: 'FormatError',
  	    FORMAT_UNSUPPORTED: 'FormatUnsupported',
  	    CODEC_UNSUPPORTED: 'CodecUnsupported'
  	};
  	/* harmony default export */ __webpack_exports__["default"] = (DemuxErrors);


  	/***/ }),

  	/***/ "./src/demux/exp-golomb.js":
  	/*!*********************************!*\
  	  !*** ./src/demux/exp-golomb.js ***!
  	  \*********************************/
  	/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {
  	__webpack_require__.r(__webpack_exports__);
  	/* harmony import */ var _utils_exception_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utils/exception.js */ "./src/utils/exception.js");
  	/*
  	 * Copyright (C) 2016 Bilibili. All Rights Reserved.
  	 *
  	 * @author zheng qian <xqq@xqq.im>
  	 *
  	 * Licensed under the Apache License, Version 2.0 (the "License");
  	 * you may not use this file except in compliance with the License.
  	 * You may obtain a copy of the License at
  	 *
  	 *     http://www.apache.org/licenses/LICENSE-2.0
  	 *
  	 * Unless required by applicable law or agreed to in writing, software
  	 * distributed under the License is distributed on an "AS IS" BASIS,
  	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  	 * See the License for the specific language governing permissions and
  	 * limitations under the License.
  	 */

  	// Exponential-Golomb buffer decoder
  	var ExpGolomb = /** @class */ (function () {
  	    function ExpGolomb(uint8array) {
  	        this.TAG = 'ExpGolomb';
  	        this._buffer = uint8array;
  	        this._buffer_index = 0;
  	        this._total_bytes = uint8array.byteLength;
  	        this._total_bits = uint8array.byteLength * 8;
  	        this._current_word = 0;
  	        this._current_word_bits_left = 0;
  	    }
  	    ExpGolomb.prototype.destroy = function () {
  	        this._buffer = null;
  	    };
  	    ExpGolomb.prototype._fillCurrentWord = function () {
  	        var buffer_bytes_left = this._total_bytes - this._buffer_index;
  	        if (buffer_bytes_left <= 0)
  	            throw new _utils_exception_js__WEBPACK_IMPORTED_MODULE_0__.IllegalStateException('ExpGolomb: _fillCurrentWord() but no bytes available');
  	        var bytes_read = Math.min(4, buffer_bytes_left);
  	        var word = new Uint8Array(4);
  	        word.set(this._buffer.subarray(this._buffer_index, this._buffer_index + bytes_read));
  	        this._current_word = new DataView(word.buffer).getUint32(0, false);
  	        this._buffer_index += bytes_read;
  	        this._current_word_bits_left = bytes_read * 8;
  	    };
  	    ExpGolomb.prototype.readBits = function (bits) {
  	        if (bits > 32)
  	            throw new _utils_exception_js__WEBPACK_IMPORTED_MODULE_0__.InvalidArgumentException('ExpGolomb: readBits() bits exceeded max 32bits!');
  	        if (bits <= this._current_word_bits_left) {
  	            var result_1 = this._current_word >>> (32 - bits);
  	            this._current_word <<= bits;
  	            this._current_word_bits_left -= bits;
  	            return result_1;
  	        }
  	        var result = this._current_word_bits_left ? this._current_word : 0;
  	        result = result >>> (32 - this._current_word_bits_left);
  	        var bits_need_left = bits - this._current_word_bits_left;
  	        this._fillCurrentWord();
  	        var bits_read_next = Math.min(bits_need_left, this._current_word_bits_left);
  	        var result2 = this._current_word >>> (32 - bits_read_next);
  	        this._current_word <<= bits_read_next;
  	        this._current_word_bits_left -= bits_read_next;
  	        result = (result << bits_read_next) | result2;
  	        return result;
  	    };
  	    ExpGolomb.prototype.readBool = function () {
  	        return this.readBits(1) === 1;
  	    };
  	    ExpGolomb.prototype.readByte = function () {
  	        return this.readBits(8);
  	    };
  	    ExpGolomb.prototype._skipLeadingZero = function () {
  	        var zero_count;
  	        for (zero_count = 0; zero_count < this._current_word_bits_left; zero_count++) {
  	            if (0 !== (this._current_word & (0x80000000 >>> zero_count))) {
  	                this._current_word <<= zero_count;
  	                this._current_word_bits_left -= zero_count;
  	                return zero_count;
  	            }
  	        }
  	        this._fillCurrentWord();
  	        return zero_count + this._skipLeadingZero();
  	    };
  	    ExpGolomb.prototype.readUEG = function () {
  	        var leading_zeros = this._skipLeadingZero();
  	        return this.readBits(leading_zeros + 1) - 1;
  	    };
  	    ExpGolomb.prototype.readSEG = function () {
  	        var value = this.readUEG();
  	        if (value & 0x01) {
  	            return (value + 1) >>> 1;
  	        }
  	        else {
  	            return -1 * (value >>> 1);
  	        }
  	    };
  	    return ExpGolomb;
  	}());
  	/* harmony default export */ __webpack_exports__["default"] = (ExpGolomb);


  	/***/ }),

  	/***/ "./src/demux/flv-demuxer.js":
  	/*!**********************************!*\
  	  !*** ./src/demux/flv-demuxer.js ***!
  	  \**********************************/
  	/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {
  	__webpack_require__.r(__webpack_exports__);
  	/* harmony import */ var _utils_logger_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utils/logger.js */ "./src/utils/logger.js");
  	/* harmony import */ var _amf_parser_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./amf-parser.js */ "./src/demux/amf-parser.js");
  	/* harmony import */ var _sps_parser_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./sps-parser.js */ "./src/demux/sps-parser.js");
  	/* harmony import */ var _demux_errors_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./demux-errors.js */ "./src/demux/demux-errors.js");
  	/* harmony import */ var _core_media_info_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../core/media-info.js */ "./src/core/media-info.js");
  	/* harmony import */ var _utils_exception_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../utils/exception.js */ "./src/utils/exception.js");
  	function ReadBig32(array, index) {
  	    return ((array[index] << 24) |
  	        (array[index + 1] << 16) |
  	        (array[index + 2] << 8) |
  	        (array[index + 3]));
  	}
  	var FLVDemuxer = /** @class */ (function () {
  	    function FLVDemuxer(probeData, config) {
  	        this.TAG = 'FLVDemuxer';
  	        this._config = config;
  	        this._onError = null;
  	        this._onMediaInfo = null;
  	        this._onMetaDataArrived = null;
  	        this._onScriptDataArrived = null;
  	        this._onTrackMetadata = null;
  	        this._onDataAvailable = null;
  	        this._dataOffset = probeData.dataOffset;
  	        this._firstParse = true;
  	        this._dispatch = false;
  	        this._hasAudio = probeData.hasAudioTrack;
  	        this._hasVideo = probeData.hasVideoTrack;
  	        this._hasAudioFlagOverrided = false;
  	        this._hasVideoFlagOverrided = false;
  	        this._audioInitialMetadataDispatched = false;
  	        this._videoInitialMetadataDispatched = false;
  	        this._mediaInfo = new _core_media_info_js__WEBPACK_IMPORTED_MODULE_4__.default();
  	        this._mediaInfo.hasAudio = this._hasAudio;
  	        this._mediaInfo.hasVideo = this._hasVideo;
  	        this._metadata = null;
  	        this._audioMetadata = null;
  	        this._videoMetadata = null;
  	        this._naluLengthSize = 4;
  	        this._timestampBase = 0; // int32, in milliseconds
  	        this._timescale = 1000;
  	        this._duration = 0; // int32, in milliseconds
  	        this._durationOverrided = false;
  	        this._referenceFrameRate = {
  	            fixed: true,
  	            fps: 23.976,
  	            fps_num: 23976,
  	            fps_den: 1000
  	        };
  	        this._flvSoundRateTable = [5500, 11025, 22050, 44100, 48000];
  	        this._mpegSamplingRates = [
  	            96000, 88200, 64000, 48000, 44100, 32000,
  	            24000, 22050, 16000, 12000, 11025, 8000, 7350
  	        ];
  	        this._mpegAudioV10SampleRateTable = [44100, 48000, 32000, 0];
  	        this._mpegAudioV20SampleRateTable = [22050, 24000, 16000, 0];
  	        this._mpegAudioV25SampleRateTable = [11025, 12000, 8000, 0];
  	        this._mpegAudioL1BitRateTable = [0, 32, 64, 96, 128, 160, 192, 224, 256, 288, 320, 352, 384, 416, 448, -1];
  	        this._mpegAudioL2BitRateTable = [0, 32, 48, 56, 64, 80, 96, 112, 128, 160, 192, 224, 256, 320, 384, -1];
  	        this._mpegAudioL3BitRateTable = [0, 32, 40, 48, 56, 64, 80, 96, 112, 128, 160, 192, 224, 256, 320, -1];
  	        this._videoTrack = { type: 'video', id: 1, sequenceNumber: 0, samples: [], length: 0 };
  	        this._audioTrack = { type: 'audio', id: 2, sequenceNumber: 0, samples: [], length: 0 };
  	        this._littleEndian = (function () {
  	            var buf = new ArrayBuffer(2);
  	            (new DataView(buf)).setInt16(0, 256, true); // little-endian write
  	            return (new Int16Array(buf))[0] === 256; // platform-spec read, if equal then LE
  	        })();
  	    }
  	    FLVDemuxer.prototype.destroy = function () {
  	        this._mediaInfo = null;
  	        this._metadata = null;
  	        this._audioMetadata = null;
  	        this._videoMetadata = null;
  	        this._videoTrack = null;
  	        this._audioTrack = null;
  	        this._onError = null;
  	        this._onMediaInfo = null;
  	        this._onMetaDataArrived = null;
  	        this._onScriptDataArrived = null;
  	        this._onTrackMetadata = null;
  	        this._onDataAvailable = null;
  	    };
  	    FLVDemuxer.probe = function (buffer) {
  	        var data = new Uint8Array(buffer);
  	        var mismatch = { match: false };
  	        if (data[0] !== 0x46 || data[1] !== 0x4C || data[2] !== 0x56 || data[3] !== 0x01) {
  	            return mismatch;
  	        }
  	        var hasAudio = ((data[4] & 4) >>> 2) !== 0;
  	        var hasVideo = (data[4] & 1) !== 0;
  	        var offset = ReadBig32(data, 5);
  	        if (offset < 9) {
  	            return mismatch;
  	        }
  	        return {
  	            match: true,
  	            consumed: offset,
  	            dataOffset: offset,
  	            hasAudioTrack: hasAudio,
  	            hasVideoTrack: hasVideo
  	        };
  	    };
  	    FLVDemuxer.prototype.bindDataSource = function (loader) {
  	        loader.onDataArrival = this.parseChunks.bind(this);
  	        return this;
  	    };
  	    Object.defineProperty(FLVDemuxer.prototype, "onTrackMetadata", {
  	        // prototype: function(type: string, metadata: any): void
  	        get: function () {
  	            return this._onTrackMetadata;
  	        },
  	        set: function (callback) {
  	            this._onTrackMetadata = callback;
  	        },
  	        enumerable: false,
  	        configurable: true
  	    });
  	    Object.defineProperty(FLVDemuxer.prototype, "onMediaInfo", {
  	        // prototype: function(mediaInfo: MediaInfo): void
  	        get: function () {
  	            return this._onMediaInfo;
  	        },
  	        set: function (callback) {
  	            this._onMediaInfo = callback;
  	        },
  	        enumerable: false,
  	        configurable: true
  	    });
  	    Object.defineProperty(FLVDemuxer.prototype, "onMetaDataArrived", {
  	        get: function () {
  	            return this._onMetaDataArrived;
  	        },
  	        set: function (callback) {
  	            this._onMetaDataArrived = callback;
  	        },
  	        enumerable: false,
  	        configurable: true
  	    });
  	    Object.defineProperty(FLVDemuxer.prototype, "onScriptDataArrived", {
  	        get: function () {
  	            return this._onScriptDataArrived;
  	        },
  	        set: function (callback) {
  	            this._onScriptDataArrived = callback;
  	        },
  	        enumerable: false,
  	        configurable: true
  	    });
  	    Object.defineProperty(FLVDemuxer.prototype, "onError", {
  	        // prototype: function(type: number, info: string): void
  	        get: function () {
  	            return this._onError;
  	        },
  	        set: function (callback) {
  	            this._onError = callback;
  	        },
  	        enumerable: false,
  	        configurable: true
  	    });
  	    Object.defineProperty(FLVDemuxer.prototype, "onDataAvailable", {
  	        // prototype: function(videoTrack: any, audioTrack: any): void
  	        get: function () {
  	            return this._onDataAvailable;
  	        },
  	        set: function (callback) {
  	            this._onDataAvailable = callback;
  	        },
  	        enumerable: false,
  	        configurable: true
  	    });
  	    Object.defineProperty(FLVDemuxer.prototype, "timestampBase", {
  	        // timestamp base for output samples, must be in milliseconds
  	        get: function () {
  	            return this._timestampBase;
  	        },
  	        set: function (base) {
  	            this._timestampBase = base;
  	        },
  	        enumerable: false,
  	        configurable: true
  	    });
  	    Object.defineProperty(FLVDemuxer.prototype, "overridedDuration", {
  	        get: function () {
  	            return this._duration;
  	        },
  	        // Force-override media duration. Must be in milliseconds, int32
  	        set: function (duration) {
  	            this._durationOverrided = true;
  	            this._duration = duration;
  	            this._mediaInfo.duration = duration;
  	        },
  	        enumerable: false,
  	        configurable: true
  	    });
  	    Object.defineProperty(FLVDemuxer.prototype, "overridedHasAudio", {
  	        // Force-override audio track present flag, boolean
  	        set: function (hasAudio) {
  	            this._hasAudioFlagOverrided = true;
  	            this._hasAudio = hasAudio;
  	            this._mediaInfo.hasAudio = hasAudio;
  	        },
  	        enumerable: false,
  	        configurable: true
  	    });
  	    Object.defineProperty(FLVDemuxer.prototype, "overridedHasVideo", {
  	        // Force-override video track present flag, boolean
  	        set: function (hasVideo) {
  	            this._hasVideoFlagOverrided = true;
  	            this._hasVideo = hasVideo;
  	            this._mediaInfo.hasVideo = hasVideo;
  	        },
  	        enumerable: false,
  	        configurable: true
  	    });
  	    FLVDemuxer.prototype.resetMediaInfo = function () {
  	        this._mediaInfo = new _core_media_info_js__WEBPACK_IMPORTED_MODULE_4__.default();
  	    };
  	    FLVDemuxer.prototype._isInitialMetadataDispatched = function () {
  	        if (this._hasAudio && this._hasVideo) { // both audio & video
  	            return this._audioInitialMetadataDispatched && this._videoInitialMetadataDispatched;
  	        }
  	        if (this._hasAudio && !this._hasVideo) { // audio only
  	            return this._audioInitialMetadataDispatched;
  	        }
  	        if (!this._hasAudio && this._hasVideo) { // video only
  	            return this._videoInitialMetadataDispatched;
  	        }
  	        return false;
  	    };
  	    // function parseChunks(chunk: ArrayBuffer, byteStart: number): number;
  	    FLVDemuxer.prototype.parseChunks = function (chunk, byteStart) {
  	        if (!this._onError || !this._onMediaInfo || !this._onTrackMetadata || !this._onDataAvailable) {
  	            throw new _utils_exception_js__WEBPACK_IMPORTED_MODULE_5__.IllegalStateException('Flv: onError & onMediaInfo & onTrackMetadata & onDataAvailable callback must be specified');
  	        }
  	        var offset = 0;
  	        var le = this._littleEndian;
  	        if (byteStart === 0) { // buffer with FLV header
  	            if (chunk.byteLength > 13) {
  	                var probeData = FLVDemuxer.probe(chunk);
  	                offset = probeData.dataOffset;
  	            }
  	            else {
  	                return 0;
  	            }
  	        }
  	        if (this._firstParse) { // handle PreviousTagSize0 before Tag1
  	            this._firstParse = false;
  	            if (byteStart + offset !== this._dataOffset) {
  	                _utils_logger_js__WEBPACK_IMPORTED_MODULE_0__.default.w(this.TAG, 'First time parsing but chunk byteStart invalid!');
  	            }
  	            var v = new DataView(chunk, offset);
  	            var prevTagSize0 = v.getUint32(0, !le);
  	            if (prevTagSize0 !== 0) {
  	                _utils_logger_js__WEBPACK_IMPORTED_MODULE_0__.default.w(this.TAG, 'PrevTagSize0 !== 0 !!!');
  	            }
  	            offset += 4;
  	        }
  	        while (offset < chunk.byteLength) {
  	            this._dispatch = true;
  	            var v = new DataView(chunk, offset);
  	            if (offset + 11 + 4 > chunk.byteLength) {
  	                // data not enough for parsing an flv tag
  	                break;
  	            }
  	            var tagType = v.getUint8(0);
  	            var dataSize = v.getUint32(0, !le) & 0x00FFFFFF;
  	            if (offset + 11 + dataSize + 4 > chunk.byteLength) {
  	                // data not enough for parsing actual data body
  	                break;
  	            }
  	            if (tagType !== 8 && tagType !== 9 && tagType !== 18) {
  	                _utils_logger_js__WEBPACK_IMPORTED_MODULE_0__.default.w(this.TAG, "Unsupported tag type " + tagType + ", skipped");
  	                // consume the whole tag (skip it)
  	                offset += 11 + dataSize + 4;
  	                continue;
  	            }
  	            var ts2 = v.getUint8(4);
  	            var ts1 = v.getUint8(5);
  	            var ts0 = v.getUint8(6);
  	            var ts3 = v.getUint8(7);
  	            var timestamp = ts0 | (ts1 << 8) | (ts2 << 16) | (ts3 << 24);
  	            var streamId = v.getUint32(7, !le) & 0x00FFFFFF;
  	            if (streamId !== 0) {
  	                _utils_logger_js__WEBPACK_IMPORTED_MODULE_0__.default.w(this.TAG, 'Meet tag which has StreamID != 0!');
  	            }
  	            var dataOffset = offset + 11;
  	            switch (tagType) {
  	                case 8: // Audio
  	                    this._parseAudioData(chunk, dataOffset, dataSize, timestamp);
  	                    break;
  	                case 9: // Video
  	                    this._parseVideoData(chunk, dataOffset, dataSize, timestamp, byteStart + offset);
  	                    break;
  	                case 18: // ScriptDataObject
  	                    this._parseScriptData(chunk, dataOffset, dataSize);
  	                    break;
  	            }
  	            var prevTagSize = v.getUint32(11 + dataSize, !le);
  	            if (prevTagSize !== 11 + dataSize) {
  	                _utils_logger_js__WEBPACK_IMPORTED_MODULE_0__.default.w(this.TAG, "Invalid PrevTagSize " + prevTagSize);
  	            }
  	            offset += 11 + dataSize + 4; // tagBody + dataSize + prevTagSize
  	        }
  	        // dispatch parsed frames to consumer (typically, the remuxer)
  	        if (this._isInitialMetadataDispatched()) {
  	            if (this._dispatch && (this._audioTrack.length || this._videoTrack.length)) {
  	                this._onDataAvailable(this._audioTrack, this._videoTrack);
  	            }
  	        }
  	        return offset; // consumed bytes, just equals latest offset index
  	    };
  	    FLVDemuxer.prototype._parseScriptData = function (arrayBuffer, dataOffset, dataSize) {
  	        var scriptData = _amf_parser_js__WEBPACK_IMPORTED_MODULE_1__.default.parseScriptData(arrayBuffer, dataOffset, dataSize);
  	        if (scriptData.hasOwnProperty('onMetaData')) {
  	            if (scriptData.onMetaData == null || typeof scriptData.onMetaData !== 'object') {
  	                _utils_logger_js__WEBPACK_IMPORTED_MODULE_0__.default.w(this.TAG, 'Invalid onMetaData structure!');
  	                return;
  	            }
  	            if (this._metadata) {
  	                _utils_logger_js__WEBPACK_IMPORTED_MODULE_0__.default.w(this.TAG, 'Found another onMetaData tag!');
  	            }
  	            this._metadata = scriptData;
  	            var onMetaData = this._metadata.onMetaData;
  	            if (this._onMetaDataArrived) {
  	                this._onMetaDataArrived(Object.assign({}, onMetaData));
  	            }
  	            if (typeof onMetaData.hasAudio === 'boolean') { // hasAudio
  	                if (this._hasAudioFlagOverrided === false) {
  	                    this._hasAudio = onMetaData.hasAudio;
  	                    this._mediaInfo.hasAudio = this._hasAudio;
  	                }
  	            }
  	            if (typeof onMetaData.hasVideo === 'boolean') { // hasVideo
  	                if (this._hasVideoFlagOverrided === false) {
  	                    this._hasVideo = onMetaData.hasVideo;
  	                    this._mediaInfo.hasVideo = this._hasVideo;
  	                }
  	            }
  	            if (typeof onMetaData.audiodatarate === 'number') { // audiodatarate
  	                this._mediaInfo.audioDataRate = onMetaData.audiodatarate;
  	            }
  	            if (typeof onMetaData.videodatarate === 'number') { // videodatarate
  	                this._mediaInfo.videoDataRate = onMetaData.videodatarate;
  	            }
  	            if (typeof onMetaData.width === 'number') { // width
  	                this._mediaInfo.width = onMetaData.width;
  	            }
  	            if (typeof onMetaData.height === 'number') { // height
  	                this._mediaInfo.height = onMetaData.height;
  	            }
  	            if (typeof onMetaData.duration === 'number') { // duration
  	                if (!this._durationOverrided) {
  	                    var duration = Math.floor(onMetaData.duration * this._timescale);
  	                    this._duration = duration;
  	                    this._mediaInfo.duration = duration;
  	                }
  	            }
  	            else {
  	                this._mediaInfo.duration = 0;
  	            }
  	            if (typeof onMetaData.framerate === 'number') { // framerate
  	                var fps_num = Math.floor(onMetaData.framerate * 1000);
  	                if (fps_num > 0) {
  	                    var fps = fps_num / 1000;
  	                    this._referenceFrameRate.fixed = true;
  	                    this._referenceFrameRate.fps = fps;
  	                    this._referenceFrameRate.fps_num = fps_num;
  	                    this._referenceFrameRate.fps_den = 1000;
  	                    this._mediaInfo.fps = fps;
  	                }
  	            }
  	            if (typeof onMetaData.keyframes === 'object') { // keyframes
  	                this._mediaInfo.hasKeyframesIndex = true;
  	                var keyframes = onMetaData.keyframes;
  	                this._mediaInfo.keyframesIndex = this._parseKeyframesIndex(keyframes);
  	                onMetaData.keyframes = null; // keyframes has been extracted, remove it
  	            }
  	            else {
  	                this._mediaInfo.hasKeyframesIndex = false;
  	            }
  	            this._dispatch = false;
  	            this._mediaInfo.metadata = onMetaData;
  	            _utils_logger_js__WEBPACK_IMPORTED_MODULE_0__.default.v(this.TAG, 'Parsed onMetaData');
  	            if (this._mediaInfo.isComplete()) {
  	                this._onMediaInfo(this._mediaInfo);
  	            }
  	        }
  	        if (Object.keys(scriptData).length > 0) {
  	            if (this._onScriptDataArrived) {
  	                this._onScriptDataArrived(Object.assign({}, scriptData));
  	            }
  	        }
  	    };
  	    FLVDemuxer.prototype._parseKeyframesIndex = function (keyframes) {
  	        var times = [];
  	        var filepositions = [];
  	        // ignore first keyframe which is actually AVC Sequence Header (AVCDecoderConfigurationRecord)
  	        for (var i = 1; i < keyframes.times.length; i++) {
  	            var time = this._timestampBase + Math.floor(keyframes.times[i] * 1000);
  	            times.push(time);
  	            filepositions.push(keyframes.filepositions[i]);
  	        }
  	        return {
  	            times: times,
  	            filepositions: filepositions
  	        };
  	    };
  	    FLVDemuxer.prototype._parseAudioData = function (arrayBuffer, dataOffset, dataSize, tagTimestamp) {
  	        if (dataSize <= 1) {
  	            _utils_logger_js__WEBPACK_IMPORTED_MODULE_0__.default.w(this.TAG, 'Flv: Invalid audio packet, missing SoundData payload!');
  	            return;
  	        }
  	        if (this._hasAudioFlagOverrided === true && this._hasAudio === false) {
  	            // If hasAudio: false indicated explicitly in MediaDataSource,
  	            // Ignore all the audio packets
  	            return;
  	        }
  	        this._littleEndian;
  	        var v = new DataView(arrayBuffer, dataOffset, dataSize);
  	        var soundSpec = v.getUint8(0);
  	        var soundFormat = soundSpec >>> 4;
  	        if (soundFormat !== 2 && soundFormat !== 10) { // MP3 or AAC
  	            this._onError(_demux_errors_js__WEBPACK_IMPORTED_MODULE_3__.default.CODEC_UNSUPPORTED, 'Flv: Unsupported audio codec idx: ' + soundFormat);
  	            return;
  	        }
  	        var soundRate = 0;
  	        var soundRateIndex = (soundSpec & 12) >>> 2;
  	        if (soundRateIndex >= 0 && soundRateIndex <= 4) {
  	            soundRate = this._flvSoundRateTable[soundRateIndex];
  	        }
  	        else {
  	            this._onError(_demux_errors_js__WEBPACK_IMPORTED_MODULE_3__.default.FORMAT_ERROR, 'Flv: Invalid audio sample rate idx: ' + soundRateIndex);
  	            return;
  	        }
  	        var soundType = (soundSpec & 1);
  	        var meta = this._audioMetadata;
  	        var track = this._audioTrack;
  	        if (!meta) {
  	            if (this._hasAudio === false && this._hasAudioFlagOverrided === false) {
  	                this._hasAudio = true;
  	                this._mediaInfo.hasAudio = true;
  	            }
  	            // initial metadata
  	            meta = this._audioMetadata = {};
  	            meta.type = 'audio';
  	            meta.id = track.id;
  	            meta.timescale = this._timescale;
  	            meta.duration = this._duration;
  	            meta.audioSampleRate = soundRate;
  	            meta.channelCount = (soundType === 0 ? 1 : 2);
  	        }
  	        if (soundFormat === 10) { // AAC
  	            var aacData = this._parseAACAudioData(arrayBuffer, dataOffset + 1, dataSize - 1);
  	            if (aacData == undefined) {
  	                return;
  	            }
  	            if (aacData.packetType === 0) { // AAC sequence header (AudioSpecificConfig)
  	                if (meta.config) {
  	                    _utils_logger_js__WEBPACK_IMPORTED_MODULE_0__.default.w(this.TAG, 'Found another AudioSpecificConfig!');
  	                }
  	                var misc = aacData.data;
  	                meta.audioSampleRate = misc.samplingRate;
  	                meta.channelCount = misc.channelCount;
  	                meta.codec = misc.codec;
  	                meta.originalCodec = misc.originalCodec;
  	                meta.config = misc.config;
  	                // The decode result of an aac sample is 1024 PCM samples
  	                meta.refSampleDuration = 1024 / meta.audioSampleRate * meta.timescale;
  	                _utils_logger_js__WEBPACK_IMPORTED_MODULE_0__.default.v(this.TAG, 'Parsed AudioSpecificConfig');
  	                if (this._isInitialMetadataDispatched()) {
  	                    // Non-initial metadata, force dispatch (or flush) parsed frames to remuxer
  	                    if (this._dispatch && (this._audioTrack.length || this._videoTrack.length)) {
  	                        this._onDataAvailable(this._audioTrack, this._videoTrack);
  	                    }
  	                }
  	                else {
  	                    this._audioInitialMetadataDispatched = true;
  	                }
  	                // then notify new metadata
  	                this._dispatch = false;
  	                this._onTrackMetadata('audio', meta);
  	                var mi = this._mediaInfo;
  	                mi.audioCodec = meta.originalCodec;
  	                mi.audioSampleRate = meta.audioSampleRate;
  	                mi.audioChannelCount = meta.channelCount;
  	                if (mi.hasVideo) {
  	                    if (mi.videoCodec != null) {
  	                        mi.mimeType = 'video/x-flv; codecs="' + mi.videoCodec + ',' + mi.audioCodec + '"';
  	                    }
  	                }
  	                else {
  	                    mi.mimeType = 'video/x-flv; codecs="' + mi.audioCodec + '"';
  	                }
  	                if (mi.isComplete()) {
  	                    this._onMediaInfo(mi);
  	                }
  	            }
  	            else if (aacData.packetType === 1) { // AAC raw frame data
  	                var dts = this._timestampBase + tagTimestamp;
  	                var aacSample = { unit: aacData.data, length: aacData.data.byteLength, dts: dts, pts: dts };
  	                track.samples.push(aacSample);
  	                track.length += aacData.data.length;
  	            }
  	            else {
  	                _utils_logger_js__WEBPACK_IMPORTED_MODULE_0__.default.e(this.TAG, "Flv: Unsupported AAC data type " + aacData.packetType);
  	            }
  	        }
  	        else if (soundFormat === 2) { // MP3
  	            if (!meta.codec) {
  	                // We need metadata for mp3 audio track, extract info from frame header
  	                var misc = this._parseMP3AudioData(arrayBuffer, dataOffset + 1, dataSize - 1, true);
  	                if (misc == undefined) {
  	                    return;
  	                }
  	                meta.audioSampleRate = misc.samplingRate;
  	                meta.channelCount = misc.channelCount;
  	                meta.codec = misc.codec;
  	                meta.originalCodec = misc.originalCodec;
  	                // The decode result of an mp3 sample is 1152 PCM samples
  	                meta.refSampleDuration = 1152 / meta.audioSampleRate * meta.timescale;
  	                _utils_logger_js__WEBPACK_IMPORTED_MODULE_0__.default.v(this.TAG, 'Parsed MPEG Audio Frame Header');
  	                this._audioInitialMetadataDispatched = true;
  	                this._onTrackMetadata('audio', meta);
  	                var mi = this._mediaInfo;
  	                mi.audioCodec = meta.codec;
  	                mi.audioSampleRate = meta.audioSampleRate;
  	                mi.audioChannelCount = meta.channelCount;
  	                mi.audioDataRate = misc.bitRate;
  	                if (mi.hasVideo) {
  	                    if (mi.videoCodec != null) {
  	                        mi.mimeType = 'video/x-flv; codecs="' + mi.videoCodec + ',' + mi.audioCodec + '"';
  	                    }
  	                }
  	                else {
  	                    mi.mimeType = 'video/x-flv; codecs="' + mi.audioCodec + '"';
  	                }
  	                if (mi.isComplete()) {
  	                    this._onMediaInfo(mi);
  	                }
  	            }
  	            // This packet is always a valid audio packet, extract it
  	            var data = this._parseMP3AudioData(arrayBuffer, dataOffset + 1, dataSize - 1, false);
  	            if (data == undefined) {
  	                return;
  	            }
  	            var dts = this._timestampBase + tagTimestamp;
  	            var mp3Sample = { unit: data, length: data.byteLength, dts: dts, pts: dts };
  	            track.samples.push(mp3Sample);
  	            track.length += data.length;
  	        }
  	    };
  	    FLVDemuxer.prototype._parseAACAudioData = function (arrayBuffer, dataOffset, dataSize) {
  	        if (dataSize <= 1) {
  	            _utils_logger_js__WEBPACK_IMPORTED_MODULE_0__.default.w(this.TAG, 'Flv: Invalid AAC packet, missing AACPacketType or/and Data!');
  	            return;
  	        }
  	        var result = {};
  	        var array = new Uint8Array(arrayBuffer, dataOffset, dataSize);
  	        result.packetType = array[0];
  	        if (array[0] === 0) {
  	            result.data = this._parseAACAudioSpecificConfig(arrayBuffer, dataOffset + 1, dataSize - 1);
  	        }
  	        else {
  	            result.data = array.subarray(1);
  	        }
  	        return result;
  	    };
  	    FLVDemuxer.prototype._parseAACAudioSpecificConfig = function (arrayBuffer, dataOffset, dataSize) {
  	        var array = new Uint8Array(arrayBuffer, dataOffset, dataSize);
  	        var config = null;
  	        /* Audio Object Type:
  	           0: Null
  	           1: AAC Main
  	           2: AAC LC
  	           3: AAC SSR (Scalable Sample Rate)
  	           4: AAC LTP (Long Term Prediction)
  	           5: HE-AAC / SBR (Spectral Band Replication)
  	           6: AAC Scalable
  	        */
  	        var audioObjectType = 0;
  	        var originalAudioObjectType = 0;
  	        var samplingIndex = 0;
  	        var extensionSamplingIndex = null;
  	        // 5 bits
  	        audioObjectType = originalAudioObjectType = array[0] >>> 3;
  	        // 4 bits
  	        samplingIndex = ((array[0] & 0x07) << 1) | (array[1] >>> 7);
  	        if (samplingIndex < 0 || samplingIndex >= this._mpegSamplingRates.length) {
  	            this._onError(_demux_errors_js__WEBPACK_IMPORTED_MODULE_3__.default.FORMAT_ERROR, 'Flv: AAC invalid sampling frequency index!');
  	            return;
  	        }
  	        var samplingFrequence = this._mpegSamplingRates[samplingIndex];
  	        // 4 bits
  	        var channelConfig = (array[1] & 0x78) >>> 3;
  	        if (channelConfig < 0 || channelConfig >= 8) {
  	            this._onError(_demux_errors_js__WEBPACK_IMPORTED_MODULE_3__.default.FORMAT_ERROR, 'Flv: AAC invalid channel configuration');
  	            return;
  	        }
  	        if (audioObjectType === 5) { // HE-AAC?
  	            // 4 bits
  	            extensionSamplingIndex = ((array[1] & 0x07) << 1) | (array[2] >>> 7);
  	            // 5 bits
  	            (array[2] & 0x7C) >>> 2;
  	        }
  	        // workarounds for various browsers
  	        var userAgent = self.navigator.userAgent.toLowerCase();
  	        if (userAgent.indexOf('firefox') !== -1) {
  	            // firefox: use SBR (HE-AAC) if freq less than 24kHz
  	            if (samplingIndex >= 6) {
  	                audioObjectType = 5;
  	                config = new Array(4);
  	                extensionSamplingIndex = samplingIndex - 3;
  	            }
  	            else { // use LC-AAC
  	                audioObjectType = 2;
  	                config = new Array(2);
  	                extensionSamplingIndex = samplingIndex;
  	            }
  	        }
  	        else if (userAgent.indexOf('android') !== -1) {
  	            // android: always use LC-AAC
  	            audioObjectType = 2;
  	            config = new Array(2);
  	            extensionSamplingIndex = samplingIndex;
  	        }
  	        else {
  	            // for other browsers, e.g. chrome...
  	            // Always use HE-AAC to make it easier to switch aac codec profile
  	            audioObjectType = 5;
  	            extensionSamplingIndex = samplingIndex;
  	            config = new Array(4);
  	            if (samplingIndex >= 6) {
  	                extensionSamplingIndex = samplingIndex - 3;
  	            }
  	            else if (channelConfig === 1) { // Mono channel
  	                audioObjectType = 2;
  	                config = new Array(2);
  	                extensionSamplingIndex = samplingIndex;
  	            }
  	        }
  	        config[0] = audioObjectType << 3;
  	        config[0] |= (samplingIndex & 0x0F) >>> 1;
  	        config[1] = (samplingIndex & 0x0F) << 7;
  	        config[1] |= (channelConfig & 0x0F) << 3;
  	        if (audioObjectType === 5) {
  	            config[1] |= ((extensionSamplingIndex & 0x0F) >>> 1);
  	            config[2] = (extensionSamplingIndex & 0x01) << 7;
  	            // extended audio object type: force to 2 (LC-AAC)
  	            config[2] |= (2 << 2);
  	            config[3] = 0;
  	        }
  	        return {
  	            config: config,
  	            samplingRate: samplingFrequence,
  	            channelCount: channelConfig,
  	            codec: 'mp4a.40.' + audioObjectType,
  	            originalCodec: 'mp4a.40.' + originalAudioObjectType
  	        };
  	    };
  	    FLVDemuxer.prototype._parseMP3AudioData = function (arrayBuffer, dataOffset, dataSize, requestHeader) {
  	        if (dataSize < 4) {
  	            _utils_logger_js__WEBPACK_IMPORTED_MODULE_0__.default.w(this.TAG, 'Flv: Invalid MP3 packet, header missing!');
  	            return;
  	        }
  	        this._littleEndian;
  	        var array = new Uint8Array(arrayBuffer, dataOffset, dataSize);
  	        var result = null;
  	        if (requestHeader) {
  	            if (array[0] !== 0xFF) {
  	                return;
  	            }
  	            var ver = (array[1] >>> 3) & 0x03;
  	            var layer = (array[1] & 0x06) >> 1;
  	            var bitrate_index = (array[2] & 0xF0) >>> 4;
  	            var sampling_freq_index = (array[2] & 0x0C) >>> 2;
  	            var channel_mode = (array[3] >>> 6) & 0x03;
  	            var channel_count = channel_mode !== 3 ? 2 : 1;
  	            var sample_rate = 0;
  	            var bit_rate = 0;
  	            var codec = 'mp3';
  	            switch (ver) {
  	                case 0: // MPEG 2.5
  	                    sample_rate = this._mpegAudioV25SampleRateTable[sampling_freq_index];
  	                    break;
  	                case 2: // MPEG 2
  	                    sample_rate = this._mpegAudioV20SampleRateTable[sampling_freq_index];
  	                    break;
  	                case 3: // MPEG 1
  	                    sample_rate = this._mpegAudioV10SampleRateTable[sampling_freq_index];
  	                    break;
  	            }
  	            switch (layer) {
  	                case 1: // Layer 3
  	                    if (bitrate_index < this._mpegAudioL3BitRateTable.length) {
  	                        bit_rate = this._mpegAudioL3BitRateTable[bitrate_index];
  	                    }
  	                    break;
  	                case 2: // Layer 2
  	                    if (bitrate_index < this._mpegAudioL2BitRateTable.length) {
  	                        bit_rate = this._mpegAudioL2BitRateTable[bitrate_index];
  	                    }
  	                    break;
  	                case 3: // Layer 1
  	                    if (bitrate_index < this._mpegAudioL1BitRateTable.length) {
  	                        bit_rate = this._mpegAudioL1BitRateTable[bitrate_index];
  	                    }
  	                    break;
  	            }
  	            result = {
  	                bitRate: bit_rate,
  	                samplingRate: sample_rate,
  	                channelCount: channel_count,
  	                codec: codec,
  	                originalCodec: codec
  	            };
  	        }
  	        else {
  	            result = array;
  	        }
  	        return result;
  	    };
  	    FLVDemuxer.prototype._parseVideoData = function (arrayBuffer, dataOffset, dataSize, tagTimestamp, tagPosition) {
  	        if (dataSize <= 1) {
  	            _utils_logger_js__WEBPACK_IMPORTED_MODULE_0__.default.w(this.TAG, 'Flv: Invalid video packet, missing VideoData payload!');
  	            return;
  	        }
  	        if (this._hasVideoFlagOverrided === true && this._hasVideo === false) {
  	            // If hasVideo: false indicated explicitly in MediaDataSource,
  	            // Ignore all the video packets
  	            return;
  	        }
  	        var spec = (new Uint8Array(arrayBuffer, dataOffset, dataSize))[0];
  	        var frameType = (spec & 240) >>> 4;
  	        var codecId = spec & 15;
  	        if (codecId !== 7) {
  	            this._onError(_demux_errors_js__WEBPACK_IMPORTED_MODULE_3__.default.CODEC_UNSUPPORTED, "Flv: Unsupported codec in video frame: " + codecId);
  	            return;
  	        }
  	        this._parseAVCVideoPacket(arrayBuffer, dataOffset + 1, dataSize - 1, tagTimestamp, tagPosition, frameType);
  	    };
  	    FLVDemuxer.prototype._parseAVCVideoPacket = function (arrayBuffer, dataOffset, dataSize, tagTimestamp, tagPosition, frameType) {
  	        if (dataSize < 4) {
  	            _utils_logger_js__WEBPACK_IMPORTED_MODULE_0__.default.w(this.TAG, 'Flv: Invalid AVC packet, missing AVCPacketType or/and CompositionTime');
  	            return;
  	        }
  	        var le = this._littleEndian;
  	        var v = new DataView(arrayBuffer, dataOffset, dataSize);
  	        var packetType = v.getUint8(0);
  	        var cts_unsigned = v.getUint32(0, !le) & 0x00FFFFFF;
  	        var cts = (cts_unsigned << 8) >> 8; // convert to 24-bit signed int
  	        if (packetType === 0) { // AVCDecoderConfigurationRecord
  	            this._parseAVCDecoderConfigurationRecord(arrayBuffer, dataOffset + 4, dataSize - 4);
  	        }
  	        else if (packetType === 1) { // One or more Nalus
  	            this._parseAVCVideoData(arrayBuffer, dataOffset + 4, dataSize - 4, tagTimestamp, tagPosition, frameType, cts);
  	        }
  	        else if (packetType === 2) ;
  	        else {
  	            this._onError(_demux_errors_js__WEBPACK_IMPORTED_MODULE_3__.default.FORMAT_ERROR, "Flv: Invalid video packet type " + packetType);
  	            return;
  	        }
  	    };
  	    FLVDemuxer.prototype._parseAVCDecoderConfigurationRecord = function (arrayBuffer, dataOffset, dataSize) {
  	        if (dataSize < 7) {
  	            _utils_logger_js__WEBPACK_IMPORTED_MODULE_0__.default.w(this.TAG, 'Flv: Invalid AVCDecoderConfigurationRecord, lack of data!');
  	            return;
  	        }
  	        var meta = this._videoMetadata;
  	        var track = this._videoTrack;
  	        var le = this._littleEndian;
  	        var v = new DataView(arrayBuffer, dataOffset, dataSize);
  	        if (!meta) {
  	            if (this._hasVideo === false && this._hasVideoFlagOverrided === false) {
  	                this._hasVideo = true;
  	                this._mediaInfo.hasVideo = true;
  	            }
  	            meta = this._videoMetadata = {};
  	            meta.type = 'video';
  	            meta.id = track.id;
  	            meta.timescale = this._timescale;
  	            meta.duration = this._duration;
  	        }
  	        else {
  	            if (typeof meta.avcc !== 'undefined') {
  	                _utils_logger_js__WEBPACK_IMPORTED_MODULE_0__.default.w(this.TAG, 'Found another AVCDecoderConfigurationRecord!');
  	            }
  	        }
  	        var version = v.getUint8(0); // configurationVersion
  	        var avcProfile = v.getUint8(1); // avcProfileIndication
  	        v.getUint8(2); // profile_compatibility
  	        v.getUint8(3); // AVCLevelIndication
  	        if (version !== 1 || avcProfile === 0) {
  	            this._onError(_demux_errors_js__WEBPACK_IMPORTED_MODULE_3__.default.FORMAT_ERROR, 'Flv: Invalid AVCDecoderConfigurationRecord');
  	            return;
  	        }
  	        this._naluLengthSize = (v.getUint8(4) & 3) + 1; // lengthSizeMinusOne
  	        if (this._naluLengthSize !== 3 && this._naluLengthSize !== 4) { // holy shit!!!
  	            this._onError(_demux_errors_js__WEBPACK_IMPORTED_MODULE_3__.default.FORMAT_ERROR, "Flv: Strange NaluLengthSizeMinusOne: " + (this._naluLengthSize - 1));
  	            return;
  	        }
  	        var spsCount = v.getUint8(5) & 31; // numOfSequenceParameterSets
  	        if (spsCount === 0) {
  	            this._onError(_demux_errors_js__WEBPACK_IMPORTED_MODULE_3__.default.FORMAT_ERROR, 'Flv: Invalid AVCDecoderConfigurationRecord: No SPS');
  	            return;
  	        }
  	        else if (spsCount > 1) {
  	            _utils_logger_js__WEBPACK_IMPORTED_MODULE_0__.default.w(this.TAG, "Flv: Strange AVCDecoderConfigurationRecord: SPS Count = " + spsCount);
  	        }
  	        var offset = 6;
  	        for (var i = 0; i < spsCount; i++) {
  	            var len = v.getUint16(offset, !le); // sequenceParameterSetLength
  	            offset += 2;
  	            if (len === 0) {
  	                continue;
  	            }
  	            // Notice: Nalu without startcode header (00 00 00 01)
  	            var sps = new Uint8Array(arrayBuffer, dataOffset + offset, len);
  	            offset += len;
  	            var config = _sps_parser_js__WEBPACK_IMPORTED_MODULE_2__.default.parseSPS(sps);
  	            if (i !== 0) {
  	                // ignore other sps's config
  	                continue;
  	            }
  	            meta.codecWidth = config.codec_size.width;
  	            meta.codecHeight = config.codec_size.height;
  	            meta.presentWidth = config.present_size.width;
  	            meta.presentHeight = config.present_size.height;
  	            meta.profile = config.profile_string;
  	            meta.level = config.level_string;
  	            meta.bitDepth = config.bit_depth;
  	            meta.chromaFormat = config.chroma_format;
  	            meta.sarRatio = config.sar_ratio;
  	            meta.frameRate = config.frame_rate;
  	            if (config.frame_rate.fixed === false ||
  	                config.frame_rate.fps_num === 0 ||
  	                config.frame_rate.fps_den === 0) {
  	                meta.frameRate = this._referenceFrameRate;
  	            }
  	            var fps_den = meta.frameRate.fps_den;
  	            var fps_num = meta.frameRate.fps_num;
  	            meta.refSampleDuration = meta.timescale * (fps_den / fps_num);
  	            var codecArray = sps.subarray(1, 4);
  	            var codecString = 'avc1.';
  	            for (var j = 0; j < 3; j++) {
  	                var h = codecArray[j].toString(16);
  	                if (h.length < 2) {
  	                    h = '0' + h;
  	                }
  	                codecString += h;
  	            }
  	            meta.codec = codecString;
  	            var mi = this._mediaInfo;
  	            mi.width = meta.codecWidth;
  	            mi.height = meta.codecHeight;
  	            mi.fps = meta.frameRate.fps;
  	            mi.profile = meta.profile;
  	            mi.level = meta.level;
  	            mi.refFrames = config.ref_frames;
  	            mi.chromaFormat = config.chroma_format_string;
  	            mi.sarNum = meta.sarRatio.width;
  	            mi.sarDen = meta.sarRatio.height;
  	            mi.videoCodec = codecString;
  	            if (mi.hasAudio) {
  	                if (mi.audioCodec != null) {
  	                    mi.mimeType = 'video/x-flv; codecs="' + mi.videoCodec + ',' + mi.audioCodec + '"';
  	                }
  	            }
  	            else {
  	                mi.mimeType = 'video/x-flv; codecs="' + mi.videoCodec + '"';
  	            }
  	            if (mi.isComplete()) {
  	                this._onMediaInfo(mi);
  	            }
  	        }
  	        var ppsCount = v.getUint8(offset); // numOfPictureParameterSets
  	        if (ppsCount === 0) {
  	            this._onError(_demux_errors_js__WEBPACK_IMPORTED_MODULE_3__.default.FORMAT_ERROR, 'Flv: Invalid AVCDecoderConfigurationRecord: No PPS');
  	            return;
  	        }
  	        else if (ppsCount > 1) {
  	            _utils_logger_js__WEBPACK_IMPORTED_MODULE_0__.default.w(this.TAG, "Flv: Strange AVCDecoderConfigurationRecord: PPS Count = " + ppsCount);
  	        }
  	        offset++;
  	        for (var i = 0; i < ppsCount; i++) {
  	            var len = v.getUint16(offset, !le); // pictureParameterSetLength
  	            offset += 2;
  	            if (len === 0) {
  	                continue;
  	            }
  	            // pps is useless for extracting video information
  	            offset += len;
  	        }
  	        meta.avcc = new Uint8Array(dataSize);
  	        meta.avcc.set(new Uint8Array(arrayBuffer, dataOffset, dataSize), 0);
  	        _utils_logger_js__WEBPACK_IMPORTED_MODULE_0__.default.v(this.TAG, 'Parsed AVCDecoderConfigurationRecord');
  	        if (this._isInitialMetadataDispatched()) {
  	            // flush parsed frames
  	            if (this._dispatch && (this._audioTrack.length || this._videoTrack.length)) {
  	                this._onDataAvailable(this._audioTrack, this._videoTrack);
  	            }
  	        }
  	        else {
  	            this._videoInitialMetadataDispatched = true;
  	        }
  	        // notify new metadata
  	        this._dispatch = false;
  	        this._onTrackMetadata('video', meta);
  	    };
  	    FLVDemuxer.prototype._parseAVCVideoData = function (arrayBuffer, dataOffset, dataSize, tagTimestamp, tagPosition, frameType, cts) {
  	        var le = this._littleEndian;
  	        var v = new DataView(arrayBuffer, dataOffset, dataSize);
  	        var units = [], length = 0;
  	        var offset = 0;
  	        var lengthSize = this._naluLengthSize;
  	        var dts = this._timestampBase + tagTimestamp;
  	        var keyframe = (frameType === 1); // from FLV Frame Type constants
  	        while (offset < dataSize) {
  	            if (offset + 4 >= dataSize) {
  	                _utils_logger_js__WEBPACK_IMPORTED_MODULE_0__.default.w(this.TAG, "Malformed Nalu near timestamp " + dts + ", offset = " + offset + ", dataSize = " + dataSize);
  	                break; // data not enough for next Nalu
  	            }
  	            // Nalu with length-header (AVC1)
  	            var naluSize = v.getUint32(offset, !le); // Big-Endian read
  	            if (lengthSize === 3) {
  	                naluSize >>>= 8;
  	            }
  	            if (naluSize > dataSize - lengthSize) {
  	                _utils_logger_js__WEBPACK_IMPORTED_MODULE_0__.default.w(this.TAG, "Malformed Nalus near timestamp " + dts + ", NaluSize > DataSize!");
  	                return;
  	            }
  	            var unitType = v.getUint8(offset + lengthSize) & 0x1F;
  	            if (unitType === 5) { // IDR
  	                keyframe = true;
  	            }
  	            var data = new Uint8Array(arrayBuffer, dataOffset + offset, lengthSize + naluSize);
  	            var unit = { type: unitType, data: data };
  	            units.push(unit);
  	            length += data.byteLength;
  	            offset += lengthSize + naluSize;
  	        }
  	        if (units.length) {
  	            var track = this._videoTrack;
  	            var avcSample = {
  	                units: units,
  	                length: length,
  	                isKeyframe: keyframe,
  	                dts: dts,
  	                cts: cts,
  	                pts: (dts + cts)
  	            };
  	            if (keyframe) {
  	                avcSample.fileposition = tagPosition;
  	            }
  	            track.samples.push(avcSample);
  	            track.length += length;
  	        }
  	    };
  	    return FLVDemuxer;
  	}());
  	/* harmony default export */ __webpack_exports__["default"] = (FLVDemuxer);


  	/***/ }),

  	/***/ "./src/demux/sps-parser.js":
  	/*!*********************************!*\
  	  !*** ./src/demux/sps-parser.js ***!
  	  \*********************************/
  	/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {
  	__webpack_require__.r(__webpack_exports__);
  	/* harmony import */ var _exp_golomb_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./exp-golomb.js */ "./src/demux/exp-golomb.js");
  	/*
  	 * Copyright (C) 2016 Bilibili. All Rights Reserved.
  	 *
  	 * @author zheng qian <xqq@xqq.im>
  	 *
  	 * Licensed under the Apache License, Version 2.0 (the "License");
  	 * you may not use this file except in compliance with the License.
  	 * You may obtain a copy of the License at
  	 *
  	 *     http://www.apache.org/licenses/LICENSE-2.0
  	 *
  	 * Unless required by applicable law or agreed to in writing, software
  	 * distributed under the License is distributed on an "AS IS" BASIS,
  	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  	 * See the License for the specific language governing permissions and
  	 * limitations under the License.
  	 */

  	var SPSParser = /** @class */ (function () {
  	    function SPSParser() {
  	    }
  	    SPSParser._ebsp2rbsp = function (uint8array) {
  	        var src = uint8array;
  	        var src_length = src.byteLength;
  	        var dst = new Uint8Array(src_length);
  	        var dst_idx = 0;
  	        for (var i = 0; i < src_length; i++) {
  	            if (i >= 2) {
  	                // Unescape: Skip 0x03 after 00 00
  	                if (src[i] === 0x03 && src[i - 1] === 0x00 && src[i - 2] === 0x00) {
  	                    continue;
  	                }
  	            }
  	            dst[dst_idx] = src[i];
  	            dst_idx++;
  	        }
  	        return new Uint8Array(dst.buffer, 0, dst_idx);
  	    };
  	    SPSParser.parseSPS = function (uint8array) {
  	        var rbsp = SPSParser._ebsp2rbsp(uint8array);
  	        var gb = new _exp_golomb_js__WEBPACK_IMPORTED_MODULE_0__.default(rbsp);
  	        gb.readByte();
  	        var profile_idc = gb.readByte(); // profile_idc
  	        gb.readByte(); // constraint_set_flags[5] + reserved_zero[3]
  	        var level_idc = gb.readByte(); // level_idc
  	        gb.readUEG(); // seq_parameter_set_id
  	        var profile_string = SPSParser.getProfileString(profile_idc);
  	        var level_string = SPSParser.getLevelString(level_idc);
  	        var chroma_format_idc = 1;
  	        var chroma_format = 420;
  	        var chroma_format_table = [0, 420, 422, 444];
  	        var bit_depth = 8;
  	        if (profile_idc === 100 || profile_idc === 110 || profile_idc === 122 ||
  	            profile_idc === 244 || profile_idc === 44 || profile_idc === 83 ||
  	            profile_idc === 86 || profile_idc === 118 || profile_idc === 128 ||
  	            profile_idc === 138 || profile_idc === 144) {
  	            chroma_format_idc = gb.readUEG();
  	            if (chroma_format_idc === 3) {
  	                gb.readBits(1); // separate_colour_plane_flag
  	            }
  	            if (chroma_format_idc <= 3) {
  	                chroma_format = chroma_format_table[chroma_format_idc];
  	            }
  	            bit_depth = gb.readUEG() + 8; // bit_depth_luma_minus8
  	            gb.readUEG(); // bit_depth_chroma_minus8
  	            gb.readBits(1); // qpprime_y_zero_transform_bypass_flag
  	            if (gb.readBool()) { // seq_scaling_matrix_present_flag
  	                var scaling_list_count = (chroma_format_idc !== 3) ? 8 : 12;
  	                for (var i = 0; i < scaling_list_count; i++) {
  	                    if (gb.readBool()) { // seq_scaling_list_present_flag
  	                        if (i < 6) {
  	                            SPSParser._skipScalingList(gb, 16);
  	                        }
  	                        else {
  	                            SPSParser._skipScalingList(gb, 64);
  	                        }
  	                    }
  	                }
  	            }
  	        }
  	        gb.readUEG(); // log2_max_frame_num_minus4
  	        var pic_order_cnt_type = gb.readUEG();
  	        if (pic_order_cnt_type === 0) {
  	            gb.readUEG(); // log2_max_pic_order_cnt_lsb_minus_4
  	        }
  	        else if (pic_order_cnt_type === 1) {
  	            gb.readBits(1); // delta_pic_order_always_zero_flag
  	            gb.readSEG(); // offset_for_non_ref_pic
  	            gb.readSEG(); // offset_for_top_to_bottom_field
  	            var num_ref_frames_in_pic_order_cnt_cycle = gb.readUEG();
  	            for (var i = 0; i < num_ref_frames_in_pic_order_cnt_cycle; i++) {
  	                gb.readSEG(); // offset_for_ref_frame
  	            }
  	        }
  	        var ref_frames = gb.readUEG(); // max_num_ref_frames
  	        gb.readBits(1); // gaps_in_frame_num_value_allowed_flag
  	        var pic_width_in_mbs_minus1 = gb.readUEG();
  	        var pic_height_in_map_units_minus1 = gb.readUEG();
  	        var frame_mbs_only_flag = gb.readBits(1);
  	        if (frame_mbs_only_flag === 0) {
  	            gb.readBits(1); // mb_adaptive_frame_field_flag
  	        }
  	        gb.readBits(1); // direct_8x8_inference_flag
  	        var frame_crop_left_offset = 0;
  	        var frame_crop_right_offset = 0;
  	        var frame_crop_top_offset = 0;
  	        var frame_crop_bottom_offset = 0;
  	        var frame_cropping_flag = gb.readBool();
  	        if (frame_cropping_flag) {
  	            frame_crop_left_offset = gb.readUEG();
  	            frame_crop_right_offset = gb.readUEG();
  	            frame_crop_top_offset = gb.readUEG();
  	            frame_crop_bottom_offset = gb.readUEG();
  	        }
  	        var sar_width = 1, sar_height = 1;
  	        var fps = 0, fps_fixed = true, fps_num = 0, fps_den = 0;
  	        var vui_parameters_present_flag = gb.readBool();
  	        if (vui_parameters_present_flag) {
  	            if (gb.readBool()) { // aspect_ratio_info_present_flag
  	                var aspect_ratio_idc = gb.readByte();
  	                var sar_w_table = [1, 12, 10, 16, 40, 24, 20, 32, 80, 18, 15, 64, 160, 4, 3, 2];
  	                var sar_h_table = [1, 11, 11, 11, 33, 11, 11, 11, 33, 11, 11, 33, 99, 3, 2, 1];
  	                if (aspect_ratio_idc > 0 && aspect_ratio_idc < 16) {
  	                    sar_width = sar_w_table[aspect_ratio_idc - 1];
  	                    sar_height = sar_h_table[aspect_ratio_idc - 1];
  	                }
  	                else if (aspect_ratio_idc === 255) {
  	                    sar_width = gb.readByte() << 8 | gb.readByte();
  	                    sar_height = gb.readByte() << 8 | gb.readByte();
  	                }
  	            }
  	            if (gb.readBool()) { // overscan_info_present_flag
  	                gb.readBool(); // overscan_appropriate_flag
  	            }
  	            if (gb.readBool()) { // video_signal_type_present_flag
  	                gb.readBits(4); // video_format & video_full_range_flag
  	                if (gb.readBool()) { // colour_description_present_flag
  	                    gb.readBits(24); // colour_primaries & transfer_characteristics & matrix_coefficients
  	                }
  	            }
  	            if (gb.readBool()) { // chroma_loc_info_present_flag
  	                gb.readUEG(); // chroma_sample_loc_type_top_field
  	                gb.readUEG(); // chroma_sample_loc_type_bottom_field
  	            }
  	            if (gb.readBool()) { // timing_info_present_flag
  	                var num_units_in_tick = gb.readBits(32);
  	                var time_scale = gb.readBits(32);
  	                fps_fixed = gb.readBool(); // fixed_frame_rate_flag
  	                fps_num = time_scale;
  	                fps_den = num_units_in_tick * 2;
  	                fps = fps_num / fps_den;
  	            }
  	        }
  	        var sarScale = 1;
  	        if (sar_width !== 1 || sar_height !== 1) {
  	            sarScale = sar_width / sar_height;
  	        }
  	        var crop_unit_x = 0, crop_unit_y = 0;
  	        if (chroma_format_idc === 0) {
  	            crop_unit_x = 1;
  	            crop_unit_y = 2 - frame_mbs_only_flag;
  	        }
  	        else {
  	            var sub_wc = (chroma_format_idc === 3) ? 1 : 2;
  	            var sub_hc = (chroma_format_idc === 1) ? 2 : 1;
  	            crop_unit_x = sub_wc;
  	            crop_unit_y = sub_hc * (2 - frame_mbs_only_flag);
  	        }
  	        var codec_width = (pic_width_in_mbs_minus1 + 1) * 16;
  	        var codec_height = (2 - frame_mbs_only_flag) * ((pic_height_in_map_units_minus1 + 1) * 16);
  	        codec_width -= (frame_crop_left_offset + frame_crop_right_offset) * crop_unit_x;
  	        codec_height -= (frame_crop_top_offset + frame_crop_bottom_offset) * crop_unit_y;
  	        var present_width = Math.ceil(codec_width * sarScale);
  	        gb.destroy();
  	        gb = null;
  	        return {
  	            profile_string: profile_string,
  	            level_string: level_string,
  	            bit_depth: bit_depth,
  	            ref_frames: ref_frames,
  	            chroma_format: chroma_format,
  	            chroma_format_string: SPSParser.getChromaFormatString(chroma_format),
  	            frame_rate: {
  	                fixed: fps_fixed,
  	                fps: fps,
  	                fps_den: fps_den,
  	                fps_num: fps_num
  	            },
  	            sar_ratio: {
  	                width: sar_width,
  	                height: sar_height
  	            },
  	            codec_size: {
  	                width: codec_width,
  	                height: codec_height
  	            },
  	            present_size: {
  	                width: present_width,
  	                height: codec_height
  	            }
  	        };
  	    };
  	    SPSParser._skipScalingList = function (gb, count) {
  	        var last_scale = 8, next_scale = 8;
  	        var delta_scale = 0;
  	        for (var i = 0; i < count; i++) {
  	            if (next_scale !== 0) {
  	                delta_scale = gb.readSEG();
  	                next_scale = (last_scale + delta_scale + 256) % 256;
  	            }
  	            last_scale = (next_scale === 0) ? last_scale : next_scale;
  	        }
  	    };
  	    SPSParser.getProfileString = function (profile_idc) {
  	        switch (profile_idc) {
  	            case 66:
  	                return 'Baseline';
  	            case 77:
  	                return 'Main';
  	            case 88:
  	                return 'Extended';
  	            case 100:
  	                return 'High';
  	            case 110:
  	                return 'High10';
  	            case 122:
  	                return 'High422';
  	            case 244:
  	                return 'High444';
  	            default:
  	                return 'Unknown';
  	        }
  	    };
  	    SPSParser.getLevelString = function (level_idc) {
  	        return (level_idc / 10).toFixed(1);
  	    };
  	    SPSParser.getChromaFormatString = function (chroma) {
  	        switch (chroma) {
  	            case 420:
  	                return '4:2:0';
  	            case 422:
  	                return '4:2:2';
  	            case 444:
  	                return '4:4:4';
  	            default:
  	                return 'Unknown';
  	        }
  	    };
  	    return SPSParser;
  	}());
  	/* harmony default export */ __webpack_exports__["default"] = (SPSParser);


  	/***/ }),

  	/***/ "./src/flv.js":
  	/*!********************!*\
  	  !*** ./src/flv.js ***!
  	  \********************/
  	/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {
  	__webpack_require__.r(__webpack_exports__);
  	/* harmony import */ var _utils_polyfill_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./utils/polyfill.js */ "./src/utils/polyfill.js");
  	/* harmony import */ var _core_features_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./core/features.js */ "./src/core/features.js");
  	/* harmony import */ var _io_loader_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./io/loader.js */ "./src/io/loader.js");
  	/* harmony import */ var _player_flv_player_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./player/flv-player.js */ "./src/player/flv-player.js");
  	/* harmony import */ var _player_native_player_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./player/native-player.js */ "./src/player/native-player.js");
  	/* harmony import */ var _player_player_events_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./player/player-events.js */ "./src/player/player-events.js");
  	/* harmony import */ var _player_player_errors_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./player/player-errors.js */ "./src/player/player-errors.js");
  	/* harmony import */ var _utils_logging_control_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./utils/logging-control.js */ "./src/utils/logging-control.js");
  	/* harmony import */ var _utils_exception_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./utils/exception.js */ "./src/utils/exception.js");
  	/*
  	 * Copyright (C) 2016 Bilibili. All Rights Reserved.
  	 *
  	 * @author zheng qian <xqq@xqq.im>
  	 *
  	 * Licensed under the Apache License, Version 2.0 (the "License");
  	 * you may not use this file except in compliance with the License.
  	 * You may obtain a copy of the License at
  	 *
  	 *     http://www.apache.org/licenses/LICENSE-2.0
  	 *
  	 * Unless required by applicable law or agreed to in writing, software
  	 * distributed under the License is distributed on an "AS IS" BASIS,
  	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  	 * See the License for the specific language governing permissions and
  	 * limitations under the License.
  	 */









  	// here are all the interfaces
  	// install polyfills
  	_utils_polyfill_js__WEBPACK_IMPORTED_MODULE_0__.default.install();
  	// factory method
  	function createPlayer(mediaDataSource, optionalConfig) {
  	    var mds = mediaDataSource;
  	    if (mds == null || typeof mds !== 'object') {
  	        throw new _utils_exception_js__WEBPACK_IMPORTED_MODULE_8__.InvalidArgumentException('MediaDataSource must be an javascript object!');
  	    }
  	    if (!mds.hasOwnProperty('type')) {
  	        throw new _utils_exception_js__WEBPACK_IMPORTED_MODULE_8__.InvalidArgumentException('MediaDataSource must has type field to indicate video file type!');
  	    }
  	    switch (mds.type) {
  	        case 'flv':
  	            return new _player_flv_player_js__WEBPACK_IMPORTED_MODULE_3__.default(mds, optionalConfig);
  	        default:
  	            return new _player_native_player_js__WEBPACK_IMPORTED_MODULE_4__.default(mds, optionalConfig);
  	    }
  	}
  	// feature detection
  	function isSupported() {
  	    return _core_features_js__WEBPACK_IMPORTED_MODULE_1__.default.supportMSEH264Playback();
  	}
  	function getFeatureList() {
  	    return _core_features_js__WEBPACK_IMPORTED_MODULE_1__.default.getFeatureList();
  	}
  	// interfaces
  	var flvjs = {};
  	flvjs.createPlayer = createPlayer;
  	flvjs.isSupported = isSupported;
  	flvjs.getFeatureList = getFeatureList;
  	flvjs.BaseLoader = _io_loader_js__WEBPACK_IMPORTED_MODULE_2__.BaseLoader;
  	flvjs.LoaderStatus = _io_loader_js__WEBPACK_IMPORTED_MODULE_2__.LoaderStatus;
  	flvjs.LoaderErrors = _io_loader_js__WEBPACK_IMPORTED_MODULE_2__.LoaderErrors;
  	flvjs.Events = _player_player_events_js__WEBPACK_IMPORTED_MODULE_5__.default;
  	flvjs.ErrorTypes = _player_player_errors_js__WEBPACK_IMPORTED_MODULE_6__.ErrorTypes;
  	flvjs.ErrorDetails = _player_player_errors_js__WEBPACK_IMPORTED_MODULE_6__.ErrorDetails;
  	flvjs.FlvPlayer = _player_flv_player_js__WEBPACK_IMPORTED_MODULE_3__.default;
  	flvjs.NativePlayer = _player_native_player_js__WEBPACK_IMPORTED_MODULE_4__.default;
  	flvjs.LoggingControl = _utils_logging_control_js__WEBPACK_IMPORTED_MODULE_7__.default;
  	Object.defineProperty(flvjs, 'version', {
  	    enumerable: true,
  	    get: function () {
  	        // replace by webpack.DefinePlugin
  	        return "1.6.2";
  	    }
  	});
  	/* harmony default export */ __webpack_exports__["default"] = (flvjs);


  	/***/ }),

  	/***/ "./src/index.js":
  	/*!**********************!*\
  	  !*** ./src/index.js ***!
  	  \**********************/
  	/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

  	// entry/index file
  	// make it compatible with browserify's umd wrapper
  	module.exports = __webpack_require__(/*! ./flv.js */ "./src/flv.js").default;


  	/***/ }),

  	/***/ "./src/io/fetch-stream-loader.js":
  	/*!***************************************!*\
  	  !*** ./src/io/fetch-stream-loader.js ***!
  	  \***************************************/
  	/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {
  	__webpack_require__.r(__webpack_exports__);
  	/* harmony import */ var _utils_browser_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utils/browser.js */ "./src/utils/browser.js");
  	/* harmony import */ var _loader_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./loader.js */ "./src/io/loader.js");
  	/* harmony import */ var _utils_exception_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../utils/exception.js */ "./src/utils/exception.js");
  	/*
  	 * Copyright (C) 2016 Bilibili. All Rights Reserved.
  	 *
  	 * @author zheng qian <xqq@xqq.im>
  	 *
  	 * Licensed under the Apache License, Version 2.0 (the "License");
  	 * you may not use this file except in compliance with the License.
  	 * You may obtain a copy of the License at
  	 *
  	 *     http://www.apache.org/licenses/LICENSE-2.0
  	 *
  	 * Unless required by applicable law or agreed to in writing, software
  	 * distributed under the License is distributed on an "AS IS" BASIS,
  	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  	 * See the License for the specific language governing permissions and
  	 * limitations under the License.
  	 */
  	var __extends = (function () {
  	    var extendStatics = function (d, b) {
  	        extendStatics = Object.setPrototypeOf ||
  	            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
  	            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
  	        return extendStatics(d, b);
  	    };
  	    return function (d, b) {
  	        if (typeof b !== "function" && b !== null)
  	            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
  	        extendStatics(d, b);
  	        function __() { this.constructor = d; }
  	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  	    };
  	})();



  	/* fetch + stream IO loader. Currently working on chrome 43+.
  	 * fetch provides a better alternative http API to XMLHttpRequest
  	 *
  	 * fetch spec   https://fetch.spec.whatwg.org/
  	 * stream spec  https://streams.spec.whatwg.org/
  	 */
  	var FetchStreamLoader = /** @class */ (function (_super) {
  	    __extends(FetchStreamLoader, _super);
  	    function FetchStreamLoader(seekHandler, config) {
  	        var _this = _super.call(this, 'fetch-stream-loader') || this;
  	        _this.TAG = 'FetchStreamLoader';
  	        _this._seekHandler = seekHandler;
  	        _this._config = config;
  	        _this._needStash = true;
  	        _this._requestAbort = false;
  	        _this._contentLength = null;
  	        _this._receivedLength = 0;
  	        return _this;
  	    }
  	    FetchStreamLoader.isSupported = function () {
  	        try {
  	            // fetch + stream is broken on Microsoft Edge. Disable before build 15048.
  	            // see https://developer.microsoft.com/en-us/microsoft-edge/platform/issues/8196907/
  	            // Fixed in Jan 10, 2017. Build 15048+ removed from blacklist.
  	            var isWorkWellEdge = _utils_browser_js__WEBPACK_IMPORTED_MODULE_0__.default.msedge && _utils_browser_js__WEBPACK_IMPORTED_MODULE_0__.default.version.minor >= 15048;
  	            var browserNotBlacklisted = _utils_browser_js__WEBPACK_IMPORTED_MODULE_0__.default.msedge ? isWorkWellEdge : true;
  	            return (self.fetch && self.ReadableStream && browserNotBlacklisted);
  	        }
  	        catch (e) {
  	            return false;
  	        }
  	    };
  	    FetchStreamLoader.prototype.destroy = function () {
  	        if (this.isWorking()) {
  	            this.abort();
  	        }
  	        _super.prototype.destroy.call(this);
  	    };
  	    FetchStreamLoader.prototype.open = function (dataSource, range) {
  	        var _this = this;
  	        this._dataSource = dataSource;
  	        this._range = range;
  	        var sourceURL = dataSource.url;
  	        if (this._config.reuseRedirectedURL && dataSource.redirectedURL != undefined) {
  	            sourceURL = dataSource.redirectedURL;
  	        }
  	        var seekConfig = this._seekHandler.getConfig(sourceURL, range);
  	        var headers = new self.Headers();
  	        if (typeof seekConfig.headers === 'object') {
  	            var configHeaders = seekConfig.headers;
  	            for (var key in configHeaders) {
  	                if (configHeaders.hasOwnProperty(key)) {
  	                    headers.append(key, configHeaders[key]);
  	                }
  	            }
  	        }
  	        var params = {
  	            method: 'GET',
  	            headers: headers,
  	            mode: 'cors',
  	            cache: 'default',
  	            // The default policy of Fetch API in the whatwg standard
  	            // Safari incorrectly indicates 'no-referrer' as default policy, fuck it
  	            referrerPolicy: 'no-referrer-when-downgrade'
  	        };
  	        // add additional headers
  	        if (typeof this._config.headers === 'object') {
  	            for (var key in this._config.headers) {
  	                headers.append(key, this._config.headers[key]);
  	            }
  	        }
  	        // cors is enabled by default
  	        if (dataSource.cors === false) {
  	            // no-cors means 'disregard cors policy', which can only be used in ServiceWorker
  	            params.mode = 'same-origin';
  	        }
  	        // withCredentials is disabled by default
  	        if (dataSource.withCredentials) {
  	            params.credentials = 'include';
  	        }
  	        // referrerPolicy from config
  	        if (dataSource.referrerPolicy) {
  	            params.referrerPolicy = dataSource.referrerPolicy;
  	        }
  	        // add abort controller, by wmlgl 2019-5-10 12:21:27
  	        if (self.AbortController) {
  	            this._abortController = new self.AbortController();
  	            params.signal = this._abortController.signal;
  	        }
  	        this._status = _loader_js__WEBPACK_IMPORTED_MODULE_1__.LoaderStatus.kConnecting;
  	        self.fetch(seekConfig.url, params).then(function (res) {
  	            if (_this._requestAbort) {
  	                _this._status = _loader_js__WEBPACK_IMPORTED_MODULE_1__.LoaderStatus.kIdle;
  	                res.body.cancel();
  	                return;
  	            }
  	            if (res.ok && (res.status >= 200 && res.status <= 299)) {
  	                if (res.url !== seekConfig.url) {
  	                    if (_this._onURLRedirect) {
  	                        var redirectedURL = _this._seekHandler.removeURLParameters(res.url);
  	                        _this._onURLRedirect(redirectedURL);
  	                    }
  	                }
  	                var lengthHeader = res.headers.get('Content-Length');
  	                if (lengthHeader != null) {
  	                    _this._contentLength = parseInt(lengthHeader);
  	                    if (_this._contentLength !== 0) {
  	                        if (_this._onContentLengthKnown) {
  	                            _this._onContentLengthKnown(_this._contentLength);
  	                        }
  	                    }
  	                }
  	                return _this._pump.call(_this, res.body.getReader());
  	            }
  	            else {
  	                _this._status = _loader_js__WEBPACK_IMPORTED_MODULE_1__.LoaderStatus.kError;
  	                if (_this._onError) {
  	                    _this._onError(_loader_js__WEBPACK_IMPORTED_MODULE_1__.LoaderErrors.HTTP_STATUS_CODE_INVALID, { code: res.status, msg: res.statusText });
  	                }
  	                else {
  	                    throw new _utils_exception_js__WEBPACK_IMPORTED_MODULE_2__.RuntimeException('FetchStreamLoader: Http code invalid, ' + res.status + ' ' + res.statusText);
  	                }
  	            }
  	        }).catch(function (e) {
  	            if (_this._abortController && _this._abortController.signal.aborted) {
  	                return;
  	            }
  	            _this._status = _loader_js__WEBPACK_IMPORTED_MODULE_1__.LoaderStatus.kError;
  	            if (_this._onError) {
  	                _this._onError(_loader_js__WEBPACK_IMPORTED_MODULE_1__.LoaderErrors.EXCEPTION, { code: -1, msg: e.message });
  	            }
  	            else {
  	                throw e;
  	            }
  	        });
  	    };
  	    FetchStreamLoader.prototype.abort = function () {
  	        this._requestAbort = true;
  	        if (this._status !== _loader_js__WEBPACK_IMPORTED_MODULE_1__.LoaderStatus.kBuffering || !_utils_browser_js__WEBPACK_IMPORTED_MODULE_0__.default.chrome) {
  	            // Chrome may throw Exception-like things here, avoid using if is buffering
  	            if (this._abortController) {
  	                try {
  	                    this._abortController.abort();
  	                }
  	                catch (e) { }
  	            }
  	        }
  	    };
  	    FetchStreamLoader.prototype._pump = function (reader) {
  	        var _this = this;
  	        return reader.read().then(function (result) {
  	            if (result.done) {
  	                // First check received length
  	                if (_this._contentLength !== null && _this._receivedLength < _this._contentLength) {
  	                    // Report Early-EOF
  	                    _this._status = _loader_js__WEBPACK_IMPORTED_MODULE_1__.LoaderStatus.kError;
  	                    var type = _loader_js__WEBPACK_IMPORTED_MODULE_1__.LoaderErrors.EARLY_EOF;
  	                    var info = { code: -1, msg: 'Fetch stream meet Early-EOF' };
  	                    if (_this._onError) {
  	                        _this._onError(type, info);
  	                    }
  	                    else {
  	                        throw new _utils_exception_js__WEBPACK_IMPORTED_MODULE_2__.RuntimeException(info.msg);
  	                    }
  	                }
  	                else {
  	                    // OK. Download complete
  	                    _this._status = _loader_js__WEBPACK_IMPORTED_MODULE_1__.LoaderStatus.kComplete;
  	                    if (_this._onComplete) {
  	                        _this._onComplete(_this._range.from, _this._range.from + _this._receivedLength - 1);
  	                    }
  	                }
  	            }
  	            else {
  	                if (_this._abortController && _this._abortController.signal.aborted) {
  	                    _this._status = _loader_js__WEBPACK_IMPORTED_MODULE_1__.LoaderStatus.kComplete;
  	                    return;
  	                }
  	                else if (_this._requestAbort === true) {
  	                    _this._status = _loader_js__WEBPACK_IMPORTED_MODULE_1__.LoaderStatus.kComplete;
  	                    return reader.cancel();
  	                }
  	                _this._status = _loader_js__WEBPACK_IMPORTED_MODULE_1__.LoaderStatus.kBuffering;
  	                var chunk = result.value.buffer;
  	                var byteStart = _this._range.from + _this._receivedLength;
  	                _this._receivedLength += chunk.byteLength;
  	                if (_this._onDataArrival) {
  	                    _this._onDataArrival(chunk, byteStart, _this._receivedLength);
  	                }
  	                _this._pump(reader);
  	            }
  	        }).catch(function (e) {
  	            if (_this._abortController && _this._abortController.signal.aborted) {
  	                _this._status = _loader_js__WEBPACK_IMPORTED_MODULE_1__.LoaderStatus.kComplete;
  	                return;
  	            }
  	            if (e.code === 11 && _utils_browser_js__WEBPACK_IMPORTED_MODULE_0__.default.msedge) { // InvalidStateError on Microsoft Edge
  	                // Workaround: Edge may throw InvalidStateError after ReadableStreamReader.cancel() call
  	                // Ignore the unknown exception.
  	                // Related issue: https://developer.microsoft.com/en-us/microsoft-edge/platform/issues/11265202/
  	                return;
  	            }
  	            _this._status = _loader_js__WEBPACK_IMPORTED_MODULE_1__.LoaderStatus.kError;
  	            var type = 0;
  	            var info = null;
  	            if ((e.code === 19 || e.message === 'network error') && // NETWORK_ERR
  	                (_this._contentLength === null ||
  	                    (_this._contentLength !== null && _this._receivedLength < _this._contentLength))) {
  	                type = _loader_js__WEBPACK_IMPORTED_MODULE_1__.LoaderErrors.EARLY_EOF;
  	                info = { code: e.code, msg: 'Fetch stream meet Early-EOF' };
  	            }
  	            else {
  	                type = _loader_js__WEBPACK_IMPORTED_MODULE_1__.LoaderErrors.EXCEPTION;
  	                info = { code: e.code, msg: e.message };
  	            }
  	            if (_this._onError) {
  	                _this._onError(type, info);
  	            }
  	            else {
  	                throw new _utils_exception_js__WEBPACK_IMPORTED_MODULE_2__.RuntimeException(info.msg);
  	            }
  	        });
  	    };
  	    return FetchStreamLoader;
  	}(_loader_js__WEBPACK_IMPORTED_MODULE_1__.BaseLoader));
  	/* harmony default export */ __webpack_exports__["default"] = (FetchStreamLoader);


  	/***/ }),

  	/***/ "./src/io/io-controller.js":
  	/*!*********************************!*\
  	  !*** ./src/io/io-controller.js ***!
  	  \*********************************/
  	/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {
  	__webpack_require__.r(__webpack_exports__);
  	/* harmony import */ var _utils_logger_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utils/logger.js */ "./src/utils/logger.js");
  	/* harmony import */ var _speed_sampler_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./speed-sampler.js */ "./src/io/speed-sampler.js");
  	/* harmony import */ var _loader_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./loader.js */ "./src/io/loader.js");
  	/* harmony import */ var _fetch_stream_loader_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./fetch-stream-loader.js */ "./src/io/fetch-stream-loader.js");
  	/* harmony import */ var _xhr_moz_chunked_loader_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./xhr-moz-chunked-loader.js */ "./src/io/xhr-moz-chunked-loader.js");
  	/* harmony import */ var _xhr_range_loader_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./xhr-range-loader.js */ "./src/io/xhr-range-loader.js");
  	/* harmony import */ var _websocket_loader_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./websocket-loader.js */ "./src/io/websocket-loader.js");
  	/* harmony import */ var _range_seek_handler_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./range-seek-handler.js */ "./src/io/range-seek-handler.js");
  	/* harmony import */ var _param_seek_handler_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./param-seek-handler.js */ "./src/io/param-seek-handler.js");
  	/* harmony import */ var _utils_exception_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../utils/exception.js */ "./src/utils/exception.js");
  	/*
  	 * Copyright (C) 2016 Bilibili. All Rights Reserved.
  	 *
  	 * @author zheng qian <xqq@xqq.im>
  	 *
  	 * Licensed under the Apache License, Version 2.0 (the "License");
  	 * you may not use this file except in compliance with the License.
  	 * You may obtain a copy of the License at
  	 *
  	 *     http://www.apache.org/licenses/LICENSE-2.0
  	 *
  	 * Unless required by applicable law or agreed to in writing, software
  	 * distributed under the License is distributed on an "AS IS" BASIS,
  	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  	 * See the License for the specific language governing permissions and
  	 * limitations under the License.
  	 */










  	/**
  	 * DataSource: {
  	 *     url: string,
  	 *     filesize: number,
  	 *     cors: boolean,
  	 *     withCredentials: boolean
  	 * }
  	 *
  	 */
  	// Manage IO Loaders
  	var IOController = /** @class */ (function () {
  	    function IOController(dataSource, config, extraData) {
  	        this.TAG = 'IOController';
  	        this._config = config;
  	        this._extraData = extraData;
  	        this._stashInitialSize = 1024 * 384; // default initial size: 384KB
  	        if (config.stashInitialSize != undefined && config.stashInitialSize > 0) {
  	            // apply from config
  	            this._stashInitialSize = config.stashInitialSize;
  	        }
  	        this._stashUsed = 0;
  	        this._stashSize = this._stashInitialSize;
  	        this._bufferSize = 1024 * 1024 * 3; // initial size: 3MB
  	        this._stashBuffer = new ArrayBuffer(this._bufferSize);
  	        this._stashByteStart = 0;
  	        this._enableStash = true;
  	        if (config.enableStashBuffer === false) {
  	            this._enableStash = false;
  	        }
  	        this._loader = null;
  	        this._loaderClass = null;
  	        this._seekHandler = null;
  	        this._dataSource = dataSource;
  	        this._isWebSocketURL = /wss?:\/\/(.+?)/.test(dataSource.url);
  	        this._refTotalLength = dataSource.filesize ? dataSource.filesize : null;
  	        this._totalLength = this._refTotalLength;
  	        this._fullRequestFlag = false;
  	        this._currentRange = null;
  	        this._redirectedURL = null;
  	        this._speedNormalized = 0;
  	        this._speedSampler = new _speed_sampler_js__WEBPACK_IMPORTED_MODULE_1__.default();
  	        this._speedNormalizeList = [64, 128, 256, 384, 512, 768, 1024, 1536, 2048, 3072, 4096];
  	        this._isEarlyEofReconnecting = false;
  	        this._paused = false;
  	        this._resumeFrom = 0;
  	        this._onDataArrival = null;
  	        this._onSeeked = null;
  	        this._onError = null;
  	        this._onComplete = null;
  	        this._onRedirect = null;
  	        this._onRecoveredEarlyEof = null;
  	        this._selectSeekHandler();
  	        this._selectLoader();
  	        this._createLoader();
  	    }
  	    IOController.prototype.destroy = function () {
  	        if (this._loader.isWorking()) {
  	            this._loader.abort();
  	        }
  	        this._loader.destroy();
  	        this._loader = null;
  	        this._loaderClass = null;
  	        this._dataSource = null;
  	        this._stashBuffer = null;
  	        this._stashUsed = this._stashSize = this._bufferSize = this._stashByteStart = 0;
  	        this._currentRange = null;
  	        this._speedSampler = null;
  	        this._isEarlyEofReconnecting = false;
  	        this._onDataArrival = null;
  	        this._onSeeked = null;
  	        this._onError = null;
  	        this._onComplete = null;
  	        this._onRedirect = null;
  	        this._onRecoveredEarlyEof = null;
  	        this._extraData = null;
  	    };
  	    IOController.prototype.isWorking = function () {
  	        return this._loader && this._loader.isWorking() && !this._paused;
  	    };
  	    IOController.prototype.isPaused = function () {
  	        return this._paused;
  	    };
  	    Object.defineProperty(IOController.prototype, "status", {
  	        get: function () {
  	            return this._loader.status;
  	        },
  	        enumerable: false,
  	        configurable: true
  	    });
  	    Object.defineProperty(IOController.prototype, "extraData", {
  	        get: function () {
  	            return this._extraData;
  	        },
  	        set: function (data) {
  	            this._extraData = data;
  	        },
  	        enumerable: false,
  	        configurable: true
  	    });
  	    Object.defineProperty(IOController.prototype, "onDataArrival", {
  	        // prototype: function onDataArrival(chunks: ArrayBuffer, byteStart: number): number
  	        get: function () {
  	            return this._onDataArrival;
  	        },
  	        set: function (callback) {
  	            this._onDataArrival = callback;
  	        },
  	        enumerable: false,
  	        configurable: true
  	    });
  	    Object.defineProperty(IOController.prototype, "onSeeked", {
  	        get: function () {
  	            return this._onSeeked;
  	        },
  	        set: function (callback) {
  	            this._onSeeked = callback;
  	        },
  	        enumerable: false,
  	        configurable: true
  	    });
  	    Object.defineProperty(IOController.prototype, "onError", {
  	        // prototype: function onError(type: number, info: {code: number, msg: string}): void
  	        get: function () {
  	            return this._onError;
  	        },
  	        set: function (callback) {
  	            this._onError = callback;
  	        },
  	        enumerable: false,
  	        configurable: true
  	    });
  	    Object.defineProperty(IOController.prototype, "onComplete", {
  	        get: function () {
  	            return this._onComplete;
  	        },
  	        set: function (callback) {
  	            this._onComplete = callback;
  	        },
  	        enumerable: false,
  	        configurable: true
  	    });
  	    Object.defineProperty(IOController.prototype, "onRedirect", {
  	        get: function () {
  	            return this._onRedirect;
  	        },
  	        set: function (callback) {
  	            this._onRedirect = callback;
  	        },
  	        enumerable: false,
  	        configurable: true
  	    });
  	    Object.defineProperty(IOController.prototype, "onRecoveredEarlyEof", {
  	        get: function () {
  	            return this._onRecoveredEarlyEof;
  	        },
  	        set: function (callback) {
  	            this._onRecoveredEarlyEof = callback;
  	        },
  	        enumerable: false,
  	        configurable: true
  	    });
  	    Object.defineProperty(IOController.prototype, "currentURL", {
  	        get: function () {
  	            return this._dataSource.url;
  	        },
  	        enumerable: false,
  	        configurable: true
  	    });
  	    Object.defineProperty(IOController.prototype, "hasRedirect", {
  	        get: function () {
  	            return (this._redirectedURL != null || this._dataSource.redirectedURL != undefined);
  	        },
  	        enumerable: false,
  	        configurable: true
  	    });
  	    Object.defineProperty(IOController.prototype, "currentRedirectedURL", {
  	        get: function () {
  	            return this._redirectedURL || this._dataSource.redirectedURL;
  	        },
  	        enumerable: false,
  	        configurable: true
  	    });
  	    Object.defineProperty(IOController.prototype, "currentSpeed", {
  	        // in KB/s
  	        get: function () {
  	            if (this._loaderClass === _xhr_range_loader_js__WEBPACK_IMPORTED_MODULE_5__.default) {
  	                // SpeedSampler is inaccuracy if loader is RangeLoader
  	                return this._loader.currentSpeed;
  	            }
  	            return this._speedSampler.lastSecondKBps;
  	        },
  	        enumerable: false,
  	        configurable: true
  	    });
  	    Object.defineProperty(IOController.prototype, "loaderType", {
  	        get: function () {
  	            return this._loader.type;
  	        },
  	        enumerable: false,
  	        configurable: true
  	    });
  	    IOController.prototype._selectSeekHandler = function () {
  	        var config = this._config;
  	        if (config.seekType === 'range') {
  	            this._seekHandler = new _range_seek_handler_js__WEBPACK_IMPORTED_MODULE_7__.default(this._config.rangeLoadZeroStart);
  	        }
  	        else if (config.seekType === 'param') {
  	            var paramStart = config.seekParamStart || 'bstart';
  	            var paramEnd = config.seekParamEnd || 'bend';
  	            this._seekHandler = new _param_seek_handler_js__WEBPACK_IMPORTED_MODULE_8__.default(paramStart, paramEnd);
  	        }
  	        else if (config.seekType === 'custom') {
  	            if (typeof config.customSeekHandler !== 'function') {
  	                throw new _utils_exception_js__WEBPACK_IMPORTED_MODULE_9__.InvalidArgumentException('Custom seekType specified in config but invalid customSeekHandler!');
  	            }
  	            this._seekHandler = new config.customSeekHandler();
  	        }
  	        else {
  	            throw new _utils_exception_js__WEBPACK_IMPORTED_MODULE_9__.InvalidArgumentException("Invalid seekType in config: " + config.seekType);
  	        }
  	    };
  	    IOController.prototype._selectLoader = function () {
  	        if (this._config.customLoader != null) {
  	            this._loaderClass = this._config.customLoader;
  	        }
  	        else if (this._isWebSocketURL) {
  	            this._loaderClass = _websocket_loader_js__WEBPACK_IMPORTED_MODULE_6__.default;
  	        }
  	        else if (_fetch_stream_loader_js__WEBPACK_IMPORTED_MODULE_3__.default.isSupported()) {
  	            this._loaderClass = _fetch_stream_loader_js__WEBPACK_IMPORTED_MODULE_3__.default;
  	        }
  	        else if (_xhr_moz_chunked_loader_js__WEBPACK_IMPORTED_MODULE_4__.default.isSupported()) {
  	            this._loaderClass = _xhr_moz_chunked_loader_js__WEBPACK_IMPORTED_MODULE_4__.default;
  	        }
  	        else if (_xhr_range_loader_js__WEBPACK_IMPORTED_MODULE_5__.default.isSupported()) {
  	            this._loaderClass = _xhr_range_loader_js__WEBPACK_IMPORTED_MODULE_5__.default;
  	        }
  	        else {
  	            throw new _utils_exception_js__WEBPACK_IMPORTED_MODULE_9__.RuntimeException('Your browser doesn\'t support xhr with arraybuffer responseType!');
  	        }
  	    };
  	    IOController.prototype._createLoader = function () {
  	        this._loader = new this._loaderClass(this._seekHandler, this._config);
  	        if (this._loader.needStashBuffer === false) {
  	            this._enableStash = false;
  	        }
  	        this._loader.onContentLengthKnown = this._onContentLengthKnown.bind(this);
  	        this._loader.onURLRedirect = this._onURLRedirect.bind(this);
  	        this._loader.onDataArrival = this._onLoaderChunkArrival.bind(this);
  	        this._loader.onComplete = this._onLoaderComplete.bind(this);
  	        this._loader.onError = this._onLoaderError.bind(this);
  	    };
  	    IOController.prototype.open = function (optionalFrom) {
  	        this._currentRange = { from: 0, to: -1 };
  	        if (optionalFrom) {
  	            this._currentRange.from = optionalFrom;
  	        }
  	        this._speedSampler.reset();
  	        if (!optionalFrom) {
  	            this._fullRequestFlag = true;
  	        }
  	        this._loader.open(this._dataSource, Object.assign({}, this._currentRange));
  	    };
  	    IOController.prototype.abort = function () {
  	        this._loader.abort();
  	        if (this._paused) {
  	            this._paused = false;
  	            this._resumeFrom = 0;
  	        }
  	    };
  	    IOController.prototype.pause = function () {
  	        if (this.isWorking()) {
  	            this._loader.abort();
  	            if (this._stashUsed !== 0) {
  	                this._resumeFrom = this._stashByteStart;
  	                this._currentRange.to = this._stashByteStart - 1;
  	            }
  	            else {
  	                this._resumeFrom = this._currentRange.to + 1;
  	            }
  	            this._stashUsed = 0;
  	            this._stashByteStart = 0;
  	            this._paused = true;
  	        }
  	    };
  	    IOController.prototype.resume = function () {
  	        if (this._paused) {
  	            this._paused = false;
  	            var bytes = this._resumeFrom;
  	            this._resumeFrom = 0;
  	            this._internalSeek(bytes, true);
  	        }
  	    };
  	    IOController.prototype.seek = function (bytes) {
  	        this._paused = false;
  	        this._stashUsed = 0;
  	        this._stashByteStart = 0;
  	        this._internalSeek(bytes, true);
  	    };
  	    /**
  	     * When seeking request is from media seeking, unconsumed stash data should be dropped
  	     * However, stash data shouldn't be dropped if seeking requested from http reconnection
  	     *
  	     * @dropUnconsumed: Ignore and discard all unconsumed data in stash buffer
  	     */
  	    IOController.prototype._internalSeek = function (bytes, dropUnconsumed) {
  	        if (this._loader.isWorking()) {
  	            this._loader.abort();
  	        }
  	        // dispatch & flush stash buffer before seek
  	        this._flushStashBuffer(dropUnconsumed);
  	        this._loader.destroy();
  	        this._loader = null;
  	        var requestRange = { from: bytes, to: -1 };
  	        this._currentRange = { from: requestRange.from, to: -1 };
  	        this._speedSampler.reset();
  	        this._stashSize = this._stashInitialSize;
  	        this._createLoader();
  	        this._loader.open(this._dataSource, requestRange);
  	        if (this._onSeeked) {
  	            this._onSeeked();
  	        }
  	    };
  	    IOController.prototype.updateUrl = function (url) {
  	        if (!url || typeof url !== 'string' || url.length === 0) {
  	            throw new _utils_exception_js__WEBPACK_IMPORTED_MODULE_9__.InvalidArgumentException('Url must be a non-empty string!');
  	        }
  	        this._dataSource.url = url;
  	        // TODO: replace with new url
  	    };
  	    IOController.prototype._expandBuffer = function (expectedBytes) {
  	        var bufferNewSize = this._stashSize;
  	        while (bufferNewSize + 1024 * 1024 * 1 < expectedBytes) {
  	            bufferNewSize *= 2;
  	        }
  	        bufferNewSize += 1024 * 1024 * 1; // bufferSize = stashSize + 1MB
  	        if (bufferNewSize === this._bufferSize) {
  	            return;
  	        }
  	        var newBuffer = new ArrayBuffer(bufferNewSize);
  	        if (this._stashUsed > 0) { // copy existing data into new buffer
  	            var stashOldArray = new Uint8Array(this._stashBuffer, 0, this._stashUsed);
  	            var stashNewArray = new Uint8Array(newBuffer, 0, bufferNewSize);
  	            stashNewArray.set(stashOldArray, 0);
  	        }
  	        this._stashBuffer = newBuffer;
  	        this._bufferSize = bufferNewSize;
  	    };
  	    IOController.prototype._normalizeSpeed = function (input) {
  	        var list = this._speedNormalizeList;
  	        var last = list.length - 1;
  	        var mid = 0;
  	        var lbound = 0;
  	        var ubound = last;
  	        if (input < list[0]) {
  	            return list[0];
  	        }
  	        // binary search
  	        while (lbound <= ubound) {
  	            mid = lbound + Math.floor((ubound - lbound) / 2);
  	            if (mid === last || (input >= list[mid] && input < list[mid + 1])) {
  	                return list[mid];
  	            }
  	            else if (list[mid] < input) {
  	                lbound = mid + 1;
  	            }
  	            else {
  	                ubound = mid - 1;
  	            }
  	        }
  	    };
  	    IOController.prototype._adjustStashSize = function (normalized) {
  	        var stashSizeKB = 0;
  	        if (this._config.isLive) {
  	            // live stream: always use single normalized speed for size of stashSizeKB
  	            stashSizeKB = normalized;
  	        }
  	        else {
  	            if (normalized < 512) {
  	                stashSizeKB = normalized;
  	            }
  	            else if (normalized >= 512 && normalized <= 1024) {
  	                stashSizeKB = Math.floor(normalized * 1.5);
  	            }
  	            else {
  	                stashSizeKB = normalized * 2;
  	            }
  	        }
  	        if (stashSizeKB > 8192) {
  	            stashSizeKB = 8192;
  	        }
  	        var bufferSize = stashSizeKB * 1024 + 1024 * 1024 * 1; // stashSize + 1MB
  	        if (this._bufferSize < bufferSize) {
  	            this._expandBuffer(bufferSize);
  	        }
  	        this._stashSize = stashSizeKB * 1024;
  	    };
  	    IOController.prototype._dispatchChunks = function (chunks, byteStart) {
  	        this._currentRange.to = byteStart + chunks.byteLength - 1;
  	        return this._onDataArrival(chunks, byteStart);
  	    };
  	    IOController.prototype._onURLRedirect = function (redirectedURL) {
  	        this._redirectedURL = redirectedURL;
  	        if (this._onRedirect) {
  	            this._onRedirect(redirectedURL);
  	        }
  	    };
  	    IOController.prototype._onContentLengthKnown = function (contentLength) {
  	        if (contentLength && this._fullRequestFlag) {
  	            this._totalLength = contentLength;
  	            this._fullRequestFlag = false;
  	        }
  	    };
  	    IOController.prototype._onLoaderChunkArrival = function (chunk, byteStart, receivedLength) {
  	        if (!this._onDataArrival) {
  	            throw new _utils_exception_js__WEBPACK_IMPORTED_MODULE_9__.IllegalStateException('IOController: No existing consumer (onDataArrival) callback!');
  	        }
  	        if (this._paused) {
  	            return;
  	        }
  	        if (this._isEarlyEofReconnecting) {
  	            // Auto-reconnect for EarlyEof succeed, notify to upper-layer by callback
  	            this._isEarlyEofReconnecting = false;
  	            if (this._onRecoveredEarlyEof) {
  	                this._onRecoveredEarlyEof();
  	            }
  	        }
  	        this._speedSampler.addBytes(chunk.byteLength);
  	        // adjust stash buffer size according to network speed dynamically
  	        var KBps = this._speedSampler.lastSecondKBps;
  	        if (KBps !== 0) {
  	            var normalized = this._normalizeSpeed(KBps);
  	            if (this._speedNormalized !== normalized) {
  	                this._speedNormalized = normalized;
  	                this._adjustStashSize(normalized);
  	            }
  	        }
  	        if (!this._enableStash) { // disable stash
  	            if (this._stashUsed === 0) {
  	                // dispatch chunk directly to consumer;
  	                // check ret value (consumed bytes) and stash unconsumed to stashBuffer
  	                var consumed = this._dispatchChunks(chunk, byteStart);
  	                if (consumed < chunk.byteLength) { // unconsumed data remain.
  	                    var remain = chunk.byteLength - consumed;
  	                    if (remain > this._bufferSize) {
  	                        this._expandBuffer(remain);
  	                    }
  	                    var stashArray = new Uint8Array(this._stashBuffer, 0, this._bufferSize);
  	                    stashArray.set(new Uint8Array(chunk, consumed), 0);
  	                    this._stashUsed += remain;
  	                    this._stashByteStart = byteStart + consumed;
  	                }
  	            }
  	            else {
  	                // else: Merge chunk into stashBuffer, and dispatch stashBuffer to consumer.
  	                if (this._stashUsed + chunk.byteLength > this._bufferSize) {
  	                    this._expandBuffer(this._stashUsed + chunk.byteLength);
  	                }
  	                var stashArray = new Uint8Array(this._stashBuffer, 0, this._bufferSize);
  	                stashArray.set(new Uint8Array(chunk), this._stashUsed);
  	                this._stashUsed += chunk.byteLength;
  	                var consumed = this._dispatchChunks(this._stashBuffer.slice(0, this._stashUsed), this._stashByteStart);
  	                if (consumed < this._stashUsed && consumed > 0) { // unconsumed data remain
  	                    var remainArray = new Uint8Array(this._stashBuffer, consumed);
  	                    stashArray.set(remainArray, 0);
  	                }
  	                this._stashUsed -= consumed;
  	                this._stashByteStart += consumed;
  	            }
  	        }
  	        else { // enable stash
  	            if (this._stashUsed === 0 && this._stashByteStart === 0) { // seeked? or init chunk?
  	                // This is the first chunk after seek action
  	                this._stashByteStart = byteStart;
  	            }
  	            if (this._stashUsed + chunk.byteLength <= this._stashSize) {
  	                // just stash
  	                var stashArray = new Uint8Array(this._stashBuffer, 0, this._stashSize);
  	                stashArray.set(new Uint8Array(chunk), this._stashUsed);
  	                this._stashUsed += chunk.byteLength;
  	            }
  	            else { // stashUsed + chunkSize > stashSize, size limit exceeded
  	                var stashArray = new Uint8Array(this._stashBuffer, 0, this._bufferSize);
  	                if (this._stashUsed > 0) { // There're stash datas in buffer
  	                    // dispatch the whole stashBuffer, and stash remain data
  	                    // then append chunk to stashBuffer (stash)
  	                    var buffer = this._stashBuffer.slice(0, this._stashUsed);
  	                    var consumed = this._dispatchChunks(buffer, this._stashByteStart);
  	                    if (consumed < buffer.byteLength) {
  	                        if (consumed > 0) {
  	                            var remainArray = new Uint8Array(buffer, consumed);
  	                            stashArray.set(remainArray, 0);
  	                            this._stashUsed = remainArray.byteLength;
  	                            this._stashByteStart += consumed;
  	                        }
  	                    }
  	                    else {
  	                        this._stashUsed = 0;
  	                        this._stashByteStart += consumed;
  	                    }
  	                    if (this._stashUsed + chunk.byteLength > this._bufferSize) {
  	                        this._expandBuffer(this._stashUsed + chunk.byteLength);
  	                        stashArray = new Uint8Array(this._stashBuffer, 0, this._bufferSize);
  	                    }
  	                    stashArray.set(new Uint8Array(chunk), this._stashUsed);
  	                    this._stashUsed += chunk.byteLength;
  	                }
  	                else { // stash buffer empty, but chunkSize > stashSize (oh, holy shit)
  	                    // dispatch chunk directly and stash remain data
  	                    var consumed = this._dispatchChunks(chunk, byteStart);
  	                    if (consumed < chunk.byteLength) {
  	                        var remain = chunk.byteLength - consumed;
  	                        if (remain > this._bufferSize) {
  	                            this._expandBuffer(remain);
  	                            stashArray = new Uint8Array(this._stashBuffer, 0, this._bufferSize);
  	                        }
  	                        stashArray.set(new Uint8Array(chunk, consumed), 0);
  	                        this._stashUsed += remain;
  	                        this._stashByteStart = byteStart + consumed;
  	                    }
  	                }
  	            }
  	        }
  	    };
  	    IOController.prototype._flushStashBuffer = function (dropUnconsumed) {
  	        if (this._stashUsed > 0) {
  	            var buffer = this._stashBuffer.slice(0, this._stashUsed);
  	            var consumed = this._dispatchChunks(buffer, this._stashByteStart);
  	            var remain = buffer.byteLength - consumed;
  	            if (consumed < buffer.byteLength) {
  	                if (dropUnconsumed) {
  	                    _utils_logger_js__WEBPACK_IMPORTED_MODULE_0__.default.w(this.TAG, remain + " bytes unconsumed data remain when flush buffer, dropped");
  	                }
  	                else {
  	                    if (consumed > 0) {
  	                        var stashArray = new Uint8Array(this._stashBuffer, 0, this._bufferSize);
  	                        var remainArray = new Uint8Array(buffer, consumed);
  	                        stashArray.set(remainArray, 0);
  	                        this._stashUsed = remainArray.byteLength;
  	                        this._stashByteStart += consumed;
  	                    }
  	                    return 0;
  	                }
  	            }
  	            this._stashUsed = 0;
  	            this._stashByteStart = 0;
  	            return remain;
  	        }
  	        return 0;
  	    };
  	    IOController.prototype._onLoaderComplete = function (from, to) {
  	        // Force-flush stash buffer, and drop unconsumed data
  	        this._flushStashBuffer(true);
  	        if (this._onComplete) {
  	            this._onComplete(this._extraData);
  	        }
  	    };
  	    IOController.prototype._onLoaderError = function (type, data) {
  	        _utils_logger_js__WEBPACK_IMPORTED_MODULE_0__.default.e(this.TAG, "Loader error, code = " + data.code + ", msg = " + data.msg);
  	        this._flushStashBuffer(false);
  	        if (this._isEarlyEofReconnecting) {
  	            // Auto-reconnect for EarlyEof failed, throw UnrecoverableEarlyEof error to upper-layer
  	            this._isEarlyEofReconnecting = false;
  	            type = _loader_js__WEBPACK_IMPORTED_MODULE_2__.LoaderErrors.UNRECOVERABLE_EARLY_EOF;
  	        }
  	        switch (type) {
  	            case _loader_js__WEBPACK_IMPORTED_MODULE_2__.LoaderErrors.EARLY_EOF: {
  	                if (!this._config.isLive) {
  	                    // Do internal http reconnect if not live stream
  	                    if (this._totalLength) {
  	                        var nextFrom = this._currentRange.to + 1;
  	                        if (nextFrom < this._totalLength) {
  	                            _utils_logger_js__WEBPACK_IMPORTED_MODULE_0__.default.w(this.TAG, 'Connection lost, trying reconnect...');
  	                            this._isEarlyEofReconnecting = true;
  	                            this._internalSeek(nextFrom, false);
  	                        }
  	                        return;
  	                    }
  	                    // else: We don't know totalLength, throw UnrecoverableEarlyEof
  	                }
  	                // live stream: throw UnrecoverableEarlyEof error to upper-layer
  	                type = _loader_js__WEBPACK_IMPORTED_MODULE_2__.LoaderErrors.UNRECOVERABLE_EARLY_EOF;
  	                break;
  	            }
  	            case _loader_js__WEBPACK_IMPORTED_MODULE_2__.LoaderErrors.UNRECOVERABLE_EARLY_EOF:
  	            case _loader_js__WEBPACK_IMPORTED_MODULE_2__.LoaderErrors.CONNECTING_TIMEOUT:
  	            case _loader_js__WEBPACK_IMPORTED_MODULE_2__.LoaderErrors.HTTP_STATUS_CODE_INVALID:
  	            case _loader_js__WEBPACK_IMPORTED_MODULE_2__.LoaderErrors.EXCEPTION:
  	                break;
  	        }
  	        if (this._onError) {
  	            this._onError(type, data);
  	        }
  	        else {
  	            throw new _utils_exception_js__WEBPACK_IMPORTED_MODULE_9__.RuntimeException('IOException: ' + data.msg);
  	        }
  	    };
  	    return IOController;
  	}());
  	/* harmony default export */ __webpack_exports__["default"] = (IOController);


  	/***/ }),

  	/***/ "./src/io/loader.js":
  	/*!**************************!*\
  	  !*** ./src/io/loader.js ***!
  	  \**************************/
  	/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {
  	__webpack_require__.r(__webpack_exports__);
  	/* harmony export */ __webpack_require__.d(__webpack_exports__, {
  	/* harmony export */   "LoaderStatus": function() { return /* binding */ LoaderStatus; },
  	/* harmony export */   "LoaderErrors": function() { return /* binding */ LoaderErrors; },
  	/* harmony export */   "BaseLoader": function() { return /* binding */ BaseLoader; }
  	/* harmony export */ });
  	/* harmony import */ var _utils_exception_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utils/exception.js */ "./src/utils/exception.js");
  	/*
  	 * Copyright (C) 2016 Bilibili. All Rights Reserved.
  	 *
  	 * @author zheng qian <xqq@xqq.im>
  	 *
  	 * Licensed under the Apache License, Version 2.0 (the "License");
  	 * you may not use this file except in compliance with the License.
  	 * You may obtain a copy of the License at
  	 *
  	 *     http://www.apache.org/licenses/LICENSE-2.0
  	 *
  	 * Unless required by applicable law or agreed to in writing, software
  	 * distributed under the License is distributed on an "AS IS" BASIS,
  	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  	 * See the License for the specific language governing permissions and
  	 * limitations under the License.
  	 */

  	var LoaderStatus = {
  	    kIdle: 0,
  	    kConnecting: 1,
  	    kBuffering: 2,
  	    kError: 3,
  	    kComplete: 4
  	};
  	var LoaderErrors = {
  	    OK: 'OK',
  	    EXCEPTION: 'Exception',
  	    HTTP_STATUS_CODE_INVALID: 'HttpStatusCodeInvalid',
  	    CONNECTING_TIMEOUT: 'ConnectingTimeout',
  	    EARLY_EOF: 'EarlyEof',
  	    UNRECOVERABLE_EARLY_EOF: 'UnrecoverableEarlyEof'
  	};
  	/* Loader has callbacks which have following prototypes:
  	 *     function onContentLengthKnown(contentLength: number): void
  	 *     function onURLRedirect(url: string): void
  	 *     function onDataArrival(chunk: ArrayBuffer, byteStart: number, receivedLength: number): void
  	 *     function onError(errorType: number, errorInfo: {code: number, msg: string}): void
  	 *     function onComplete(rangeFrom: number, rangeTo: number): void
  	 */
  	var BaseLoader = /** @class */ (function () {
  	    function BaseLoader(typeName) {
  	        this._type = typeName || 'undefined';
  	        this._status = LoaderStatus.kIdle;
  	        this._needStash = false;
  	        // callbacks
  	        this._onContentLengthKnown = null;
  	        this._onURLRedirect = null;
  	        this._onDataArrival = null;
  	        this._onError = null;
  	        this._onComplete = null;
  	    }
  	    BaseLoader.prototype.destroy = function () {
  	        this._status = LoaderStatus.kIdle;
  	        this._onContentLengthKnown = null;
  	        this._onURLRedirect = null;
  	        this._onDataArrival = null;
  	        this._onError = null;
  	        this._onComplete = null;
  	    };
  	    BaseLoader.prototype.isWorking = function () {
  	        return this._status === LoaderStatus.kConnecting || this._status === LoaderStatus.kBuffering;
  	    };
  	    Object.defineProperty(BaseLoader.prototype, "type", {
  	        get: function () {
  	            return this._type;
  	        },
  	        enumerable: false,
  	        configurable: true
  	    });
  	    Object.defineProperty(BaseLoader.prototype, "status", {
  	        get: function () {
  	            return this._status;
  	        },
  	        enumerable: false,
  	        configurable: true
  	    });
  	    Object.defineProperty(BaseLoader.prototype, "needStashBuffer", {
  	        get: function () {
  	            return this._needStash;
  	        },
  	        enumerable: false,
  	        configurable: true
  	    });
  	    Object.defineProperty(BaseLoader.prototype, "onContentLengthKnown", {
  	        get: function () {
  	            return this._onContentLengthKnown;
  	        },
  	        set: function (callback) {
  	            this._onContentLengthKnown = callback;
  	        },
  	        enumerable: false,
  	        configurable: true
  	    });
  	    Object.defineProperty(BaseLoader.prototype, "onURLRedirect", {
  	        get: function () {
  	            return this._onURLRedirect;
  	        },
  	        set: function (callback) {
  	            this._onURLRedirect = callback;
  	        },
  	        enumerable: false,
  	        configurable: true
  	    });
  	    Object.defineProperty(BaseLoader.prototype, "onDataArrival", {
  	        get: function () {
  	            return this._onDataArrival;
  	        },
  	        set: function (callback) {
  	            this._onDataArrival = callback;
  	        },
  	        enumerable: false,
  	        configurable: true
  	    });
  	    Object.defineProperty(BaseLoader.prototype, "onError", {
  	        get: function () {
  	            return this._onError;
  	        },
  	        set: function (callback) {
  	            this._onError = callback;
  	        },
  	        enumerable: false,
  	        configurable: true
  	    });
  	    Object.defineProperty(BaseLoader.prototype, "onComplete", {
  	        get: function () {
  	            return this._onComplete;
  	        },
  	        set: function (callback) {
  	            this._onComplete = callback;
  	        },
  	        enumerable: false,
  	        configurable: true
  	    });
  	    // pure virtual
  	    BaseLoader.prototype.open = function (dataSource, range) {
  	        throw new _utils_exception_js__WEBPACK_IMPORTED_MODULE_0__.NotImplementedException('Unimplemented abstract function!');
  	    };
  	    BaseLoader.prototype.abort = function () {
  	        throw new _utils_exception_js__WEBPACK_IMPORTED_MODULE_0__.NotImplementedException('Unimplemented abstract function!');
  	    };
  	    return BaseLoader;
  	}());



  	/***/ }),

  	/***/ "./src/io/param-seek-handler.js":
  	/*!**************************************!*\
  	  !*** ./src/io/param-seek-handler.js ***!
  	  \**************************************/
  	/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {
  	__webpack_require__.r(__webpack_exports__);
  	/*
  	 * Copyright (C) 2016 Bilibili. All Rights Reserved.
  	 *
  	 * @author zheng qian <xqq@xqq.im>
  	 *
  	 * Licensed under the Apache License, Version 2.0 (the "License");
  	 * you may not use this file except in compliance with the License.
  	 * You may obtain a copy of the License at
  	 *
  	 *     http://www.apache.org/licenses/LICENSE-2.0
  	 *
  	 * Unless required by applicable law or agreed to in writing, software
  	 * distributed under the License is distributed on an "AS IS" BASIS,
  	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  	 * See the License for the specific language governing permissions and
  	 * limitations under the License.
  	 */
  	var ParamSeekHandler = /** @class */ (function () {
  	    function ParamSeekHandler(paramStart, paramEnd) {
  	        this._startName = paramStart;
  	        this._endName = paramEnd;
  	    }
  	    ParamSeekHandler.prototype.getConfig = function (baseUrl, range) {
  	        var url = baseUrl;
  	        if (range.from !== 0 || range.to !== -1) {
  	            var needAnd = true;
  	            if (url.indexOf('?') === -1) {
  	                url += '?';
  	                needAnd = false;
  	            }
  	            if (needAnd) {
  	                url += '&';
  	            }
  	            url += this._startName + "=" + range.from.toString();
  	            if (range.to !== -1) {
  	                url += "&" + this._endName + "=" + range.to.toString();
  	            }
  	        }
  	        return {
  	            url: url,
  	            headers: {}
  	        };
  	    };
  	    ParamSeekHandler.prototype.removeURLParameters = function (seekedURL) {
  	        var baseURL = seekedURL.split('?')[0];
  	        var params = undefined;
  	        var queryIndex = seekedURL.indexOf('?');
  	        if (queryIndex !== -1) {
  	            params = seekedURL.substring(queryIndex + 1);
  	        }
  	        var resultParams = '';
  	        if (params != undefined && params.length > 0) {
  	            var pairs = params.split('&');
  	            for (var i = 0; i < pairs.length; i++) {
  	                var pair = pairs[i].split('=');
  	                var requireAnd = (i > 0);
  	                if (pair[0] !== this._startName && pair[0] !== this._endName) {
  	                    if (requireAnd) {
  	                        resultParams += '&';
  	                    }
  	                    resultParams += pairs[i];
  	                }
  	            }
  	        }
  	        return (resultParams.length === 0) ? baseURL : baseURL + '?' + resultParams;
  	    };
  	    return ParamSeekHandler;
  	}());
  	/* harmony default export */ __webpack_exports__["default"] = (ParamSeekHandler);


  	/***/ }),

  	/***/ "./src/io/range-seek-handler.js":
  	/*!**************************************!*\
  	  !*** ./src/io/range-seek-handler.js ***!
  	  \**************************************/
  	/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {
  	__webpack_require__.r(__webpack_exports__);
  	/*
  	 * Copyright (C) 2016 Bilibili. All Rights Reserved.
  	 *
  	 * @author zheng qian <xqq@xqq.im>
  	 *
  	 * Licensed under the Apache License, Version 2.0 (the "License");
  	 * you may not use this file except in compliance with the License.
  	 * You may obtain a copy of the License at
  	 *
  	 *     http://www.apache.org/licenses/LICENSE-2.0
  	 *
  	 * Unless required by applicable law or agreed to in writing, software
  	 * distributed under the License is distributed on an "AS IS" BASIS,
  	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  	 * See the License for the specific language governing permissions and
  	 * limitations under the License.
  	 */
  	var RangeSeekHandler = /** @class */ (function () {
  	    function RangeSeekHandler(zeroStart) {
  	        this._zeroStart = zeroStart || false;
  	    }
  	    RangeSeekHandler.prototype.getConfig = function (url, range) {
  	        var headers = {};
  	        if (range.from !== 0 || range.to !== -1) {
  	            var param = void 0;
  	            if (range.to !== -1) {
  	                param = "bytes=" + range.from.toString() + "-" + range.to.toString();
  	            }
  	            else {
  	                param = "bytes=" + range.from.toString() + "-";
  	            }
  	            headers['Range'] = param;
  	        }
  	        else if (this._zeroStart) {
  	            headers['Range'] = 'bytes=0-';
  	        }
  	        return {
  	            url: url,
  	            headers: headers
  	        };
  	    };
  	    RangeSeekHandler.prototype.removeURLParameters = function (seekedURL) {
  	        return seekedURL;
  	    };
  	    return RangeSeekHandler;
  	}());
  	/* harmony default export */ __webpack_exports__["default"] = (RangeSeekHandler);


  	/***/ }),

  	/***/ "./src/io/speed-sampler.js":
  	/*!*********************************!*\
  	  !*** ./src/io/speed-sampler.js ***!
  	  \*********************************/
  	/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {
  	__webpack_require__.r(__webpack_exports__);
  	/*
  	 * Copyright (C) 2016 Bilibili. All Rights Reserved.
  	 *
  	 * @author zheng qian <xqq@xqq.im>
  	 *
  	 * Licensed under the Apache License, Version 2.0 (the "License");
  	 * you may not use this file except in compliance with the License.
  	 * You may obtain a copy of the License at
  	 *
  	 *     http://www.apache.org/licenses/LICENSE-2.0
  	 *
  	 * Unless required by applicable law or agreed to in writing, software
  	 * distributed under the License is distributed on an "AS IS" BASIS,
  	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  	 * See the License for the specific language governing permissions and
  	 * limitations under the License.
  	 */
  	// Utility class to calculate realtime network I/O speed
  	var SpeedSampler = /** @class */ (function () {
  	    function SpeedSampler() {
  	        // milliseconds
  	        this._firstCheckpoint = 0;
  	        this._lastCheckpoint = 0;
  	        this._intervalBytes = 0;
  	        this._totalBytes = 0;
  	        this._lastSecondBytes = 0;
  	        // compatibility detection
  	        if (self.performance && self.performance.now) {
  	            this._now = self.performance.now.bind(self.performance);
  	        }
  	        else {
  	            this._now = Date.now;
  	        }
  	    }
  	    SpeedSampler.prototype.reset = function () {
  	        this._firstCheckpoint = this._lastCheckpoint = 0;
  	        this._totalBytes = this._intervalBytes = 0;
  	        this._lastSecondBytes = 0;
  	    };
  	    SpeedSampler.prototype.addBytes = function (bytes) {
  	        if (this._firstCheckpoint === 0) {
  	            this._firstCheckpoint = this._now();
  	            this._lastCheckpoint = this._firstCheckpoint;
  	            this._intervalBytes += bytes;
  	            this._totalBytes += bytes;
  	        }
  	        else if (this._now() - this._lastCheckpoint < 1000) {
  	            this._intervalBytes += bytes;
  	            this._totalBytes += bytes;
  	        }
  	        else { // duration >= 1000
  	            this._lastSecondBytes = this._intervalBytes;
  	            this._intervalBytes = bytes;
  	            this._totalBytes += bytes;
  	            this._lastCheckpoint = this._now();
  	        }
  	    };
  	    Object.defineProperty(SpeedSampler.prototype, "currentKBps", {
  	        get: function () {
  	            this.addBytes(0);
  	            var durationSeconds = (this._now() - this._lastCheckpoint) / 1000;
  	            if (durationSeconds == 0)
  	                durationSeconds = 1;
  	            return (this._intervalBytes / durationSeconds) / 1024;
  	        },
  	        enumerable: false,
  	        configurable: true
  	    });
  	    Object.defineProperty(SpeedSampler.prototype, "lastSecondKBps", {
  	        get: function () {
  	            this.addBytes(0);
  	            if (this._lastSecondBytes !== 0) {
  	                return this._lastSecondBytes / 1024;
  	            }
  	            else { // lastSecondBytes === 0
  	                if (this._now() - this._lastCheckpoint >= 500) {
  	                    // if time interval since last checkpoint has exceeded 500ms
  	                    // the speed is nearly accurate
  	                    return this.currentKBps;
  	                }
  	                else {
  	                    // We don't know
  	                    return 0;
  	                }
  	            }
  	        },
  	        enumerable: false,
  	        configurable: true
  	    });
  	    Object.defineProperty(SpeedSampler.prototype, "averageKBps", {
  	        get: function () {
  	            var durationSeconds = (this._now() - this._firstCheckpoint) / 1000;
  	            return (this._totalBytes / durationSeconds) / 1024;
  	        },
  	        enumerable: false,
  	        configurable: true
  	    });
  	    return SpeedSampler;
  	}());
  	/* harmony default export */ __webpack_exports__["default"] = (SpeedSampler);


  	/***/ }),

  	/***/ "./src/io/websocket-loader.js":
  	/*!************************************!*\
  	  !*** ./src/io/websocket-loader.js ***!
  	  \************************************/
  	/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {
  	__webpack_require__.r(__webpack_exports__);
  	/* harmony import */ var _loader_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./loader.js */ "./src/io/loader.js");
  	/* harmony import */ var _utils_exception_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../utils/exception.js */ "./src/utils/exception.js");
  	/*
  	 * Copyright (C) 2016 Bilibili. All Rights Reserved.
  	 *
  	 * @author zheng qian <xqq@xqq.im>
  	 *
  	 * Licensed under the Apache License, Version 2.0 (the "License");
  	 * you may not use this file except in compliance with the License.
  	 * You may obtain a copy of the License at
  	 *
  	 *     http://www.apache.org/licenses/LICENSE-2.0
  	 *
  	 * Unless required by applicable law or agreed to in writing, software
  	 * distributed under the License is distributed on an "AS IS" BASIS,
  	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  	 * See the License for the specific language governing permissions and
  	 * limitations under the License.
  	 */
  	var __extends = (function () {
  	    var extendStatics = function (d, b) {
  	        extendStatics = Object.setPrototypeOf ||
  	            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
  	            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
  	        return extendStatics(d, b);
  	    };
  	    return function (d, b) {
  	        if (typeof b !== "function" && b !== null)
  	            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
  	        extendStatics(d, b);
  	        function __() { this.constructor = d; }
  	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  	    };
  	})();


  	// For FLV over WebSocket live stream
  	var WebSocketLoader = /** @class */ (function (_super) {
  	    __extends(WebSocketLoader, _super);
  	    function WebSocketLoader() {
  	        var _this = _super.call(this, 'websocket-loader') || this;
  	        _this.TAG = 'WebSocketLoader';
  	        _this._needStash = true;
  	        _this._ws = null;
  	        _this._requestAbort = false;
  	        _this._receivedLength = 0;
  	        return _this;
  	    }
  	    WebSocketLoader.isSupported = function () {
  	        try {
  	            return (typeof self.WebSocket !== 'undefined');
  	        }
  	        catch (e) {
  	            return false;
  	        }
  	    };
  	    WebSocketLoader.prototype.destroy = function () {
  	        if (this._ws) {
  	            this.abort();
  	        }
  	        _super.prototype.destroy.call(this);
  	    };
  	    WebSocketLoader.prototype.open = function (dataSource) {
  	        try {
  	            var ws = this._ws = new self.WebSocket(dataSource.url);
  	            ws.binaryType = 'arraybuffer';
  	            ws.onopen = this._onWebSocketOpen.bind(this);
  	            ws.onclose = this._onWebSocketClose.bind(this);
  	            ws.onmessage = this._onWebSocketMessage.bind(this);
  	            ws.onerror = this._onWebSocketError.bind(this);
  	            this._status = _loader_js__WEBPACK_IMPORTED_MODULE_0__.LoaderStatus.kConnecting;
  	        }
  	        catch (e) {
  	            this._status = _loader_js__WEBPACK_IMPORTED_MODULE_0__.LoaderStatus.kError;
  	            var info = { code: e.code, msg: e.message };
  	            if (this._onError) {
  	                this._onError(_loader_js__WEBPACK_IMPORTED_MODULE_0__.LoaderErrors.EXCEPTION, info);
  	            }
  	            else {
  	                throw new _utils_exception_js__WEBPACK_IMPORTED_MODULE_1__.RuntimeException(info.msg);
  	            }
  	        }
  	    };
  	    WebSocketLoader.prototype.abort = function () {
  	        var ws = this._ws;
  	        if (ws && (ws.readyState === 0 || ws.readyState === 1)) { // CONNECTING || OPEN
  	            this._requestAbort = true;
  	            ws.close();
  	        }
  	        this._ws = null;
  	        this._status = _loader_js__WEBPACK_IMPORTED_MODULE_0__.LoaderStatus.kComplete;
  	    };
  	    WebSocketLoader.prototype._onWebSocketOpen = function (e) {
  	        this._status = _loader_js__WEBPACK_IMPORTED_MODULE_0__.LoaderStatus.kBuffering;
  	    };
  	    WebSocketLoader.prototype._onWebSocketClose = function (e) {
  	        if (this._requestAbort === true) {
  	            this._requestAbort = false;
  	            return;
  	        }
  	        this._status = _loader_js__WEBPACK_IMPORTED_MODULE_0__.LoaderStatus.kComplete;
  	        if (this._onComplete) {
  	            this._onComplete(0, this._receivedLength - 1);
  	        }
  	    };
  	    WebSocketLoader.prototype._onWebSocketMessage = function (e) {
  	        var _this = this;
  	        if (e.data instanceof ArrayBuffer) {
  	            this._dispatchArrayBuffer(e.data);
  	        }
  	        else if (e.data instanceof Blob) {
  	            var reader_1 = new FileReader();
  	            reader_1.onload = function () {
  	                _this._dispatchArrayBuffer(reader_1.result);
  	            };
  	            reader_1.readAsArrayBuffer(e.data);
  	        }
  	        else {
  	            this._status = _loader_js__WEBPACK_IMPORTED_MODULE_0__.LoaderStatus.kError;
  	            var info = { code: -1, msg: 'Unsupported WebSocket message type: ' + e.data.constructor.name };
  	            if (this._onError) {
  	                this._onError(_loader_js__WEBPACK_IMPORTED_MODULE_0__.LoaderErrors.EXCEPTION, info);
  	            }
  	            else {
  	                throw new _utils_exception_js__WEBPACK_IMPORTED_MODULE_1__.RuntimeException(info.msg);
  	            }
  	        }
  	    };
  	    WebSocketLoader.prototype._dispatchArrayBuffer = function (arraybuffer) {
  	        var chunk = arraybuffer;
  	        var byteStart = this._receivedLength;
  	        this._receivedLength += chunk.byteLength;
  	        if (this._onDataArrival) {
  	            this._onDataArrival(chunk, byteStart, this._receivedLength);
  	        }
  	    };
  	    WebSocketLoader.prototype._onWebSocketError = function (e) {
  	        this._status = _loader_js__WEBPACK_IMPORTED_MODULE_0__.LoaderStatus.kError;
  	        var info = {
  	            code: e.code,
  	            msg: e.message
  	        };
  	        if (this._onError) {
  	            this._onError(_loader_js__WEBPACK_IMPORTED_MODULE_0__.LoaderErrors.EXCEPTION, info);
  	        }
  	        else {
  	            throw new _utils_exception_js__WEBPACK_IMPORTED_MODULE_1__.RuntimeException(info.msg);
  	        }
  	    };
  	    return WebSocketLoader;
  	}(_loader_js__WEBPACK_IMPORTED_MODULE_0__.BaseLoader));
  	/* harmony default export */ __webpack_exports__["default"] = (WebSocketLoader);


  	/***/ }),

  	/***/ "./src/io/xhr-moz-chunked-loader.js":
  	/*!******************************************!*\
  	  !*** ./src/io/xhr-moz-chunked-loader.js ***!
  	  \******************************************/
  	/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {
  	__webpack_require__.r(__webpack_exports__);
  	/* harmony import */ var _utils_logger_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utils/logger.js */ "./src/utils/logger.js");
  	/* harmony import */ var _loader_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./loader.js */ "./src/io/loader.js");
  	/* harmony import */ var _utils_exception_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../utils/exception.js */ "./src/utils/exception.js");
  	/*
  	 * Copyright (C) 2016 Bilibili. All Rights Reserved.
  	 *
  	 * @author zheng qian <xqq@xqq.im>
  	 *
  	 * Licensed under the Apache License, Version 2.0 (the "License");
  	 * you may not use this file except in compliance with the License.
  	 * You may obtain a copy of the License at
  	 *
  	 *     http://www.apache.org/licenses/LICENSE-2.0
  	 *
  	 * Unless required by applicable law or agreed to in writing, software
  	 * distributed under the License is distributed on an "AS IS" BASIS,
  	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  	 * See the License for the specific language governing permissions and
  	 * limitations under the License.
  	 */
  	var __extends = (function () {
  	    var extendStatics = function (d, b) {
  	        extendStatics = Object.setPrototypeOf ||
  	            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
  	            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
  	        return extendStatics(d, b);
  	    };
  	    return function (d, b) {
  	        if (typeof b !== "function" && b !== null)
  	            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
  	        extendStatics(d, b);
  	        function __() { this.constructor = d; }
  	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  	    };
  	})();



  	// For FireFox browser which supports `xhr.responseType = 'moz-chunked-arraybuffer'`
  	var MozChunkedLoader = /** @class */ (function (_super) {
  	    __extends(MozChunkedLoader, _super);
  	    function MozChunkedLoader(seekHandler, config) {
  	        var _this = _super.call(this, 'xhr-moz-chunked-loader') || this;
  	        _this.TAG = 'MozChunkedLoader';
  	        _this._seekHandler = seekHandler;
  	        _this._config = config;
  	        _this._needStash = true;
  	        _this._xhr = null;
  	        _this._requestAbort = false;
  	        _this._contentLength = null;
  	        _this._receivedLength = 0;
  	        return _this;
  	    }
  	    MozChunkedLoader.isSupported = function () {
  	        try {
  	            var xhr = new XMLHttpRequest();
  	            // Firefox 37- requires .open() to be called before setting responseType
  	            xhr.open('GET', 'https://example.com', true);
  	            xhr.responseType = 'moz-chunked-arraybuffer';
  	            return (xhr.responseType === 'moz-chunked-arraybuffer');
  	        }
  	        catch (e) {
  	            _utils_logger_js__WEBPACK_IMPORTED_MODULE_0__.default.w('MozChunkedLoader', e.message);
  	            return false;
  	        }
  	    };
  	    MozChunkedLoader.prototype.destroy = function () {
  	        if (this.isWorking()) {
  	            this.abort();
  	        }
  	        if (this._xhr) {
  	            this._xhr.onreadystatechange = null;
  	            this._xhr.onprogress = null;
  	            this._xhr.onloadend = null;
  	            this._xhr.onerror = null;
  	            this._xhr = null;
  	        }
  	        _super.prototype.destroy.call(this);
  	    };
  	    MozChunkedLoader.prototype.open = function (dataSource, range) {
  	        this._dataSource = dataSource;
  	        this._range = range;
  	        var sourceURL = dataSource.url;
  	        if (this._config.reuseRedirectedURL && dataSource.redirectedURL != undefined) {
  	            sourceURL = dataSource.redirectedURL;
  	        }
  	        var seekConfig = this._seekHandler.getConfig(sourceURL, range);
  	        this._requestURL = seekConfig.url;
  	        var xhr = this._xhr = new XMLHttpRequest();
  	        xhr.open('GET', seekConfig.url, true);
  	        xhr.responseType = 'moz-chunked-arraybuffer';
  	        xhr.onreadystatechange = this._onReadyStateChange.bind(this);
  	        xhr.onprogress = this._onProgress.bind(this);
  	        xhr.onloadend = this._onLoadEnd.bind(this);
  	        xhr.onerror = this._onXhrError.bind(this);
  	        // cors is auto detected and enabled by xhr
  	        // withCredentials is disabled by default
  	        if (dataSource.withCredentials) {
  	            xhr.withCredentials = true;
  	        }
  	        if (typeof seekConfig.headers === 'object') {
  	            var headers = seekConfig.headers;
  	            for (var key in headers) {
  	                if (headers.hasOwnProperty(key)) {
  	                    xhr.setRequestHeader(key, headers[key]);
  	                }
  	            }
  	        }
  	        // add additional headers
  	        if (typeof this._config.headers === 'object') {
  	            var headers = this._config.headers;
  	            for (var key in headers) {
  	                if (headers.hasOwnProperty(key)) {
  	                    xhr.setRequestHeader(key, headers[key]);
  	                }
  	            }
  	        }
  	        this._status = _loader_js__WEBPACK_IMPORTED_MODULE_1__.LoaderStatus.kConnecting;
  	        xhr.send();
  	    };
  	    MozChunkedLoader.prototype.abort = function () {
  	        this._requestAbort = true;
  	        if (this._xhr) {
  	            this._xhr.abort();
  	        }
  	        this._status = _loader_js__WEBPACK_IMPORTED_MODULE_1__.LoaderStatus.kComplete;
  	    };
  	    MozChunkedLoader.prototype._onReadyStateChange = function (e) {
  	        var xhr = e.target;
  	        if (xhr.readyState === 2) { // HEADERS_RECEIVED
  	            if (xhr.responseURL != undefined && xhr.responseURL !== this._requestURL) {
  	                if (this._onURLRedirect) {
  	                    var redirectedURL = this._seekHandler.removeURLParameters(xhr.responseURL);
  	                    this._onURLRedirect(redirectedURL);
  	                }
  	            }
  	            if (xhr.status !== 0 && (xhr.status < 200 || xhr.status > 299)) {
  	                this._status = _loader_js__WEBPACK_IMPORTED_MODULE_1__.LoaderStatus.kError;
  	                if (this._onError) {
  	                    this._onError(_loader_js__WEBPACK_IMPORTED_MODULE_1__.LoaderErrors.HTTP_STATUS_CODE_INVALID, { code: xhr.status, msg: xhr.statusText });
  	                }
  	                else {
  	                    throw new _utils_exception_js__WEBPACK_IMPORTED_MODULE_2__.RuntimeException('MozChunkedLoader: Http code invalid, ' + xhr.status + ' ' + xhr.statusText);
  	                }
  	            }
  	            else {
  	                this._status = _loader_js__WEBPACK_IMPORTED_MODULE_1__.LoaderStatus.kBuffering;
  	            }
  	        }
  	    };
  	    MozChunkedLoader.prototype._onProgress = function (e) {
  	        if (this._status === _loader_js__WEBPACK_IMPORTED_MODULE_1__.LoaderStatus.kError) {
  	            // Ignore error response
  	            return;
  	        }
  	        if (this._contentLength === null) {
  	            if (e.total !== null && e.total !== 0) {
  	                this._contentLength = e.total;
  	                if (this._onContentLengthKnown) {
  	                    this._onContentLengthKnown(this._contentLength);
  	                }
  	            }
  	        }
  	        var chunk = e.target.response;
  	        var byteStart = this._range.from + this._receivedLength;
  	        this._receivedLength += chunk.byteLength;
  	        if (this._onDataArrival) {
  	            this._onDataArrival(chunk, byteStart, this._receivedLength);
  	        }
  	    };
  	    MozChunkedLoader.prototype._onLoadEnd = function (e) {
  	        if (this._requestAbort === true) {
  	            this._requestAbort = false;
  	            return;
  	        }
  	        else if (this._status === _loader_js__WEBPACK_IMPORTED_MODULE_1__.LoaderStatus.kError) {
  	            return;
  	        }
  	        this._status = _loader_js__WEBPACK_IMPORTED_MODULE_1__.LoaderStatus.kComplete;
  	        if (this._onComplete) {
  	            this._onComplete(this._range.from, this._range.from + this._receivedLength - 1);
  	        }
  	    };
  	    MozChunkedLoader.prototype._onXhrError = function (e) {
  	        this._status = _loader_js__WEBPACK_IMPORTED_MODULE_1__.LoaderStatus.kError;
  	        var type = 0;
  	        var info = null;
  	        if (this._contentLength && e.loaded < this._contentLength) {
  	            type = _loader_js__WEBPACK_IMPORTED_MODULE_1__.LoaderErrors.EARLY_EOF;
  	            info = { code: -1, msg: 'Moz-Chunked stream meet Early-Eof' };
  	        }
  	        else {
  	            type = _loader_js__WEBPACK_IMPORTED_MODULE_1__.LoaderErrors.EXCEPTION;
  	            info = { code: -1, msg: e.constructor.name + ' ' + e.type };
  	        }
  	        if (this._onError) {
  	            this._onError(type, info);
  	        }
  	        else {
  	            throw new _utils_exception_js__WEBPACK_IMPORTED_MODULE_2__.RuntimeException(info.msg);
  	        }
  	    };
  	    return MozChunkedLoader;
  	}(_loader_js__WEBPACK_IMPORTED_MODULE_1__.BaseLoader));
  	/* harmony default export */ __webpack_exports__["default"] = (MozChunkedLoader);


  	/***/ }),

  	/***/ "./src/io/xhr-range-loader.js":
  	/*!************************************!*\
  	  !*** ./src/io/xhr-range-loader.js ***!
  	  \************************************/
  	/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {
  	__webpack_require__.r(__webpack_exports__);
  	/* harmony import */ var _utils_logger_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utils/logger.js */ "./src/utils/logger.js");
  	/* harmony import */ var _speed_sampler_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./speed-sampler.js */ "./src/io/speed-sampler.js");
  	/* harmony import */ var _loader_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./loader.js */ "./src/io/loader.js");
  	/* harmony import */ var _utils_exception_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../utils/exception.js */ "./src/utils/exception.js");
  	/*
  	 * Copyright (C) 2016 Bilibili. All Rights Reserved.
  	 *
  	 * @author zheng qian <xqq@xqq.im>
  	 *
  	 * Licensed under the Apache License, Version 2.0 (the "License");
  	 * you may not use this file except in compliance with the License.
  	 * You may obtain a copy of the License at
  	 *
  	 *     http://www.apache.org/licenses/LICENSE-2.0
  	 *
  	 * Unless required by applicable law or agreed to in writing, software
  	 * distributed under the License is distributed on an "AS IS" BASIS,
  	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  	 * See the License for the specific language governing permissions and
  	 * limitations under the License.
  	 */
  	var __extends = (function () {
  	    var extendStatics = function (d, b) {
  	        extendStatics = Object.setPrototypeOf ||
  	            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
  	            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
  	        return extendStatics(d, b);
  	    };
  	    return function (d, b) {
  	        if (typeof b !== "function" && b !== null)
  	            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
  	        extendStatics(d, b);
  	        function __() { this.constructor = d; }
  	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  	    };
  	})();




  	// Universal IO Loader, implemented by adding Range header in xhr's request header
  	var RangeLoader = /** @class */ (function (_super) {
  	    __extends(RangeLoader, _super);
  	    function RangeLoader(seekHandler, config) {
  	        var _this = _super.call(this, 'xhr-range-loader') || this;
  	        _this.TAG = 'RangeLoader';
  	        _this._seekHandler = seekHandler;
  	        _this._config = config;
  	        _this._needStash = false;
  	        _this._chunkSizeKBList = [
  	            128, 256, 384, 512, 768, 1024, 1536, 2048, 3072, 4096, 5120, 6144, 7168, 8192
  	        ];
  	        _this._currentChunkSizeKB = 384;
  	        _this._currentSpeedNormalized = 0;
  	        _this._zeroSpeedChunkCount = 0;
  	        _this._xhr = null;
  	        _this._speedSampler = new _speed_sampler_js__WEBPACK_IMPORTED_MODULE_1__.default();
  	        _this._requestAbort = false;
  	        _this._waitForTotalLength = false;
  	        _this._totalLengthReceived = false;
  	        _this._currentRequestURL = null;
  	        _this._currentRedirectedURL = null;
  	        _this._currentRequestRange = null;
  	        _this._totalLength = null; // size of the entire file
  	        _this._contentLength = null; // Content-Length of entire request range
  	        _this._receivedLength = 0; // total received bytes
  	        _this._lastTimeLoaded = 0; // received bytes of current request sub-range
  	        return _this;
  	    }
  	    RangeLoader.isSupported = function () {
  	        try {
  	            var xhr = new XMLHttpRequest();
  	            xhr.open('GET', 'https://example.com', true);
  	            xhr.responseType = 'arraybuffer';
  	            return (xhr.responseType === 'arraybuffer');
  	        }
  	        catch (e) {
  	            _utils_logger_js__WEBPACK_IMPORTED_MODULE_0__.default.w('RangeLoader', e.message);
  	            return false;
  	        }
  	    };
  	    RangeLoader.prototype.destroy = function () {
  	        if (this.isWorking()) {
  	            this.abort();
  	        }
  	        if (this._xhr) {
  	            this._xhr.onreadystatechange = null;
  	            this._xhr.onprogress = null;
  	            this._xhr.onload = null;
  	            this._xhr.onerror = null;
  	            this._xhr = null;
  	        }
  	        _super.prototype.destroy.call(this);
  	    };
  	    Object.defineProperty(RangeLoader.prototype, "currentSpeed", {
  	        get: function () {
  	            return this._speedSampler.lastSecondKBps;
  	        },
  	        enumerable: false,
  	        configurable: true
  	    });
  	    RangeLoader.prototype.open = function (dataSource, range) {
  	        this._dataSource = dataSource;
  	        this._range = range;
  	        this._status = _loader_js__WEBPACK_IMPORTED_MODULE_2__.LoaderStatus.kConnecting;
  	        var useRefTotalLength = false;
  	        if (this._dataSource.filesize != undefined && this._dataSource.filesize !== 0) {
  	            useRefTotalLength = true;
  	            this._totalLength = this._dataSource.filesize;
  	        }
  	        if (!this._totalLengthReceived && !useRefTotalLength) {
  	            // We need total filesize
  	            this._waitForTotalLength = true;
  	            this._internalOpen(this._dataSource, { from: 0, to: -1 });
  	        }
  	        else {
  	            // We have filesize, start loading
  	            this._openSubRange();
  	        }
  	    };
  	    RangeLoader.prototype._openSubRange = function () {
  	        var chunkSize = this._currentChunkSizeKB * 1024;
  	        var from = this._range.from + this._receivedLength;
  	        var to = from + chunkSize;
  	        if (this._contentLength != null) {
  	            if (to - this._range.from >= this._contentLength) {
  	                to = this._range.from + this._contentLength - 1;
  	            }
  	        }
  	        this._currentRequestRange = { from: from, to: to };
  	        this._internalOpen(this._dataSource, this._currentRequestRange);
  	    };
  	    RangeLoader.prototype._internalOpen = function (dataSource, range) {
  	        this._lastTimeLoaded = 0;
  	        var sourceURL = dataSource.url;
  	        if (this._config.reuseRedirectedURL) {
  	            if (this._currentRedirectedURL != undefined) {
  	                sourceURL = this._currentRedirectedURL;
  	            }
  	            else if (dataSource.redirectedURL != undefined) {
  	                sourceURL = dataSource.redirectedURL;
  	            }
  	        }
  	        var seekConfig = this._seekHandler.getConfig(sourceURL, range);
  	        this._currentRequestURL = seekConfig.url;
  	        var xhr = this._xhr = new XMLHttpRequest();
  	        xhr.open('GET', seekConfig.url, true);
  	        xhr.responseType = 'arraybuffer';
  	        xhr.onreadystatechange = this._onReadyStateChange.bind(this);
  	        xhr.onprogress = this._onProgress.bind(this);
  	        xhr.onload = this._onLoad.bind(this);
  	        xhr.onerror = this._onXhrError.bind(this);
  	        if (dataSource.withCredentials) {
  	            xhr.withCredentials = true;
  	        }
  	        if (typeof seekConfig.headers === 'object') {
  	            var headers = seekConfig.headers;
  	            for (var key in headers) {
  	                if (headers.hasOwnProperty(key)) {
  	                    xhr.setRequestHeader(key, headers[key]);
  	                }
  	            }
  	        }
  	        // add additional headers
  	        if (typeof this._config.headers === 'object') {
  	            var headers = this._config.headers;
  	            for (var key in headers) {
  	                if (headers.hasOwnProperty(key)) {
  	                    xhr.setRequestHeader(key, headers[key]);
  	                }
  	            }
  	        }
  	        xhr.send();
  	    };
  	    RangeLoader.prototype.abort = function () {
  	        this._requestAbort = true;
  	        this._internalAbort();
  	        this._status = _loader_js__WEBPACK_IMPORTED_MODULE_2__.LoaderStatus.kComplete;
  	    };
  	    RangeLoader.prototype._internalAbort = function () {
  	        if (this._xhr) {
  	            this._xhr.onreadystatechange = null;
  	            this._xhr.onprogress = null;
  	            this._xhr.onload = null;
  	            this._xhr.onerror = null;
  	            this._xhr.abort();
  	            this._xhr = null;
  	        }
  	    };
  	    RangeLoader.prototype._onReadyStateChange = function (e) {
  	        var xhr = e.target;
  	        if (xhr.readyState === 2) { // HEADERS_RECEIVED
  	            if (xhr.responseURL != undefined) { // if the browser support this property
  	                var redirectedURL = this._seekHandler.removeURLParameters(xhr.responseURL);
  	                if (xhr.responseURL !== this._currentRequestURL && redirectedURL !== this._currentRedirectedURL) {
  	                    this._currentRedirectedURL = redirectedURL;
  	                    if (this._onURLRedirect) {
  	                        this._onURLRedirect(redirectedURL);
  	                    }
  	                }
  	            }
  	            if ((xhr.status >= 200 && xhr.status <= 299)) {
  	                if (this._waitForTotalLength) {
  	                    return;
  	                }
  	                this._status = _loader_js__WEBPACK_IMPORTED_MODULE_2__.LoaderStatus.kBuffering;
  	            }
  	            else {
  	                this._status = _loader_js__WEBPACK_IMPORTED_MODULE_2__.LoaderStatus.kError;
  	                if (this._onError) {
  	                    this._onError(_loader_js__WEBPACK_IMPORTED_MODULE_2__.LoaderErrors.HTTP_STATUS_CODE_INVALID, { code: xhr.status, msg: xhr.statusText });
  	                }
  	                else {
  	                    throw new _utils_exception_js__WEBPACK_IMPORTED_MODULE_3__.RuntimeException('RangeLoader: Http code invalid, ' + xhr.status + ' ' + xhr.statusText);
  	                }
  	            }
  	        }
  	    };
  	    RangeLoader.prototype._onProgress = function (e) {
  	        if (this._status === _loader_js__WEBPACK_IMPORTED_MODULE_2__.LoaderStatus.kError) {
  	            // Ignore error response
  	            return;
  	        }
  	        if (this._contentLength === null) {
  	            var openNextRange = false;
  	            if (this._waitForTotalLength) {
  	                this._waitForTotalLength = false;
  	                this._totalLengthReceived = true;
  	                openNextRange = true;
  	                var total = e.total;
  	                this._internalAbort();
  	                if (total != null & total !== 0) {
  	                    this._totalLength = total;
  	                }
  	            }
  	            // calculate currrent request range's contentLength
  	            if (this._range.to === -1) {
  	                this._contentLength = this._totalLength - this._range.from;
  	            }
  	            else { // to !== -1
  	                this._contentLength = this._range.to - this._range.from + 1;
  	            }
  	            if (openNextRange) {
  	                this._openSubRange();
  	                return;
  	            }
  	            if (this._onContentLengthKnown) {
  	                this._onContentLengthKnown(this._contentLength);
  	            }
  	        }
  	        var delta = e.loaded - this._lastTimeLoaded;
  	        this._lastTimeLoaded = e.loaded;
  	        this._speedSampler.addBytes(delta);
  	    };
  	    RangeLoader.prototype._normalizeSpeed = function (input) {
  	        var list = this._chunkSizeKBList;
  	        var last = list.length - 1;
  	        var mid = 0;
  	        var lbound = 0;
  	        var ubound = last;
  	        if (input < list[0]) {
  	            return list[0];
  	        }
  	        while (lbound <= ubound) {
  	            mid = lbound + Math.floor((ubound - lbound) / 2);
  	            if (mid === last || (input >= list[mid] && input < list[mid + 1])) {
  	                return list[mid];
  	            }
  	            else if (list[mid] < input) {
  	                lbound = mid + 1;
  	            }
  	            else {
  	                ubound = mid - 1;
  	            }
  	        }
  	    };
  	    RangeLoader.prototype._onLoad = function (e) {
  	        if (this._status === _loader_js__WEBPACK_IMPORTED_MODULE_2__.LoaderStatus.kError) {
  	            // Ignore error response
  	            return;
  	        }
  	        if (this._waitForTotalLength) {
  	            this._waitForTotalLength = false;
  	            return;
  	        }
  	        this._lastTimeLoaded = 0;
  	        var KBps = this._speedSampler.lastSecondKBps;
  	        if (KBps === 0) {
  	            this._zeroSpeedChunkCount++;
  	            if (this._zeroSpeedChunkCount >= 3) {
  	                // Try get currentKBps after 3 chunks
  	                KBps = this._speedSampler.currentKBps;
  	            }
  	        }
  	        if (KBps !== 0) {
  	            var normalized = this._normalizeSpeed(KBps);
  	            if (this._currentSpeedNormalized !== normalized) {
  	                this._currentSpeedNormalized = normalized;
  	                this._currentChunkSizeKB = normalized;
  	            }
  	        }
  	        var chunk = e.target.response;
  	        var byteStart = this._range.from + this._receivedLength;
  	        this._receivedLength += chunk.byteLength;
  	        var reportComplete = false;
  	        if (this._contentLength != null && this._receivedLength < this._contentLength) {
  	            // continue load next chunk
  	            this._openSubRange();
  	        }
  	        else {
  	            reportComplete = true;
  	        }
  	        // dispatch received chunk
  	        if (this._onDataArrival) {
  	            this._onDataArrival(chunk, byteStart, this._receivedLength);
  	        }
  	        if (reportComplete) {
  	            this._status = _loader_js__WEBPACK_IMPORTED_MODULE_2__.LoaderStatus.kComplete;
  	            if (this._onComplete) {
  	                this._onComplete(this._range.from, this._range.from + this._receivedLength - 1);
  	            }
  	        }
  	    };
  	    RangeLoader.prototype._onXhrError = function (e) {
  	        this._status = _loader_js__WEBPACK_IMPORTED_MODULE_2__.LoaderStatus.kError;
  	        var type = 0;
  	        var info = null;
  	        if (this._contentLength && this._receivedLength > 0
  	            && this._receivedLength < this._contentLength) {
  	            type = _loader_js__WEBPACK_IMPORTED_MODULE_2__.LoaderErrors.EARLY_EOF;
  	            info = { code: -1, msg: 'RangeLoader meet Early-Eof' };
  	        }
  	        else {
  	            type = _loader_js__WEBPACK_IMPORTED_MODULE_2__.LoaderErrors.EXCEPTION;
  	            info = { code: -1, msg: e.constructor.name + ' ' + e.type };
  	        }
  	        if (this._onError) {
  	            this._onError(type, info);
  	        }
  	        else {
  	            throw new _utils_exception_js__WEBPACK_IMPORTED_MODULE_3__.RuntimeException(info.msg);
  	        }
  	    };
  	    return RangeLoader;
  	}(_loader_js__WEBPACK_IMPORTED_MODULE_2__.BaseLoader));
  	/* harmony default export */ __webpack_exports__["default"] = (RangeLoader);


  	/***/ }),

  	/***/ "./src/player/flv-player.js":
  	/*!**********************************!*\
  	  !*** ./src/player/flv-player.js ***!
  	  \**********************************/
  	/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {
  	__webpack_require__.r(__webpack_exports__);
  	/* harmony import */ var events__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! events */ "./node_modules/events/events.js");
  	/* harmony import */ var events__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(events__WEBPACK_IMPORTED_MODULE_0__);
  	/* harmony import */ var _utils_logger_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../utils/logger.js */ "./src/utils/logger.js");
  	/* harmony import */ var _utils_browser_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../utils/browser.js */ "./src/utils/browser.js");
  	/* harmony import */ var _player_events_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./player-events.js */ "./src/player/player-events.js");
  	/* harmony import */ var _core_transmuxer_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../core/transmuxer.js */ "./src/core/transmuxer.js");
  	/* harmony import */ var _core_transmuxing_events_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../core/transmuxing-events.js */ "./src/core/transmuxing-events.js");
  	/* harmony import */ var _core_mse_controller_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../core/mse-controller.js */ "./src/core/mse-controller.js");
  	/* harmony import */ var _core_mse_events_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../core/mse-events.js */ "./src/core/mse-events.js");
  	/* harmony import */ var _player_errors_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./player-errors.js */ "./src/player/player-errors.js");
  	/* harmony import */ var _config_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../config.js */ "./src/config.js");
  	/* harmony import */ var _utils_exception_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../utils/exception.js */ "./src/utils/exception.js");
  	/*
  	 * Copyright (C) 2016 Bilibili. All Rights Reserved.
  	 *
  	 * @author zheng qian <xqq@xqq.im>
  	 *
  	 * Licensed under the Apache License, Version 2.0 (the "License");
  	 * you may not use this file except in compliance with the License.
  	 * You may obtain a copy of the License at
  	 *
  	 *     http://www.apache.org/licenses/LICENSE-2.0
  	 *
  	 * Unless required by applicable law or agreed to in writing, software
  	 * distributed under the License is distributed on an "AS IS" BASIS,
  	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  	 * See the License for the specific language governing permissions and
  	 * limitations under the License.
  	 */











  	var FlvPlayer = /** @class */ (function () {
  	    function FlvPlayer(mediaDataSource, config) {
  	        this.TAG = 'FlvPlayer';
  	        this._type = 'FlvPlayer';
  	        this._emitter = new (events__WEBPACK_IMPORTED_MODULE_0___default())();
  	        this._config = (0, _config_js__WEBPACK_IMPORTED_MODULE_9__.createDefaultConfig)();
  	        if (typeof config === 'object') {
  	            Object.assign(this._config, config);
  	        }
  	        if (mediaDataSource.type.toLowerCase() !== 'flv') {
  	            throw new _utils_exception_js__WEBPACK_IMPORTED_MODULE_10__.InvalidArgumentException('FlvPlayer requires an flv MediaDataSource input!');
  	        }
  	        if (mediaDataSource.isLive === true) {
  	            this._config.isLive = true;
  	        }
  	        this.e = {
  	            onvLoadedMetadata: this._onvLoadedMetadata.bind(this),
  	            onvSeeking: this._onvSeeking.bind(this),
  	            onvCanPlay: this._onvCanPlay.bind(this),
  	            onvStalled: this._onvStalled.bind(this),
  	            onvProgress: this._onvProgress.bind(this)
  	        };
  	        if (self.performance && self.performance.now) {
  	            this._now = self.performance.now.bind(self.performance);
  	        }
  	        else {
  	            this._now = Date.now;
  	        }
  	        this._pendingSeekTime = null; // in seconds
  	        this._requestSetTime = false;
  	        this._seekpointRecord = null;
  	        this._progressChecker = null;
  	        this._mediaDataSource = mediaDataSource;
  	        this._mediaElement = null;
  	        this._msectl = null;
  	        this._transmuxer = null;
  	        this._mseSourceOpened = false;
  	        this._hasPendingLoad = false;
  	        this._receivedCanPlay = false;
  	        this._mediaInfo = null;
  	        this._statisticsInfo = null;
  	        var chromeNeedIDRFix = (_utils_browser_js__WEBPACK_IMPORTED_MODULE_2__.default.chrome &&
  	            (_utils_browser_js__WEBPACK_IMPORTED_MODULE_2__.default.version.major < 50 ||
  	                (_utils_browser_js__WEBPACK_IMPORTED_MODULE_2__.default.version.major === 50 && _utils_browser_js__WEBPACK_IMPORTED_MODULE_2__.default.version.build < 2661)));
  	        this._alwaysSeekKeyframe = (chromeNeedIDRFix || _utils_browser_js__WEBPACK_IMPORTED_MODULE_2__.default.msedge || _utils_browser_js__WEBPACK_IMPORTED_MODULE_2__.default.msie) ? true : false;
  	        if (this._alwaysSeekKeyframe) {
  	            this._config.accurateSeek = false;
  	        }
  	    }
  	    FlvPlayer.prototype.destroy = function () {
  	        if (this._progressChecker != null) {
  	            window.clearInterval(this._progressChecker);
  	            this._progressChecker = null;
  	        }
  	        if (this._transmuxer) {
  	            this.unload();
  	        }
  	        if (this._mediaElement) {
  	            this.detachMediaElement();
  	        }
  	        this.e = null;
  	        this._mediaDataSource = null;
  	        this._emitter.removeAllListeners();
  	        this._emitter = null;
  	    };
  	    FlvPlayer.prototype.on = function (event, listener) {
  	        var _this = this;
  	        if (event === _player_events_js__WEBPACK_IMPORTED_MODULE_3__.default.MEDIA_INFO) {
  	            if (this._mediaInfo != null) {
  	                Promise.resolve().then(function () {
  	                    _this._emitter.emit(_player_events_js__WEBPACK_IMPORTED_MODULE_3__.default.MEDIA_INFO, _this.mediaInfo);
  	                });
  	            }
  	        }
  	        else if (event === _player_events_js__WEBPACK_IMPORTED_MODULE_3__.default.STATISTICS_INFO) {
  	            if (this._statisticsInfo != null) {
  	                Promise.resolve().then(function () {
  	                    _this._emitter.emit(_player_events_js__WEBPACK_IMPORTED_MODULE_3__.default.STATISTICS_INFO, _this.statisticsInfo);
  	                });
  	            }
  	        }
  	        this._emitter.addListener(event, listener);
  	    };
  	    FlvPlayer.prototype.off = function (event, listener) {
  	        this._emitter.removeListener(event, listener);
  	    };
  	    FlvPlayer.prototype.attachMediaElement = function (mediaElement) {
  	        var _this = this;
  	        this._mediaElement = mediaElement;
  	        mediaElement.addEventListener('loadedmetadata', this.e.onvLoadedMetadata);
  	        mediaElement.addEventListener('seeking', this.e.onvSeeking);
  	        mediaElement.addEventListener('canplay', this.e.onvCanPlay);
  	        mediaElement.addEventListener('stalled', this.e.onvStalled);
  	        mediaElement.addEventListener('progress', this.e.onvProgress);
  	        this._msectl = new _core_mse_controller_js__WEBPACK_IMPORTED_MODULE_6__.default(this._config);
  	        this._msectl.on(_core_mse_events_js__WEBPACK_IMPORTED_MODULE_7__.default.UPDATE_END, this._onmseUpdateEnd.bind(this));
  	        this._msectl.on(_core_mse_events_js__WEBPACK_IMPORTED_MODULE_7__.default.BUFFER_FULL, this._onmseBufferFull.bind(this));
  	        this._msectl.on(_core_mse_events_js__WEBPACK_IMPORTED_MODULE_7__.default.SOURCE_OPEN, function () {
  	            _this._mseSourceOpened = true;
  	            if (_this._hasPendingLoad) {
  	                _this._hasPendingLoad = false;
  	                _this.load();
  	            }
  	        });
  	        this._msectl.on(_core_mse_events_js__WEBPACK_IMPORTED_MODULE_7__.default.ERROR, function (info) {
  	            _this._emitter.emit(_player_events_js__WEBPACK_IMPORTED_MODULE_3__.default.ERROR, _player_errors_js__WEBPACK_IMPORTED_MODULE_8__.ErrorTypes.MEDIA_ERROR, _player_errors_js__WEBPACK_IMPORTED_MODULE_8__.ErrorDetails.MEDIA_MSE_ERROR, info);
  	        });
  	        this._msectl.attachMediaElement(mediaElement);
  	        if (this._pendingSeekTime != null) {
  	            try {
  	                mediaElement.currentTime = this._pendingSeekTime;
  	                this._pendingSeekTime = null;
  	            }
  	            catch (e) {
  	                // IE11 may throw InvalidStateError if readyState === 0
  	                // We can defer set currentTime operation after loadedmetadata
  	            }
  	        }
  	    };
  	    FlvPlayer.prototype.detachMediaElement = function () {
  	        if (this._mediaElement) {
  	            this._msectl.detachMediaElement();
  	            this._mediaElement.removeEventListener('loadedmetadata', this.e.onvLoadedMetadata);
  	            this._mediaElement.removeEventListener('seeking', this.e.onvSeeking);
  	            this._mediaElement.removeEventListener('canplay', this.e.onvCanPlay);
  	            this._mediaElement.removeEventListener('stalled', this.e.onvStalled);
  	            this._mediaElement.removeEventListener('progress', this.e.onvProgress);
  	            this._mediaElement = null;
  	        }
  	        if (this._msectl) {
  	            this._msectl.destroy();
  	            this._msectl = null;
  	        }
  	    };
  	    FlvPlayer.prototype.load = function () {
  	        var _this = this;
  	        if (!this._mediaElement) {
  	            throw new _utils_exception_js__WEBPACK_IMPORTED_MODULE_10__.IllegalStateException('HTMLMediaElement must be attached before load()!');
  	        }
  	        if (this._transmuxer) {
  	            throw new _utils_exception_js__WEBPACK_IMPORTED_MODULE_10__.IllegalStateException('FlvPlayer.load() has been called, please call unload() first!');
  	        }
  	        if (this._hasPendingLoad) {
  	            return;
  	        }
  	        if (this._config.deferLoadAfterSourceOpen && this._mseSourceOpened === false) {
  	            this._hasPendingLoad = true;
  	            return;
  	        }
  	        if (this._mediaElement.readyState > 0) {
  	            this._requestSetTime = true;
  	            // IE11 may throw InvalidStateError if readyState === 0
  	            this._mediaElement.currentTime = 0;
  	        }
  	        this._transmuxer = new _core_transmuxer_js__WEBPACK_IMPORTED_MODULE_4__.default(this._mediaDataSource, this._config);
  	        this._transmuxer.on(_core_transmuxing_events_js__WEBPACK_IMPORTED_MODULE_5__.default.INIT_SEGMENT, function (type, is) {
  	            _this._msectl.appendInitSegment(is);
  	        });
  	        this._transmuxer.on(_core_transmuxing_events_js__WEBPACK_IMPORTED_MODULE_5__.default.MEDIA_SEGMENT, function (type, ms) {
  	            _this._msectl.appendMediaSegment(ms);
  	            // lazyLoad check
  	            if (_this._config.lazyLoad && !_this._config.isLive) {
  	                var currentTime = _this._mediaElement.currentTime;
  	                if (ms.info.endDts >= (currentTime + _this._config.lazyLoadMaxDuration) * 1000) {
  	                    if (_this._progressChecker == null) {
  	                        _utils_logger_js__WEBPACK_IMPORTED_MODULE_1__.default.v(_this.TAG, 'Maximum buffering duration exceeded, suspend transmuxing task');
  	                        _this._suspendTransmuxer();
  	                    }
  	                }
  	            }
  	        });
  	        this._transmuxer.on(_core_transmuxing_events_js__WEBPACK_IMPORTED_MODULE_5__.default.LOADING_COMPLETE, function () {
  	            _this._msectl.endOfStream();
  	            _this._emitter.emit(_player_events_js__WEBPACK_IMPORTED_MODULE_3__.default.LOADING_COMPLETE);
  	        });
  	        this._transmuxer.on(_core_transmuxing_events_js__WEBPACK_IMPORTED_MODULE_5__.default.RECOVERED_EARLY_EOF, function () {
  	            _this._emitter.emit(_player_events_js__WEBPACK_IMPORTED_MODULE_3__.default.RECOVERED_EARLY_EOF);
  	        });
  	        this._transmuxer.on(_core_transmuxing_events_js__WEBPACK_IMPORTED_MODULE_5__.default.IO_ERROR, function (detail, info) {
  	            _this._emitter.emit(_player_events_js__WEBPACK_IMPORTED_MODULE_3__.default.ERROR, _player_errors_js__WEBPACK_IMPORTED_MODULE_8__.ErrorTypes.NETWORK_ERROR, detail, info);
  	        });
  	        this._transmuxer.on(_core_transmuxing_events_js__WEBPACK_IMPORTED_MODULE_5__.default.DEMUX_ERROR, function (detail, info) {
  	            _this._emitter.emit(_player_events_js__WEBPACK_IMPORTED_MODULE_3__.default.ERROR, _player_errors_js__WEBPACK_IMPORTED_MODULE_8__.ErrorTypes.MEDIA_ERROR, detail, { code: -1, msg: info });
  	        });
  	        this._transmuxer.on(_core_transmuxing_events_js__WEBPACK_IMPORTED_MODULE_5__.default.MEDIA_INFO, function (mediaInfo) {
  	            _this._mediaInfo = mediaInfo;
  	            _this._emitter.emit(_player_events_js__WEBPACK_IMPORTED_MODULE_3__.default.MEDIA_INFO, Object.assign({}, mediaInfo));
  	        });
  	        this._transmuxer.on(_core_transmuxing_events_js__WEBPACK_IMPORTED_MODULE_5__.default.METADATA_ARRIVED, function (metadata) {
  	            _this._emitter.emit(_player_events_js__WEBPACK_IMPORTED_MODULE_3__.default.METADATA_ARRIVED, metadata);
  	        });
  	        this._transmuxer.on(_core_transmuxing_events_js__WEBPACK_IMPORTED_MODULE_5__.default.SCRIPTDATA_ARRIVED, function (data) {
  	            _this._emitter.emit(_player_events_js__WEBPACK_IMPORTED_MODULE_3__.default.SCRIPTDATA_ARRIVED, data);
  	        });
  	        this._transmuxer.on(_core_transmuxing_events_js__WEBPACK_IMPORTED_MODULE_5__.default.STATISTICS_INFO, function (statInfo) {
  	            _this._statisticsInfo = _this._fillStatisticsInfo(statInfo);
  	            _this._emitter.emit(_player_events_js__WEBPACK_IMPORTED_MODULE_3__.default.STATISTICS_INFO, Object.assign({}, _this._statisticsInfo));
  	        });
  	        this._transmuxer.on(_core_transmuxing_events_js__WEBPACK_IMPORTED_MODULE_5__.default.RECOMMEND_SEEKPOINT, function (milliseconds) {
  	            if (_this._mediaElement && !_this._config.accurateSeek) {
  	                _this._requestSetTime = true;
  	                _this._mediaElement.currentTime = milliseconds / 1000;
  	            }
  	        });
  	        this._transmuxer.open();
  	    };
  	    FlvPlayer.prototype.unload = function () {
  	        if (this._mediaElement) {
  	            this._mediaElement.pause();
  	        }
  	        if (this._msectl) {
  	            this._msectl.seek(0);
  	        }
  	        if (this._transmuxer) {
  	            this._transmuxer.close();
  	            this._transmuxer.destroy();
  	            this._transmuxer = null;
  	        }
  	    };
  	    FlvPlayer.prototype.play = function () {
  	        return this._mediaElement.play();
  	    };
  	    FlvPlayer.prototype.pause = function () {
  	        this._mediaElement.pause();
  	    };
  	    Object.defineProperty(FlvPlayer.prototype, "type", {
  	        get: function () {
  	            return this._type;
  	        },
  	        enumerable: false,
  	        configurable: true
  	    });
  	    Object.defineProperty(FlvPlayer.prototype, "buffered", {
  	        get: function () {
  	            return this._mediaElement.buffered;
  	        },
  	        enumerable: false,
  	        configurable: true
  	    });
  	    Object.defineProperty(FlvPlayer.prototype, "duration", {
  	        get: function () {
  	            return this._mediaElement.duration;
  	        },
  	        enumerable: false,
  	        configurable: true
  	    });
  	    Object.defineProperty(FlvPlayer.prototype, "volume", {
  	        get: function () {
  	            return this._mediaElement.volume;
  	        },
  	        set: function (value) {
  	            this._mediaElement.volume = value;
  	        },
  	        enumerable: false,
  	        configurable: true
  	    });
  	    Object.defineProperty(FlvPlayer.prototype, "muted", {
  	        get: function () {
  	            return this._mediaElement.muted;
  	        },
  	        set: function (muted) {
  	            this._mediaElement.muted = muted;
  	        },
  	        enumerable: false,
  	        configurable: true
  	    });
  	    Object.defineProperty(FlvPlayer.prototype, "currentTime", {
  	        get: function () {
  	            if (this._mediaElement) {
  	                return this._mediaElement.currentTime;
  	            }
  	            return 0;
  	        },
  	        set: function (seconds) {
  	            if (this._mediaElement) {
  	                this._internalSeek(seconds);
  	            }
  	            else {
  	                this._pendingSeekTime = seconds;
  	            }
  	        },
  	        enumerable: false,
  	        configurable: true
  	    });
  	    Object.defineProperty(FlvPlayer.prototype, "mediaInfo", {
  	        get: function () {
  	            return Object.assign({}, this._mediaInfo);
  	        },
  	        enumerable: false,
  	        configurable: true
  	    });
  	    Object.defineProperty(FlvPlayer.prototype, "statisticsInfo", {
  	        get: function () {
  	            if (this._statisticsInfo == null) {
  	                this._statisticsInfo = {};
  	            }
  	            this._statisticsInfo = this._fillStatisticsInfo(this._statisticsInfo);
  	            return Object.assign({}, this._statisticsInfo);
  	        },
  	        enumerable: false,
  	        configurable: true
  	    });
  	    FlvPlayer.prototype._fillStatisticsInfo = function (statInfo) {
  	        statInfo.playerType = this._type;
  	        if (!(this._mediaElement instanceof HTMLVideoElement)) {
  	            return statInfo;
  	        }
  	        var hasQualityInfo = true;
  	        var decoded = 0;
  	        var dropped = 0;
  	        if (this._mediaElement.getVideoPlaybackQuality) {
  	            var quality = this._mediaElement.getVideoPlaybackQuality();
  	            decoded = quality.totalVideoFrames;
  	            dropped = quality.droppedVideoFrames;
  	        }
  	        else if (this._mediaElement.webkitDecodedFrameCount != undefined) {
  	            decoded = this._mediaElement.webkitDecodedFrameCount;
  	            dropped = this._mediaElement.webkitDroppedFrameCount;
  	        }
  	        else {
  	            hasQualityInfo = false;
  	        }
  	        if (hasQualityInfo) {
  	            statInfo.decodedFrames = decoded;
  	            statInfo.droppedFrames = dropped;
  	        }
  	        return statInfo;
  	    };
  	    FlvPlayer.prototype._onmseUpdateEnd = function () {
  	        if (!this._config.lazyLoad || this._config.isLive) {
  	            return;
  	        }
  	        var buffered = this._mediaElement.buffered;
  	        var currentTime = this._mediaElement.currentTime;
  	        var currentRangeEnd = 0;
  	        for (var i = 0; i < buffered.length; i++) {
  	            var start = buffered.start(i);
  	            var end = buffered.end(i);
  	            if (start <= currentTime && currentTime < end) {
  	                currentRangeEnd = end;
  	                break;
  	            }
  	        }
  	        if (currentRangeEnd >= currentTime + this._config.lazyLoadMaxDuration && this._progressChecker == null) {
  	            _utils_logger_js__WEBPACK_IMPORTED_MODULE_1__.default.v(this.TAG, 'Maximum buffering duration exceeded, suspend transmuxing task');
  	            this._suspendTransmuxer();
  	        }
  	    };
  	    FlvPlayer.prototype._onmseBufferFull = function () {
  	        _utils_logger_js__WEBPACK_IMPORTED_MODULE_1__.default.v(this.TAG, 'MSE SourceBuffer is full, suspend transmuxing task');
  	        if (this._progressChecker == null) {
  	            this._suspendTransmuxer();
  	        }
  	    };
  	    FlvPlayer.prototype._suspendTransmuxer = function () {
  	        if (this._transmuxer) {
  	            this._transmuxer.pause();
  	            if (this._progressChecker == null) {
  	                this._progressChecker = window.setInterval(this._checkProgressAndResume.bind(this), 1000);
  	            }
  	        }
  	    };
  	    FlvPlayer.prototype._checkProgressAndResume = function () {
  	        var currentTime = this._mediaElement.currentTime;
  	        var buffered = this._mediaElement.buffered;
  	        var needResume = false;
  	        for (var i = 0; i < buffered.length; i++) {
  	            var from = buffered.start(i);
  	            var to = buffered.end(i);
  	            if (currentTime >= from && currentTime < to) {
  	                if (currentTime >= to - this._config.lazyLoadRecoverDuration) {
  	                    needResume = true;
  	                }
  	                break;
  	            }
  	        }
  	        if (needResume) {
  	            window.clearInterval(this._progressChecker);
  	            this._progressChecker = null;
  	            if (needResume) {
  	                _utils_logger_js__WEBPACK_IMPORTED_MODULE_1__.default.v(this.TAG, 'Continue loading from paused position');
  	                this._transmuxer.resume();
  	            }
  	        }
  	    };
  	    FlvPlayer.prototype._isTimepointBuffered = function (seconds) {
  	        var buffered = this._mediaElement.buffered;
  	        for (var i = 0; i < buffered.length; i++) {
  	            var from = buffered.start(i);
  	            var to = buffered.end(i);
  	            if (seconds >= from && seconds < to) {
  	                return true;
  	            }
  	        }
  	        return false;
  	    };
  	    FlvPlayer.prototype._internalSeek = function (seconds) {
  	        var directSeek = this._isTimepointBuffered(seconds);
  	        var directSeekBegin = false;
  	        var directSeekBeginTime = 0;
  	        if (seconds < 1.0 && this._mediaElement.buffered.length > 0) {
  	            var videoBeginTime = this._mediaElement.buffered.start(0);
  	            if ((videoBeginTime < 1.0 && seconds < videoBeginTime) || _utils_browser_js__WEBPACK_IMPORTED_MODULE_2__.default.safari) {
  	                directSeekBegin = true;
  	                // also workaround for Safari: Seek to 0 may cause video stuck, use 0.1 to avoid
  	                directSeekBeginTime = _utils_browser_js__WEBPACK_IMPORTED_MODULE_2__.default.safari ? 0.1 : videoBeginTime;
  	            }
  	        }
  	        if (directSeekBegin) { // seek to video begin, set currentTime directly if beginPTS buffered
  	            this._requestSetTime = true;
  	            this._mediaElement.currentTime = directSeekBeginTime;
  	        }
  	        else if (directSeek) { // buffered position
  	            if (!this._alwaysSeekKeyframe) {
  	                this._requestSetTime = true;
  	                this._mediaElement.currentTime = seconds;
  	            }
  	            else {
  	                var idr = this._msectl.getNearestKeyframe(Math.floor(seconds * 1000));
  	                this._requestSetTime = true;
  	                if (idr != null) {
  	                    this._mediaElement.currentTime = idr.dts / 1000;
  	                }
  	                else {
  	                    this._mediaElement.currentTime = seconds;
  	                }
  	            }
  	            if (this._progressChecker != null) {
  	                this._checkProgressAndResume();
  	            }
  	        }
  	        else {
  	            if (this._progressChecker != null) {
  	                window.clearInterval(this._progressChecker);
  	                this._progressChecker = null;
  	            }
  	            this._msectl.seek(seconds);
  	            this._transmuxer.seek(Math.floor(seconds * 1000)); // in milliseconds
  	            // no need to set mediaElement.currentTime if non-accurateSeek,
  	            // just wait for the recommend_seekpoint callback
  	            if (this._config.accurateSeek) {
  	                this._requestSetTime = true;
  	                this._mediaElement.currentTime = seconds;
  	            }
  	        }
  	    };
  	    FlvPlayer.prototype._checkAndApplyUnbufferedSeekpoint = function () {
  	        if (this._seekpointRecord) {
  	            if (this._seekpointRecord.recordTime <= this._now() - 100) {
  	                var target = this._mediaElement.currentTime;
  	                this._seekpointRecord = null;
  	                if (!this._isTimepointBuffered(target)) {
  	                    if (this._progressChecker != null) {
  	                        window.clearTimeout(this._progressChecker);
  	                        this._progressChecker = null;
  	                    }
  	                    // .currentTime is consists with .buffered timestamp
  	                    // Chrome/Edge use DTS, while FireFox/Safari use PTS
  	                    this._msectl.seek(target);
  	                    this._transmuxer.seek(Math.floor(target * 1000));
  	                    // set currentTime if accurateSeek, or wait for recommend_seekpoint callback
  	                    if (this._config.accurateSeek) {
  	                        this._requestSetTime = true;
  	                        this._mediaElement.currentTime = target;
  	                    }
  	                }
  	            }
  	            else {
  	                window.setTimeout(this._checkAndApplyUnbufferedSeekpoint.bind(this), 50);
  	            }
  	        }
  	    };
  	    FlvPlayer.prototype._checkAndResumeStuckPlayback = function (stalled) {
  	        var media = this._mediaElement;
  	        if (stalled || !this._receivedCanPlay || media.readyState < 2) { // HAVE_CURRENT_DATA
  	            var buffered = media.buffered;
  	            if (buffered.length > 0 && media.currentTime < buffered.start(0)) {
  	                _utils_logger_js__WEBPACK_IMPORTED_MODULE_1__.default.w(this.TAG, "Playback seems stuck at " + media.currentTime + ", seek to " + buffered.start(0));
  	                this._requestSetTime = true;
  	                this._mediaElement.currentTime = buffered.start(0);
  	                this._mediaElement.removeEventListener('progress', this.e.onvProgress);
  	            }
  	        }
  	        else {
  	            // Playback didn't stuck, remove progress event listener
  	            this._mediaElement.removeEventListener('progress', this.e.onvProgress);
  	        }
  	    };
  	    FlvPlayer.prototype._onvLoadedMetadata = function (e) {
  	        if (this._pendingSeekTime != null) {
  	            this._mediaElement.currentTime = this._pendingSeekTime;
  	            this._pendingSeekTime = null;
  	        }
  	    };
  	    FlvPlayer.prototype._onvSeeking = function (e) {
  	        var target = this._mediaElement.currentTime;
  	        var buffered = this._mediaElement.buffered;
  	        if (this._requestSetTime) {
  	            this._requestSetTime = false;
  	            return;
  	        }
  	        if (target < 1.0 && buffered.length > 0) {
  	            // seek to video begin, set currentTime directly if beginPTS buffered
  	            var videoBeginTime = buffered.start(0);
  	            if ((videoBeginTime < 1.0 && target < videoBeginTime) || _utils_browser_js__WEBPACK_IMPORTED_MODULE_2__.default.safari) {
  	                this._requestSetTime = true;
  	                // also workaround for Safari: Seek to 0 may cause video stuck, use 0.1 to avoid
  	                this._mediaElement.currentTime = _utils_browser_js__WEBPACK_IMPORTED_MODULE_2__.default.safari ? 0.1 : videoBeginTime;
  	                return;
  	            }
  	        }
  	        if (this._isTimepointBuffered(target)) {
  	            if (this._alwaysSeekKeyframe) {
  	                var idr = this._msectl.getNearestKeyframe(Math.floor(target * 1000));
  	                if (idr != null) {
  	                    this._requestSetTime = true;
  	                    this._mediaElement.currentTime = idr.dts / 1000;
  	                }
  	            }
  	            if (this._progressChecker != null) {
  	                this._checkProgressAndResume();
  	            }
  	            return;
  	        }
  	        this._seekpointRecord = {
  	            seekPoint: target,
  	            recordTime: this._now()
  	        };
  	        window.setTimeout(this._checkAndApplyUnbufferedSeekpoint.bind(this), 50);
  	    };
  	    FlvPlayer.prototype._onvCanPlay = function (e) {
  	        this._receivedCanPlay = true;
  	        this._mediaElement.removeEventListener('canplay', this.e.onvCanPlay);
  	    };
  	    FlvPlayer.prototype._onvStalled = function (e) {
  	        this._checkAndResumeStuckPlayback(true);
  	    };
  	    FlvPlayer.prototype._onvProgress = function (e) {
  	        this._checkAndResumeStuckPlayback();
  	    };
  	    return FlvPlayer;
  	}());
  	/* harmony default export */ __webpack_exports__["default"] = (FlvPlayer);


  	/***/ }),

  	/***/ "./src/player/native-player.js":
  	/*!*************************************!*\
  	  !*** ./src/player/native-player.js ***!
  	  \*************************************/
  	/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {
  	__webpack_require__.r(__webpack_exports__);
  	/* harmony import */ var events__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! events */ "./node_modules/events/events.js");
  	/* harmony import */ var events__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(events__WEBPACK_IMPORTED_MODULE_0__);
  	/* harmony import */ var _player_events_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./player-events.js */ "./src/player/player-events.js");
  	/* harmony import */ var _config_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../config.js */ "./src/config.js");
  	/* harmony import */ var _utils_exception_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../utils/exception.js */ "./src/utils/exception.js");
  	/*
  	 * Copyright (C) 2016 Bilibili. All Rights Reserved.
  	 *
  	 * @author zheng qian <xqq@xqq.im>
  	 *
  	 * Licensed under the Apache License, Version 2.0 (the "License");
  	 * you may not use this file except in compliance with the License.
  	 * You may obtain a copy of the License at
  	 *
  	 *     http://www.apache.org/licenses/LICENSE-2.0
  	 *
  	 * Unless required by applicable law or agreed to in writing, software
  	 * distributed under the License is distributed on an "AS IS" BASIS,
  	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  	 * See the License for the specific language governing permissions and
  	 * limitations under the License.
  	 */




  	// Player wrapper for browser's native player (HTMLVideoElement) without MediaSource src. 
  	var NativePlayer = /** @class */ (function () {
  	    function NativePlayer(mediaDataSource, config) {
  	        this.TAG = 'NativePlayer';
  	        this._type = 'NativePlayer';
  	        this._emitter = new (events__WEBPACK_IMPORTED_MODULE_0___default())();
  	        this._config = (0, _config_js__WEBPACK_IMPORTED_MODULE_2__.createDefaultConfig)();
  	        if (typeof config === 'object') {
  	            Object.assign(this._config, config);
  	        }
  	        if (mediaDataSource.type.toLowerCase() === 'flv') {
  	            throw new _utils_exception_js__WEBPACK_IMPORTED_MODULE_3__.InvalidArgumentException('NativePlayer does\'t support flv MediaDataSource input!');
  	        }
  	        if (mediaDataSource.hasOwnProperty('segments')) {
  	            throw new _utils_exception_js__WEBPACK_IMPORTED_MODULE_3__.InvalidArgumentException("NativePlayer(" + mediaDataSource.type + ") doesn't support multipart playback!");
  	        }
  	        this.e = {
  	            onvLoadedMetadata: this._onvLoadedMetadata.bind(this)
  	        };
  	        this._pendingSeekTime = null;
  	        this._statisticsReporter = null;
  	        this._mediaDataSource = mediaDataSource;
  	        this._mediaElement = null;
  	    }
  	    NativePlayer.prototype.destroy = function () {
  	        if (this._mediaElement) {
  	            this.unload();
  	            this.detachMediaElement();
  	        }
  	        this.e = null;
  	        this._mediaDataSource = null;
  	        this._emitter.removeAllListeners();
  	        this._emitter = null;
  	    };
  	    NativePlayer.prototype.on = function (event, listener) {
  	        var _this = this;
  	        if (event === _player_events_js__WEBPACK_IMPORTED_MODULE_1__.default.MEDIA_INFO) {
  	            if (this._mediaElement != null && this._mediaElement.readyState !== 0) { // HAVE_NOTHING
  	                Promise.resolve().then(function () {
  	                    _this._emitter.emit(_player_events_js__WEBPACK_IMPORTED_MODULE_1__.default.MEDIA_INFO, _this.mediaInfo);
  	                });
  	            }
  	        }
  	        else if (event === _player_events_js__WEBPACK_IMPORTED_MODULE_1__.default.STATISTICS_INFO) {
  	            if (this._mediaElement != null && this._mediaElement.readyState !== 0) {
  	                Promise.resolve().then(function () {
  	                    _this._emitter.emit(_player_events_js__WEBPACK_IMPORTED_MODULE_1__.default.STATISTICS_INFO, _this.statisticsInfo);
  	                });
  	            }
  	        }
  	        this._emitter.addListener(event, listener);
  	    };
  	    NativePlayer.prototype.off = function (event, listener) {
  	        this._emitter.removeListener(event, listener);
  	    };
  	    NativePlayer.prototype.attachMediaElement = function (mediaElement) {
  	        this._mediaElement = mediaElement;
  	        mediaElement.addEventListener('loadedmetadata', this.e.onvLoadedMetadata);
  	        if (this._pendingSeekTime != null) {
  	            try {
  	                mediaElement.currentTime = this._pendingSeekTime;
  	                this._pendingSeekTime = null;
  	            }
  	            catch (e) {
  	                // IE11 may throw InvalidStateError if readyState === 0
  	                // Defer set currentTime operation after loadedmetadata
  	            }
  	        }
  	    };
  	    NativePlayer.prototype.detachMediaElement = function () {
  	        if (this._mediaElement) {
  	            this._mediaElement.src = '';
  	            this._mediaElement.removeAttribute('src');
  	            this._mediaElement.removeEventListener('loadedmetadata', this.e.onvLoadedMetadata);
  	            this._mediaElement = null;
  	        }
  	        if (this._statisticsReporter != null) {
  	            window.clearInterval(this._statisticsReporter);
  	            this._statisticsReporter = null;
  	        }
  	    };
  	    NativePlayer.prototype.load = function () {
  	        if (!this._mediaElement) {
  	            throw new _utils_exception_js__WEBPACK_IMPORTED_MODULE_3__.IllegalStateException('HTMLMediaElement must be attached before load()!');
  	        }
  	        this._mediaElement.src = this._mediaDataSource.url;
  	        if (this._mediaElement.readyState > 0) {
  	            this._mediaElement.currentTime = 0;
  	        }
  	        this._mediaElement.preload = 'auto';
  	        this._mediaElement.load();
  	        this._statisticsReporter = window.setInterval(this._reportStatisticsInfo.bind(this), this._config.statisticsInfoReportInterval);
  	    };
  	    NativePlayer.prototype.unload = function () {
  	        if (this._mediaElement) {
  	            this._mediaElement.src = '';
  	            this._mediaElement.removeAttribute('src');
  	        }
  	        if (this._statisticsReporter != null) {
  	            window.clearInterval(this._statisticsReporter);
  	            this._statisticsReporter = null;
  	        }
  	    };
  	    NativePlayer.prototype.play = function () {
  	        return this._mediaElement.play();
  	    };
  	    NativePlayer.prototype.pause = function () {
  	        this._mediaElement.pause();
  	    };
  	    Object.defineProperty(NativePlayer.prototype, "type", {
  	        get: function () {
  	            return this._type;
  	        },
  	        enumerable: false,
  	        configurable: true
  	    });
  	    Object.defineProperty(NativePlayer.prototype, "buffered", {
  	        get: function () {
  	            return this._mediaElement.buffered;
  	        },
  	        enumerable: false,
  	        configurable: true
  	    });
  	    Object.defineProperty(NativePlayer.prototype, "duration", {
  	        get: function () {
  	            return this._mediaElement.duration;
  	        },
  	        enumerable: false,
  	        configurable: true
  	    });
  	    Object.defineProperty(NativePlayer.prototype, "volume", {
  	        get: function () {
  	            return this._mediaElement.volume;
  	        },
  	        set: function (value) {
  	            this._mediaElement.volume = value;
  	        },
  	        enumerable: false,
  	        configurable: true
  	    });
  	    Object.defineProperty(NativePlayer.prototype, "muted", {
  	        get: function () {
  	            return this._mediaElement.muted;
  	        },
  	        set: function (muted) {
  	            this._mediaElement.muted = muted;
  	        },
  	        enumerable: false,
  	        configurable: true
  	    });
  	    Object.defineProperty(NativePlayer.prototype, "currentTime", {
  	        get: function () {
  	            if (this._mediaElement) {
  	                return this._mediaElement.currentTime;
  	            }
  	            return 0;
  	        },
  	        set: function (seconds) {
  	            if (this._mediaElement) {
  	                this._mediaElement.currentTime = seconds;
  	            }
  	            else {
  	                this._pendingSeekTime = seconds;
  	            }
  	        },
  	        enumerable: false,
  	        configurable: true
  	    });
  	    Object.defineProperty(NativePlayer.prototype, "mediaInfo", {
  	        get: function () {
  	            var mediaPrefix = (this._mediaElement instanceof HTMLAudioElement) ? 'audio/' : 'video/';
  	            var info = {
  	                mimeType: mediaPrefix + this._mediaDataSource.type
  	            };
  	            if (this._mediaElement) {
  	                info.duration = Math.floor(this._mediaElement.duration * 1000);
  	                if (this._mediaElement instanceof HTMLVideoElement) {
  	                    info.width = this._mediaElement.videoWidth;
  	                    info.height = this._mediaElement.videoHeight;
  	                }
  	            }
  	            return info;
  	        },
  	        enumerable: false,
  	        configurable: true
  	    });
  	    Object.defineProperty(NativePlayer.prototype, "statisticsInfo", {
  	        get: function () {
  	            var info = {
  	                playerType: this._type,
  	                url: this._mediaDataSource.url
  	            };
  	            if (!(this._mediaElement instanceof HTMLVideoElement)) {
  	                return info;
  	            }
  	            var hasQualityInfo = true;
  	            var decoded = 0;
  	            var dropped = 0;
  	            if (this._mediaElement.getVideoPlaybackQuality) {
  	                var quality = this._mediaElement.getVideoPlaybackQuality();
  	                decoded = quality.totalVideoFrames;
  	                dropped = quality.droppedVideoFrames;
  	            }
  	            else if (this._mediaElement.webkitDecodedFrameCount != undefined) {
  	                decoded = this._mediaElement.webkitDecodedFrameCount;
  	                dropped = this._mediaElement.webkitDroppedFrameCount;
  	            }
  	            else {
  	                hasQualityInfo = false;
  	            }
  	            if (hasQualityInfo) {
  	                info.decodedFrames = decoded;
  	                info.droppedFrames = dropped;
  	            }
  	            return info;
  	        },
  	        enumerable: false,
  	        configurable: true
  	    });
  	    NativePlayer.prototype._onvLoadedMetadata = function (e) {
  	        if (this._pendingSeekTime != null) {
  	            this._mediaElement.currentTime = this._pendingSeekTime;
  	            this._pendingSeekTime = null;
  	        }
  	        this._emitter.emit(_player_events_js__WEBPACK_IMPORTED_MODULE_1__.default.MEDIA_INFO, this.mediaInfo);
  	    };
  	    NativePlayer.prototype._reportStatisticsInfo = function () {
  	        this._emitter.emit(_player_events_js__WEBPACK_IMPORTED_MODULE_1__.default.STATISTICS_INFO, this.statisticsInfo);
  	    };
  	    return NativePlayer;
  	}());
  	/* harmony default export */ __webpack_exports__["default"] = (NativePlayer);


  	/***/ }),

  	/***/ "./src/player/player-errors.js":
  	/*!*************************************!*\
  	  !*** ./src/player/player-errors.js ***!
  	  \*************************************/
  	/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {
  	__webpack_require__.r(__webpack_exports__);
  	/* harmony export */ __webpack_require__.d(__webpack_exports__, {
  	/* harmony export */   "ErrorTypes": function() { return /* binding */ ErrorTypes; },
  	/* harmony export */   "ErrorDetails": function() { return /* binding */ ErrorDetails; }
  	/* harmony export */ });
  	/* harmony import */ var _io_loader_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../io/loader.js */ "./src/io/loader.js");
  	/* harmony import */ var _demux_demux_errors_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../demux/demux-errors.js */ "./src/demux/demux-errors.js");
  	/*
  	 * Copyright (C) 2016 Bilibili. All Rights Reserved.
  	 *
  	 * @author zheng qian <xqq@xqq.im>
  	 *
  	 * Licensed under the Apache License, Version 2.0 (the "License");
  	 * you may not use this file except in compliance with the License.
  	 * You may obtain a copy of the License at
  	 *
  	 *     http://www.apache.org/licenses/LICENSE-2.0
  	 *
  	 * Unless required by applicable law or agreed to in writing, software
  	 * distributed under the License is distributed on an "AS IS" BASIS,
  	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  	 * See the License for the specific language governing permissions and
  	 * limitations under the License.
  	 */


  	var ErrorTypes = {
  	    NETWORK_ERROR: 'NetworkError',
  	    MEDIA_ERROR: 'MediaError',
  	    OTHER_ERROR: 'OtherError'
  	};
  	var ErrorDetails = {
  	    NETWORK_EXCEPTION: _io_loader_js__WEBPACK_IMPORTED_MODULE_0__.LoaderErrors.EXCEPTION,
  	    NETWORK_STATUS_CODE_INVALID: _io_loader_js__WEBPACK_IMPORTED_MODULE_0__.LoaderErrors.HTTP_STATUS_CODE_INVALID,
  	    NETWORK_TIMEOUT: _io_loader_js__WEBPACK_IMPORTED_MODULE_0__.LoaderErrors.CONNECTING_TIMEOUT,
  	    NETWORK_UNRECOVERABLE_EARLY_EOF: _io_loader_js__WEBPACK_IMPORTED_MODULE_0__.LoaderErrors.UNRECOVERABLE_EARLY_EOF,
  	    MEDIA_MSE_ERROR: 'MediaMSEError',
  	    MEDIA_FORMAT_ERROR: _demux_demux_errors_js__WEBPACK_IMPORTED_MODULE_1__.default.FORMAT_ERROR,
  	    MEDIA_FORMAT_UNSUPPORTED: _demux_demux_errors_js__WEBPACK_IMPORTED_MODULE_1__.default.FORMAT_UNSUPPORTED,
  	    MEDIA_CODEC_UNSUPPORTED: _demux_demux_errors_js__WEBPACK_IMPORTED_MODULE_1__.default.CODEC_UNSUPPORTED
  	};


  	/***/ }),

  	/***/ "./src/player/player-events.js":
  	/*!*************************************!*\
  	  !*** ./src/player/player-events.js ***!
  	  \*************************************/
  	/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {
  	__webpack_require__.r(__webpack_exports__);
  	/*
  	 * Copyright (C) 2016 Bilibili. All Rights Reserved.
  	 *
  	 * @author zheng qian <xqq@xqq.im>
  	 *
  	 * Licensed under the Apache License, Version 2.0 (the "License");
  	 * you may not use this file except in compliance with the License.
  	 * You may obtain a copy of the License at
  	 *
  	 *     http://www.apache.org/licenses/LICENSE-2.0
  	 *
  	 * Unless required by applicable law or agreed to in writing, software
  	 * distributed under the License is distributed on an "AS IS" BASIS,
  	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  	 * See the License for the specific language governing permissions and
  	 * limitations under the License.
  	 */
  	var PlayerEvents = {
  	    ERROR: 'error',
  	    LOADING_COMPLETE: 'loading_complete',
  	    RECOVERED_EARLY_EOF: 'recovered_early_eof',
  	    MEDIA_INFO: 'media_info',
  	    METADATA_ARRIVED: 'metadata_arrived',
  	    SCRIPTDATA_ARRIVED: 'scriptdata_arrived',
  	    STATISTICS_INFO: 'statistics_info'
  	};
  	/* harmony default export */ __webpack_exports__["default"] = (PlayerEvents);


  	/***/ }),

  	/***/ "./src/remux/aac-silent.js":
  	/*!*********************************!*\
  	  !*** ./src/remux/aac-silent.js ***!
  	  \*********************************/
  	/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {
  	__webpack_require__.r(__webpack_exports__);
  	/*
  	 * Copyright (C) 2016 Bilibili. All Rights Reserved.
  	 *
  	 * This file is modified from dailymotion's hls.js library (hls.js/src/helper/aac.js)
  	 * @author zheng qian <xqq@xqq.im>
  	 *
  	 * Licensed under the Apache License, Version 2.0 (the "License");
  	 * you may not use this file except in compliance with the License.
  	 * You may obtain a copy of the License at
  	 *
  	 *     http://www.apache.org/licenses/LICENSE-2.0
  	 *
  	 * Unless required by applicable law or agreed to in writing, software
  	 * distributed under the License is distributed on an "AS IS" BASIS,
  	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  	 * See the License for the specific language governing permissions and
  	 * limitations under the License.
  	 */
  	var AAC = /** @class */ (function () {
  	    function AAC() {
  	    }
  	    AAC.getSilentFrame = function (codec, channelCount) {
  	        if (codec === 'mp4a.40.2') {
  	            // handle LC-AAC
  	            if (channelCount === 1) {
  	                return new Uint8Array([0x00, 0xc8, 0x00, 0x80, 0x23, 0x80]);
  	            }
  	            else if (channelCount === 2) {
  	                return new Uint8Array([0x21, 0x00, 0x49, 0x90, 0x02, 0x19, 0x00, 0x23, 0x80]);
  	            }
  	            else if (channelCount === 3) {
  	                return new Uint8Array([0x00, 0xc8, 0x00, 0x80, 0x20, 0x84, 0x01, 0x26, 0x40, 0x08, 0x64, 0x00, 0x8e]);
  	            }
  	            else if (channelCount === 4) {
  	                return new Uint8Array([0x00, 0xc8, 0x00, 0x80, 0x20, 0x84, 0x01, 0x26, 0x40, 0x08, 0x64, 0x00, 0x80, 0x2c, 0x80, 0x08, 0x02, 0x38]);
  	            }
  	            else if (channelCount === 5) {
  	                return new Uint8Array([0x00, 0xc8, 0x00, 0x80, 0x20, 0x84, 0x01, 0x26, 0x40, 0x08, 0x64, 0x00, 0x82, 0x30, 0x04, 0x99, 0x00, 0x21, 0x90, 0x02, 0x38]);
  	            }
  	            else if (channelCount === 6) {
  	                return new Uint8Array([0x00, 0xc8, 0x00, 0x80, 0x20, 0x84, 0x01, 0x26, 0x40, 0x08, 0x64, 0x00, 0x82, 0x30, 0x04, 0x99, 0x00, 0x21, 0x90, 0x02, 0x00, 0xb2, 0x00, 0x20, 0x08, 0xe0]);
  	            }
  	        }
  	        else {
  	            // handle HE-AAC (mp4a.40.5 / mp4a.40.29)
  	            if (channelCount === 1) {
  	                // ffmpeg -y -f lavfi -i "aevalsrc=0:d=0.05" -c:a libfdk_aac -profile:a aac_he -b:a 4k output.aac && hexdump -v -e '16/1 "0x%x," "\n"' -v output.aac
  	                return new Uint8Array([0x1, 0x40, 0x22, 0x80, 0xa3, 0x4e, 0xe6, 0x80, 0xba, 0x8, 0x0, 0x0, 0x0, 0x1c, 0x6, 0xf1, 0xc1, 0xa, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5e]);
  	            }
  	            else if (channelCount === 2) {
  	                // ffmpeg -y -f lavfi -i "aevalsrc=0|0:d=0.05" -c:a libfdk_aac -profile:a aac_he_v2 -b:a 4k output.aac && hexdump -v -e '16/1 "0x%x," "\n"' -v output.aac
  	                return new Uint8Array([0x1, 0x40, 0x22, 0x80, 0xa3, 0x5e, 0xe6, 0x80, 0xba, 0x8, 0x0, 0x0, 0x0, 0x0, 0x95, 0x0, 0x6, 0xf1, 0xa1, 0xa, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5e]);
  	            }
  	            else if (channelCount === 3) {
  	                // ffmpeg -y -f lavfi -i "aevalsrc=0|0|0:d=0.05" -c:a libfdk_aac -profile:a aac_he_v2 -b:a 4k output.aac && hexdump -v -e '16/1 "0x%x," "\n"' -v output.aac
  	                return new Uint8Array([0x1, 0x40, 0x22, 0x80, 0xa3, 0x5e, 0xe6, 0x80, 0xba, 0x8, 0x0, 0x0, 0x0, 0x0, 0x95, 0x0, 0x6, 0xf1, 0xa1, 0xa, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5e]);
  	            }
  	        }
  	        return null;
  	    };
  	    return AAC;
  	}());
  	/* harmony default export */ __webpack_exports__["default"] = (AAC);


  	/***/ }),

  	/***/ "./src/remux/mp4-generator.js":
  	/*!************************************!*\
  	  !*** ./src/remux/mp4-generator.js ***!
  	  \************************************/
  	/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {
  	__webpack_require__.r(__webpack_exports__);
  	/*
  	 * Copyright (C) 2016 Bilibili. All Rights Reserved.
  	 *
  	 * This file is derived from dailymotion's hls.js library (hls.js/src/remux/mp4-generator.js)
  	 * @author zheng qian <xqq@xqq.im>
  	 *
  	 * Licensed under the Apache License, Version 2.0 (the "License");
  	 * you may not use this file except in compliance with the License.
  	 * You may obtain a copy of the License at
  	 *
  	 *     http://www.apache.org/licenses/LICENSE-2.0
  	 *
  	 * Unless required by applicable law or agreed to in writing, software
  	 * distributed under the License is distributed on an "AS IS" BASIS,
  	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  	 * See the License for the specific language governing permissions and
  	 * limitations under the License.
  	 */
  	//  MP4 boxes generator for ISO BMFF (ISO Base Media File Format, defined in ISO/IEC 14496-12)
  	var MP4 = /** @class */ (function () {
  	    function MP4() {
  	    }
  	    MP4.init = function () {
  	        MP4.types = {
  	            avc1: [], avcC: [], btrt: [], dinf: [],
  	            dref: [], esds: [], ftyp: [], hdlr: [],
  	            mdat: [], mdhd: [], mdia: [], mfhd: [],
  	            minf: [], moof: [], moov: [], mp4a: [],
  	            mvex: [], mvhd: [], sdtp: [], stbl: [],
  	            stco: [], stsc: [], stsd: [], stsz: [],
  	            stts: [], tfdt: [], tfhd: [], traf: [],
  	            trak: [], trun: [], trex: [], tkhd: [],
  	            vmhd: [], smhd: [], '.mp3': []
  	        };
  	        for (var name_1 in MP4.types) {
  	            if (MP4.types.hasOwnProperty(name_1)) {
  	                MP4.types[name_1] = [
  	                    name_1.charCodeAt(0),
  	                    name_1.charCodeAt(1),
  	                    name_1.charCodeAt(2),
  	                    name_1.charCodeAt(3)
  	                ];
  	            }
  	        }
  	        var constants = MP4.constants = {};
  	        constants.FTYP = new Uint8Array([
  	            0x69, 0x73, 0x6F, 0x6D,
  	            0x0, 0x0, 0x0, 0x1,
  	            0x69, 0x73, 0x6F, 0x6D,
  	            0x61, 0x76, 0x63, 0x31 // avc1
  	        ]);
  	        constants.STSD_PREFIX = new Uint8Array([
  	            0x00, 0x00, 0x00, 0x00,
  	            0x00, 0x00, 0x00, 0x01 // entry_count
  	        ]);
  	        constants.STTS = new Uint8Array([
  	            0x00, 0x00, 0x00, 0x00,
  	            0x00, 0x00, 0x00, 0x00 // entry_count
  	        ]);
  	        constants.STSC = constants.STCO = constants.STTS;
  	        constants.STSZ = new Uint8Array([
  	            0x00, 0x00, 0x00, 0x00,
  	            0x00, 0x00, 0x00, 0x00,
  	            0x00, 0x00, 0x00, 0x00 // sample_count
  	        ]);
  	        constants.HDLR_VIDEO = new Uint8Array([
  	            0x00, 0x00, 0x00, 0x00,
  	            0x00, 0x00, 0x00, 0x00,
  	            0x76, 0x69, 0x64, 0x65,
  	            0x00, 0x00, 0x00, 0x00,
  	            0x00, 0x00, 0x00, 0x00,
  	            0x00, 0x00, 0x00, 0x00,
  	            0x56, 0x69, 0x64, 0x65,
  	            0x6F, 0x48, 0x61, 0x6E,
  	            0x64, 0x6C, 0x65, 0x72, 0x00 // name: VideoHandler
  	        ]);
  	        constants.HDLR_AUDIO = new Uint8Array([
  	            0x00, 0x00, 0x00, 0x00,
  	            0x00, 0x00, 0x00, 0x00,
  	            0x73, 0x6F, 0x75, 0x6E,
  	            0x00, 0x00, 0x00, 0x00,
  	            0x00, 0x00, 0x00, 0x00,
  	            0x00, 0x00, 0x00, 0x00,
  	            0x53, 0x6F, 0x75, 0x6E,
  	            0x64, 0x48, 0x61, 0x6E,
  	            0x64, 0x6C, 0x65, 0x72, 0x00 // name: SoundHandler
  	        ]);
  	        constants.DREF = new Uint8Array([
  	            0x00, 0x00, 0x00, 0x00,
  	            0x00, 0x00, 0x00, 0x01,
  	            0x00, 0x00, 0x00, 0x0C,
  	            0x75, 0x72, 0x6C, 0x20,
  	            0x00, 0x00, 0x00, 0x01 // version(0) + flags
  	        ]);
  	        // Sound media header
  	        constants.SMHD = new Uint8Array([
  	            0x00, 0x00, 0x00, 0x00,
  	            0x00, 0x00, 0x00, 0x00 // balance(2) + reserved(2)
  	        ]);
  	        // video media header
  	        constants.VMHD = new Uint8Array([
  	            0x00, 0x00, 0x00, 0x01,
  	            0x00, 0x00,
  	            0x00, 0x00, 0x00, 0x00,
  	            0x00, 0x00
  	        ]);
  	    };
  	    // Generate a box
  	    MP4.box = function (type) {
  	        var size = 8;
  	        var result = null;
  	        var datas = Array.prototype.slice.call(arguments, 1);
  	        var arrayCount = datas.length;
  	        for (var i = 0; i < arrayCount; i++) {
  	            size += datas[i].byteLength;
  	        }
  	        result = new Uint8Array(size);
  	        result[0] = (size >>> 24) & 0xFF; // size
  	        result[1] = (size >>> 16) & 0xFF;
  	        result[2] = (size >>> 8) & 0xFF;
  	        result[3] = (size) & 0xFF;
  	        result.set(type, 4); // type
  	        var offset = 8;
  	        for (var i = 0; i < arrayCount; i++) { // data body
  	            result.set(datas[i], offset);
  	            offset += datas[i].byteLength;
  	        }
  	        return result;
  	    };
  	    // emit ftyp & moov
  	    MP4.generateInitSegment = function (meta) {
  	        var ftyp = MP4.box(MP4.types.ftyp, MP4.constants.FTYP);
  	        var moov = MP4.moov(meta);
  	        var result = new Uint8Array(ftyp.byteLength + moov.byteLength);
  	        result.set(ftyp, 0);
  	        result.set(moov, ftyp.byteLength);
  	        return result;
  	    };
  	    // Movie metadata box
  	    MP4.moov = function (meta) {
  	        var mvhd = MP4.mvhd(meta.timescale, meta.duration);
  	        var trak = MP4.trak(meta);
  	        var mvex = MP4.mvex(meta);
  	        return MP4.box(MP4.types.moov, mvhd, trak, mvex);
  	    };
  	    // Movie header box
  	    MP4.mvhd = function (timescale, duration) {
  	        return MP4.box(MP4.types.mvhd, new Uint8Array([
  	            0x00, 0x00, 0x00, 0x00,
  	            0x00, 0x00, 0x00, 0x00,
  	            0x00, 0x00, 0x00, 0x00,
  	            (timescale >>> 24) & 0xFF,
  	            (timescale >>> 16) & 0xFF,
  	            (timescale >>> 8) & 0xFF,
  	            (timescale) & 0xFF,
  	            (duration >>> 24) & 0xFF,
  	            (duration >>> 16) & 0xFF,
  	            (duration >>> 8) & 0xFF,
  	            (duration) & 0xFF,
  	            0x00, 0x01, 0x00, 0x00,
  	            0x01, 0x00, 0x00, 0x00,
  	            0x00, 0x00, 0x00, 0x00,
  	            0x00, 0x00, 0x00, 0x00,
  	            0x00, 0x01, 0x00, 0x00,
  	            0x00, 0x00, 0x00, 0x00,
  	            0x00, 0x00, 0x00, 0x00,
  	            0x00, 0x00, 0x00, 0x00,
  	            0x00, 0x01, 0x00, 0x00,
  	            0x00, 0x00, 0x00, 0x00,
  	            0x00, 0x00, 0x00, 0x00,
  	            0x00, 0x00, 0x00, 0x00,
  	            0x40, 0x00, 0x00, 0x00,
  	            0x00, 0x00, 0x00, 0x00,
  	            0x00, 0x00, 0x00, 0x00,
  	            0x00, 0x00, 0x00, 0x00,
  	            0x00, 0x00, 0x00, 0x00,
  	            0x00, 0x00, 0x00, 0x00,
  	            0x00, 0x00, 0x00, 0x00,
  	            0xFF, 0xFF, 0xFF, 0xFF // next_track_ID
  	        ]));
  	    };
  	    // Track box
  	    MP4.trak = function (meta) {
  	        return MP4.box(MP4.types.trak, MP4.tkhd(meta), MP4.mdia(meta));
  	    };
  	    // Track header box
  	    MP4.tkhd = function (meta) {
  	        var trackId = meta.id, duration = meta.duration;
  	        var width = meta.presentWidth, height = meta.presentHeight;
  	        return MP4.box(MP4.types.tkhd, new Uint8Array([
  	            0x00, 0x00, 0x00, 0x07,
  	            0x00, 0x00, 0x00, 0x00,
  	            0x00, 0x00, 0x00, 0x00,
  	            (trackId >>> 24) & 0xFF,
  	            (trackId >>> 16) & 0xFF,
  	            (trackId >>> 8) & 0xFF,
  	            (trackId) & 0xFF,
  	            0x00, 0x00, 0x00, 0x00,
  	            (duration >>> 24) & 0xFF,
  	            (duration >>> 16) & 0xFF,
  	            (duration >>> 8) & 0xFF,
  	            (duration) & 0xFF,
  	            0x00, 0x00, 0x00, 0x00,
  	            0x00, 0x00, 0x00, 0x00,
  	            0x00, 0x00, 0x00, 0x00,
  	            0x00, 0x00, 0x00, 0x00,
  	            0x00, 0x01, 0x00, 0x00,
  	            0x00, 0x00, 0x00, 0x00,
  	            0x00, 0x00, 0x00, 0x00,
  	            0x00, 0x00, 0x00, 0x00,
  	            0x00, 0x01, 0x00, 0x00,
  	            0x00, 0x00, 0x00, 0x00,
  	            0x00, 0x00, 0x00, 0x00,
  	            0x00, 0x00, 0x00, 0x00,
  	            0x40, 0x00, 0x00, 0x00,
  	            (width >>> 8) & 0xFF,
  	            (width) & 0xFF,
  	            0x00, 0x00,
  	            (height >>> 8) & 0xFF,
  	            (height) & 0xFF,
  	            0x00, 0x00
  	        ]));
  	    };
  	    // Media Box
  	    MP4.mdia = function (meta) {
  	        return MP4.box(MP4.types.mdia, MP4.mdhd(meta), MP4.hdlr(meta), MP4.minf(meta));
  	    };
  	    // Media header box
  	    MP4.mdhd = function (meta) {
  	        var timescale = meta.timescale;
  	        var duration = meta.duration;
  	        return MP4.box(MP4.types.mdhd, new Uint8Array([
  	            0x00, 0x00, 0x00, 0x00,
  	            0x00, 0x00, 0x00, 0x00,
  	            0x00, 0x00, 0x00, 0x00,
  	            (timescale >>> 24) & 0xFF,
  	            (timescale >>> 16) & 0xFF,
  	            (timescale >>> 8) & 0xFF,
  	            (timescale) & 0xFF,
  	            (duration >>> 24) & 0xFF,
  	            (duration >>> 16) & 0xFF,
  	            (duration >>> 8) & 0xFF,
  	            (duration) & 0xFF,
  	            0x55, 0xC4,
  	            0x00, 0x00 // pre_defined = 0
  	        ]));
  	    };
  	    // Media handler reference box
  	    MP4.hdlr = function (meta) {
  	        var data = null;
  	        if (meta.type === 'audio') {
  	            data = MP4.constants.HDLR_AUDIO;
  	        }
  	        else {
  	            data = MP4.constants.HDLR_VIDEO;
  	        }
  	        return MP4.box(MP4.types.hdlr, data);
  	    };
  	    // Media infomation box
  	    MP4.minf = function (meta) {
  	        var xmhd = null;
  	        if (meta.type === 'audio') {
  	            xmhd = MP4.box(MP4.types.smhd, MP4.constants.SMHD);
  	        }
  	        else {
  	            xmhd = MP4.box(MP4.types.vmhd, MP4.constants.VMHD);
  	        }
  	        return MP4.box(MP4.types.minf, xmhd, MP4.dinf(), MP4.stbl(meta));
  	    };
  	    // Data infomation box
  	    MP4.dinf = function () {
  	        var result = MP4.box(MP4.types.dinf, MP4.box(MP4.types.dref, MP4.constants.DREF));
  	        return result;
  	    };
  	    // Sample table box
  	    MP4.stbl = function (meta) {
  	        var result = MP4.box(MP4.types.stbl, // type: stbl
  	        MP4.stsd(meta), // Sample Description Table
  	        MP4.box(MP4.types.stts, MP4.constants.STTS), // Time-To-Sample
  	        MP4.box(MP4.types.stsc, MP4.constants.STSC), // Sample-To-Chunk
  	        MP4.box(MP4.types.stsz, MP4.constants.STSZ), // Sample size
  	        MP4.box(MP4.types.stco, MP4.constants.STCO) // Chunk offset
  	        );
  	        return result;
  	    };
  	    // Sample description box
  	    MP4.stsd = function (meta) {
  	        if (meta.type === 'audio') {
  	            if (meta.codec === 'mp3') {
  	                return MP4.box(MP4.types.stsd, MP4.constants.STSD_PREFIX, MP4.mp3(meta));
  	            }
  	            // else: aac -> mp4a
  	            return MP4.box(MP4.types.stsd, MP4.constants.STSD_PREFIX, MP4.mp4a(meta));
  	        }
  	        else {
  	            return MP4.box(MP4.types.stsd, MP4.constants.STSD_PREFIX, MP4.avc1(meta));
  	        }
  	    };
  	    MP4.mp3 = function (meta) {
  	        var channelCount = meta.channelCount;
  	        var sampleRate = meta.audioSampleRate;
  	        var data = new Uint8Array([
  	            0x00, 0x00, 0x00, 0x00,
  	            0x00, 0x00, 0x00, 0x01,
  	            0x00, 0x00, 0x00, 0x00,
  	            0x00, 0x00, 0x00, 0x00,
  	            0x00, channelCount,
  	            0x00, 0x10,
  	            0x00, 0x00, 0x00, 0x00,
  	            (sampleRate >>> 8) & 0xFF,
  	            (sampleRate) & 0xFF,
  	            0x00, 0x00
  	        ]);
  	        return MP4.box(MP4.types['.mp3'], data);
  	    };
  	    MP4.mp4a = function (meta) {
  	        var channelCount = meta.channelCount;
  	        var sampleRate = meta.audioSampleRate;
  	        var data = new Uint8Array([
  	            0x00, 0x00, 0x00, 0x00,
  	            0x00, 0x00, 0x00, 0x01,
  	            0x00, 0x00, 0x00, 0x00,
  	            0x00, 0x00, 0x00, 0x00,
  	            0x00, channelCount,
  	            0x00, 0x10,
  	            0x00, 0x00, 0x00, 0x00,
  	            (sampleRate >>> 8) & 0xFF,
  	            (sampleRate) & 0xFF,
  	            0x00, 0x00
  	        ]);
  	        return MP4.box(MP4.types.mp4a, data, MP4.esds(meta));
  	    };
  	    MP4.esds = function (meta) {
  	        var config = meta.config || [];
  	        var configSize = config.length;
  	        var data = new Uint8Array([
  	            0x00, 0x00, 0x00, 0x00,
  	            0x03,
  	            0x17 + configSize,
  	            0x00, 0x01,
  	            0x00,
  	            0x04,
  	            0x0F + configSize,
  	            0x40,
  	            0x15,
  	            0x00, 0x00, 0x00,
  	            0x00, 0x00, 0x00, 0x00,
  	            0x00, 0x00, 0x00, 0x00,
  	            0x05 // descriptor_type
  	        ].concat([
  	            configSize
  	        ]).concat(config).concat([
  	            0x06, 0x01, 0x02 // GASpecificConfig
  	        ]));
  	        return MP4.box(MP4.types.esds, data);
  	    };
  	    MP4.avc1 = function (meta) {
  	        var avcc = meta.avcc;
  	        var width = meta.codecWidth, height = meta.codecHeight;
  	        var data = new Uint8Array([
  	            0x00, 0x00, 0x00, 0x00,
  	            0x00, 0x00, 0x00, 0x01,
  	            0x00, 0x00, 0x00, 0x00,
  	            0x00, 0x00, 0x00, 0x00,
  	            0x00, 0x00, 0x00, 0x00,
  	            0x00, 0x00, 0x00, 0x00,
  	            (width >>> 8) & 0xFF,
  	            (width) & 0xFF,
  	            (height >>> 8) & 0xFF,
  	            (height) & 0xFF,
  	            0x00, 0x48, 0x00, 0x00,
  	            0x00, 0x48, 0x00, 0x00,
  	            0x00, 0x00, 0x00, 0x00,
  	            0x00, 0x01,
  	            0x0A,
  	            0x78, 0x71, 0x71, 0x2F,
  	            0x66, 0x6C, 0x76, 0x2E,
  	            0x6A, 0x73, 0x00, 0x00,
  	            0x00, 0x00, 0x00, 0x00,
  	            0x00, 0x00, 0x00, 0x00,
  	            0x00, 0x00, 0x00, 0x00,
  	            0x00, 0x00, 0x00, 0x00,
  	            0x00, 0x00, 0x00,
  	            0x00, 0x18,
  	            0xFF, 0xFF // pre_defined = -1
  	        ]);
  	        return MP4.box(MP4.types.avc1, data, MP4.box(MP4.types.avcC, avcc));
  	    };
  	    // Movie Extends box
  	    MP4.mvex = function (meta) {
  	        return MP4.box(MP4.types.mvex, MP4.trex(meta));
  	    };
  	    // Track Extends box
  	    MP4.trex = function (meta) {
  	        var trackId = meta.id;
  	        var data = new Uint8Array([
  	            0x00, 0x00, 0x00, 0x00,
  	            (trackId >>> 24) & 0xFF,
  	            (trackId >>> 16) & 0xFF,
  	            (trackId >>> 8) & 0xFF,
  	            (trackId) & 0xFF,
  	            0x00, 0x00, 0x00, 0x01,
  	            0x00, 0x00, 0x00, 0x00,
  	            0x00, 0x00, 0x00, 0x00,
  	            0x00, 0x01, 0x00, 0x01 // default_sample_flags
  	        ]);
  	        return MP4.box(MP4.types.trex, data);
  	    };
  	    // Movie fragment box
  	    MP4.moof = function (track, baseMediaDecodeTime) {
  	        return MP4.box(MP4.types.moof, MP4.mfhd(track.sequenceNumber), MP4.traf(track, baseMediaDecodeTime));
  	    };
  	    MP4.mfhd = function (sequenceNumber) {
  	        var data = new Uint8Array([
  	            0x00, 0x00, 0x00, 0x00,
  	            (sequenceNumber >>> 24) & 0xFF,
  	            (sequenceNumber >>> 16) & 0xFF,
  	            (sequenceNumber >>> 8) & 0xFF,
  	            (sequenceNumber) & 0xFF
  	        ]);
  	        return MP4.box(MP4.types.mfhd, data);
  	    };
  	    // Track fragment box
  	    MP4.traf = function (track, baseMediaDecodeTime) {
  	        var trackId = track.id;
  	        // Track fragment header box
  	        var tfhd = MP4.box(MP4.types.tfhd, new Uint8Array([
  	            0x00, 0x00, 0x00, 0x00,
  	            (trackId >>> 24) & 0xFF,
  	            (trackId >>> 16) & 0xFF,
  	            (trackId >>> 8) & 0xFF,
  	            (trackId) & 0xFF
  	        ]));
  	        // Track Fragment Decode Time
  	        var tfdt = MP4.box(MP4.types.tfdt, new Uint8Array([
  	            0x00, 0x00, 0x00, 0x00,
  	            (baseMediaDecodeTime >>> 24) & 0xFF,
  	            (baseMediaDecodeTime >>> 16) & 0xFF,
  	            (baseMediaDecodeTime >>> 8) & 0xFF,
  	            (baseMediaDecodeTime) & 0xFF
  	        ]));
  	        var sdtp = MP4.sdtp(track);
  	        var trun = MP4.trun(track, sdtp.byteLength + 16 + 16 + 8 + 16 + 8 + 8);
  	        return MP4.box(MP4.types.traf, tfhd, tfdt, trun, sdtp);
  	    };
  	    // Sample Dependency Type box
  	    MP4.sdtp = function (track) {
  	        var samples = track.samples || [];
  	        var sampleCount = samples.length;
  	        var data = new Uint8Array(4 + sampleCount);
  	        // 0~4 bytes: version(0) & flags
  	        for (var i = 0; i < sampleCount; i++) {
  	            var flags = samples[i].flags;
  	            data[i + 4] = (flags.isLeading << 6) // is_leading: 2 (bit)
  	                | (flags.dependsOn << 4) // sample_depends_on
  	                | (flags.isDependedOn << 2) // sample_is_depended_on
  	                | (flags.hasRedundancy); // sample_has_redundancy
  	        }
  	        return MP4.box(MP4.types.sdtp, data);
  	    };
  	    // Track fragment run box
  	    MP4.trun = function (track, offset) {
  	        var samples = track.samples || [];
  	        var sampleCount = samples.length;
  	        var dataSize = 12 + 16 * sampleCount;
  	        var data = new Uint8Array(dataSize);
  	        offset += 8 + dataSize;
  	        data.set([
  	            0x00, 0x00, 0x0F, 0x01,
  	            (sampleCount >>> 24) & 0xFF,
  	            (sampleCount >>> 16) & 0xFF,
  	            (sampleCount >>> 8) & 0xFF,
  	            (sampleCount) & 0xFF,
  	            (offset >>> 24) & 0xFF,
  	            (offset >>> 16) & 0xFF,
  	            (offset >>> 8) & 0xFF,
  	            (offset) & 0xFF
  	        ], 0);
  	        for (var i = 0; i < sampleCount; i++) {
  	            var duration = samples[i].duration;
  	            var size = samples[i].size;
  	            var flags = samples[i].flags;
  	            var cts = samples[i].cts;
  	            data.set([
  	                (duration >>> 24) & 0xFF,
  	                (duration >>> 16) & 0xFF,
  	                (duration >>> 8) & 0xFF,
  	                (duration) & 0xFF,
  	                (size >>> 24) & 0xFF,
  	                (size >>> 16) & 0xFF,
  	                (size >>> 8) & 0xFF,
  	                (size) & 0xFF,
  	                (flags.isLeading << 2) | flags.dependsOn,
  	                (flags.isDependedOn << 6) | (flags.hasRedundancy << 4) | flags.isNonSync,
  	                0x00, 0x00,
  	                (cts >>> 24) & 0xFF,
  	                (cts >>> 16) & 0xFF,
  	                (cts >>> 8) & 0xFF,
  	                (cts) & 0xFF
  	            ], 12 + 16 * i);
  	        }
  	        return MP4.box(MP4.types.trun, data);
  	    };
  	    MP4.mdat = function (data) {
  	        return MP4.box(MP4.types.mdat, data);
  	    };
  	    return MP4;
  	}());
  	MP4.init();
  	/* harmony default export */ __webpack_exports__["default"] = (MP4);


  	/***/ }),

  	/***/ "./src/remux/mp4-remuxer.js":
  	/*!**********************************!*\
  	  !*** ./src/remux/mp4-remuxer.js ***!
  	  \**********************************/
  	/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {
  	__webpack_require__.r(__webpack_exports__);
  	/* harmony import */ var _utils_logger_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utils/logger.js */ "./src/utils/logger.js");
  	/* harmony import */ var _mp4_generator_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./mp4-generator.js */ "./src/remux/mp4-generator.js");
  	/* harmony import */ var _aac_silent_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./aac-silent.js */ "./src/remux/aac-silent.js");
  	/* harmony import */ var _utils_browser_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../utils/browser.js */ "./src/utils/browser.js");
  	/* harmony import */ var _core_media_segment_info_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../core/media-segment-info.js */ "./src/core/media-segment-info.js");
  	/* harmony import */ var _utils_exception_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../utils/exception.js */ "./src/utils/exception.js");
  	/*
  	 * Copyright (C) 2016 Bilibili. All Rights Reserved.
  	 *
  	 * @author zheng qian <xqq@xqq.im>
  	 *
  	 * Licensed under the Apache License, Version 2.0 (the "License");
  	 * you may not use this file except in compliance with the License.
  	 * You may obtain a copy of the License at
  	 *
  	 *     http://www.apache.org/licenses/LICENSE-2.0
  	 *
  	 * Unless required by applicable law or agreed to in writing, software
  	 * distributed under the License is distributed on an "AS IS" BASIS,
  	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  	 * See the License for the specific language governing permissions and
  	 * limitations under the License.
  	 */






  	// Fragmented mp4 remuxer
  	var MP4Remuxer = /** @class */ (function () {
  	    function MP4Remuxer(config) {
  	        this.TAG = 'MP4Remuxer';
  	        this._config = config;
  	        this._isLive = (config.isLive === true) ? true : false;
  	        this._dtsBase = -1;
  	        this._dtsBaseInited = false;
  	        this._audioDtsBase = Infinity;
  	        this._videoDtsBase = Infinity;
  	        this._audioNextDts = undefined;
  	        this._videoNextDts = undefined;
  	        this._audioStashedLastSample = null;
  	        this._videoStashedLastSample = null;
  	        this._audioMeta = null;
  	        this._videoMeta = null;
  	        this._audioSegmentInfoList = new _core_media_segment_info_js__WEBPACK_IMPORTED_MODULE_4__.MediaSegmentInfoList('audio');
  	        this._videoSegmentInfoList = new _core_media_segment_info_js__WEBPACK_IMPORTED_MODULE_4__.MediaSegmentInfoList('video');
  	        this._onInitSegment = null;
  	        this._onMediaSegment = null;
  	        // Workaround for chrome < 50: Always force first sample as a Random Access Point in media segment
  	        // see https://bugs.chromium.org/p/chromium/issues/detail?id=229412
  	        this._forceFirstIDR = (_utils_browser_js__WEBPACK_IMPORTED_MODULE_3__.default.chrome &&
  	            (_utils_browser_js__WEBPACK_IMPORTED_MODULE_3__.default.version.major < 50 ||
  	                (_utils_browser_js__WEBPACK_IMPORTED_MODULE_3__.default.version.major === 50 && _utils_browser_js__WEBPACK_IMPORTED_MODULE_3__.default.version.build < 2661))) ? true : false;
  	        // Workaround for IE11/Edge: Fill silent aac frame after keyframe-seeking
  	        // Make audio beginDts equals with video beginDts, in order to fix seek freeze
  	        this._fillSilentAfterSeek = (_utils_browser_js__WEBPACK_IMPORTED_MODULE_3__.default.msedge || _utils_browser_js__WEBPACK_IMPORTED_MODULE_3__.default.msie);
  	        // While only FireFox supports 'audio/mp4, codecs="mp3"', use 'audio/mpeg' for chrome, safari, ...
  	        this._mp3UseMpegAudio = !_utils_browser_js__WEBPACK_IMPORTED_MODULE_3__.default.firefox;
  	        this._fillAudioTimestampGap = this._config.fixAudioTimestampGap;
  	    }
  	    MP4Remuxer.prototype.destroy = function () {
  	        this._dtsBase = -1;
  	        this._dtsBaseInited = false;
  	        this._audioMeta = null;
  	        this._videoMeta = null;
  	        this._audioSegmentInfoList.clear();
  	        this._audioSegmentInfoList = null;
  	        this._videoSegmentInfoList.clear();
  	        this._videoSegmentInfoList = null;
  	        this._onInitSegment = null;
  	        this._onMediaSegment = null;
  	    };
  	    MP4Remuxer.prototype.bindDataSource = function (producer) {
  	        producer.onDataAvailable = this.remux.bind(this);
  	        producer.onTrackMetadata = this._onTrackMetadataReceived.bind(this);
  	        return this;
  	    };
  	    Object.defineProperty(MP4Remuxer.prototype, "onInitSegment", {
  	        /* prototype: function onInitSegment(type: string, initSegment: ArrayBuffer): void
  	           InitSegment: {
  	               type: string,
  	               data: ArrayBuffer,
  	               codec: string,
  	               container: string
  	           }
  	        */
  	        get: function () {
  	            return this._onInitSegment;
  	        },
  	        set: function (callback) {
  	            this._onInitSegment = callback;
  	        },
  	        enumerable: false,
  	        configurable: true
  	    });
  	    Object.defineProperty(MP4Remuxer.prototype, "onMediaSegment", {
  	        /* prototype: function onMediaSegment(type: string, mediaSegment: MediaSegment): void
  	           MediaSegment: {
  	               type: string,
  	               data: ArrayBuffer,
  	               sampleCount: int32
  	               info: MediaSegmentInfo
  	           }
  	        */
  	        get: function () {
  	            return this._onMediaSegment;
  	        },
  	        set: function (callback) {
  	            this._onMediaSegment = callback;
  	        },
  	        enumerable: false,
  	        configurable: true
  	    });
  	    MP4Remuxer.prototype.insertDiscontinuity = function () {
  	        this._audioNextDts = this._videoNextDts = undefined;
  	    };
  	    MP4Remuxer.prototype.seek = function (originalDts) {
  	        this._audioStashedLastSample = null;
  	        this._videoStashedLastSample = null;
  	        this._videoSegmentInfoList.clear();
  	        this._audioSegmentInfoList.clear();
  	    };
  	    MP4Remuxer.prototype.remux = function (audioTrack, videoTrack) {
  	        if (!this._onMediaSegment) {
  	            throw new _utils_exception_js__WEBPACK_IMPORTED_MODULE_5__.IllegalStateException('MP4Remuxer: onMediaSegment callback must be specificed!');
  	        }
  	        if (!this._dtsBaseInited) {
  	            this._calculateDtsBase(audioTrack, videoTrack);
  	        }
  	        this._remuxVideo(videoTrack);
  	        this._remuxAudio(audioTrack);
  	    };
  	    MP4Remuxer.prototype._onTrackMetadataReceived = function (type, metadata) {
  	        var metabox = null;
  	        var container = 'mp4';
  	        var codec = metadata.codec;
  	        if (type === 'audio') {
  	            this._audioMeta = metadata;
  	            if (metadata.codec === 'mp3' && this._mp3UseMpegAudio) {
  	                // 'audio/mpeg' for MP3 audio track
  	                container = 'mpeg';
  	                codec = '';
  	                metabox = new Uint8Array();
  	            }
  	            else {
  	                // 'audio/mp4, codecs="codec"'
  	                metabox = _mp4_generator_js__WEBPACK_IMPORTED_MODULE_1__.default.generateInitSegment(metadata);
  	            }
  	        }
  	        else if (type === 'video') {
  	            this._videoMeta = metadata;
  	            metabox = _mp4_generator_js__WEBPACK_IMPORTED_MODULE_1__.default.generateInitSegment(metadata);
  	        }
  	        else {
  	            return;
  	        }
  	        // dispatch metabox (Initialization Segment)
  	        if (!this._onInitSegment) {
  	            throw new _utils_exception_js__WEBPACK_IMPORTED_MODULE_5__.IllegalStateException('MP4Remuxer: onInitSegment callback must be specified!');
  	        }
  	        this._onInitSegment(type, {
  	            type: type,
  	            data: metabox.buffer,
  	            codec: codec,
  	            container: type + "/" + container,
  	            mediaDuration: metadata.duration // in timescale 1000 (milliseconds)
  	        });
  	    };
  	    MP4Remuxer.prototype._calculateDtsBase = function (audioTrack, videoTrack) {
  	        if (this._dtsBaseInited) {
  	            return;
  	        }
  	        if (audioTrack.samples && audioTrack.samples.length) {
  	            this._audioDtsBase = audioTrack.samples[0].dts;
  	        }
  	        if (videoTrack.samples && videoTrack.samples.length) {
  	            this._videoDtsBase = videoTrack.samples[0].dts;
  	        }
  	        this._dtsBase = Math.min(this._audioDtsBase, this._videoDtsBase);
  	        this._dtsBaseInited = true;
  	    };
  	    MP4Remuxer.prototype.flushStashedSamples = function () {
  	        var videoSample = this._videoStashedLastSample;
  	        var audioSample = this._audioStashedLastSample;
  	        var videoTrack = {
  	            type: 'video',
  	            id: 1,
  	            sequenceNumber: 0,
  	            samples: [],
  	            length: 0
  	        };
  	        if (videoSample != null) {
  	            videoTrack.samples.push(videoSample);
  	            videoTrack.length = videoSample.length;
  	        }
  	        var audioTrack = {
  	            type: 'audio',
  	            id: 2,
  	            sequenceNumber: 0,
  	            samples: [],
  	            length: 0
  	        };
  	        if (audioSample != null) {
  	            audioTrack.samples.push(audioSample);
  	            audioTrack.length = audioSample.length;
  	        }
  	        this._videoStashedLastSample = null;
  	        this._audioStashedLastSample = null;
  	        this._remuxVideo(videoTrack, true);
  	        this._remuxAudio(audioTrack, true);
  	    };
  	    MP4Remuxer.prototype._remuxAudio = function (audioTrack, force) {
  	        if (this._audioMeta == null) {
  	            return;
  	        }
  	        var track = audioTrack;
  	        var samples = track.samples;
  	        var dtsCorrection = undefined;
  	        var firstDts = -1, lastDts = -1;
  	        var refSampleDuration = this._audioMeta.refSampleDuration;
  	        var mpegRawTrack = this._audioMeta.codec === 'mp3' && this._mp3UseMpegAudio;
  	        var firstSegmentAfterSeek = this._dtsBaseInited && this._audioNextDts === undefined;
  	        var insertPrefixSilentFrame = false;
  	        if (!samples || samples.length === 0) {
  	            return;
  	        }
  	        if (samples.length === 1 && !force) {
  	            // If [sample count in current batch] === 1 && (force != true)
  	            // Ignore and keep in demuxer's queue
  	            return;
  	        } // else if (force === true) do remux
  	        var offset = 0;
  	        var mdatbox = null;
  	        var mdatBytes = 0;
  	        // calculate initial mdat size
  	        if (mpegRawTrack) {
  	            // for raw mpeg buffer
  	            offset = 0;
  	            mdatBytes = track.length;
  	        }
  	        else {
  	            // for fmp4 mdat box
  	            offset = 8; // size + type
  	            mdatBytes = 8 + track.length;
  	        }
  	        var lastSample = null;
  	        // Pop the lastSample and waiting for stash
  	        if (samples.length > 1) {
  	            lastSample = samples.pop();
  	            mdatBytes -= lastSample.length;
  	        }
  	        // Insert [stashed lastSample in the previous batch] to the front
  	        if (this._audioStashedLastSample != null) {
  	            var sample = this._audioStashedLastSample;
  	            this._audioStashedLastSample = null;
  	            samples.unshift(sample);
  	            mdatBytes += sample.length;
  	        }
  	        // Stash the lastSample of current batch, waiting for next batch
  	        if (lastSample != null) {
  	            this._audioStashedLastSample = lastSample;
  	        }
  	        var firstSampleOriginalDts = samples[0].dts - this._dtsBase;
  	        // calculate dtsCorrection
  	        if (this._audioNextDts) {
  	            dtsCorrection = firstSampleOriginalDts - this._audioNextDts;
  	        }
  	        else { // this._audioNextDts == undefined
  	            if (this._audioSegmentInfoList.isEmpty()) {
  	                dtsCorrection = 0;
  	                if (this._fillSilentAfterSeek && !this._videoSegmentInfoList.isEmpty()) {
  	                    if (this._audioMeta.originalCodec !== 'mp3') {
  	                        insertPrefixSilentFrame = true;
  	                    }
  	                }
  	            }
  	            else {
  	                var lastSample_1 = this._audioSegmentInfoList.getLastSampleBefore(firstSampleOriginalDts);
  	                if (lastSample_1 != null) {
  	                    var distance = (firstSampleOriginalDts - (lastSample_1.originalDts + lastSample_1.duration));
  	                    if (distance <= 3) {
  	                        distance = 0;
  	                    }
  	                    var expectedDts = lastSample_1.dts + lastSample_1.duration + distance;
  	                    dtsCorrection = firstSampleOriginalDts - expectedDts;
  	                }
  	                else { // lastSample == null, cannot found
  	                    dtsCorrection = 0;
  	                }
  	            }
  	        }
  	        if (insertPrefixSilentFrame) {
  	            // align audio segment beginDts to match with current video segment's beginDts
  	            var firstSampleDts = firstSampleOriginalDts - dtsCorrection;
  	            var videoSegment = this._videoSegmentInfoList.getLastSegmentBefore(firstSampleOriginalDts);
  	            if (videoSegment != null && videoSegment.beginDts < firstSampleDts) {
  	                var silentUnit = _aac_silent_js__WEBPACK_IMPORTED_MODULE_2__.default.getSilentFrame(this._audioMeta.originalCodec, this._audioMeta.channelCount);
  	                if (silentUnit) {
  	                    var dts = videoSegment.beginDts;
  	                    var silentFrameDuration = firstSampleDts - videoSegment.beginDts;
  	                    _utils_logger_js__WEBPACK_IMPORTED_MODULE_0__.default.v(this.TAG, "InsertPrefixSilentAudio: dts: " + dts + ", duration: " + silentFrameDuration);
  	                    samples.unshift({ unit: silentUnit, dts: dts, pts: dts });
  	                    mdatBytes += silentUnit.byteLength;
  	                } // silentUnit == null: Cannot generate, skip
  	            }
  	            else {
  	                insertPrefixSilentFrame = false;
  	            }
  	        }
  	        var mp4Samples = [];
  	        // Correct dts for each sample, and calculate sample duration. Then output to mp4Samples
  	        for (var i = 0; i < samples.length; i++) {
  	            var sample = samples[i];
  	            var unit = sample.unit;
  	            var originalDts = sample.dts - this._dtsBase;
  	            var dts = originalDts;
  	            var needFillSilentFrames = false;
  	            var silentFrames = null;
  	            var sampleDuration = 0;
  	            if (originalDts < -0.001) {
  	                continue; //pass the first sample with the invalid dts
  	            }
  	            if (this._audioMeta.codec !== 'mp3') {
  	                // for AAC codec, we need to keep dts increase based on refSampleDuration
  	                var curRefDts = originalDts;
  	                var maxAudioFramesDrift = 3;
  	                if (this._audioNextDts) {
  	                    curRefDts = this._audioNextDts;
  	                }
  	                dtsCorrection = originalDts - curRefDts;
  	                if (dtsCorrection <= -maxAudioFramesDrift * refSampleDuration) {
  	                    // If we're overlapping by more than maxAudioFramesDrift number of frame, drop this sample
  	                    _utils_logger_js__WEBPACK_IMPORTED_MODULE_0__.default.w(this.TAG, "Dropping 1 audio frame (originalDts: " + originalDts + " ms ,curRefDts: " + curRefDts + " ms)  due to dtsCorrection: " + dtsCorrection + " ms overlap.");
  	                    continue;
  	                }
  	                else if (dtsCorrection >= maxAudioFramesDrift * refSampleDuration && this._fillAudioTimestampGap && !_utils_browser_js__WEBPACK_IMPORTED_MODULE_3__.default.safari) {
  	                    // Silent frame generation, if large timestamp gap detected && config.fixAudioTimestampGap
  	                    needFillSilentFrames = true;
  	                    // We need to insert silent frames to fill timestamp gap
  	                    var frameCount = Math.floor(dtsCorrection / refSampleDuration);
  	                    _utils_logger_js__WEBPACK_IMPORTED_MODULE_0__.default.w(this.TAG, 'Large audio timestamp gap detected, may cause AV sync to drift. ' +
  	                        'Silent frames will be generated to avoid unsync.\n' +
  	                        ("originalDts: " + originalDts + " ms, curRefDts: " + curRefDts + " ms, ") +
  	                        ("dtsCorrection: " + Math.round(dtsCorrection) + " ms, generate: " + frameCount + " frames"));
  	                    dts = Math.floor(curRefDts);
  	                    sampleDuration = Math.floor(curRefDts + refSampleDuration) - dts;
  	                    var silentUnit = _aac_silent_js__WEBPACK_IMPORTED_MODULE_2__.default.getSilentFrame(this._audioMeta.originalCodec, this._audioMeta.channelCount);
  	                    if (silentUnit == null) {
  	                        _utils_logger_js__WEBPACK_IMPORTED_MODULE_0__.default.w(this.TAG, 'Unable to generate silent frame for ' +
  	                            (this._audioMeta.originalCodec + " with " + this._audioMeta.channelCount + " channels, repeat last frame"));
  	                        // Repeat last frame
  	                        silentUnit = unit;
  	                    }
  	                    silentFrames = [];
  	                    for (var j = 0; j < frameCount; j++) {
  	                        curRefDts = curRefDts + refSampleDuration;
  	                        var intDts = Math.floor(curRefDts); // change to integer
  	                        var intDuration = Math.floor(curRefDts + refSampleDuration) - intDts;
  	                        var frame = {
  	                            dts: intDts,
  	                            pts: intDts,
  	                            cts: 0,
  	                            unit: silentUnit,
  	                            size: silentUnit.byteLength,
  	                            duration: intDuration,
  	                            originalDts: originalDts,
  	                            flags: {
  	                                isLeading: 0,
  	                                dependsOn: 1,
  	                                isDependedOn: 0,
  	                                hasRedundancy: 0
  	                            }
  	                        };
  	                        silentFrames.push(frame);
  	                        mdatBytes += frame.size;
  	                    }
  	                    this._audioNextDts = curRefDts + refSampleDuration;
  	                }
  	                else {
  	                    dts = Math.floor(curRefDts);
  	                    sampleDuration = Math.floor(curRefDts + refSampleDuration) - dts;
  	                    this._audioNextDts = curRefDts + refSampleDuration;
  	                }
  	            }
  	            else {
  	                // keep the original dts calculate algorithm for mp3
  	                dts = originalDts - dtsCorrection;
  	                if (i !== samples.length - 1) {
  	                    var nextDts = samples[i + 1].dts - this._dtsBase - dtsCorrection;
  	                    sampleDuration = nextDts - dts;
  	                }
  	                else { // the last sample
  	                    if (lastSample != null) { // use stashed sample's dts to calculate sample duration
  	                        var nextDts = lastSample.dts - this._dtsBase - dtsCorrection;
  	                        sampleDuration = nextDts - dts;
  	                    }
  	                    else if (mp4Samples.length >= 1) { // use second last sample duration
  	                        sampleDuration = mp4Samples[mp4Samples.length - 1].duration;
  	                    }
  	                    else { // the only one sample, use reference sample duration
  	                        sampleDuration = Math.floor(refSampleDuration);
  	                    }
  	                }
  	                this._audioNextDts = dts + sampleDuration;
  	            }
  	            if (firstDts === -1) {
  	                firstDts = dts;
  	            }
  	            mp4Samples.push({
  	                dts: dts,
  	                pts: dts,
  	                cts: 0,
  	                unit: sample.unit,
  	                size: sample.unit.byteLength,
  	                duration: sampleDuration,
  	                originalDts: originalDts,
  	                flags: {
  	                    isLeading: 0,
  	                    dependsOn: 1,
  	                    isDependedOn: 0,
  	                    hasRedundancy: 0
  	                }
  	            });
  	            if (needFillSilentFrames) {
  	                // Silent frames should be inserted after wrong-duration frame
  	                mp4Samples.push.apply(mp4Samples, silentFrames);
  	            }
  	        }
  	        if (mp4Samples.length === 0) {
  	            //no samples need to remux
  	            track.samples = [];
  	            track.length = 0;
  	            return;
  	        }
  	        // allocate mdatbox
  	        if (mpegRawTrack) {
  	            // allocate for raw mpeg buffer
  	            mdatbox = new Uint8Array(mdatBytes);
  	        }
  	        else {
  	            // allocate for fmp4 mdat box
  	            mdatbox = new Uint8Array(mdatBytes);
  	            // size field
  	            mdatbox[0] = (mdatBytes >>> 24) & 0xFF;
  	            mdatbox[1] = (mdatBytes >>> 16) & 0xFF;
  	            mdatbox[2] = (mdatBytes >>> 8) & 0xFF;
  	            mdatbox[3] = (mdatBytes) & 0xFF;
  	            // type field (fourCC)
  	            mdatbox.set(_mp4_generator_js__WEBPACK_IMPORTED_MODULE_1__.default.types.mdat, 4);
  	        }
  	        // Write samples into mdatbox
  	        for (var i = 0; i < mp4Samples.length; i++) {
  	            var unit = mp4Samples[i].unit;
  	            mdatbox.set(unit, offset);
  	            offset += unit.byteLength;
  	        }
  	        var latest = mp4Samples[mp4Samples.length - 1];
  	        lastDts = latest.dts + latest.duration;
  	        //this._audioNextDts = lastDts;
  	        // fill media segment info & add to info list
  	        var info = new _core_media_segment_info_js__WEBPACK_IMPORTED_MODULE_4__.MediaSegmentInfo();
  	        info.beginDts = firstDts;
  	        info.endDts = lastDts;
  	        info.beginPts = firstDts;
  	        info.endPts = lastDts;
  	        info.originalBeginDts = mp4Samples[0].originalDts;
  	        info.originalEndDts = latest.originalDts + latest.duration;
  	        info.firstSample = new _core_media_segment_info_js__WEBPACK_IMPORTED_MODULE_4__.SampleInfo(mp4Samples[0].dts, mp4Samples[0].pts, mp4Samples[0].duration, mp4Samples[0].originalDts, false);
  	        info.lastSample = new _core_media_segment_info_js__WEBPACK_IMPORTED_MODULE_4__.SampleInfo(latest.dts, latest.pts, latest.duration, latest.originalDts, false);
  	        if (!this._isLive) {
  	            this._audioSegmentInfoList.append(info);
  	        }
  	        track.samples = mp4Samples;
  	        track.sequenceNumber++;
  	        var moofbox = null;
  	        if (mpegRawTrack) {
  	            // Generate empty buffer, because useless for raw mpeg
  	            moofbox = new Uint8Array();
  	        }
  	        else {
  	            // Generate moof for fmp4 segment
  	            moofbox = _mp4_generator_js__WEBPACK_IMPORTED_MODULE_1__.default.moof(track, firstDts);
  	        }
  	        track.samples = [];
  	        track.length = 0;
  	        var segment = {
  	            type: 'audio',
  	            data: this._mergeBoxes(moofbox, mdatbox).buffer,
  	            sampleCount: mp4Samples.length,
  	            info: info
  	        };
  	        if (mpegRawTrack && firstSegmentAfterSeek) {
  	            // For MPEG audio stream in MSE, if seeking occurred, before appending new buffer
  	            // We need explicitly set timestampOffset to the desired point in timeline for mpeg SourceBuffer.
  	            segment.timestampOffset = firstDts;
  	        }
  	        this._onMediaSegment('audio', segment);
  	    };
  	    MP4Remuxer.prototype._remuxVideo = function (videoTrack, force) {
  	        if (this._videoMeta == null) {
  	            return;
  	        }
  	        var track = videoTrack;
  	        var samples = track.samples;
  	        var dtsCorrection = undefined;
  	        var firstDts = -1, lastDts = -1;
  	        var firstPts = -1, lastPts = -1;
  	        if (!samples || samples.length === 0) {
  	            return;
  	        }
  	        if (samples.length === 1 && !force) {
  	            // If [sample count in current batch] === 1 && (force != true)
  	            // Ignore and keep in demuxer's queue
  	            return;
  	        } // else if (force === true) do remux
  	        var offset = 8;
  	        var mdatbox = null;
  	        var mdatBytes = 8 + videoTrack.length;
  	        var lastSample = null;
  	        // Pop the lastSample and waiting for stash
  	        if (samples.length > 1) {
  	            lastSample = samples.pop();
  	            mdatBytes -= lastSample.length;
  	        }
  	        // Insert [stashed lastSample in the previous batch] to the front
  	        if (this._videoStashedLastSample != null) {
  	            var sample = this._videoStashedLastSample;
  	            this._videoStashedLastSample = null;
  	            samples.unshift(sample);
  	            mdatBytes += sample.length;
  	        }
  	        // Stash the lastSample of current batch, waiting for next batch
  	        if (lastSample != null) {
  	            this._videoStashedLastSample = lastSample;
  	        }
  	        var firstSampleOriginalDts = samples[0].dts - this._dtsBase;
  	        // calculate dtsCorrection
  	        if (this._videoNextDts) {
  	            dtsCorrection = firstSampleOriginalDts - this._videoNextDts;
  	        }
  	        else { // this._videoNextDts == undefined
  	            if (this._videoSegmentInfoList.isEmpty()) {
  	                dtsCorrection = 0;
  	            }
  	            else {
  	                var lastSample_2 = this._videoSegmentInfoList.getLastSampleBefore(firstSampleOriginalDts);
  	                if (lastSample_2 != null) {
  	                    var distance = (firstSampleOriginalDts - (lastSample_2.originalDts + lastSample_2.duration));
  	                    if (distance <= 3) {
  	                        distance = 0;
  	                    }
  	                    var expectedDts = lastSample_2.dts + lastSample_2.duration + distance;
  	                    dtsCorrection = firstSampleOriginalDts - expectedDts;
  	                }
  	                else { // lastSample == null, cannot found
  	                    dtsCorrection = 0;
  	                }
  	            }
  	        }
  	        var info = new _core_media_segment_info_js__WEBPACK_IMPORTED_MODULE_4__.MediaSegmentInfo();
  	        var mp4Samples = [];
  	        // Correct dts for each sample, and calculate sample duration. Then output to mp4Samples
  	        for (var i = 0; i < samples.length; i++) {
  	            var sample = samples[i];
  	            var originalDts = sample.dts - this._dtsBase;
  	            var isKeyframe = sample.isKeyframe;
  	            var dts = originalDts - dtsCorrection;
  	            var cts = sample.cts;
  	            var pts = dts + cts;
  	            if (firstDts === -1) {
  	                firstDts = dts;
  	                firstPts = pts;
  	            }
  	            var sampleDuration = 0;
  	            if (i !== samples.length - 1) {
  	                var nextDts = samples[i + 1].dts - this._dtsBase - dtsCorrection;
  	                sampleDuration = nextDts - dts;
  	            }
  	            else { // the last sample
  	                if (lastSample != null) { // use stashed sample's dts to calculate sample duration
  	                    var nextDts = lastSample.dts - this._dtsBase - dtsCorrection;
  	                    sampleDuration = nextDts - dts;
  	                }
  	                else if (mp4Samples.length >= 1) { // use second last sample duration
  	                    sampleDuration = mp4Samples[mp4Samples.length - 1].duration;
  	                }
  	                else { // the only one sample, use reference sample duration
  	                    sampleDuration = Math.floor(this._videoMeta.refSampleDuration);
  	                }
  	            }
  	            if (isKeyframe) {
  	                var syncPoint = new _core_media_segment_info_js__WEBPACK_IMPORTED_MODULE_4__.SampleInfo(dts, pts, sampleDuration, sample.dts, true);
  	                syncPoint.fileposition = sample.fileposition;
  	                info.appendSyncPoint(syncPoint);
  	            }
  	            mp4Samples.push({
  	                dts: dts,
  	                pts: pts,
  	                cts: cts,
  	                units: sample.units,
  	                size: sample.length,
  	                isKeyframe: isKeyframe,
  	                duration: sampleDuration,
  	                originalDts: originalDts,
  	                flags: {
  	                    isLeading: 0,
  	                    dependsOn: isKeyframe ? 2 : 1,
  	                    isDependedOn: isKeyframe ? 1 : 0,
  	                    hasRedundancy: 0,
  	                    isNonSync: isKeyframe ? 0 : 1
  	                }
  	            });
  	        }
  	        // allocate mdatbox
  	        mdatbox = new Uint8Array(mdatBytes);
  	        mdatbox[0] = (mdatBytes >>> 24) & 0xFF;
  	        mdatbox[1] = (mdatBytes >>> 16) & 0xFF;
  	        mdatbox[2] = (mdatBytes >>> 8) & 0xFF;
  	        mdatbox[3] = (mdatBytes) & 0xFF;
  	        mdatbox.set(_mp4_generator_js__WEBPACK_IMPORTED_MODULE_1__.default.types.mdat, 4);
  	        // Write samples into mdatbox
  	        for (var i = 0; i < mp4Samples.length; i++) {
  	            var units = mp4Samples[i].units;
  	            while (units.length) {
  	                var unit = units.shift();
  	                var data = unit.data;
  	                mdatbox.set(data, offset);
  	                offset += data.byteLength;
  	            }
  	        }
  	        var latest = mp4Samples[mp4Samples.length - 1];
  	        lastDts = latest.dts + latest.duration;
  	        lastPts = latest.pts + latest.duration;
  	        this._videoNextDts = lastDts;
  	        // fill media segment info & add to info list
  	        info.beginDts = firstDts;
  	        info.endDts = lastDts;
  	        info.beginPts = firstPts;
  	        info.endPts = lastPts;
  	        info.originalBeginDts = mp4Samples[0].originalDts;
  	        info.originalEndDts = latest.originalDts + latest.duration;
  	        info.firstSample = new _core_media_segment_info_js__WEBPACK_IMPORTED_MODULE_4__.SampleInfo(mp4Samples[0].dts, mp4Samples[0].pts, mp4Samples[0].duration, mp4Samples[0].originalDts, mp4Samples[0].isKeyframe);
  	        info.lastSample = new _core_media_segment_info_js__WEBPACK_IMPORTED_MODULE_4__.SampleInfo(latest.dts, latest.pts, latest.duration, latest.originalDts, latest.isKeyframe);
  	        if (!this._isLive) {
  	            this._videoSegmentInfoList.append(info);
  	        }
  	        track.samples = mp4Samples;
  	        track.sequenceNumber++;
  	        // workaround for chrome < 50: force first sample as a random access point
  	        // see https://bugs.chromium.org/p/chromium/issues/detail?id=229412
  	        if (this._forceFirstIDR) {
  	            var flags = mp4Samples[0].flags;
  	            flags.dependsOn = 2;
  	            flags.isNonSync = 0;
  	        }
  	        var moofbox = _mp4_generator_js__WEBPACK_IMPORTED_MODULE_1__.default.moof(track, firstDts);
  	        track.samples = [];
  	        track.length = 0;
  	        this._onMediaSegment('video', {
  	            type: 'video',
  	            data: this._mergeBoxes(moofbox, mdatbox).buffer,
  	            sampleCount: mp4Samples.length,
  	            info: info
  	        });
  	    };
  	    MP4Remuxer.prototype._mergeBoxes = function (moof, mdat) {
  	        var result = new Uint8Array(moof.byteLength + mdat.byteLength);
  	        result.set(moof, 0);
  	        result.set(mdat, moof.byteLength);
  	        return result;
  	    };
  	    return MP4Remuxer;
  	}());
  	/* harmony default export */ __webpack_exports__["default"] = (MP4Remuxer);


  	/***/ }),

  	/***/ "./src/utils/browser.js":
  	/*!******************************!*\
  	  !*** ./src/utils/browser.js ***!
  	  \******************************/
  	/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {
  	__webpack_require__.r(__webpack_exports__);
  	/*
  	 * Copyright (C) 2016 Bilibili. All Rights Reserved.
  	 *
  	 * @author zheng qian <xqq@xqq.im>
  	 *
  	 * Licensed under the Apache License, Version 2.0 (the "License");
  	 * you may not use this file except in compliance with the License.
  	 * You may obtain a copy of the License at
  	 *
  	 *     http://www.apache.org/licenses/LICENSE-2.0
  	 *
  	 * Unless required by applicable law or agreed to in writing, software
  	 * distributed under the License is distributed on an "AS IS" BASIS,
  	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  	 * See the License for the specific language governing permissions and
  	 * limitations under the License.
  	 */
  	var Browser = {};
  	function detect() {
  	    // modified from jquery-browser-plugin
  	    var ua = self.navigator.userAgent.toLowerCase();
  	    var match = /(edge)\/([\w.]+)/.exec(ua) ||
  	        /(opr)[\/]([\w.]+)/.exec(ua) ||
  	        /(chrome)[ \/]([\w.]+)/.exec(ua) ||
  	        /(iemobile)[\/]([\w.]+)/.exec(ua) ||
  	        /(version)(applewebkit)[ \/]([\w.]+).*(safari)[ \/]([\w.]+)/.exec(ua) ||
  	        /(webkit)[ \/]([\w.]+).*(version)[ \/]([\w.]+).*(safari)[ \/]([\w.]+)/.exec(ua) ||
  	        /(webkit)[ \/]([\w.]+)/.exec(ua) ||
  	        /(opera)(?:.*version|)[ \/]([\w.]+)/.exec(ua) ||
  	        /(msie) ([\w.]+)/.exec(ua) ||
  	        ua.indexOf('trident') >= 0 && /(rv)(?::| )([\w.]+)/.exec(ua) ||
  	        ua.indexOf('compatible') < 0 && /(firefox)[ \/]([\w.]+)/.exec(ua) ||
  	        [];
  	    var platform_match = /(ipad)/.exec(ua) ||
  	        /(ipod)/.exec(ua) ||
  	        /(windows phone)/.exec(ua) ||
  	        /(iphone)/.exec(ua) ||
  	        /(kindle)/.exec(ua) ||
  	        /(android)/.exec(ua) ||
  	        /(windows)/.exec(ua) ||
  	        /(mac)/.exec(ua) ||
  	        /(linux)/.exec(ua) ||
  	        /(cros)/.exec(ua) ||
  	        [];
  	    var matched = {
  	        browser: match[5] || match[3] || match[1] || '',
  	        version: match[2] || match[4] || '0',
  	        majorVersion: match[4] || match[2] || '0',
  	        platform: platform_match[0] || ''
  	    };
  	    var browser = {};
  	    if (matched.browser) {
  	        browser[matched.browser] = true;
  	        var versionArray = matched.majorVersion.split('.');
  	        browser.version = {
  	            major: parseInt(matched.majorVersion, 10),
  	            string: matched.version
  	        };
  	        if (versionArray.length > 1) {
  	            browser.version.minor = parseInt(versionArray[1], 10);
  	        }
  	        if (versionArray.length > 2) {
  	            browser.version.build = parseInt(versionArray[2], 10);
  	        }
  	    }
  	    if (matched.platform) {
  	        browser[matched.platform] = true;
  	    }
  	    if (browser.chrome || browser.opr || browser.safari) {
  	        browser.webkit = true;
  	    }
  	    // MSIE. IE11 has 'rv' identifer
  	    if (browser.rv || browser.iemobile) {
  	        if (browser.rv) {
  	            delete browser.rv;
  	        }
  	        var msie = 'msie';
  	        matched.browser = msie;
  	        browser[msie] = true;
  	    }
  	    // Microsoft Edge
  	    if (browser.edge) {
  	        delete browser.edge;
  	        var msedge = 'msedge';
  	        matched.browser = msedge;
  	        browser[msedge] = true;
  	    }
  	    // Opera 15+
  	    if (browser.opr) {
  	        var opera = 'opera';
  	        matched.browser = opera;
  	        browser[opera] = true;
  	    }
  	    // Stock android browsers are marked as Safari
  	    if (browser.safari && browser.android) {
  	        var android = 'android';
  	        matched.browser = android;
  	        browser[android] = true;
  	    }
  	    browser.name = matched.browser;
  	    browser.platform = matched.platform;
  	    for (var key in Browser) {
  	        if (Browser.hasOwnProperty(key)) {
  	            delete Browser[key];
  	        }
  	    }
  	    Object.assign(Browser, browser);
  	}
  	detect();
  	/* harmony default export */ __webpack_exports__["default"] = (Browser);


  	/***/ }),

  	/***/ "./src/utils/exception.js":
  	/*!********************************!*\
  	  !*** ./src/utils/exception.js ***!
  	  \********************************/
  	/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {
  	__webpack_require__.r(__webpack_exports__);
  	/* harmony export */ __webpack_require__.d(__webpack_exports__, {
  	/* harmony export */   "RuntimeException": function() { return /* binding */ RuntimeException; },
  	/* harmony export */   "IllegalStateException": function() { return /* binding */ IllegalStateException; },
  	/* harmony export */   "InvalidArgumentException": function() { return /* binding */ InvalidArgumentException; },
  	/* harmony export */   "NotImplementedException": function() { return /* binding */ NotImplementedException; }
  	/* harmony export */ });
  	/*
  	 * Copyright (C) 2016 Bilibili. All Rights Reserved.
  	 *
  	 * @author zheng qian <xqq@xqq.im>
  	 *
  	 * Licensed under the Apache License, Version 2.0 (the "License");
  	 * you may not use this file except in compliance with the License.
  	 * You may obtain a copy of the License at
  	 *
  	 *     http://www.apache.org/licenses/LICENSE-2.0
  	 *
  	 * Unless required by applicable law or agreed to in writing, software
  	 * distributed under the License is distributed on an "AS IS" BASIS,
  	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  	 * See the License for the specific language governing permissions and
  	 * limitations under the License.
  	 */
  	var __extends = (function () {
  	    var extendStatics = function (d, b) {
  	        extendStatics = Object.setPrototypeOf ||
  	            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
  	            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
  	        return extendStatics(d, b);
  	    };
  	    return function (d, b) {
  	        if (typeof b !== "function" && b !== null)
  	            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
  	        extendStatics(d, b);
  	        function __() { this.constructor = d; }
  	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  	    };
  	})();
  	var RuntimeException = /** @class */ (function () {
  	    function RuntimeException(message) {
  	        this._message = message;
  	    }
  	    Object.defineProperty(RuntimeException.prototype, "name", {
  	        get: function () {
  	            return 'RuntimeException';
  	        },
  	        enumerable: false,
  	        configurable: true
  	    });
  	    Object.defineProperty(RuntimeException.prototype, "message", {
  	        get: function () {
  	            return this._message;
  	        },
  	        enumerable: false,
  	        configurable: true
  	    });
  	    RuntimeException.prototype.toString = function () {
  	        return this.name + ': ' + this.message;
  	    };
  	    return RuntimeException;
  	}());

  	var IllegalStateException = /** @class */ (function (_super) {
  	    __extends(IllegalStateException, _super);
  	    function IllegalStateException(message) {
  	        return _super.call(this, message) || this;
  	    }
  	    Object.defineProperty(IllegalStateException.prototype, "name", {
  	        get: function () {
  	            return 'IllegalStateException';
  	        },
  	        enumerable: false,
  	        configurable: true
  	    });
  	    return IllegalStateException;
  	}(RuntimeException));

  	var InvalidArgumentException = /** @class */ (function (_super) {
  	    __extends(InvalidArgumentException, _super);
  	    function InvalidArgumentException(message) {
  	        return _super.call(this, message) || this;
  	    }
  	    Object.defineProperty(InvalidArgumentException.prototype, "name", {
  	        get: function () {
  	            return 'InvalidArgumentException';
  	        },
  	        enumerable: false,
  	        configurable: true
  	    });
  	    return InvalidArgumentException;
  	}(RuntimeException));

  	var NotImplementedException = /** @class */ (function (_super) {
  	    __extends(NotImplementedException, _super);
  	    function NotImplementedException(message) {
  	        return _super.call(this, message) || this;
  	    }
  	    Object.defineProperty(NotImplementedException.prototype, "name", {
  	        get: function () {
  	            return 'NotImplementedException';
  	        },
  	        enumerable: false,
  	        configurable: true
  	    });
  	    return NotImplementedException;
  	}(RuntimeException));



  	/***/ }),

  	/***/ "./src/utils/logger.js":
  	/*!*****************************!*\
  	  !*** ./src/utils/logger.js ***!
  	  \*****************************/
  	/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {
  	__webpack_require__.r(__webpack_exports__);
  	/* harmony import */ var events__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! events */ "./node_modules/events/events.js");
  	/* harmony import */ var events__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(events__WEBPACK_IMPORTED_MODULE_0__);
  	/*
  	 * Copyright (C) 2016 Bilibili. All Rights Reserved.
  	 *
  	 * @author zheng qian <xqq@xqq.im>
  	 *
  	 * Licensed under the Apache License, Version 2.0 (the "License");
  	 * you may not use this file except in compliance with the License.
  	 * You may obtain a copy of the License at
  	 *
  	 *     http://www.apache.org/licenses/LICENSE-2.0
  	 *
  	 * Unless required by applicable law or agreed to in writing, software
  	 * distributed under the License is distributed on an "AS IS" BASIS,
  	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  	 * See the License for the specific language governing permissions and
  	 * limitations under the License.
  	 */

  	var Log = /** @class */ (function () {
  	    function Log() {
  	    }
  	    Log.e = function (tag, msg) {
  	        if (!tag || Log.FORCE_GLOBAL_TAG)
  	            tag = Log.GLOBAL_TAG;
  	        var str = "[" + tag + "] > " + msg;
  	        if (Log.ENABLE_CALLBACK) {
  	            Log.emitter.emit('log', 'error', str);
  	        }
  	        if (!Log.ENABLE_ERROR) {
  	            return;
  	        }
  	        if (console.error) {
  	            console.error(str);
  	        }
  	        else if (console.warn) {
  	            console.warn(str);
  	        }
  	        else {
  	            console.log(str);
  	        }
  	    };
  	    Log.i = function (tag, msg) {
  	        if (!tag || Log.FORCE_GLOBAL_TAG)
  	            tag = Log.GLOBAL_TAG;
  	        var str = "[" + tag + "] > " + msg;
  	        if (Log.ENABLE_CALLBACK) {
  	            Log.emitter.emit('log', 'info', str);
  	        }
  	        if (!Log.ENABLE_INFO) {
  	            return;
  	        }
  	        if (console.info) {
  	            console.info(str);
  	        }
  	        else {
  	            console.log(str);
  	        }
  	    };
  	    Log.w = function (tag, msg) {
  	        if (!tag || Log.FORCE_GLOBAL_TAG)
  	            tag = Log.GLOBAL_TAG;
  	        var str = "[" + tag + "] > " + msg;
  	        if (Log.ENABLE_CALLBACK) {
  	            Log.emitter.emit('log', 'warn', str);
  	        }
  	        if (!Log.ENABLE_WARN) {
  	            return;
  	        }
  	        if (console.warn) {
  	            console.warn(str);
  	        }
  	        else {
  	            console.log(str);
  	        }
  	    };
  	    Log.d = function (tag, msg) {
  	        if (!tag || Log.FORCE_GLOBAL_TAG)
  	            tag = Log.GLOBAL_TAG;
  	        var str = "[" + tag + "] > " + msg;
  	        if (Log.ENABLE_CALLBACK) {
  	            Log.emitter.emit('log', 'debug', str);
  	        }
  	        if (!Log.ENABLE_DEBUG) {
  	            return;
  	        }
  	        if (console.debug) {
  	            console.debug(str);
  	        }
  	        else {
  	            console.log(str);
  	        }
  	    };
  	    Log.v = function (tag, msg) {
  	        if (!tag || Log.FORCE_GLOBAL_TAG)
  	            tag = Log.GLOBAL_TAG;
  	        var str = "[" + tag + "] > " + msg;
  	        if (Log.ENABLE_CALLBACK) {
  	            Log.emitter.emit('log', 'verbose', str);
  	        }
  	        if (!Log.ENABLE_VERBOSE) {
  	            return;
  	        }
  	        console.log(str);
  	    };
  	    return Log;
  	}());
  	Log.GLOBAL_TAG = 'flv.js';
  	Log.FORCE_GLOBAL_TAG = false;
  	Log.ENABLE_ERROR = true;
  	Log.ENABLE_INFO = true;
  	Log.ENABLE_WARN = true;
  	Log.ENABLE_DEBUG = true;
  	Log.ENABLE_VERBOSE = true;
  	Log.ENABLE_CALLBACK = false;
  	Log.emitter = new (events__WEBPACK_IMPORTED_MODULE_0___default())();
  	/* harmony default export */ __webpack_exports__["default"] = (Log);


  	/***/ }),

  	/***/ "./src/utils/logging-control.js":
  	/*!**************************************!*\
  	  !*** ./src/utils/logging-control.js ***!
  	  \**************************************/
  	/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {
  	__webpack_require__.r(__webpack_exports__);
  	/* harmony import */ var events__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! events */ "./node_modules/events/events.js");
  	/* harmony import */ var events__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(events__WEBPACK_IMPORTED_MODULE_0__);
  	/* harmony import */ var _logger_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./logger.js */ "./src/utils/logger.js");
  	/*
  	 * Copyright (C) 2016 Bilibili. All Rights Reserved.
  	 *
  	 * @author zheng qian <xqq@xqq.im>
  	 *
  	 * Licensed under the Apache License, Version 2.0 (the "License");
  	 * you may not use this file except in compliance with the License.
  	 * You may obtain a copy of the License at
  	 *
  	 *     http://www.apache.org/licenses/LICENSE-2.0
  	 *
  	 * Unless required by applicable law or agreed to in writing, software
  	 * distributed under the License is distributed on an "AS IS" BASIS,
  	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  	 * See the License for the specific language governing permissions and
  	 * limitations under the License.
  	 */


  	var LoggingControl = /** @class */ (function () {
  	    function LoggingControl() {
  	    }
  	    Object.defineProperty(LoggingControl, "forceGlobalTag", {
  	        get: function () {
  	            return _logger_js__WEBPACK_IMPORTED_MODULE_1__.default.FORCE_GLOBAL_TAG;
  	        },
  	        set: function (enable) {
  	            _logger_js__WEBPACK_IMPORTED_MODULE_1__.default.FORCE_GLOBAL_TAG = enable;
  	            LoggingControl._notifyChange();
  	        },
  	        enumerable: false,
  	        configurable: true
  	    });
  	    Object.defineProperty(LoggingControl, "globalTag", {
  	        get: function () {
  	            return _logger_js__WEBPACK_IMPORTED_MODULE_1__.default.GLOBAL_TAG;
  	        },
  	        set: function (tag) {
  	            _logger_js__WEBPACK_IMPORTED_MODULE_1__.default.GLOBAL_TAG = tag;
  	            LoggingControl._notifyChange();
  	        },
  	        enumerable: false,
  	        configurable: true
  	    });
  	    Object.defineProperty(LoggingControl, "enableAll", {
  	        get: function () {
  	            return _logger_js__WEBPACK_IMPORTED_MODULE_1__.default.ENABLE_VERBOSE
  	                && _logger_js__WEBPACK_IMPORTED_MODULE_1__.default.ENABLE_DEBUG
  	                && _logger_js__WEBPACK_IMPORTED_MODULE_1__.default.ENABLE_INFO
  	                && _logger_js__WEBPACK_IMPORTED_MODULE_1__.default.ENABLE_WARN
  	                && _logger_js__WEBPACK_IMPORTED_MODULE_1__.default.ENABLE_ERROR;
  	        },
  	        set: function (enable) {
  	            _logger_js__WEBPACK_IMPORTED_MODULE_1__.default.ENABLE_VERBOSE = enable;
  	            _logger_js__WEBPACK_IMPORTED_MODULE_1__.default.ENABLE_DEBUG = enable;
  	            _logger_js__WEBPACK_IMPORTED_MODULE_1__.default.ENABLE_INFO = enable;
  	            _logger_js__WEBPACK_IMPORTED_MODULE_1__.default.ENABLE_WARN = enable;
  	            _logger_js__WEBPACK_IMPORTED_MODULE_1__.default.ENABLE_ERROR = enable;
  	            LoggingControl._notifyChange();
  	        },
  	        enumerable: false,
  	        configurable: true
  	    });
  	    Object.defineProperty(LoggingControl, "enableDebug", {
  	        get: function () {
  	            return _logger_js__WEBPACK_IMPORTED_MODULE_1__.default.ENABLE_DEBUG;
  	        },
  	        set: function (enable) {
  	            _logger_js__WEBPACK_IMPORTED_MODULE_1__.default.ENABLE_DEBUG = enable;
  	            LoggingControl._notifyChange();
  	        },
  	        enumerable: false,
  	        configurable: true
  	    });
  	    Object.defineProperty(LoggingControl, "enableVerbose", {
  	        get: function () {
  	            return _logger_js__WEBPACK_IMPORTED_MODULE_1__.default.ENABLE_VERBOSE;
  	        },
  	        set: function (enable) {
  	            _logger_js__WEBPACK_IMPORTED_MODULE_1__.default.ENABLE_VERBOSE = enable;
  	            LoggingControl._notifyChange();
  	        },
  	        enumerable: false,
  	        configurable: true
  	    });
  	    Object.defineProperty(LoggingControl, "enableInfo", {
  	        get: function () {
  	            return _logger_js__WEBPACK_IMPORTED_MODULE_1__.default.ENABLE_INFO;
  	        },
  	        set: function (enable) {
  	            _logger_js__WEBPACK_IMPORTED_MODULE_1__.default.ENABLE_INFO = enable;
  	            LoggingControl._notifyChange();
  	        },
  	        enumerable: false,
  	        configurable: true
  	    });
  	    Object.defineProperty(LoggingControl, "enableWarn", {
  	        get: function () {
  	            return _logger_js__WEBPACK_IMPORTED_MODULE_1__.default.ENABLE_WARN;
  	        },
  	        set: function (enable) {
  	            _logger_js__WEBPACK_IMPORTED_MODULE_1__.default.ENABLE_WARN = enable;
  	            LoggingControl._notifyChange();
  	        },
  	        enumerable: false,
  	        configurable: true
  	    });
  	    Object.defineProperty(LoggingControl, "enableError", {
  	        get: function () {
  	            return _logger_js__WEBPACK_IMPORTED_MODULE_1__.default.ENABLE_ERROR;
  	        },
  	        set: function (enable) {
  	            _logger_js__WEBPACK_IMPORTED_MODULE_1__.default.ENABLE_ERROR = enable;
  	            LoggingControl._notifyChange();
  	        },
  	        enumerable: false,
  	        configurable: true
  	    });
  	    LoggingControl.getConfig = function () {
  	        return {
  	            globalTag: _logger_js__WEBPACK_IMPORTED_MODULE_1__.default.GLOBAL_TAG,
  	            forceGlobalTag: _logger_js__WEBPACK_IMPORTED_MODULE_1__.default.FORCE_GLOBAL_TAG,
  	            enableVerbose: _logger_js__WEBPACK_IMPORTED_MODULE_1__.default.ENABLE_VERBOSE,
  	            enableDebug: _logger_js__WEBPACK_IMPORTED_MODULE_1__.default.ENABLE_DEBUG,
  	            enableInfo: _logger_js__WEBPACK_IMPORTED_MODULE_1__.default.ENABLE_INFO,
  	            enableWarn: _logger_js__WEBPACK_IMPORTED_MODULE_1__.default.ENABLE_WARN,
  	            enableError: _logger_js__WEBPACK_IMPORTED_MODULE_1__.default.ENABLE_ERROR,
  	            enableCallback: _logger_js__WEBPACK_IMPORTED_MODULE_1__.default.ENABLE_CALLBACK
  	        };
  	    };
  	    LoggingControl.applyConfig = function (config) {
  	        _logger_js__WEBPACK_IMPORTED_MODULE_1__.default.GLOBAL_TAG = config.globalTag;
  	        _logger_js__WEBPACK_IMPORTED_MODULE_1__.default.FORCE_GLOBAL_TAG = config.forceGlobalTag;
  	        _logger_js__WEBPACK_IMPORTED_MODULE_1__.default.ENABLE_VERBOSE = config.enableVerbose;
  	        _logger_js__WEBPACK_IMPORTED_MODULE_1__.default.ENABLE_DEBUG = config.enableDebug;
  	        _logger_js__WEBPACK_IMPORTED_MODULE_1__.default.ENABLE_INFO = config.enableInfo;
  	        _logger_js__WEBPACK_IMPORTED_MODULE_1__.default.ENABLE_WARN = config.enableWarn;
  	        _logger_js__WEBPACK_IMPORTED_MODULE_1__.default.ENABLE_ERROR = config.enableError;
  	        _logger_js__WEBPACK_IMPORTED_MODULE_1__.default.ENABLE_CALLBACK = config.enableCallback;
  	    };
  	    LoggingControl._notifyChange = function () {
  	        var emitter = LoggingControl.emitter;
  	        if (emitter.listenerCount('change') > 0) {
  	            var config = LoggingControl.getConfig();
  	            emitter.emit('change', config);
  	        }
  	    };
  	    LoggingControl.registerListener = function (listener) {
  	        LoggingControl.emitter.addListener('change', listener);
  	    };
  	    LoggingControl.removeListener = function (listener) {
  	        LoggingControl.emitter.removeListener('change', listener);
  	    };
  	    LoggingControl.addLogListener = function (listener) {
  	        _logger_js__WEBPACK_IMPORTED_MODULE_1__.default.emitter.addListener('log', listener);
  	        if (_logger_js__WEBPACK_IMPORTED_MODULE_1__.default.emitter.listenerCount('log') > 0) {
  	            _logger_js__WEBPACK_IMPORTED_MODULE_1__.default.ENABLE_CALLBACK = true;
  	            LoggingControl._notifyChange();
  	        }
  	    };
  	    LoggingControl.removeLogListener = function (listener) {
  	        _logger_js__WEBPACK_IMPORTED_MODULE_1__.default.emitter.removeListener('log', listener);
  	        if (_logger_js__WEBPACK_IMPORTED_MODULE_1__.default.emitter.listenerCount('log') === 0) {
  	            _logger_js__WEBPACK_IMPORTED_MODULE_1__.default.ENABLE_CALLBACK = false;
  	            LoggingControl._notifyChange();
  	        }
  	    };
  	    return LoggingControl;
  	}());
  	LoggingControl.emitter = new (events__WEBPACK_IMPORTED_MODULE_0___default())();
  	/* harmony default export */ __webpack_exports__["default"] = (LoggingControl);


  	/***/ }),

  	/***/ "./src/utils/polyfill.js":
  	/*!*******************************!*\
  	  !*** ./src/utils/polyfill.js ***!
  	  \*******************************/
  	/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {
  	__webpack_require__.r(__webpack_exports__);
  	/*
  	 * Copyright (C) 2016 Bilibili. All Rights Reserved.
  	 *
  	 * @author zheng qian <xqq@xqq.im>
  	 *
  	 * Licensed under the Apache License, Version 2.0 (the "License");
  	 * you may not use this file except in compliance with the License.
  	 * You may obtain a copy of the License at
  	 *
  	 *     http://www.apache.org/licenses/LICENSE-2.0
  	 *
  	 * Unless required by applicable law or agreed to in writing, software
  	 * distributed under the License is distributed on an "AS IS" BASIS,
  	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  	 * See the License for the specific language governing permissions and
  	 * limitations under the License.
  	 */
  	var Polyfill = /** @class */ (function () {
  	    function Polyfill() {
  	    }
  	    Polyfill.install = function () {
  	        // ES6 Object.setPrototypeOf
  	        Object.setPrototypeOf = Object.setPrototypeOf || function (obj, proto) {
  	            obj.__proto__ = proto;
  	            return obj;
  	        };
  	        // ES6 Object.assign
  	        Object.assign = Object.assign || function (target) {
  	            if (target === undefined || target === null) {
  	                throw new TypeError('Cannot convert undefined or null to object');
  	            }
  	            var output = Object(target);
  	            for (var i = 1; i < arguments.length; i++) {
  	                var source = arguments[i];
  	                if (source !== undefined && source !== null) {
  	                    for (var key in source) {
  	                        if (source.hasOwnProperty(key)) {
  	                            output[key] = source[key];
  	                        }
  	                    }
  	                }
  	            }
  	            return output;
  	        };
  	        // ES6 Promise (missing support in IE11)
  	        if (typeof self.Promise !== 'function') {
  	            __webpack_require__(/*! es6-promise */ "./node_modules/es6-promise/dist/es6-promise.js").polyfill();
  	        }
  	    };
  	    return Polyfill;
  	}());
  	Polyfill.install();
  	/* harmony default export */ __webpack_exports__["default"] = (Polyfill);


  	/***/ }),

  	/***/ "./src/utils/utf8-conv.js":
  	/*!********************************!*\
  	  !*** ./src/utils/utf8-conv.js ***!
  	  \********************************/
  	/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {
  	__webpack_require__.r(__webpack_exports__);
  	/*
  	 * Copyright (C) 2016 Bilibili. All Rights Reserved.
  	 *
  	 * This file is derived from C++ project libWinTF8 (https://github.com/m13253/libWinTF8)
  	 * @author zheng qian <xqq@xqq.im>
  	 *
  	 * Licensed under the Apache License, Version 2.0 (the "License");
  	 * you may not use this file except in compliance with the License.
  	 * You may obtain a copy of the License at
  	 *
  	 *     http://www.apache.org/licenses/LICENSE-2.0
  	 *
  	 * Unless required by applicable law or agreed to in writing, software
  	 * distributed under the License is distributed on an "AS IS" BASIS,
  	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  	 * See the License for the specific language governing permissions and
  	 * limitations under the License.
  	 */
  	function checkContinuation(uint8array, start, checkLength) {
  	    var array = uint8array;
  	    if (start + checkLength < array.length) {
  	        while (checkLength--) {
  	            if ((array[++start] & 0xC0) !== 0x80)
  	                return false;
  	        }
  	        return true;
  	    }
  	    else {
  	        return false;
  	    }
  	}
  	function decodeUTF8(uint8array) {
  	    var out = [];
  	    var input = uint8array;
  	    var i = 0;
  	    var length = uint8array.length;
  	    while (i < length) {
  	        if (input[i] < 0x80) {
  	            out.push(String.fromCharCode(input[i]));
  	            ++i;
  	            continue;
  	        }
  	        else if (input[i] < 0xC0) ;
  	        else if (input[i] < 0xE0) {
  	            if (checkContinuation(input, i, 1)) {
  	                var ucs4 = (input[i] & 0x1F) << 6 | (input[i + 1] & 0x3F);
  	                if (ucs4 >= 0x80) {
  	                    out.push(String.fromCharCode(ucs4 & 0xFFFF));
  	                    i += 2;
  	                    continue;
  	                }
  	            }
  	        }
  	        else if (input[i] < 0xF0) {
  	            if (checkContinuation(input, i, 2)) {
  	                var ucs4 = (input[i] & 0xF) << 12 | (input[i + 1] & 0x3F) << 6 | input[i + 2] & 0x3F;
  	                if (ucs4 >= 0x800 && (ucs4 & 0xF800) !== 0xD800) {
  	                    out.push(String.fromCharCode(ucs4 & 0xFFFF));
  	                    i += 3;
  	                    continue;
  	                }
  	            }
  	        }
  	        else if (input[i] < 0xF8) {
  	            if (checkContinuation(input, i, 3)) {
  	                var ucs4 = (input[i] & 0x7) << 18 | (input[i + 1] & 0x3F) << 12
  	                    | (input[i + 2] & 0x3F) << 6 | (input[i + 3] & 0x3F);
  	                if (ucs4 > 0x10000 && ucs4 < 0x110000) {
  	                    ucs4 -= 0x10000;
  	                    out.push(String.fromCharCode((ucs4 >>> 10) | 0xD800));
  	                    out.push(String.fromCharCode((ucs4 & 0x3FF) | 0xDC00));
  	                    i += 4;
  	                    continue;
  	                }
  	            }
  	        }
  	        out.push(String.fromCharCode(0xFFFD));
  	        ++i;
  	    }
  	    return out.join('');
  	}
  	/* harmony default export */ __webpack_exports__["default"] = (decodeUTF8);


  	/***/ })

  	/******/ 	});
  	/************************************************************************/
  	/******/ 	// The module cache
  	/******/ 	var __webpack_module_cache__ = {};
  	/******/ 	
  	/******/ 	// The require function
  	/******/ 	function __webpack_require__(moduleId) {
  	/******/ 		// Check if module is in cache
  	/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
  	/******/ 		if (cachedModule !== undefined) {
  	/******/ 			return cachedModule.exports;
  	/******/ 		}
  	/******/ 		// Create a new module (and put it into the cache)
  	/******/ 		var module = __webpack_module_cache__[moduleId] = {
  	/******/ 			// no module.id needed
  	/******/ 			// no module.loaded needed
  	/******/ 			exports: {}
  	/******/ 		};
  	/******/ 	
  	/******/ 		// Execute the module function
  	/******/ 		__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);
  	/******/ 	
  	/******/ 		// Return the exports of the module
  	/******/ 		return module.exports;
  	/******/ 	}
  	/******/ 	
  	/******/ 	// expose the modules object (__webpack_modules__)
  	/******/ 	__webpack_require__.m = __webpack_modules__;
  	/******/ 	
  	/************************************************************************/
  	/******/ 	/* webpack/runtime/compat get default export */
  	/******/ 	!function() {
  	/******/ 		// getDefaultExport function for compatibility with non-harmony modules
  	/******/ 		__webpack_require__.n = function(module) {
  	/******/ 			var getter = module && module.__esModule ?
  	/******/ 				function() { return module['default']; } :
  	/******/ 				function() { return module; };
  	/******/ 			__webpack_require__.d(getter, { a: getter });
  	/******/ 			return getter;
  	/******/ 		};
  	/******/ 	}();
  	/******/ 	
  	/******/ 	/* webpack/runtime/define property getters */
  	/******/ 	!function() {
  	/******/ 		// define getter functions for harmony exports
  	/******/ 		__webpack_require__.d = function(exports, definition) {
  	/******/ 			for(var key in definition) {
  	/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
  	/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
  	/******/ 				}
  	/******/ 			}
  	/******/ 		};
  	/******/ 	}();
  	/******/ 	
  	/******/ 	/* webpack/runtime/global */
  	/******/ 	!function() {
  	/******/ 		__webpack_require__.g = (function() {
  	/******/ 			if (typeof globalThis === 'object') return globalThis;
  	/******/ 			try {
  	/******/ 				return this || new Function('return this')();
  	/******/ 			} catch (e) {
  	/******/ 				if (typeof window === 'object') return window;
  	/******/ 			}
  	/******/ 		})();
  	/******/ 	}();
  	/******/ 	
  	/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
  	/******/ 	!function() {
  	/******/ 		__webpack_require__.o = function(obj, prop) { return Object.prototype.hasOwnProperty.call(obj, prop); };
  	/******/ 	}();
  	/******/ 	
  	/******/ 	/* webpack/runtime/make namespace object */
  	/******/ 	!function() {
  	/******/ 		// define __esModule on exports
  	/******/ 		__webpack_require__.r = function(exports) {
  	/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
  	/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
  	/******/ 			}
  	/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
  	/******/ 		};
  	/******/ 	}();
  	/******/ 	
  	/************************************************************************/
  	/******/ 	
  	/******/ 	// module factories are used so entry inlining is disabled
  	/******/ 	// startup
  	/******/ 	// Load entry module and return exports
  	/******/ 	var __webpack_exports__ = __webpack_require__("./src/index.js");
  	/******/ 	
  	/******/ 	return __webpack_exports__;
  	/******/ })()
  	;
  	});
  	
  } (flv$1));

  var flvExports = flv$1.exports;
  var flv = /*@__PURE__*/getDefaultExportFromCjs(flvExports);

  /*!
   * @kurkle/color v0.3.2
   * https://github.com/kurkle/color#readme
   * (c) 2023 Jukka Kurkela
   * Released under the MIT License
   */
  function round(v) {
    return v + 0.5 | 0;
  }
  const lim = (v, l, h) => Math.max(Math.min(v, h), l);
  function p2b(v) {
    return lim(round(v * 2.55), 0, 255);
  }
  function n2b(v) {
    return lim(round(v * 255), 0, 255);
  }
  function b2n(v) {
    return lim(round(v / 2.55) / 100, 0, 1);
  }
  function n2p(v) {
    return lim(round(v * 100), 0, 100);
  }

  const map$1 = {0: 0, 1: 1, 2: 2, 3: 3, 4: 4, 5: 5, 6: 6, 7: 7, 8: 8, 9: 9, A: 10, B: 11, C: 12, D: 13, E: 14, F: 15, a: 10, b: 11, c: 12, d: 13, e: 14, f: 15};
  const hex = [...'0123456789ABCDEF'];
  const h1 = b => hex[b & 0xF];
  const h2 = b => hex[(b & 0xF0) >> 4] + hex[b & 0xF];
  const eq = b => ((b & 0xF0) >> 4) === (b & 0xF);
  const isShort = v => eq(v.r) && eq(v.g) && eq(v.b) && eq(v.a);
  function hexParse(str) {
    var len = str.length;
    var ret;
    if (str[0] === '#') {
      if (len === 4 || len === 5) {
        ret = {
          r: 255 & map$1[str[1]] * 17,
          g: 255 & map$1[str[2]] * 17,
          b: 255 & map$1[str[3]] * 17,
          a: len === 5 ? map$1[str[4]] * 17 : 255
        };
      } else if (len === 7 || len === 9) {
        ret = {
          r: map$1[str[1]] << 4 | map$1[str[2]],
          g: map$1[str[3]] << 4 | map$1[str[4]],
          b: map$1[str[5]] << 4 | map$1[str[6]],
          a: len === 9 ? (map$1[str[7]] << 4 | map$1[str[8]]) : 255
        };
      }
    }
    return ret;
  }
  const alpha = (a, f) => a < 255 ? f(a) : '';
  function hexString(v) {
    var f = isShort(v) ? h1 : h2;
    return v
      ? '#' + f(v.r) + f(v.g) + f(v.b) + alpha(v.a, f)
      : undefined;
  }

  const HUE_RE = /^(hsla?|hwb|hsv)\(\s*([-+.e\d]+)(?:deg)?[\s,]+([-+.e\d]+)%[\s,]+([-+.e\d]+)%(?:[\s,]+([-+.e\d]+)(%)?)?\s*\)$/;
  function hsl2rgbn(h, s, l) {
    const a = s * Math.min(l, 1 - l);
    const f = (n, k = (n + h / 30) % 12) => l - a * Math.max(Math.min(k - 3, 9 - k, 1), -1);
    return [f(0), f(8), f(4)];
  }
  function hsv2rgbn(h, s, v) {
    const f = (n, k = (n + h / 60) % 6) => v - v * s * Math.max(Math.min(k, 4 - k, 1), 0);
    return [f(5), f(3), f(1)];
  }
  function hwb2rgbn(h, w, b) {
    const rgb = hsl2rgbn(h, 1, 0.5);
    let i;
    if (w + b > 1) {
      i = 1 / (w + b);
      w *= i;
      b *= i;
    }
    for (i = 0; i < 3; i++) {
      rgb[i] *= 1 - w - b;
      rgb[i] += w;
    }
    return rgb;
  }
  function hueValue(r, g, b, d, max) {
    if (r === max) {
      return ((g - b) / d) + (g < b ? 6 : 0);
    }
    if (g === max) {
      return (b - r) / d + 2;
    }
    return (r - g) / d + 4;
  }
  function rgb2hsl(v) {
    const range = 255;
    const r = v.r / range;
    const g = v.g / range;
    const b = v.b / range;
    const max = Math.max(r, g, b);
    const min = Math.min(r, g, b);
    const l = (max + min) / 2;
    let h, s, d;
    if (max !== min) {
      d = max - min;
      s = l > 0.5 ? d / (2 - max - min) : d / (max + min);
      h = hueValue(r, g, b, d, max);
      h = h * 60 + 0.5;
    }
    return [h | 0, s || 0, l];
  }
  function calln(f, a, b, c) {
    return (
      Array.isArray(a)
        ? f(a[0], a[1], a[2])
        : f(a, b, c)
    ).map(n2b);
  }
  function hsl2rgb(h, s, l) {
    return calln(hsl2rgbn, h, s, l);
  }
  function hwb2rgb(h, w, b) {
    return calln(hwb2rgbn, h, w, b);
  }
  function hsv2rgb(h, s, v) {
    return calln(hsv2rgbn, h, s, v);
  }
  function hue(h) {
    return (h % 360 + 360) % 360;
  }
  function hueParse(str) {
    const m = HUE_RE.exec(str);
    let a = 255;
    let v;
    if (!m) {
      return;
    }
    if (m[5] !== v) {
      a = m[6] ? p2b(+m[5]) : n2b(+m[5]);
    }
    const h = hue(+m[2]);
    const p1 = +m[3] / 100;
    const p2 = +m[4] / 100;
    if (m[1] === 'hwb') {
      v = hwb2rgb(h, p1, p2);
    } else if (m[1] === 'hsv') {
      v = hsv2rgb(h, p1, p2);
    } else {
      v = hsl2rgb(h, p1, p2);
    }
    return {
      r: v[0],
      g: v[1],
      b: v[2],
      a: a
    };
  }
  function rotate(v, deg) {
    var h = rgb2hsl(v);
    h[0] = hue(h[0] + deg);
    h = hsl2rgb(h);
    v.r = h[0];
    v.g = h[1];
    v.b = h[2];
  }
  function hslString(v) {
    if (!v) {
      return;
    }
    const a = rgb2hsl(v);
    const h = a[0];
    const s = n2p(a[1]);
    const l = n2p(a[2]);
    return v.a < 255
      ? `hsla(${h}, ${s}%, ${l}%, ${b2n(v.a)})`
      : `hsl(${h}, ${s}%, ${l}%)`;
  }

  const map$2 = {
    x: 'dark',
    Z: 'light',
    Y: 're',
    X: 'blu',
    W: 'gr',
    V: 'medium',
    U: 'slate',
    A: 'ee',
    T: 'ol',
    S: 'or',
    B: 'ra',
    C: 'lateg',
    D: 'ights',
    R: 'in',
    Q: 'turquois',
    E: 'hi',
    P: 'ro',
    O: 'al',
    N: 'le',
    M: 'de',
    L: 'yello',
    F: 'en',
    K: 'ch',
    G: 'arks',
    H: 'ea',
    I: 'ightg',
    J: 'wh'
  };
  const names$1 = {
    OiceXe: 'f0f8ff',
    antiquewEte: 'faebd7',
    aqua: 'ffff',
    aquamarRe: '7fffd4',
    azuY: 'f0ffff',
    beige: 'f5f5dc',
    bisque: 'ffe4c4',
    black: '0',
    blanKedOmond: 'ffebcd',
    Xe: 'ff',
    XeviTet: '8a2be2',
    bPwn: 'a52a2a',
    burlywood: 'deb887',
    caMtXe: '5f9ea0',
    KartYuse: '7fff00',
    KocTate: 'd2691e',
    cSO: 'ff7f50',
    cSnflowerXe: '6495ed',
    cSnsilk: 'fff8dc',
    crimson: 'dc143c',
    cyan: 'ffff',
    xXe: '8b',
    xcyan: '8b8b',
    xgTMnPd: 'b8860b',
    xWay: 'a9a9a9',
    xgYF: '6400',
    xgYy: 'a9a9a9',
    xkhaki: 'bdb76b',
    xmagFta: '8b008b',
    xTivegYF: '556b2f',
    xSange: 'ff8c00',
    xScEd: '9932cc',
    xYd: '8b0000',
    xsOmon: 'e9967a',
    xsHgYF: '8fbc8f',
    xUXe: '483d8b',
    xUWay: '2f4f4f',
    xUgYy: '2f4f4f',
    xQe: 'ced1',
    xviTet: '9400d3',
    dAppRk: 'ff1493',
    dApskyXe: 'bfff',
    dimWay: '696969',
    dimgYy: '696969',
    dodgerXe: '1e90ff',
    fiYbrick: 'b22222',
    flSOwEte: 'fffaf0',
    foYstWAn: '228b22',
    fuKsia: 'ff00ff',
    gaRsbSo: 'dcdcdc',
    ghostwEte: 'f8f8ff',
    gTd: 'ffd700',
    gTMnPd: 'daa520',
    Way: '808080',
    gYF: '8000',
    gYFLw: 'adff2f',
    gYy: '808080',
    honeyMw: 'f0fff0',
    hotpRk: 'ff69b4',
    RdianYd: 'cd5c5c',
    Rdigo: '4b0082',
    ivSy: 'fffff0',
    khaki: 'f0e68c',
    lavFMr: 'e6e6fa',
    lavFMrXsh: 'fff0f5',
    lawngYF: '7cfc00',
    NmoncEffon: 'fffacd',
    ZXe: 'add8e6',
    ZcSO: 'f08080',
    Zcyan: 'e0ffff',
    ZgTMnPdLw: 'fafad2',
    ZWay: 'd3d3d3',
    ZgYF: '90ee90',
    ZgYy: 'd3d3d3',
    ZpRk: 'ffb6c1',
    ZsOmon: 'ffa07a',
    ZsHgYF: '20b2aa',
    ZskyXe: '87cefa',
    ZUWay: '778899',
    ZUgYy: '778899',
    ZstAlXe: 'b0c4de',
    ZLw: 'ffffe0',
    lime: 'ff00',
    limegYF: '32cd32',
    lRF: 'faf0e6',
    magFta: 'ff00ff',
    maPon: '800000',
    VaquamarRe: '66cdaa',
    VXe: 'cd',
    VScEd: 'ba55d3',
    VpurpN: '9370db',
    VsHgYF: '3cb371',
    VUXe: '7b68ee',
    VsprRggYF: 'fa9a',
    VQe: '48d1cc',
    VviTetYd: 'c71585',
    midnightXe: '191970',
    mRtcYam: 'f5fffa',
    mistyPse: 'ffe4e1',
    moccasR: 'ffe4b5',
    navajowEte: 'ffdead',
    navy: '80',
    Tdlace: 'fdf5e6',
    Tive: '808000',
    TivedBb: '6b8e23',
    Sange: 'ffa500',
    SangeYd: 'ff4500',
    ScEd: 'da70d6',
    pOegTMnPd: 'eee8aa',
    pOegYF: '98fb98',
    pOeQe: 'afeeee',
    pOeviTetYd: 'db7093',
    papayawEp: 'ffefd5',
    pHKpuff: 'ffdab9',
    peru: 'cd853f',
    pRk: 'ffc0cb',
    plum: 'dda0dd',
    powMrXe: 'b0e0e6',
    purpN: '800080',
    YbeccapurpN: '663399',
    Yd: 'ff0000',
    Psybrown: 'bc8f8f',
    PyOXe: '4169e1',
    saddNbPwn: '8b4513',
    sOmon: 'fa8072',
    sandybPwn: 'f4a460',
    sHgYF: '2e8b57',
    sHshell: 'fff5ee',
    siFna: 'a0522d',
    silver: 'c0c0c0',
    skyXe: '87ceeb',
    UXe: '6a5acd',
    UWay: '708090',
    UgYy: '708090',
    snow: 'fffafa',
    sprRggYF: 'ff7f',
    stAlXe: '4682b4',
    tan: 'd2b48c',
    teO: '8080',
    tEstN: 'd8bfd8',
    tomato: 'ff6347',
    Qe: '40e0d0',
    viTet: 'ee82ee',
    JHt: 'f5deb3',
    wEte: 'ffffff',
    wEtesmoke: 'f5f5f5',
    Lw: 'ffff00',
    LwgYF: '9acd32'
  };
  function unpack() {
    const unpacked = {};
    const keys = Object.keys(names$1);
    const tkeys = Object.keys(map$2);
    let i, j, k, ok, nk;
    for (i = 0; i < keys.length; i++) {
      ok = nk = keys[i];
      for (j = 0; j < tkeys.length; j++) {
        k = tkeys[j];
        nk = nk.replace(k, map$2[k]);
      }
      k = parseInt(names$1[ok], 16);
      unpacked[nk] = [k >> 16 & 0xFF, k >> 8 & 0xFF, k & 0xFF];
    }
    return unpacked;
  }

  let names;
  function nameParse(str) {
    if (!names) {
      names = unpack();
      names.transparent = [0, 0, 0, 0];
    }
    const a = names[str.toLowerCase()];
    return a && {
      r: a[0],
      g: a[1],
      b: a[2],
      a: a.length === 4 ? a[3] : 255
    };
  }

  const RGB_RE = /^rgba?\(\s*([-+.\d]+)(%)?[\s,]+([-+.e\d]+)(%)?[\s,]+([-+.e\d]+)(%)?(?:[\s,/]+([-+.e\d]+)(%)?)?\s*\)$/;
  function rgbParse(str) {
    const m = RGB_RE.exec(str);
    let a = 255;
    let r, g, b;
    if (!m) {
      return;
    }
    if (m[7] !== r) {
      const v = +m[7];
      a = m[8] ? p2b(v) : lim(v * 255, 0, 255);
    }
    r = +m[1];
    g = +m[3];
    b = +m[5];
    r = 255 & (m[2] ? p2b(r) : lim(r, 0, 255));
    g = 255 & (m[4] ? p2b(g) : lim(g, 0, 255));
    b = 255 & (m[6] ? p2b(b) : lim(b, 0, 255));
    return {
      r: r,
      g: g,
      b: b,
      a: a
    };
  }
  function rgbString(v) {
    return v && (
      v.a < 255
        ? `rgba(${v.r}, ${v.g}, ${v.b}, ${b2n(v.a)})`
        : `rgb(${v.r}, ${v.g}, ${v.b})`
    );
  }

  const to = v => v <= 0.0031308 ? v * 12.92 : Math.pow(v, 1.0 / 2.4) * 1.055 - 0.055;
  const from = v => v <= 0.04045 ? v / 12.92 : Math.pow((v + 0.055) / 1.055, 2.4);
  function interpolate$1(rgb1, rgb2, t) {
    const r = from(b2n(rgb1.r));
    const g = from(b2n(rgb1.g));
    const b = from(b2n(rgb1.b));
    return {
      r: n2b(to(r + t * (from(b2n(rgb2.r)) - r))),
      g: n2b(to(g + t * (from(b2n(rgb2.g)) - g))),
      b: n2b(to(b + t * (from(b2n(rgb2.b)) - b))),
      a: rgb1.a + t * (rgb2.a - rgb1.a)
    };
  }

  function modHSL(v, i, ratio) {
    if (v) {
      let tmp = rgb2hsl(v);
      tmp[i] = Math.max(0, Math.min(tmp[i] + tmp[i] * ratio, i === 0 ? 360 : 1));
      tmp = hsl2rgb(tmp);
      v.r = tmp[0];
      v.g = tmp[1];
      v.b = tmp[2];
    }
  }
  function clone$2(v, proto) {
    return v ? Object.assign(proto || {}, v) : v;
  }
  function fromObject(input) {
    var v = {r: 0, g: 0, b: 0, a: 255};
    if (Array.isArray(input)) {
      if (input.length >= 3) {
        v = {r: input[0], g: input[1], b: input[2], a: 255};
        if (input.length > 3) {
          v.a = n2b(input[3]);
        }
      }
    } else {
      v = clone$2(input, {r: 0, g: 0, b: 0, a: 1});
      v.a = n2b(v.a);
    }
    return v;
  }
  function functionParse(str) {
    if (str.charAt(0) === 'r') {
      return rgbParse(str);
    }
    return hueParse(str);
  }
  class Color {
    constructor(input) {
      if (input instanceof Color) {
        return input;
      }
      const type = typeof input;
      let v;
      if (type === 'object') {
        v = fromObject(input);
      } else if (type === 'string') {
        v = hexParse(input) || nameParse(input) || functionParse(input);
      }
      this._rgb = v;
      this._valid = !!v;
    }
    get valid() {
      return this._valid;
    }
    get rgb() {
      var v = clone$2(this._rgb);
      if (v) {
        v.a = b2n(v.a);
      }
      return v;
    }
    set rgb(obj) {
      this._rgb = fromObject(obj);
    }
    rgbString() {
      return this._valid ? rgbString(this._rgb) : undefined;
    }
    hexString() {
      return this._valid ? hexString(this._rgb) : undefined;
    }
    hslString() {
      return this._valid ? hslString(this._rgb) : undefined;
    }
    mix(color, weight) {
      if (color) {
        const c1 = this.rgb;
        const c2 = color.rgb;
        let w2;
        const p = weight === w2 ? 0.5 : weight;
        const w = 2 * p - 1;
        const a = c1.a - c2.a;
        const w1 = ((w * a === -1 ? w : (w + a) / (1 + w * a)) + 1) / 2.0;
        w2 = 1 - w1;
        c1.r = 0xFF & w1 * c1.r + w2 * c2.r + 0.5;
        c1.g = 0xFF & w1 * c1.g + w2 * c2.g + 0.5;
        c1.b = 0xFF & w1 * c1.b + w2 * c2.b + 0.5;
        c1.a = p * c1.a + (1 - p) * c2.a;
        this.rgb = c1;
      }
      return this;
    }
    interpolate(color, t) {
      if (color) {
        this._rgb = interpolate$1(this._rgb, color._rgb, t);
      }
      return this;
    }
    clone() {
      return new Color(this.rgb);
    }
    alpha(a) {
      this._rgb.a = n2b(a);
      return this;
    }
    clearer(ratio) {
      const rgb = this._rgb;
      rgb.a *= 1 - ratio;
      return this;
    }
    greyscale() {
      const rgb = this._rgb;
      const val = round(rgb.r * 0.3 + rgb.g * 0.59 + rgb.b * 0.11);
      rgb.r = rgb.g = rgb.b = val;
      return this;
    }
    opaquer(ratio) {
      const rgb = this._rgb;
      rgb.a *= 1 + ratio;
      return this;
    }
    negate() {
      const v = this._rgb;
      v.r = 255 - v.r;
      v.g = 255 - v.g;
      v.b = 255 - v.b;
      return this;
    }
    lighten(ratio) {
      modHSL(this._rgb, 2, ratio);
      return this;
    }
    darken(ratio) {
      modHSL(this._rgb, 2, -ratio);
      return this;
    }
    saturate(ratio) {
      modHSL(this._rgb, 1, ratio);
      return this;
    }
    desaturate(ratio) {
      modHSL(this._rgb, 1, -ratio);
      return this;
    }
    rotate(deg) {
      rotate(this._rgb, deg);
      return this;
    }
  }

  /*!
   * Chart.js v4.4.4
   * https://www.chartjs.org
   * (c) 2024 Chart.js Contributors
   * Released under the MIT License
   */

  /**
   * @namespace Chart.helpers
   */ /**
   * An empty function that can be used, for example, for optional callback.
   */ function noop() {
  /* noop */ }
  /**
   * Returns a unique id, sequentially generated from a global variable.
   */ const uid = (()=>{
      let id = 0;
      return ()=>id++;
  })();
  /**
   * Returns true if `value` is neither null nor undefined, else returns false.
   * @param value - The value to test.
   * @since 2.7.0
   */ function isNullOrUndef(value) {
      return value === null || typeof value === 'undefined';
  }
  /**
   * Returns true if `value` is an array (including typed arrays), else returns false.
   * @param value - The value to test.
   * @function
   */ function isArray(value) {
      if (Array.isArray && Array.isArray(value)) {
          return true;
      }
      const type = Object.prototype.toString.call(value);
      if (type.slice(0, 7) === '[object' && type.slice(-6) === 'Array]') {
          return true;
      }
      return false;
  }
  /**
   * Returns true if `value` is an object (excluding null), else returns false.
   * @param value - The value to test.
   * @since 2.7.0
   */ function isObject(value) {
      return value !== null && Object.prototype.toString.call(value) === '[object Object]';
  }
  /**
   * Returns true if `value` is a finite number, else returns false
   * @param value  - The value to test.
   */ function isNumberFinite(value) {
      return (typeof value === 'number' || value instanceof Number) && isFinite(+value);
  }
  /**
   * Returns `value` if finite, else returns `defaultValue`.
   * @param value - The value to return if defined.
   * @param defaultValue - The value to return if `value` is not finite.
   */ function finiteOrDefault(value, defaultValue) {
      return isNumberFinite(value) ? value : defaultValue;
  }
  /**
   * Returns `value` if defined, else returns `defaultValue`.
   * @param value - The value to return if defined.
   * @param defaultValue - The value to return if `value` is undefined.
   */ function valueOrDefault(value, defaultValue) {
      return typeof value === 'undefined' ? defaultValue : value;
  }
  const toPercentage = (value, dimension)=>typeof value === 'string' && value.endsWith('%') ? parseFloat(value) / 100 : +value / dimension;
  const toDimension = (value, dimension)=>typeof value === 'string' && value.endsWith('%') ? parseFloat(value) / 100 * dimension : +value;
  /**
   * Calls `fn` with the given `args` in the scope defined by `thisArg` and returns the
   * value returned by `fn`. If `fn` is not a function, this method returns undefined.
   * @param fn - The function to call.
   * @param args - The arguments with which `fn` should be called.
   * @param [thisArg] - The value of `this` provided for the call to `fn`.
   */ function callback(fn, args, thisArg) {
      if (fn && typeof fn.call === 'function') {
          return fn.apply(thisArg, args);
      }
  }
  function each(loopable, fn, thisArg, reverse) {
      let i, len, keys;
      if (isArray(loopable)) {
          len = loopable.length;
          {
              for(i = 0; i < len; i++){
                  fn.call(thisArg, loopable[i], i);
              }
          }
      } else if (isObject(loopable)) {
          keys = Object.keys(loopable);
          len = keys.length;
          for(i = 0; i < len; i++){
              fn.call(thisArg, loopable[keys[i]], keys[i]);
          }
      }
  }
  /**
   * Returns true if the `a0` and `a1` arrays have the same content, else returns false.
   * @param a0 - The array to compare
   * @param a1 - The array to compare
   * @private
   */ function _elementsEqual(a0, a1) {
      let i, ilen, v0, v1;
      if (!a0 || !a1 || a0.length !== a1.length) {
          return false;
      }
      for(i = 0, ilen = a0.length; i < ilen; ++i){
          v0 = a0[i];
          v1 = a1[i];
          if (v0.datasetIndex !== v1.datasetIndex || v0.index !== v1.index) {
              return false;
          }
      }
      return true;
  }
  /**
   * Returns a deep copy of `source` without keeping references on objects and arrays.
   * @param source - The value to clone.
   */ function clone$1(source) {
      if (isArray(source)) {
          return source.map(clone$1);
      }
      if (isObject(source)) {
          const target = Object.create(null);
          const keys = Object.keys(source);
          const klen = keys.length;
          let k = 0;
          for(; k < klen; ++k){
              target[keys[k]] = clone$1(source[keys[k]]);
          }
          return target;
      }
      return source;
  }
  function isValidKey(key) {
      return [
          '__proto__',
          'prototype',
          'constructor'
      ].indexOf(key) === -1;
  }
  /**
   * The default merger when Chart.helpers.merge is called without merger option.
   * Note(SB): also used by mergeConfig and mergeScaleConfig as fallback.
   * @private
   */ function _merger(key, target, source, options) {
      if (!isValidKey(key)) {
          return;
      }
      const tval = target[key];
      const sval = source[key];
      if (isObject(tval) && isObject(sval)) {
          // eslint-disable-next-line @typescript-eslint/no-use-before-define
          merge(tval, sval, options);
      } else {
          target[key] = clone$1(sval);
      }
  }
  function merge(target, source, options) {
      const sources = isArray(source) ? source : [
          source
      ];
      const ilen = sources.length;
      if (!isObject(target)) {
          return target;
      }
      options = options || {};
      const merger = options.merger || _merger;
      let current;
      for(let i = 0; i < ilen; ++i){
          current = sources[i];
          if (!isObject(current)) {
              continue;
          }
          const keys = Object.keys(current);
          for(let k = 0, klen = keys.length; k < klen; ++k){
              merger(keys[k], target, current, options);
          }
      }
      return target;
  }
  function mergeIf(target, source) {
      // eslint-disable-next-line @typescript-eslint/no-use-before-define
      return merge(target, source, {
          merger: _mergerIf
      });
  }
  /**
   * Merges source[key] in target[key] only if target[key] is undefined.
   * @private
   */ function _mergerIf(key, target, source) {
      if (!isValidKey(key)) {
          return;
      }
      const tval = target[key];
      const sval = source[key];
      if (isObject(tval) && isObject(sval)) {
          mergeIf(tval, sval);
      } else if (!Object.prototype.hasOwnProperty.call(target, key)) {
          target[key] = clone$1(sval);
      }
  }
  // resolveObjectKey resolver cache
  const keyResolvers = {
      // Chart.helpers.core resolveObjectKey should resolve empty key to root object
      '': (v)=>v,
      // default resolvers
      x: (o)=>o.x,
      y: (o)=>o.y
  };
  /**
   * @private
   */ function _splitKey(key) {
      const parts = key.split('.');
      const keys = [];
      let tmp = '';
      for (const part of parts){
          tmp += part;
          if (tmp.endsWith('\\')) {
              tmp = tmp.slice(0, -1) + '.';
          } else {
              keys.push(tmp);
              tmp = '';
          }
      }
      return keys;
  }
  function _getKeyResolver(key) {
      const keys = _splitKey(key);
      return (obj)=>{
          for (const k of keys){
              if (k === '') {
                  break;
              }
              obj = obj && obj[k];
          }
          return obj;
      };
  }
  function resolveObjectKey(obj, key) {
      const resolver = keyResolvers[key] || (keyResolvers[key] = _getKeyResolver(key));
      return resolver(obj);
  }
  /**
   * @private
   */ function _capitalize(str) {
      return str.charAt(0).toUpperCase() + str.slice(1);
  }
  const defined = (value)=>typeof value !== 'undefined';
  const isFunction = (value)=>typeof value === 'function';
  // Adapted from https://stackoverflow.com/questions/31128855/comparing-ecma6-sets-for-equality#31129384
  const setsEqual = (a, b)=>{
      if (a.size !== b.size) {
          return false;
      }
      for (const item of a){
          if (!b.has(item)) {
              return false;
          }
      }
      return true;
  };
  /**
   * @param e - The event
   * @private
   */ function _isClickEvent(e) {
      return e.type === 'mouseup' || e.type === 'click' || e.type === 'contextmenu';
  }

  /**
   * @alias Chart.helpers.math
   * @namespace
   */ const PI = Math.PI;
  const TAU = 2 * PI;
  const PITAU = TAU + PI;
  const INFINITY = Number.POSITIVE_INFINITY;
  const RAD_PER_DEG = PI / 180;
  const HALF_PI = PI / 2;
  const QUARTER_PI = PI / 4;
  const TWO_THIRDS_PI = PI * 2 / 3;
  const log10 = Math.log10;
  const sign = Math.sign;
  function almostEquals(x, y, epsilon) {
      return Math.abs(x - y) < epsilon;
  }
  /**
   * Implementation of the nice number algorithm used in determining where axis labels will go
   */ function niceNum(range) {
      const roundedRange = Math.round(range);
      range = almostEquals(range, roundedRange, range / 1000) ? roundedRange : range;
      const niceRange = Math.pow(10, Math.floor(log10(range)));
      const fraction = range / niceRange;
      const niceFraction = fraction <= 1 ? 1 : fraction <= 2 ? 2 : fraction <= 5 ? 5 : 10;
      return niceFraction * niceRange;
  }
  /**
   * Returns an array of factors sorted from 1 to sqrt(value)
   * @private
   */ function _factorize(value) {
      const result = [];
      const sqrt = Math.sqrt(value);
      let i;
      for(i = 1; i < sqrt; i++){
          if (value % i === 0) {
              result.push(i);
              result.push(value / i);
          }
      }
      if (sqrt === (sqrt | 0)) {
          result.push(sqrt);
      }
      result.sort((a, b)=>a - b).pop();
      return result;
  }
  function isNumber(n) {
      return !isNaN(parseFloat(n)) && isFinite(n);
  }
  function almostWhole(x, epsilon) {
      const rounded = Math.round(x);
      return rounded - epsilon <= x && rounded + epsilon >= x;
  }
  /**
   * @private
   */ function _setMinAndMaxByKey(array, target, property) {
      let i, ilen, value;
      for(i = 0, ilen = array.length; i < ilen; i++){
          value = array[i][property];
          if (!isNaN(value)) {
              target.min = Math.min(target.min, value);
              target.max = Math.max(target.max, value);
          }
      }
  }
  function toRadians(degrees) {
      return degrees * (PI / 180);
  }
  function toDegrees(radians) {
      return radians * (180 / PI);
  }
  /**
   * Returns the number of decimal places
   * i.e. the number of digits after the decimal point, of the value of this Number.
   * @param x - A number.
   * @returns The number of decimal places.
   * @private
   */ function _decimalPlaces(x) {
      if (!isNumberFinite(x)) {
          return;
      }
      let e = 1;
      let p = 0;
      while(Math.round(x * e) / e !== x){
          e *= 10;
          p++;
      }
      return p;
  }
  // Gets the angle from vertical upright to the point about a centre.
  function getAngleFromPoint(centrePoint, anglePoint) {
      const distanceFromXCenter = anglePoint.x - centrePoint.x;
      const distanceFromYCenter = anglePoint.y - centrePoint.y;
      const radialDistanceFromCenter = Math.sqrt(distanceFromXCenter * distanceFromXCenter + distanceFromYCenter * distanceFromYCenter);
      let angle = Math.atan2(distanceFromYCenter, distanceFromXCenter);
      if (angle < -0.5 * PI) {
          angle += TAU; // make sure the returned angle is in the range of (-PI/2, 3PI/2]
      }
      return {
          angle,
          distance: radialDistanceFromCenter
      };
  }
  function distanceBetweenPoints(pt1, pt2) {
      return Math.sqrt(Math.pow(pt2.x - pt1.x, 2) + Math.pow(pt2.y - pt1.y, 2));
  }
  /**
   * Shortest distance between angles, in either direction.
   * @private
   */ function _angleDiff(a, b) {
      return (a - b + PITAU) % TAU - PI;
  }
  /**
   * Normalize angle to be between 0 and 2*PI
   * @private
   */ function _normalizeAngle(a) {
      return (a % TAU + TAU) % TAU;
  }
  /**
   * @private
   */ function _angleBetween(angle, start, end, sameAngleIsFullCircle) {
      const a = _normalizeAngle(angle);
      const s = _normalizeAngle(start);
      const e = _normalizeAngle(end);
      const angleToStart = _normalizeAngle(s - a);
      const angleToEnd = _normalizeAngle(e - a);
      const startToAngle = _normalizeAngle(a - s);
      const endToAngle = _normalizeAngle(a - e);
      return a === s || a === e || sameAngleIsFullCircle && s === e || angleToStart > angleToEnd && startToAngle < endToAngle;
  }
  /**
   * Limit `value` between `min` and `max`
   * @param value
   * @param min
   * @param max
   * @private
   */ function _limitValue(value, min, max) {
      return Math.max(min, Math.min(max, value));
  }
  /**
   * @param {number} value
   * @private
   */ function _int16Range(value) {
      return _limitValue(value, -32768, 32767);
  }
  /**
   * @param value
   * @param start
   * @param end
   * @param [epsilon]
   * @private
   */ function _isBetween(value, start, end, epsilon = 1e-6) {
      return value >= Math.min(start, end) - epsilon && value <= Math.max(start, end) + epsilon;
  }

  function _lookup(table, value, cmp) {
      cmp = cmp || ((index)=>table[index] < value);
      let hi = table.length - 1;
      let lo = 0;
      let mid;
      while(hi - lo > 1){
          mid = lo + hi >> 1;
          if (cmp(mid)) {
              lo = mid;
          } else {
              hi = mid;
          }
      }
      return {
          lo,
          hi
      };
  }
  /**
   * Binary search
   * @param table - the table search. must be sorted!
   * @param key - property name for the value in each entry
   * @param value - value to find
   * @param last - lookup last index
   * @private
   */ const _lookupByKey = (table, key, value, last)=>_lookup(table, value, last ? (index)=>{
          const ti = table[index][key];
          return ti < value || ti === value && table[index + 1][key] === value;
      } : (index)=>table[index][key] < value);
  /**
   * Reverse binary search
   * @param table - the table search. must be sorted!
   * @param key - property name for the value in each entry
   * @param value - value to find
   * @private
   */ const _rlookupByKey = (table, key, value)=>_lookup(table, value, (index)=>table[index][key] >= value);
  /**
   * Return subset of `values` between `min` and `max` inclusive.
   * Values are assumed to be in sorted order.
   * @param values - sorted array of values
   * @param min - min value
   * @param max - max value
   */ function _filterBetween(values, min, max) {
      let start = 0;
      let end = values.length;
      while(start < end && values[start] < min){
          start++;
      }
      while(end > start && values[end - 1] > max){
          end--;
      }
      return start > 0 || end < values.length ? values.slice(start, end) : values;
  }
  const arrayEvents = [
      'push',
      'pop',
      'shift',
      'splice',
      'unshift'
  ];
  function listenArrayEvents(array, listener) {
      if (array._chartjs) {
          array._chartjs.listeners.push(listener);
          return;
      }
      Object.defineProperty(array, '_chartjs', {
          configurable: true,
          enumerable: false,
          value: {
              listeners: [
                  listener
              ]
          }
      });
      arrayEvents.forEach((key)=>{
          const method = '_onData' + _capitalize(key);
          const base = array[key];
          Object.defineProperty(array, key, {
              configurable: true,
              enumerable: false,
              value (...args) {
                  const res = base.apply(this, args);
                  array._chartjs.listeners.forEach((object)=>{
                      if (typeof object[method] === 'function') {
                          object[method](...args);
                      }
                  });
                  return res;
              }
          });
      });
  }
  function unlistenArrayEvents(array, listener) {
      const stub = array._chartjs;
      if (!stub) {
          return;
      }
      const listeners = stub.listeners;
      const index = listeners.indexOf(listener);
      if (index !== -1) {
          listeners.splice(index, 1);
      }
      if (listeners.length > 0) {
          return;
      }
      arrayEvents.forEach((key)=>{
          delete array[key];
      });
      delete array._chartjs;
  }
  /**
   * @param items
   */ function _arrayUnique(items) {
      const set = new Set(items);
      if (set.size === items.length) {
          return items;
      }
      return Array.from(set);
  }
  /**
  * Request animation polyfill
  */ const requestAnimFrame = function() {
      if (typeof window === 'undefined') {
          return function(callback) {
              return callback();
          };
      }
      return window.requestAnimationFrame;
  }();
  /**
   * Throttles calling `fn` once per animation frame
   * Latest arguments are used on the actual call
   */ function throttled(fn, thisArg) {
      let argsToUse = [];
      let ticking = false;
      return function(...args) {
          // Save the args for use later
          argsToUse = args;
          if (!ticking) {
              ticking = true;
              requestAnimFrame.call(window, ()=>{
                  ticking = false;
                  fn.apply(thisArg, argsToUse);
              });
          }
      };
  }
  /**
   * Debounces calling `fn` for `delay` ms
   */ function debounce(fn, delay) {
      let timeout;
      return function(...args) {
          if (delay) {
              clearTimeout(timeout);
              timeout = setTimeout(fn, delay, args);
          } else {
              fn.apply(this, args);
          }
          return delay;
      };
  }
  /**
   * Converts 'start' to 'left', 'end' to 'right' and others to 'center'
   * @private
   */ const _toLeftRightCenter = (align)=>align === 'start' ? 'left' : align === 'end' ? 'right' : 'center';
  /**
   * Returns `start`, `end` or `(start + end) / 2` depending on `align`. Defaults to `center`
   * @private
   */ const _alignStartEnd = (align, start, end)=>align === 'start' ? start : align === 'end' ? end : (start + end) / 2;
  /**
   * Returns `left`, `right` or `(left + right) / 2` depending on `align`. Defaults to `left`
   * @private
   */ const _textX = (align, left, right, rtl)=>{
      const check = rtl ? 'left' : 'right';
      return align === check ? right : align === 'center' ? (left + right) / 2 : left;
  };
  /**
   * Return start and count of visible points.
   * @private
   */ function _getStartAndCountOfVisiblePoints(meta, points, animationsDisabled) {
      const pointCount = points.length;
      let start = 0;
      let count = pointCount;
      if (meta._sorted) {
          const { iScale , _parsed  } = meta;
          const axis = iScale.axis;
          const { min , max , minDefined , maxDefined  } = iScale.getUserBounds();
          if (minDefined) {
              start = _limitValue(Math.min(// @ts-expect-error Need to type _parsed
              _lookupByKey(_parsed, axis, min).lo, // @ts-expect-error Need to fix types on _lookupByKey
              animationsDisabled ? pointCount : _lookupByKey(points, axis, iScale.getPixelForValue(min)).lo), 0, pointCount - 1);
          }
          if (maxDefined) {
              count = _limitValue(Math.max(// @ts-expect-error Need to type _parsed
              _lookupByKey(_parsed, iScale.axis, max, true).hi + 1, // @ts-expect-error Need to fix types on _lookupByKey
              animationsDisabled ? 0 : _lookupByKey(points, axis, iScale.getPixelForValue(max), true).hi + 1), start, pointCount) - start;
          } else {
              count = pointCount - start;
          }
      }
      return {
          start,
          count
      };
  }
  /**
   * Checks if the scale ranges have changed.
   * @param {object} meta - dataset meta.
   * @returns {boolean}
   * @private
   */ function _scaleRangesChanged(meta) {
      const { xScale , yScale , _scaleRanges  } = meta;
      const newRanges = {
          xmin: xScale.min,
          xmax: xScale.max,
          ymin: yScale.min,
          ymax: yScale.max
      };
      if (!_scaleRanges) {
          meta._scaleRanges = newRanges;
          return true;
      }
      const changed = _scaleRanges.xmin !== xScale.min || _scaleRanges.xmax !== xScale.max || _scaleRanges.ymin !== yScale.min || _scaleRanges.ymax !== yScale.max;
      Object.assign(_scaleRanges, newRanges);
      return changed;
  }

  const atEdge = (t)=>t === 0 || t === 1;
  const elasticIn = (t, s, p)=>-(Math.pow(2, 10 * (t -= 1)) * Math.sin((t - s) * TAU / p));
  const elasticOut = (t, s, p)=>Math.pow(2, -10 * t) * Math.sin((t - s) * TAU / p) + 1;
  /**
   * Easing functions adapted from Robert Penner's easing equations.
   * @namespace Chart.helpers.easing.effects
   * @see http://www.robertpenner.com/easing/
   */ const effects = {
      linear: (t)=>t,
      easeInQuad: (t)=>t * t,
      easeOutQuad: (t)=>-t * (t - 2),
      easeInOutQuad: (t)=>(t /= 0.5) < 1 ? 0.5 * t * t : -0.5 * (--t * (t - 2) - 1),
      easeInCubic: (t)=>t * t * t,
      easeOutCubic: (t)=>(t -= 1) * t * t + 1,
      easeInOutCubic: (t)=>(t /= 0.5) < 1 ? 0.5 * t * t * t : 0.5 * ((t -= 2) * t * t + 2),
      easeInQuart: (t)=>t * t * t * t,
      easeOutQuart: (t)=>-((t -= 1) * t * t * t - 1),
      easeInOutQuart: (t)=>(t /= 0.5) < 1 ? 0.5 * t * t * t * t : -0.5 * ((t -= 2) * t * t * t - 2),
      easeInQuint: (t)=>t * t * t * t * t,
      easeOutQuint: (t)=>(t -= 1) * t * t * t * t + 1,
      easeInOutQuint: (t)=>(t /= 0.5) < 1 ? 0.5 * t * t * t * t * t : 0.5 * ((t -= 2) * t * t * t * t + 2),
      easeInSine: (t)=>-Math.cos(t * HALF_PI) + 1,
      easeOutSine: (t)=>Math.sin(t * HALF_PI),
      easeInOutSine: (t)=>-0.5 * (Math.cos(PI * t) - 1),
      easeInExpo: (t)=>t === 0 ? 0 : Math.pow(2, 10 * (t - 1)),
      easeOutExpo: (t)=>t === 1 ? 1 : -Math.pow(2, -10 * t) + 1,
      easeInOutExpo: (t)=>atEdge(t) ? t : t < 0.5 ? 0.5 * Math.pow(2, 10 * (t * 2 - 1)) : 0.5 * (-Math.pow(2, -10 * (t * 2 - 1)) + 2),
      easeInCirc: (t)=>t >= 1 ? t : -(Math.sqrt(1 - t * t) - 1),
      easeOutCirc: (t)=>Math.sqrt(1 - (t -= 1) * t),
      easeInOutCirc: (t)=>(t /= 0.5) < 1 ? -0.5 * (Math.sqrt(1 - t * t) - 1) : 0.5 * (Math.sqrt(1 - (t -= 2) * t) + 1),
      easeInElastic: (t)=>atEdge(t) ? t : elasticIn(t, 0.075, 0.3),
      easeOutElastic: (t)=>atEdge(t) ? t : elasticOut(t, 0.075, 0.3),
      easeInOutElastic (t) {
          const s = 0.1125;
          const p = 0.45;
          return atEdge(t) ? t : t < 0.5 ? 0.5 * elasticIn(t * 2, s, p) : 0.5 + 0.5 * elasticOut(t * 2 - 1, s, p);
      },
      easeInBack (t) {
          const s = 1.70158;
          return t * t * ((s + 1) * t - s);
      },
      easeOutBack (t) {
          const s = 1.70158;
          return (t -= 1) * t * ((s + 1) * t + s) + 1;
      },
      easeInOutBack (t) {
          let s = 1.70158;
          if ((t /= 0.5) < 1) {
              return 0.5 * (t * t * (((s *= 1.525) + 1) * t - s));
          }
          return 0.5 * ((t -= 2) * t * (((s *= 1.525) + 1) * t + s) + 2);
      },
      easeInBounce: (t)=>1 - effects.easeOutBounce(1 - t),
      easeOutBounce (t) {
          const m = 7.5625;
          const d = 2.75;
          if (t < 1 / d) {
              return m * t * t;
          }
          if (t < 2 / d) {
              return m * (t -= 1.5 / d) * t + 0.75;
          }
          if (t < 2.5 / d) {
              return m * (t -= 2.25 / d) * t + 0.9375;
          }
          return m * (t -= 2.625 / d) * t + 0.984375;
      },
      easeInOutBounce: (t)=>t < 0.5 ? effects.easeInBounce(t * 2) * 0.5 : effects.easeOutBounce(t * 2 - 1) * 0.5 + 0.5
  };

  function isPatternOrGradient(value) {
      if (value && typeof value === 'object') {
          const type = value.toString();
          return type === '[object CanvasPattern]' || type === '[object CanvasGradient]';
      }
      return false;
  }
  function color(value) {
      return isPatternOrGradient(value) ? value : new Color(value);
  }
  function getHoverColor(value) {
      return isPatternOrGradient(value) ? value : new Color(value).saturate(0.5).darken(0.1).hexString();
  }

  const numbers = [
      'x',
      'y',
      'borderWidth',
      'radius',
      'tension'
  ];
  const colors = [
      'color',
      'borderColor',
      'backgroundColor'
  ];
  function applyAnimationsDefaults(defaults) {
      defaults.set('animation', {
          delay: undefined,
          duration: 1000,
          easing: 'easeOutQuart',
          fn: undefined,
          from: undefined,
          loop: undefined,
          to: undefined,
          type: undefined
      });
      defaults.describe('animation', {
          _fallback: false,
          _indexable: false,
          _scriptable: (name)=>name !== 'onProgress' && name !== 'onComplete' && name !== 'fn'
      });
      defaults.set('animations', {
          colors: {
              type: 'color',
              properties: colors
          },
          numbers: {
              type: 'number',
              properties: numbers
          }
      });
      defaults.describe('animations', {
          _fallback: 'animation'
      });
      defaults.set('transitions', {
          active: {
              animation: {
                  duration: 400
              }
          },
          resize: {
              animation: {
                  duration: 0
              }
          },
          show: {
              animations: {
                  colors: {
                      from: 'transparent'
                  },
                  visible: {
                      type: 'boolean',
                      duration: 0
                  }
              }
          },
          hide: {
              animations: {
                  colors: {
                      to: 'transparent'
                  },
                  visible: {
                      type: 'boolean',
                      easing: 'linear',
                      fn: (v)=>v | 0
                  }
              }
          }
      });
  }

  function applyLayoutsDefaults(defaults) {
      defaults.set('layout', {
          autoPadding: true,
          padding: {
              top: 0,
              right: 0,
              bottom: 0,
              left: 0
          }
      });
  }

  const intlCache = new Map();
  function getNumberFormat(locale, options) {
      options = options || {};
      const cacheKey = locale + JSON.stringify(options);
      let formatter = intlCache.get(cacheKey);
      if (!formatter) {
          formatter = new Intl.NumberFormat(locale, options);
          intlCache.set(cacheKey, formatter);
      }
      return formatter;
  }
  function formatNumber(num, locale, options) {
      return getNumberFormat(locale, options).format(num);
  }

  const formatters = {
   values (value) {
          return isArray(value) ?  value : '' + value;
      },
   numeric (tickValue, index, ticks) {
          if (tickValue === 0) {
              return '0';
          }
          const locale = this.chart.options.locale;
          let notation;
          let delta = tickValue;
          if (ticks.length > 1) {
              const maxTick = Math.max(Math.abs(ticks[0].value), Math.abs(ticks[ticks.length - 1].value));
              if (maxTick < 1e-4 || maxTick > 1e+15) {
                  notation = 'scientific';
              }
              delta = calculateDelta(tickValue, ticks);
          }
          const logDelta = log10(Math.abs(delta));
          const numDecimal = isNaN(logDelta) ? 1 : Math.max(Math.min(-1 * Math.floor(logDelta), 20), 0);
          const options = {
              notation,
              minimumFractionDigits: numDecimal,
              maximumFractionDigits: numDecimal
          };
          Object.assign(options, this.options.ticks.format);
          return formatNumber(tickValue, locale, options);
      },
   logarithmic (tickValue, index, ticks) {
          if (tickValue === 0) {
              return '0';
          }
          const remain = ticks[index].significand || tickValue / Math.pow(10, Math.floor(log10(tickValue)));
          if ([
              1,
              2,
              3,
              5,
              10,
              15
          ].includes(remain) || index > 0.8 * ticks.length) {
              return formatters.numeric.call(this, tickValue, index, ticks);
          }
          return '';
      }
  };
  function calculateDelta(tickValue, ticks) {
      let delta = ticks.length > 3 ? ticks[2].value - ticks[1].value : ticks[1].value - ticks[0].value;
      if (Math.abs(delta) >= 1 && tickValue !== Math.floor(tickValue)) {
          delta = tickValue - Math.floor(tickValue);
      }
      return delta;
  }
   var Ticks = {
      formatters
  };

  function applyScaleDefaults(defaults) {
      defaults.set('scale', {
          display: true,
          offset: false,
          reverse: false,
          beginAtZero: false,
   bounds: 'ticks',
          clip: true,
   grace: 0,
          grid: {
              display: true,
              lineWidth: 1,
              drawOnChartArea: true,
              drawTicks: true,
              tickLength: 8,
              tickWidth: (_ctx, options)=>options.lineWidth,
              tickColor: (_ctx, options)=>options.color,
              offset: false
          },
          border: {
              display: true,
              dash: [],
              dashOffset: 0.0,
              width: 1
          },
          title: {
              display: false,
              text: '',
              padding: {
                  top: 4,
                  bottom: 4
              }
          },
          ticks: {
              minRotation: 0,
              maxRotation: 50,
              mirror: false,
              textStrokeWidth: 0,
              textStrokeColor: '',
              padding: 3,
              display: true,
              autoSkip: true,
              autoSkipPadding: 3,
              labelOffset: 0,
              callback: Ticks.formatters.values,
              minor: {},
              major: {},
              align: 'center',
              crossAlign: 'near',
              showLabelBackdrop: false,
              backdropColor: 'rgba(255, 255, 255, 0.75)',
              backdropPadding: 2
          }
      });
      defaults.route('scale.ticks', 'color', '', 'color');
      defaults.route('scale.grid', 'color', '', 'borderColor');
      defaults.route('scale.border', 'color', '', 'borderColor');
      defaults.route('scale.title', 'color', '', 'color');
      defaults.describe('scale', {
          _fallback: false,
          _scriptable: (name)=>!name.startsWith('before') && !name.startsWith('after') && name !== 'callback' && name !== 'parser',
          _indexable: (name)=>name !== 'borderDash' && name !== 'tickBorderDash' && name !== 'dash'
      });
      defaults.describe('scales', {
          _fallback: 'scale'
      });
      defaults.describe('scale.ticks', {
          _scriptable: (name)=>name !== 'backdropPadding' && name !== 'callback',
          _indexable: (name)=>name !== 'backdropPadding'
      });
  }

  const overrides = Object.create(null);
  const descriptors = Object.create(null);
   function getScope$1(node, key) {
      if (!key) {
          return node;
      }
      const keys = key.split('.');
      for(let i = 0, n = keys.length; i < n; ++i){
          const k = keys[i];
          node = node[k] || (node[k] = Object.create(null));
      }
      return node;
  }
  function set(root, scope, values) {
      if (typeof scope === 'string') {
          return merge(getScope$1(root, scope), values);
      }
      return merge(getScope$1(root, ''), scope);
  }
   class Defaults {
      constructor(_descriptors, _appliers){
          this.animation = undefined;
          this.backgroundColor = 'rgba(0,0,0,0.1)';
          this.borderColor = 'rgba(0,0,0,0.1)';
          this.color = '#666';
          this.datasets = {};
          this.devicePixelRatio = (context)=>context.chart.platform.getDevicePixelRatio();
          this.elements = {};
          this.events = [
              'mousemove',
              'mouseout',
              'click',
              'touchstart',
              'touchmove'
          ];
          this.font = {
              family: "'Helvetica Neue', 'Helvetica', 'Arial', sans-serif",
              size: 12,
              style: 'normal',
              lineHeight: 1.2,
              weight: null
          };
          this.hover = {};
          this.hoverBackgroundColor = (ctx, options)=>getHoverColor(options.backgroundColor);
          this.hoverBorderColor = (ctx, options)=>getHoverColor(options.borderColor);
          this.hoverColor = (ctx, options)=>getHoverColor(options.color);
          this.indexAxis = 'x';
          this.interaction = {
              mode: 'nearest',
              intersect: true,
              includeInvisible: false
          };
          this.maintainAspectRatio = true;
          this.onHover = null;
          this.onClick = null;
          this.parsing = true;
          this.plugins = {};
          this.responsive = true;
          this.scale = undefined;
          this.scales = {};
          this.showLine = true;
          this.drawActiveElementsOnTop = true;
          this.describe(_descriptors);
          this.apply(_appliers);
      }
   set(scope, values) {
          return set(this, scope, values);
      }
   get(scope) {
          return getScope$1(this, scope);
      }
   describe(scope, values) {
          return set(descriptors, scope, values);
      }
      override(scope, values) {
          return set(overrides, scope, values);
      }
   route(scope, name, targetScope, targetName) {
          const scopeObject = getScope$1(this, scope);
          const targetScopeObject = getScope$1(this, targetScope);
          const privateName = '_' + name;
          Object.defineProperties(scopeObject, {
              [privateName]: {
                  value: scopeObject[name],
                  writable: true
              },
              [name]: {
                  enumerable: true,
                  get () {
                      const local = this[privateName];
                      const target = targetScopeObject[targetName];
                      if (isObject(local)) {
                          return Object.assign({}, target, local);
                      }
                      return valueOrDefault(local, target);
                  },
                  set (value) {
                      this[privateName] = value;
                  }
              }
          });
      }
      apply(appliers) {
          appliers.forEach((apply)=>apply(this));
      }
  }
  var defaults$1 = /* #__PURE__ */ new Defaults({
      _scriptable: (name)=>!name.startsWith('on'),
      _indexable: (name)=>name !== 'events',
      hover: {
          _fallback: 'interaction'
      },
      interaction: {
          _scriptable: false,
          _indexable: false
      }
  }, [
      applyAnimationsDefaults,
      applyLayoutsDefaults,
      applyScaleDefaults
  ]);

  /**
   * Converts the given font object into a CSS font string.
   * @param font - A font object.
   * @return The CSS font string. See https://developer.mozilla.org/en-US/docs/Web/CSS/font
   * @private
   */ function toFontString(font) {
      if (!font || isNullOrUndef(font.size) || isNullOrUndef(font.family)) {
          return null;
      }
      return (font.style ? font.style + ' ' : '') + (font.weight ? font.weight + ' ' : '') + font.size + 'px ' + font.family;
  }
  /**
   * @private
   */ function _measureText(ctx, data, gc, longest, string) {
      let textWidth = data[string];
      if (!textWidth) {
          textWidth = data[string] = ctx.measureText(string).width;
          gc.push(string);
      }
      if (textWidth > longest) {
          longest = textWidth;
      }
      return longest;
  }
  /**
   * @private
   */ // eslint-disable-next-line complexity
  function _longestText(ctx, font, arrayOfThings, cache) {
      cache = cache || {};
      let data = cache.data = cache.data || {};
      let gc = cache.garbageCollect = cache.garbageCollect || [];
      if (cache.font !== font) {
          data = cache.data = {};
          gc = cache.garbageCollect = [];
          cache.font = font;
      }
      ctx.save();
      ctx.font = font;
      let longest = 0;
      const ilen = arrayOfThings.length;
      let i, j, jlen, thing, nestedThing;
      for(i = 0; i < ilen; i++){
          thing = arrayOfThings[i];
          // Undefined strings and arrays should not be measured
          if (thing !== undefined && thing !== null && !isArray(thing)) {
              longest = _measureText(ctx, data, gc, longest, thing);
          } else if (isArray(thing)) {
              // if it is an array lets measure each element
              // to do maybe simplify this function a bit so we can do this more recursively?
              for(j = 0, jlen = thing.length; j < jlen; j++){
                  nestedThing = thing[j];
                  // Undefined strings and arrays should not be measured
                  if (nestedThing !== undefined && nestedThing !== null && !isArray(nestedThing)) {
                      longest = _measureText(ctx, data, gc, longest, nestedThing);
                  }
              }
          }
      }
      ctx.restore();
      const gcLen = gc.length / 2;
      if (gcLen > arrayOfThings.length) {
          for(i = 0; i < gcLen; i++){
              delete data[gc[i]];
          }
          gc.splice(0, gcLen);
      }
      return longest;
  }
  /**
   * Returns the aligned pixel value to avoid anti-aliasing blur
   * @param chart - The chart instance.
   * @param pixel - A pixel value.
   * @param width - The width of the element.
   * @returns The aligned pixel value.
   * @private
   */ function _alignPixel(chart, pixel, width) {
      const devicePixelRatio = chart.currentDevicePixelRatio;
      const halfWidth = width !== 0 ? Math.max(width / 2, 0.5) : 0;
      return Math.round((pixel - halfWidth) * devicePixelRatio) / devicePixelRatio + halfWidth;
  }
  /**
   * Clears the entire canvas.
   */ function clearCanvas(canvas, ctx) {
      if (!ctx && !canvas) {
          return;
      }
      ctx = ctx || canvas.getContext('2d');
      ctx.save();
      // canvas.width and canvas.height do not consider the canvas transform,
      // while clearRect does
      ctx.resetTransform();
      ctx.clearRect(0, 0, canvas.width, canvas.height);
      ctx.restore();
  }
  function drawPoint(ctx, options, x, y) {
      // eslint-disable-next-line @typescript-eslint/no-use-before-define
      drawPointLegend(ctx, options, x, y, null);
  }
  // eslint-disable-next-line complexity
  function drawPointLegend(ctx, options, x, y, w) {
      let type, xOffset, yOffset, size, cornerRadius, width, xOffsetW, yOffsetW;
      const style = options.pointStyle;
      const rotation = options.rotation;
      const radius = options.radius;
      let rad = (rotation || 0) * RAD_PER_DEG;
      if (style && typeof style === 'object') {
          type = style.toString();
          if (type === '[object HTMLImageElement]' || type === '[object HTMLCanvasElement]') {
              ctx.save();
              ctx.translate(x, y);
              ctx.rotate(rad);
              ctx.drawImage(style, -style.width / 2, -style.height / 2, style.width, style.height);
              ctx.restore();
              return;
          }
      }
      if (isNaN(radius) || radius <= 0) {
          return;
      }
      ctx.beginPath();
      switch(style){
          // Default includes circle
          default:
              if (w) {
                  ctx.ellipse(x, y, w / 2, radius, 0, 0, TAU);
              } else {
                  ctx.arc(x, y, radius, 0, TAU);
              }
              ctx.closePath();
              break;
          case 'triangle':
              width = w ? w / 2 : radius;
              ctx.moveTo(x + Math.sin(rad) * width, y - Math.cos(rad) * radius);
              rad += TWO_THIRDS_PI;
              ctx.lineTo(x + Math.sin(rad) * width, y - Math.cos(rad) * radius);
              rad += TWO_THIRDS_PI;
              ctx.lineTo(x + Math.sin(rad) * width, y - Math.cos(rad) * radius);
              ctx.closePath();
              break;
          case 'rectRounded':
              // NOTE: the rounded rect implementation changed to use `arc` instead of
              // `quadraticCurveTo` since it generates better results when rect is
              // almost a circle. 0.516 (instead of 0.5) produces results with visually
              // closer proportion to the previous impl and it is inscribed in the
              // circle with `radius`. For more details, see the following PRs:
              // https://github.com/chartjs/Chart.js/issues/5597
              // https://github.com/chartjs/Chart.js/issues/5858
              cornerRadius = radius * 0.516;
              size = radius - cornerRadius;
              xOffset = Math.cos(rad + QUARTER_PI) * size;
              xOffsetW = Math.cos(rad + QUARTER_PI) * (w ? w / 2 - cornerRadius : size);
              yOffset = Math.sin(rad + QUARTER_PI) * size;
              yOffsetW = Math.sin(rad + QUARTER_PI) * (w ? w / 2 - cornerRadius : size);
              ctx.arc(x - xOffsetW, y - yOffset, cornerRadius, rad - PI, rad - HALF_PI);
              ctx.arc(x + yOffsetW, y - xOffset, cornerRadius, rad - HALF_PI, rad);
              ctx.arc(x + xOffsetW, y + yOffset, cornerRadius, rad, rad + HALF_PI);
              ctx.arc(x - yOffsetW, y + xOffset, cornerRadius, rad + HALF_PI, rad + PI);
              ctx.closePath();
              break;
          case 'rect':
              if (!rotation) {
                  size = Math.SQRT1_2 * radius;
                  width = w ? w / 2 : size;
                  ctx.rect(x - width, y - size, 2 * width, 2 * size);
                  break;
              }
              rad += QUARTER_PI;
          /* falls through */ case 'rectRot':
              xOffsetW = Math.cos(rad) * (w ? w / 2 : radius);
              xOffset = Math.cos(rad) * radius;
              yOffset = Math.sin(rad) * radius;
              yOffsetW = Math.sin(rad) * (w ? w / 2 : radius);
              ctx.moveTo(x - xOffsetW, y - yOffset);
              ctx.lineTo(x + yOffsetW, y - xOffset);
              ctx.lineTo(x + xOffsetW, y + yOffset);
              ctx.lineTo(x - yOffsetW, y + xOffset);
              ctx.closePath();
              break;
          case 'crossRot':
              rad += QUARTER_PI;
          /* falls through */ case 'cross':
              xOffsetW = Math.cos(rad) * (w ? w / 2 : radius);
              xOffset = Math.cos(rad) * radius;
              yOffset = Math.sin(rad) * radius;
              yOffsetW = Math.sin(rad) * (w ? w / 2 : radius);
              ctx.moveTo(x - xOffsetW, y - yOffset);
              ctx.lineTo(x + xOffsetW, y + yOffset);
              ctx.moveTo(x + yOffsetW, y - xOffset);
              ctx.lineTo(x - yOffsetW, y + xOffset);
              break;
          case 'star':
              xOffsetW = Math.cos(rad) * (w ? w / 2 : radius);
              xOffset = Math.cos(rad) * radius;
              yOffset = Math.sin(rad) * radius;
              yOffsetW = Math.sin(rad) * (w ? w / 2 : radius);
              ctx.moveTo(x - xOffsetW, y - yOffset);
              ctx.lineTo(x + xOffsetW, y + yOffset);
              ctx.moveTo(x + yOffsetW, y - xOffset);
              ctx.lineTo(x - yOffsetW, y + xOffset);
              rad += QUARTER_PI;
              xOffsetW = Math.cos(rad) * (w ? w / 2 : radius);
              xOffset = Math.cos(rad) * radius;
              yOffset = Math.sin(rad) * radius;
              yOffsetW = Math.sin(rad) * (w ? w / 2 : radius);
              ctx.moveTo(x - xOffsetW, y - yOffset);
              ctx.lineTo(x + xOffsetW, y + yOffset);
              ctx.moveTo(x + yOffsetW, y - xOffset);
              ctx.lineTo(x - yOffsetW, y + xOffset);
              break;
          case 'line':
              xOffset = w ? w / 2 : Math.cos(rad) * radius;
              yOffset = Math.sin(rad) * radius;
              ctx.moveTo(x - xOffset, y - yOffset);
              ctx.lineTo(x + xOffset, y + yOffset);
              break;
          case 'dash':
              ctx.moveTo(x, y);
              ctx.lineTo(x + Math.cos(rad) * (w ? w / 2 : radius), y + Math.sin(rad) * radius);
              break;
          case false:
              ctx.closePath();
              break;
      }
      ctx.fill();
      if (options.borderWidth > 0) {
          ctx.stroke();
      }
  }
  /**
   * Returns true if the point is inside the rectangle
   * @param point - The point to test
   * @param area - The rectangle
   * @param margin - allowed margin
   * @private
   */ function _isPointInArea(point, area, margin) {
      margin = margin || 0.5; // margin - default is to match rounded decimals
      return !area || point && point.x > area.left - margin && point.x < area.right + margin && point.y > area.top - margin && point.y < area.bottom + margin;
  }
  function clipArea(ctx, area) {
      ctx.save();
      ctx.beginPath();
      ctx.rect(area.left, area.top, area.right - area.left, area.bottom - area.top);
      ctx.clip();
  }
  function unclipArea(ctx) {
      ctx.restore();
  }
  /**
   * @private
   */ function _steppedLineTo(ctx, previous, target, flip, mode) {
      if (!previous) {
          return ctx.lineTo(target.x, target.y);
      }
      if (mode === 'middle') {
          const midpoint = (previous.x + target.x) / 2.0;
          ctx.lineTo(midpoint, previous.y);
          ctx.lineTo(midpoint, target.y);
      } else if (mode === 'after' !== !!flip) {
          ctx.lineTo(previous.x, target.y);
      } else {
          ctx.lineTo(target.x, previous.y);
      }
      ctx.lineTo(target.x, target.y);
  }
  /**
   * @private
   */ function _bezierCurveTo(ctx, previous, target, flip) {
      if (!previous) {
          return ctx.lineTo(target.x, target.y);
      }
      ctx.bezierCurveTo(flip ? previous.cp1x : previous.cp2x, flip ? previous.cp1y : previous.cp2y, flip ? target.cp2x : target.cp1x, flip ? target.cp2y : target.cp1y, target.x, target.y);
  }
  function setRenderOpts(ctx, opts) {
      if (opts.translation) {
          ctx.translate(opts.translation[0], opts.translation[1]);
      }
      if (!isNullOrUndef(opts.rotation)) {
          ctx.rotate(opts.rotation);
      }
      if (opts.color) {
          ctx.fillStyle = opts.color;
      }
      if (opts.textAlign) {
          ctx.textAlign = opts.textAlign;
      }
      if (opts.textBaseline) {
          ctx.textBaseline = opts.textBaseline;
      }
  }
  function decorateText(ctx, x, y, line, opts) {
      if (opts.strikethrough || opts.underline) {
          /**
       * Now that IE11 support has been dropped, we can use more
       * of the TextMetrics object. The actual bounding boxes
       * are unflagged in Chrome, Firefox, Edge, and Safari so they
       * can be safely used.
       * See https://developer.mozilla.org/en-US/docs/Web/API/TextMetrics#Browser_compatibility
       */ const metrics = ctx.measureText(line);
          const left = x - metrics.actualBoundingBoxLeft;
          const right = x + metrics.actualBoundingBoxRight;
          const top = y - metrics.actualBoundingBoxAscent;
          const bottom = y + metrics.actualBoundingBoxDescent;
          const yDecoration = opts.strikethrough ? (top + bottom) / 2 : bottom;
          ctx.strokeStyle = ctx.fillStyle;
          ctx.beginPath();
          ctx.lineWidth = opts.decorationWidth || 2;
          ctx.moveTo(left, yDecoration);
          ctx.lineTo(right, yDecoration);
          ctx.stroke();
      }
  }
  function drawBackdrop(ctx, opts) {
      const oldColor = ctx.fillStyle;
      ctx.fillStyle = opts.color;
      ctx.fillRect(opts.left, opts.top, opts.width, opts.height);
      ctx.fillStyle = oldColor;
  }
  /**
   * Render text onto the canvas
   */ function renderText(ctx, text, x, y, font, opts = {}) {
      const lines = isArray(text) ? text : [
          text
      ];
      const stroke = opts.strokeWidth > 0 && opts.strokeColor !== '';
      let i, line;
      ctx.save();
      ctx.font = font.string;
      setRenderOpts(ctx, opts);
      for(i = 0; i < lines.length; ++i){
          line = lines[i];
          if (opts.backdrop) {
              drawBackdrop(ctx, opts.backdrop);
          }
          if (stroke) {
              if (opts.strokeColor) {
                  ctx.strokeStyle = opts.strokeColor;
              }
              if (!isNullOrUndef(opts.strokeWidth)) {
                  ctx.lineWidth = opts.strokeWidth;
              }
              ctx.strokeText(line, x, y, opts.maxWidth);
          }
          ctx.fillText(line, x, y, opts.maxWidth);
          decorateText(ctx, x, y, line, opts);
          y += Number(font.lineHeight);
      }
      ctx.restore();
  }
  /**
   * Add a path of a rectangle with rounded corners to the current sub-path
   * @param ctx - Context
   * @param rect - Bounding rect
   */ function addRoundedRectPath(ctx, rect) {
      const { x , y , w , h , radius  } = rect;
      // top left arc
      ctx.arc(x + radius.topLeft, y + radius.topLeft, radius.topLeft, 1.5 * PI, PI, true);
      // line from top left to bottom left
      ctx.lineTo(x, y + h - radius.bottomLeft);
      // bottom left arc
      ctx.arc(x + radius.bottomLeft, y + h - radius.bottomLeft, radius.bottomLeft, PI, HALF_PI, true);
      // line from bottom left to bottom right
      ctx.lineTo(x + w - radius.bottomRight, y + h);
      // bottom right arc
      ctx.arc(x + w - radius.bottomRight, y + h - radius.bottomRight, radius.bottomRight, HALF_PI, 0, true);
      // line from bottom right to top right
      ctx.lineTo(x + w, y + radius.topRight);
      // top right arc
      ctx.arc(x + w - radius.topRight, y + radius.topRight, radius.topRight, 0, -HALF_PI, true);
      // line from top right to top left
      ctx.lineTo(x + radius.topLeft, y);
  }

  const LINE_HEIGHT = /^(normal|(\d+(?:\.\d+)?)(px|em|%)?)$/;
  const FONT_STYLE = /^(normal|italic|initial|inherit|unset|(oblique( -?[0-9]?[0-9]deg)?))$/;
  /**
   * @alias Chart.helpers.options
   * @namespace
   */ /**
   * Converts the given line height `value` in pixels for a specific font `size`.
   * @param value - The lineHeight to parse (eg. 1.6, '14px', '75%', '1.6em').
   * @param size - The font size (in pixels) used to resolve relative `value`.
   * @returns The effective line height in pixels (size * 1.2 if value is invalid).
   * @see https://developer.mozilla.org/en-US/docs/Web/CSS/line-height
   * @since 2.7.0
   */ function toLineHeight(value, size) {
      const matches = ('' + value).match(LINE_HEIGHT);
      if (!matches || matches[1] === 'normal') {
          return size * 1.2;
      }
      value = +matches[2];
      switch(matches[3]){
          case 'px':
              return value;
          case '%':
              value /= 100;
              break;
      }
      return size * value;
  }
  const numberOrZero = (v)=>+v || 0;
  function _readValueToProps(value, props) {
      const ret = {};
      const objProps = isObject(props);
      const keys = objProps ? Object.keys(props) : props;
      const read = isObject(value) ? objProps ? (prop)=>valueOrDefault(value[prop], value[props[prop]]) : (prop)=>value[prop] : ()=>value;
      for (const prop of keys){
          ret[prop] = numberOrZero(read(prop));
      }
      return ret;
  }
  /**
   * Converts the given value into a TRBL object.
   * @param value - If a number, set the value to all TRBL component,
   *  else, if an object, use defined properties and sets undefined ones to 0.
   *  x / y are shorthands for same value for left/right and top/bottom.
   * @returns The padding values (top, right, bottom, left)
   * @since 3.0.0
   */ function toTRBL(value) {
      return _readValueToProps(value, {
          top: 'y',
          right: 'x',
          bottom: 'y',
          left: 'x'
      });
  }
  /**
   * Converts the given value into a TRBL corners object (similar with css border-radius).
   * @param value - If a number, set the value to all TRBL corner components,
   *  else, if an object, use defined properties and sets undefined ones to 0.
   * @returns The TRBL corner values (topLeft, topRight, bottomLeft, bottomRight)
   * @since 3.0.0
   */ function toTRBLCorners(value) {
      return _readValueToProps(value, [
          'topLeft',
          'topRight',
          'bottomLeft',
          'bottomRight'
      ]);
  }
  /**
   * Converts the given value into a padding object with pre-computed width/height.
   * @param value - If a number, set the value to all TRBL component,
   *  else, if an object, use defined properties and sets undefined ones to 0.
   *  x / y are shorthands for same value for left/right and top/bottom.
   * @returns The padding values (top, right, bottom, left, width, height)
   * @since 2.7.0
   */ function toPadding(value) {
      const obj = toTRBL(value);
      obj.width = obj.left + obj.right;
      obj.height = obj.top + obj.bottom;
      return obj;
  }
  /**
   * Parses font options and returns the font object.
   * @param options - A object that contains font options to be parsed.
   * @param fallback - A object that contains fallback font options.
   * @return The font object.
   * @private
   */ function toFont(options, fallback) {
      options = options || {};
      fallback = fallback || defaults$1.font;
      let size = valueOrDefault(options.size, fallback.size);
      if (typeof size === 'string') {
          size = parseInt(size, 10);
      }
      let style = valueOrDefault(options.style, fallback.style);
      if (style && !('' + style).match(FONT_STYLE)) {
          console.warn('Invalid font style specified: "' + style + '"');
          style = undefined;
      }
      const font = {
          family: valueOrDefault(options.family, fallback.family),
          lineHeight: toLineHeight(valueOrDefault(options.lineHeight, fallback.lineHeight), size),
          size,
          style,
          weight: valueOrDefault(options.weight, fallback.weight),
          string: ''
      };
      font.string = toFontString(font);
      return font;
  }
  /**
   * Evaluates the given `inputs` sequentially and returns the first defined value.
   * @param inputs - An array of values, falling back to the last value.
   * @param context - If defined and the current value is a function, the value
   * is called with `context` as first argument and the result becomes the new input.
   * @param index - If defined and the current value is an array, the value
   * at `index` become the new input.
   * @param info - object to return information about resolution in
   * @param info.cacheable - Will be set to `false` if option is not cacheable.
   * @since 2.7.0
   */ function resolve(inputs, context, index, info) {
      let i, ilen, value;
      for(i = 0, ilen = inputs.length; i < ilen; ++i){
          value = inputs[i];
          if (value === undefined) {
              continue;
          }
          if (value !== undefined) {
              return value;
          }
      }
  }
  /**
   * @param minmax
   * @param grace
   * @param beginAtZero
   * @private
   */ function _addGrace(minmax, grace, beginAtZero) {
      const { min , max  } = minmax;
      const change = toDimension(grace, (max - min) / 2);
      const keepZero = (value, add)=>beginAtZero && value === 0 ? 0 : value + add;
      return {
          min: keepZero(min, -Math.abs(change)),
          max: keepZero(max, change)
      };
  }
  function createContext(parentContext, context) {
      return Object.assign(Object.create(parentContext), context);
  }

  /**
   * Creates a Proxy for resolving raw values for options.
   * @param scopes - The option scopes to look for values, in resolution order
   * @param prefixes - The prefixes for values, in resolution order.
   * @param rootScopes - The root option scopes
   * @param fallback - Parent scopes fallback
   * @param getTarget - callback for getting the target for changed values
   * @returns Proxy
   * @private
   */ function _createResolver(scopes, prefixes = [
      ''
  ], rootScopes, fallback, getTarget = ()=>scopes[0]) {
      const finalRootScopes = rootScopes || scopes;
      if (typeof fallback === 'undefined') {
          fallback = _resolve('_fallback', scopes);
      }
      const cache = {
          [Symbol.toStringTag]: 'Object',
          _cacheable: true,
          _scopes: scopes,
          _rootScopes: finalRootScopes,
          _fallback: fallback,
          _getTarget: getTarget,
          override: (scope)=>_createResolver([
                  scope,
                  ...scopes
              ], prefixes, finalRootScopes, fallback)
      };
      return new Proxy(cache, {
          /**
       * A trap for the delete operator.
       */ deleteProperty (target, prop) {
              delete target[prop]; // remove from cache
              delete target._keys; // remove cached keys
              delete scopes[0][prop]; // remove from top level scope
              return true;
          },
          /**
       * A trap for getting property values.
       */ get (target, prop) {
              return _cached(target, prop, ()=>_resolveWithPrefixes(prop, prefixes, scopes, target));
          },
          /**
       * A trap for Object.getOwnPropertyDescriptor.
       * Also used by Object.hasOwnProperty.
       */ getOwnPropertyDescriptor (target, prop) {
              return Reflect.getOwnPropertyDescriptor(target._scopes[0], prop);
          },
          /**
       * A trap for Object.getPrototypeOf.
       */ getPrototypeOf () {
              return Reflect.getPrototypeOf(scopes[0]);
          },
          /**
       * A trap for the in operator.
       */ has (target, prop) {
              return getKeysFromAllScopes(target).includes(prop);
          },
          /**
       * A trap for Object.getOwnPropertyNames and Object.getOwnPropertySymbols.
       */ ownKeys (target) {
              return getKeysFromAllScopes(target);
          },
          /**
       * A trap for setting property values.
       */ set (target, prop, value) {
              const storage = target._storage || (target._storage = getTarget());
              target[prop] = storage[prop] = value; // set to top level scope + cache
              delete target._keys; // remove cached keys
              return true;
          }
      });
  }
  /**
   * Returns an Proxy for resolving option values with context.
   * @param proxy - The Proxy returned by `_createResolver`
   * @param context - Context object for scriptable/indexable options
   * @param subProxy - The proxy provided for scriptable options
   * @param descriptorDefaults - Defaults for descriptors
   * @private
   */ function _attachContext(proxy, context, subProxy, descriptorDefaults) {
      const cache = {
          _cacheable: false,
          _proxy: proxy,
          _context: context,
          _subProxy: subProxy,
          _stack: new Set(),
          _descriptors: _descriptors(proxy, descriptorDefaults),
          setContext: (ctx)=>_attachContext(proxy, ctx, subProxy, descriptorDefaults),
          override: (scope)=>_attachContext(proxy.override(scope), context, subProxy, descriptorDefaults)
      };
      return new Proxy(cache, {
          /**
       * A trap for the delete operator.
       */ deleteProperty (target, prop) {
              delete target[prop]; // remove from cache
              delete proxy[prop]; // remove from proxy
              return true;
          },
          /**
       * A trap for getting property values.
       */ get (target, prop, receiver) {
              return _cached(target, prop, ()=>_resolveWithContext(target, prop, receiver));
          },
          /**
       * A trap for Object.getOwnPropertyDescriptor.
       * Also used by Object.hasOwnProperty.
       */ getOwnPropertyDescriptor (target, prop) {
              return target._descriptors.allKeys ? Reflect.has(proxy, prop) ? {
                  enumerable: true,
                  configurable: true
              } : undefined : Reflect.getOwnPropertyDescriptor(proxy, prop);
          },
          /**
       * A trap for Object.getPrototypeOf.
       */ getPrototypeOf () {
              return Reflect.getPrototypeOf(proxy);
          },
          /**
       * A trap for the in operator.
       */ has (target, prop) {
              return Reflect.has(proxy, prop);
          },
          /**
       * A trap for Object.getOwnPropertyNames and Object.getOwnPropertySymbols.
       */ ownKeys () {
              return Reflect.ownKeys(proxy);
          },
          /**
       * A trap for setting property values.
       */ set (target, prop, value) {
              proxy[prop] = value; // set to proxy
              delete target[prop]; // remove from cache
              return true;
          }
      });
  }
  /**
   * @private
   */ function _descriptors(proxy, defaults = {
      scriptable: true,
      indexable: true
  }) {
      const { _scriptable =defaults.scriptable , _indexable =defaults.indexable , _allKeys =defaults.allKeys  } = proxy;
      return {
          allKeys: _allKeys,
          scriptable: _scriptable,
          indexable: _indexable,
          isScriptable: isFunction(_scriptable) ? _scriptable : ()=>_scriptable,
          isIndexable: isFunction(_indexable) ? _indexable : ()=>_indexable
      };
  }
  const readKey = (prefix, name)=>prefix ? prefix + _capitalize(name) : name;
  const needsSubResolver = (prop, value)=>isObject(value) && prop !== 'adapters' && (Object.getPrototypeOf(value) === null || value.constructor === Object);
  function _cached(target, prop, resolve) {
      if (Object.prototype.hasOwnProperty.call(target, prop) || prop === 'constructor') {
          return target[prop];
      }
      const value = resolve();
      // cache the resolved value
      target[prop] = value;
      return value;
  }
  function _resolveWithContext(target, prop, receiver) {
      const { _proxy , _context , _subProxy , _descriptors: descriptors  } = target;
      let value = _proxy[prop]; // resolve from proxy
      // resolve with context
      if (isFunction(value) && descriptors.isScriptable(prop)) {
          value = _resolveScriptable(prop, value, target, receiver);
      }
      if (isArray(value) && value.length) {
          value = _resolveArray(prop, value, target, descriptors.isIndexable);
      }
      if (needsSubResolver(prop, value)) {
          // if the resolved value is an object, create a sub resolver for it
          value = _attachContext(value, _context, _subProxy && _subProxy[prop], descriptors);
      }
      return value;
  }
  function _resolveScriptable(prop, getValue, target, receiver) {
      const { _proxy , _context , _subProxy , _stack  } = target;
      if (_stack.has(prop)) {
          throw new Error('Recursion detected: ' + Array.from(_stack).join('->') + '->' + prop);
      }
      _stack.add(prop);
      let value = getValue(_context, _subProxy || receiver);
      _stack.delete(prop);
      if (needsSubResolver(prop, value)) {
          // When scriptable option returns an object, create a resolver on that.
          value = createSubResolver(_proxy._scopes, _proxy, prop, value);
      }
      return value;
  }
  function _resolveArray(prop, value, target, isIndexable) {
      const { _proxy , _context , _subProxy , _descriptors: descriptors  } = target;
      if (typeof _context.index !== 'undefined' && isIndexable(prop)) {
          return value[_context.index % value.length];
      } else if (isObject(value[0])) {
          // Array of objects, return array or resolvers
          const arr = value;
          const scopes = _proxy._scopes.filter((s)=>s !== arr);
          value = [];
          for (const item of arr){
              const resolver = createSubResolver(scopes, _proxy, prop, item);
              value.push(_attachContext(resolver, _context, _subProxy && _subProxy[prop], descriptors));
          }
      }
      return value;
  }
  function resolveFallback(fallback, prop, value) {
      return isFunction(fallback) ? fallback(prop, value) : fallback;
  }
  const getScope = (key, parent)=>key === true ? parent : typeof key === 'string' ? resolveObjectKey(parent, key) : undefined;
  function addScopes(set, parentScopes, key, parentFallback, value) {
      for (const parent of parentScopes){
          const scope = getScope(key, parent);
          if (scope) {
              set.add(scope);
              const fallback = resolveFallback(scope._fallback, key, value);
              if (typeof fallback !== 'undefined' && fallback !== key && fallback !== parentFallback) {
                  // When we reach the descriptor that defines a new _fallback, return that.
                  // The fallback will resume to that new scope.
                  return fallback;
              }
          } else if (scope === false && typeof parentFallback !== 'undefined' && key !== parentFallback) {
              // Fallback to `false` results to `false`, when falling back to different key.
              // For example `interaction` from `hover` or `plugins.tooltip` and `animation` from `animations`
              return null;
          }
      }
      return false;
  }
  function createSubResolver(parentScopes, resolver, prop, value) {
      const rootScopes = resolver._rootScopes;
      const fallback = resolveFallback(resolver._fallback, prop, value);
      const allScopes = [
          ...parentScopes,
          ...rootScopes
      ];
      const set = new Set();
      set.add(value);
      let key = addScopesFromKey(set, allScopes, prop, fallback || prop, value);
      if (key === null) {
          return false;
      }
      if (typeof fallback !== 'undefined' && fallback !== prop) {
          key = addScopesFromKey(set, allScopes, fallback, key, value);
          if (key === null) {
              return false;
          }
      }
      return _createResolver(Array.from(set), [
          ''
      ], rootScopes, fallback, ()=>subGetTarget(resolver, prop, value));
  }
  function addScopesFromKey(set, allScopes, key, fallback, item) {
      while(key){
          key = addScopes(set, allScopes, key, fallback, item);
      }
      return key;
  }
  function subGetTarget(resolver, prop, value) {
      const parent = resolver._getTarget();
      if (!(prop in parent)) {
          parent[prop] = {};
      }
      const target = parent[prop];
      if (isArray(target) && isObject(value)) {
          // For array of objects, the object is used to store updated values
          return value;
      }
      return target || {};
  }
  function _resolveWithPrefixes(prop, prefixes, scopes, proxy) {
      let value;
      for (const prefix of prefixes){
          value = _resolve(readKey(prefix, prop), scopes);
          if (typeof value !== 'undefined') {
              return needsSubResolver(prop, value) ? createSubResolver(scopes, proxy, prop, value) : value;
          }
      }
  }
  function _resolve(key, scopes) {
      for (const scope of scopes){
          if (!scope) {
              continue;
          }
          const value = scope[key];
          if (typeof value !== 'undefined') {
              return value;
          }
      }
  }
  function getKeysFromAllScopes(target) {
      let keys = target._keys;
      if (!keys) {
          keys = target._keys = resolveKeysFromAllScopes(target._scopes);
      }
      return keys;
  }
  function resolveKeysFromAllScopes(scopes) {
      const set = new Set();
      for (const scope of scopes){
          for (const key of Object.keys(scope).filter((k)=>!k.startsWith('_'))){
              set.add(key);
          }
      }
      return Array.from(set);
  }
  function _parseObjectDataRadialScale(meta, data, start, count) {
      const { iScale  } = meta;
      const { key ='r'  } = this._parsing;
      const parsed = new Array(count);
      let i, ilen, index, item;
      for(i = 0, ilen = count; i < ilen; ++i){
          index = i + start;
          item = data[index];
          parsed[i] = {
              r: iScale.parse(resolveObjectKey(item, key), index)
          };
      }
      return parsed;
  }

  const EPSILON = Number.EPSILON || 1e-14;
  const getPoint = (points, i)=>i < points.length && !points[i].skip && points[i];
  const getValueAxis = (indexAxis)=>indexAxis === 'x' ? 'y' : 'x';
  function splineCurve(firstPoint, middlePoint, afterPoint, t) {
      // Props to Rob Spencer at scaled innovation for his post on splining between points
      // http://scaledinnovation.com/analytics/splines/aboutSplines.html
      // This function must also respect "skipped" points
      const previous = firstPoint.skip ? middlePoint : firstPoint;
      const current = middlePoint;
      const next = afterPoint.skip ? middlePoint : afterPoint;
      const d01 = distanceBetweenPoints(current, previous);
      const d12 = distanceBetweenPoints(next, current);
      let s01 = d01 / (d01 + d12);
      let s12 = d12 / (d01 + d12);
      // If all points are the same, s01 & s02 will be inf
      s01 = isNaN(s01) ? 0 : s01;
      s12 = isNaN(s12) ? 0 : s12;
      const fa = t * s01; // scaling factor for triangle Ta
      const fb = t * s12;
      return {
          previous: {
              x: current.x - fa * (next.x - previous.x),
              y: current.y - fa * (next.y - previous.y)
          },
          next: {
              x: current.x + fb * (next.x - previous.x),
              y: current.y + fb * (next.y - previous.y)
          }
      };
  }
  /**
   * Adjust tangents to ensure monotonic properties
   */ function monotoneAdjust(points, deltaK, mK) {
      const pointsLen = points.length;
      let alphaK, betaK, tauK, squaredMagnitude, pointCurrent;
      let pointAfter = getPoint(points, 0);
      for(let i = 0; i < pointsLen - 1; ++i){
          pointCurrent = pointAfter;
          pointAfter = getPoint(points, i + 1);
          if (!pointCurrent || !pointAfter) {
              continue;
          }
          if (almostEquals(deltaK[i], 0, EPSILON)) {
              mK[i] = mK[i + 1] = 0;
              continue;
          }
          alphaK = mK[i] / deltaK[i];
          betaK = mK[i + 1] / deltaK[i];
          squaredMagnitude = Math.pow(alphaK, 2) + Math.pow(betaK, 2);
          if (squaredMagnitude <= 9) {
              continue;
          }
          tauK = 3 / Math.sqrt(squaredMagnitude);
          mK[i] = alphaK * tauK * deltaK[i];
          mK[i + 1] = betaK * tauK * deltaK[i];
      }
  }
  function monotoneCompute(points, mK, indexAxis = 'x') {
      const valueAxis = getValueAxis(indexAxis);
      const pointsLen = points.length;
      let delta, pointBefore, pointCurrent;
      let pointAfter = getPoint(points, 0);
      for(let i = 0; i < pointsLen; ++i){
          pointBefore = pointCurrent;
          pointCurrent = pointAfter;
          pointAfter = getPoint(points, i + 1);
          if (!pointCurrent) {
              continue;
          }
          const iPixel = pointCurrent[indexAxis];
          const vPixel = pointCurrent[valueAxis];
          if (pointBefore) {
              delta = (iPixel - pointBefore[indexAxis]) / 3;
              pointCurrent[`cp1${indexAxis}`] = iPixel - delta;
              pointCurrent[`cp1${valueAxis}`] = vPixel - delta * mK[i];
          }
          if (pointAfter) {
              delta = (pointAfter[indexAxis] - iPixel) / 3;
              pointCurrent[`cp2${indexAxis}`] = iPixel + delta;
              pointCurrent[`cp2${valueAxis}`] = vPixel + delta * mK[i];
          }
      }
  }
  /**
   * This function calculates Bézier control points in a similar way than |splineCurve|,
   * but preserves monotonicity of the provided data and ensures no local extremums are added
   * between the dataset discrete points due to the interpolation.
   * See : https://en.wikipedia.org/wiki/Monotone_cubic_interpolation
   */ function splineCurveMonotone(points, indexAxis = 'x') {
      const valueAxis = getValueAxis(indexAxis);
      const pointsLen = points.length;
      const deltaK = Array(pointsLen).fill(0);
      const mK = Array(pointsLen);
      // Calculate slopes (deltaK) and initialize tangents (mK)
      let i, pointBefore, pointCurrent;
      let pointAfter = getPoint(points, 0);
      for(i = 0; i < pointsLen; ++i){
          pointBefore = pointCurrent;
          pointCurrent = pointAfter;
          pointAfter = getPoint(points, i + 1);
          if (!pointCurrent) {
              continue;
          }
          if (pointAfter) {
              const slopeDelta = pointAfter[indexAxis] - pointCurrent[indexAxis];
              // In the case of two points that appear at the same x pixel, slopeDeltaX is 0
              deltaK[i] = slopeDelta !== 0 ? (pointAfter[valueAxis] - pointCurrent[valueAxis]) / slopeDelta : 0;
          }
          mK[i] = !pointBefore ? deltaK[i] : !pointAfter ? deltaK[i - 1] : sign(deltaK[i - 1]) !== sign(deltaK[i]) ? 0 : (deltaK[i - 1] + deltaK[i]) / 2;
      }
      monotoneAdjust(points, deltaK, mK);
      monotoneCompute(points, mK, indexAxis);
  }
  function capControlPoint(pt, min, max) {
      return Math.max(Math.min(pt, max), min);
  }
  function capBezierPoints(points, area) {
      let i, ilen, point, inArea, inAreaPrev;
      let inAreaNext = _isPointInArea(points[0], area);
      for(i = 0, ilen = points.length; i < ilen; ++i){
          inAreaPrev = inArea;
          inArea = inAreaNext;
          inAreaNext = i < ilen - 1 && _isPointInArea(points[i + 1], area);
          if (!inArea) {
              continue;
          }
          point = points[i];
          if (inAreaPrev) {
              point.cp1x = capControlPoint(point.cp1x, area.left, area.right);
              point.cp1y = capControlPoint(point.cp1y, area.top, area.bottom);
          }
          if (inAreaNext) {
              point.cp2x = capControlPoint(point.cp2x, area.left, area.right);
              point.cp2y = capControlPoint(point.cp2y, area.top, area.bottom);
          }
      }
  }
  /**
   * @private
   */ function _updateBezierControlPoints(points, options, area, loop, indexAxis) {
      let i, ilen, point, controlPoints;
      // Only consider points that are drawn in case the spanGaps option is used
      if (options.spanGaps) {
          points = points.filter((pt)=>!pt.skip);
      }
      if (options.cubicInterpolationMode === 'monotone') {
          splineCurveMonotone(points, indexAxis);
      } else {
          let prev = loop ? points[points.length - 1] : points[0];
          for(i = 0, ilen = points.length; i < ilen; ++i){
              point = points[i];
              controlPoints = splineCurve(prev, point, points[Math.min(i + 1, ilen - (loop ? 0 : 1)) % ilen], options.tension);
              point.cp1x = controlPoints.previous.x;
              point.cp1y = controlPoints.previous.y;
              point.cp2x = controlPoints.next.x;
              point.cp2y = controlPoints.next.y;
              prev = point;
          }
      }
      if (options.capBezierPoints) {
          capBezierPoints(points, area);
      }
  }

  /**
   * Note: typedefs are auto-exported, so use a made-up `dom` namespace where
   * necessary to avoid duplicates with `export * from './helpers`; see
   * https://github.com/microsoft/TypeScript/issues/46011
   * @typedef { import('../core/core.controller.js').default } dom.Chart
   * @typedef { import('../../types').ChartEvent } ChartEvent
   */ /**
   * @private
   */ function _isDomSupported() {
      return typeof window !== 'undefined' && typeof document !== 'undefined';
  }
  /**
   * @private
   */ function _getParentNode(domNode) {
      let parent = domNode.parentNode;
      if (parent && parent.toString() === '[object ShadowRoot]') {
          parent = parent.host;
      }
      return parent;
  }
  /**
   * convert max-width/max-height values that may be percentages into a number
   * @private
   */ function parseMaxStyle(styleValue, node, parentProperty) {
      let valueInPixels;
      if (typeof styleValue === 'string') {
          valueInPixels = parseInt(styleValue, 10);
          if (styleValue.indexOf('%') !== -1) {
              // percentage * size in dimension
              valueInPixels = valueInPixels / 100 * node.parentNode[parentProperty];
          }
      } else {
          valueInPixels = styleValue;
      }
      return valueInPixels;
  }
  const getComputedStyle$1 = (element)=>element.ownerDocument.defaultView.getComputedStyle(element, null);
  function getStyle(el, property) {
      return getComputedStyle$1(el).getPropertyValue(property);
  }
  const positions = [
      'top',
      'right',
      'bottom',
      'left'
  ];
  function getPositionedStyle(styles, style, suffix) {
      const result = {};
      suffix = suffix ? '-' + suffix : '';
      for(let i = 0; i < 4; i++){
          const pos = positions[i];
          result[pos] = parseFloat(styles[style + '-' + pos + suffix]) || 0;
      }
      result.width = result.left + result.right;
      result.height = result.top + result.bottom;
      return result;
  }
  const useOffsetPos = (x, y, target)=>(x > 0 || y > 0) && (!target || !target.shadowRoot);
  /**
   * @param e
   * @param canvas
   * @returns Canvas position
   */ function getCanvasPosition(e, canvas) {
      const touches = e.touches;
      const source = touches && touches.length ? touches[0] : e;
      const { offsetX , offsetY  } = source;
      let box = false;
      let x, y;
      if (useOffsetPos(offsetX, offsetY, e.target)) {
          x = offsetX;
          y = offsetY;
      } else {
          const rect = canvas.getBoundingClientRect();
          x = source.clientX - rect.left;
          y = source.clientY - rect.top;
          box = true;
      }
      return {
          x,
          y,
          box
      };
  }
  /**
   * Gets an event's x, y coordinates, relative to the chart area
   * @param event
   * @param chart
   * @returns x and y coordinates of the event
   */ function getRelativePosition(event, chart) {
      if ('native' in event) {
          return event;
      }
      const { canvas , currentDevicePixelRatio  } = chart;
      const style = getComputedStyle$1(canvas);
      const borderBox = style.boxSizing === 'border-box';
      const paddings = getPositionedStyle(style, 'padding');
      const borders = getPositionedStyle(style, 'border', 'width');
      const { x , y , box  } = getCanvasPosition(event, canvas);
      const xOffset = paddings.left + (box && borders.left);
      const yOffset = paddings.top + (box && borders.top);
      let { width , height  } = chart;
      if (borderBox) {
          width -= paddings.width + borders.width;
          height -= paddings.height + borders.height;
      }
      return {
          x: Math.round((x - xOffset) / width * canvas.width / currentDevicePixelRatio),
          y: Math.round((y - yOffset) / height * canvas.height / currentDevicePixelRatio)
      };
  }
  function getContainerSize(canvas, width, height) {
      let maxWidth, maxHeight;
      if (width === undefined || height === undefined) {
          const container = canvas && _getParentNode(canvas);
          if (!container) {
              width = canvas.clientWidth;
              height = canvas.clientHeight;
          } else {
              const rect = container.getBoundingClientRect(); // this is the border box of the container
              const containerStyle = getComputedStyle$1(container);
              const containerBorder = getPositionedStyle(containerStyle, 'border', 'width');
              const containerPadding = getPositionedStyle(containerStyle, 'padding');
              width = rect.width - containerPadding.width - containerBorder.width;
              height = rect.height - containerPadding.height - containerBorder.height;
              maxWidth = parseMaxStyle(containerStyle.maxWidth, container, 'clientWidth');
              maxHeight = parseMaxStyle(containerStyle.maxHeight, container, 'clientHeight');
          }
      }
      return {
          width,
          height,
          maxWidth: maxWidth || INFINITY,
          maxHeight: maxHeight || INFINITY
      };
  }
  const round1 = (v)=>Math.round(v * 10) / 10;
  // eslint-disable-next-line complexity
  function getMaximumSize(canvas, bbWidth, bbHeight, aspectRatio) {
      const style = getComputedStyle$1(canvas);
      const margins = getPositionedStyle(style, 'margin');
      const maxWidth = parseMaxStyle(style.maxWidth, canvas, 'clientWidth') || INFINITY;
      const maxHeight = parseMaxStyle(style.maxHeight, canvas, 'clientHeight') || INFINITY;
      const containerSize = getContainerSize(canvas, bbWidth, bbHeight);
      let { width , height  } = containerSize;
      if (style.boxSizing === 'content-box') {
          const borders = getPositionedStyle(style, 'border', 'width');
          const paddings = getPositionedStyle(style, 'padding');
          width -= paddings.width + borders.width;
          height -= paddings.height + borders.height;
      }
      width = Math.max(0, width - margins.width);
      height = Math.max(0, aspectRatio ? width / aspectRatio : height - margins.height);
      width = round1(Math.min(width, maxWidth, containerSize.maxWidth));
      height = round1(Math.min(height, maxHeight, containerSize.maxHeight));
      if (width && !height) {
          // https://github.com/chartjs/Chart.js/issues/4659
          // If the canvas has width, but no height, default to aspectRatio of 2 (canvas default)
          height = round1(width / 2);
      }
      const maintainHeight = bbWidth !== undefined || bbHeight !== undefined;
      if (maintainHeight && aspectRatio && containerSize.height && height > containerSize.height) {
          height = containerSize.height;
          width = round1(Math.floor(height * aspectRatio));
      }
      return {
          width,
          height
      };
  }
  /**
   * @param chart
   * @param forceRatio
   * @param forceStyle
   * @returns True if the canvas context size or transformation has changed.
   */ function retinaScale(chart, forceRatio, forceStyle) {
      const pixelRatio = forceRatio || 1;
      const deviceHeight = Math.floor(chart.height * pixelRatio);
      const deviceWidth = Math.floor(chart.width * pixelRatio);
      chart.height = Math.floor(chart.height);
      chart.width = Math.floor(chart.width);
      const canvas = chart.canvas;
      // If no style has been set on the canvas, the render size is used as display size,
      // making the chart visually bigger, so let's enforce it to the "correct" values.
      // See https://github.com/chartjs/Chart.js/issues/3575
      if (canvas.style && (forceStyle || !canvas.style.height && !canvas.style.width)) {
          canvas.style.height = `${chart.height}px`;
          canvas.style.width = `${chart.width}px`;
      }
      if (chart.currentDevicePixelRatio !== pixelRatio || canvas.height !== deviceHeight || canvas.width !== deviceWidth) {
          chart.currentDevicePixelRatio = pixelRatio;
          canvas.height = deviceHeight;
          canvas.width = deviceWidth;
          chart.ctx.setTransform(pixelRatio, 0, 0, pixelRatio, 0, 0);
          return true;
      }
      return false;
  }
  /**
   * Detects support for options object argument in addEventListener.
   * https://developer.mozilla.org/en-US/docs/Web/API/EventTarget/addEventListener#Safely_detecting_option_support
   * @private
   */ const supportsEventListenerOptions = function() {
      let passiveSupported = false;
      try {
          const options = {
              get passive () {
                  passiveSupported = true;
                  return false;
              }
          };
          if (_isDomSupported()) {
              window.addEventListener('test', null, options);
              window.removeEventListener('test', null, options);
          }
      } catch (e) {
      // continue regardless of error
      }
      return passiveSupported;
  }();
  /**
   * The "used" size is the final value of a dimension property after all calculations have
   * been performed. This method uses the computed style of `element` but returns undefined
   * if the computed style is not expressed in pixels. That can happen in some cases where
   * `element` has a size relative to its parent and this last one is not yet displayed,
   * for example because of `display: none` on a parent node.
   * @see https://developer.mozilla.org/en-US/docs/Web/CSS/used_value
   * @returns Size in pixels or undefined if unknown.
   */ function readUsedSize(element, property) {
      const value = getStyle(element, property);
      const matches = value && value.match(/^(\d+)(\.\d+)?px$/);
      return matches ? +matches[1] : undefined;
  }

  /**
   * @private
   */ function _pointInLine(p1, p2, t, mode) {
      return {
          x: p1.x + t * (p2.x - p1.x),
          y: p1.y + t * (p2.y - p1.y)
      };
  }
  /**
   * @private
   */ function _steppedInterpolation(p1, p2, t, mode) {
      return {
          x: p1.x + t * (p2.x - p1.x),
          y: mode === 'middle' ? t < 0.5 ? p1.y : p2.y : mode === 'after' ? t < 1 ? p1.y : p2.y : t > 0 ? p2.y : p1.y
      };
  }
  /**
   * @private
   */ function _bezierInterpolation(p1, p2, t, mode) {
      const cp1 = {
          x: p1.cp2x,
          y: p1.cp2y
      };
      const cp2 = {
          x: p2.cp1x,
          y: p2.cp1y
      };
      const a = _pointInLine(p1, cp1, t);
      const b = _pointInLine(cp1, cp2, t);
      const c = _pointInLine(cp2, p2, t);
      const d = _pointInLine(a, b, t);
      const e = _pointInLine(b, c, t);
      return _pointInLine(d, e, t);
  }

  const getRightToLeftAdapter = function(rectX, width) {
      return {
          x (x) {
              return rectX + rectX + width - x;
          },
          setWidth (w) {
              width = w;
          },
          textAlign (align) {
              if (align === 'center') {
                  return align;
              }
              return align === 'right' ? 'left' : 'right';
          },
          xPlus (x, value) {
              return x - value;
          },
          leftForLtr (x, itemWidth) {
              return x - itemWidth;
          }
      };
  };
  const getLeftToRightAdapter = function() {
      return {
          x (x) {
              return x;
          },
          setWidth (w) {},
          textAlign (align) {
              return align;
          },
          xPlus (x, value) {
              return x + value;
          },
          leftForLtr (x, _itemWidth) {
              return x;
          }
      };
  };
  function getRtlAdapter(rtl, rectX, width) {
      return rtl ? getRightToLeftAdapter(rectX, width) : getLeftToRightAdapter();
  }
  function overrideTextDirection(ctx, direction) {
      let style, original;
      if (direction === 'ltr' || direction === 'rtl') {
          style = ctx.canvas.style;
          original = [
              style.getPropertyValue('direction'),
              style.getPropertyPriority('direction')
          ];
          style.setProperty('direction', direction, 'important');
          ctx.prevTextDirection = original;
      }
  }
  function restoreTextDirection(ctx, original) {
      if (original !== undefined) {
          delete ctx.prevTextDirection;
          ctx.canvas.style.setProperty('direction', original[0], original[1]);
      }
  }

  function propertyFn(property) {
      if (property === 'angle') {
          return {
              between: _angleBetween,
              compare: _angleDiff,
              normalize: _normalizeAngle
          };
      }
      return {
          between: _isBetween,
          compare: (a, b)=>a - b,
          normalize: (x)=>x
      };
  }
  function normalizeSegment({ start , end , count , loop , style  }) {
      return {
          start: start % count,
          end: end % count,
          loop: loop && (end - start + 1) % count === 0,
          style
      };
  }
  function getSegment(segment, points, bounds) {
      const { property , start: startBound , end: endBound  } = bounds;
      const { between , normalize  } = propertyFn(property);
      const count = points.length;
      let { start , end , loop  } = segment;
      let i, ilen;
      if (loop) {
          start += count;
          end += count;
          for(i = 0, ilen = count; i < ilen; ++i){
              if (!between(normalize(points[start % count][property]), startBound, endBound)) {
                  break;
              }
              start--;
              end--;
          }
          start %= count;
          end %= count;
      }
      if (end < start) {
          end += count;
      }
      return {
          start,
          end,
          loop,
          style: segment.style
      };
  }
   function _boundSegment(segment, points, bounds) {
      if (!bounds) {
          return [
              segment
          ];
      }
      const { property , start: startBound , end: endBound  } = bounds;
      const count = points.length;
      const { compare , between , normalize  } = propertyFn(property);
      const { start , end , loop , style  } = getSegment(segment, points, bounds);
      const result = [];
      let inside = false;
      let subStart = null;
      let value, point, prevValue;
      const startIsBefore = ()=>between(startBound, prevValue, value) && compare(startBound, prevValue) !== 0;
      const endIsBefore = ()=>compare(endBound, value) === 0 || between(endBound, prevValue, value);
      const shouldStart = ()=>inside || startIsBefore();
      const shouldStop = ()=>!inside || endIsBefore();
      for(let i = start, prev = start; i <= end; ++i){
          point = points[i % count];
          if (point.skip) {
              continue;
          }
          value = normalize(point[property]);
          if (value === prevValue) {
              continue;
          }
          inside = between(value, startBound, endBound);
          if (subStart === null && shouldStart()) {
              subStart = compare(value, startBound) === 0 ? i : prev;
          }
          if (subStart !== null && shouldStop()) {
              result.push(normalizeSegment({
                  start: subStart,
                  end: i,
                  loop,
                  count,
                  style
              }));
              subStart = null;
          }
          prev = i;
          prevValue = value;
      }
      if (subStart !== null) {
          result.push(normalizeSegment({
              start: subStart,
              end,
              loop,
              count,
              style
          }));
      }
      return result;
  }
   function _boundSegments(line, bounds) {
      const result = [];
      const segments = line.segments;
      for(let i = 0; i < segments.length; i++){
          const sub = _boundSegment(segments[i], line.points, bounds);
          if (sub.length) {
              result.push(...sub);
          }
      }
      return result;
  }
   function findStartAndEnd(points, count, loop, spanGaps) {
      let start = 0;
      let end = count - 1;
      if (loop && !spanGaps) {
          while(start < count && !points[start].skip){
              start++;
          }
      }
      while(start < count && points[start].skip){
          start++;
      }
      start %= count;
      if (loop) {
          end += start;
      }
      while(end > start && points[end % count].skip){
          end--;
      }
      end %= count;
      return {
          start,
          end
      };
  }
   function solidSegments(points, start, max, loop) {
      const count = points.length;
      const result = [];
      let last = start;
      let prev = points[start];
      let end;
      for(end = start + 1; end <= max; ++end){
          const cur = points[end % count];
          if (cur.skip || cur.stop) {
              if (!prev.skip) {
                  loop = false;
                  result.push({
                      start: start % count,
                      end: (end - 1) % count,
                      loop
                  });
                  start = last = cur.stop ? end : null;
              }
          } else {
              last = end;
              if (prev.skip) {
                  start = end;
              }
          }
          prev = cur;
      }
      if (last !== null) {
          result.push({
              start: start % count,
              end: last % count,
              loop
          });
      }
      return result;
  }
   function _computeSegments(line, segmentOptions) {
      const points = line.points;
      const spanGaps = line.options.spanGaps;
      const count = points.length;
      if (!count) {
          return [];
      }
      const loop = !!line._loop;
      const { start , end  } = findStartAndEnd(points, count, loop, spanGaps);
      if (spanGaps === true) {
          return splitByStyles(line, [
              {
                  start,
                  end,
                  loop
              }
          ], points, segmentOptions);
      }
      const max = end < start ? end + count : end;
      const completeLoop = !!line._fullLoop && start === 0 && end === count - 1;
      return splitByStyles(line, solidSegments(points, start, max, completeLoop), points, segmentOptions);
  }
   function splitByStyles(line, segments, points, segmentOptions) {
      if (!segmentOptions || !segmentOptions.setContext || !points) {
          return segments;
      }
      return doSplitByStyles(line, segments, points, segmentOptions);
  }
   function doSplitByStyles(line, segments, points, segmentOptions) {
      const chartContext = line._chart.getContext();
      const baseStyle = readStyle(line.options);
      const { _datasetIndex: datasetIndex , options: { spanGaps  }  } = line;
      const count = points.length;
      const result = [];
      let prevStyle = baseStyle;
      let start = segments[0].start;
      let i = start;
      function addStyle(s, e, l, st) {
          const dir = spanGaps ? -1 : 1;
          if (s === e) {
              return;
          }
          s += count;
          while(points[s % count].skip){
              s -= dir;
          }
          while(points[e % count].skip){
              e += dir;
          }
          if (s % count !== e % count) {
              result.push({
                  start: s % count,
                  end: e % count,
                  loop: l,
                  style: st
              });
              prevStyle = st;
              start = e % count;
          }
      }
      for (const segment of segments){
          start = spanGaps ? start : segment.start;
          let prev = points[start % count];
          let style;
          for(i = start + 1; i <= segment.end; i++){
              const pt = points[i % count];
              style = readStyle(segmentOptions.setContext(createContext(chartContext, {
                  type: 'segment',
                  p0: prev,
                  p1: pt,
                  p0DataIndex: (i - 1) % count,
                  p1DataIndex: i % count,
                  datasetIndex
              })));
              if (styleChanged(style, prevStyle)) {
                  addStyle(start, i - 1, segment.loop, prevStyle);
              }
              prev = pt;
              prevStyle = style;
          }
          if (start < i - 1) {
              addStyle(start, i - 1, segment.loop, prevStyle);
          }
      }
      return result;
  }
  function readStyle(options) {
      return {
          backgroundColor: options.backgroundColor,
          borderCapStyle: options.borderCapStyle,
          borderDash: options.borderDash,
          borderDashOffset: options.borderDashOffset,
          borderJoinStyle: options.borderJoinStyle,
          borderWidth: options.borderWidth,
          borderColor: options.borderColor
      };
  }
  function styleChanged(style, prevStyle) {
      if (!prevStyle) {
          return false;
      }
      const cache = [];
      const replacer = function(key, value) {
          if (!isPatternOrGradient(value)) {
              return value;
          }
          if (!cache.includes(value)) {
              cache.push(value);
          }
          return cache.indexOf(value);
      };
      return JSON.stringify(style, replacer) !== JSON.stringify(prevStyle, replacer);
  }

  /*!
   * Chart.js v4.4.4
   * https://www.chartjs.org
   * (c) 2024 Chart.js Contributors
   * Released under the MIT License
   */

  class Animator {
      constructor(){
          this._request = null;
          this._charts = new Map();
          this._running = false;
          this._lastDate = undefined;
      }
   _notify(chart, anims, date, type) {
          const callbacks = anims.listeners[type];
          const numSteps = anims.duration;
          callbacks.forEach((fn)=>fn({
                  chart,
                  initial: anims.initial,
                  numSteps,
                  currentStep: Math.min(date - anims.start, numSteps)
              }));
      }
   _refresh() {
          if (this._request) {
              return;
          }
          this._running = true;
          this._request = requestAnimFrame.call(window, ()=>{
              this._update();
              this._request = null;
              if (this._running) {
                  this._refresh();
              }
          });
      }
   _update(date = Date.now()) {
          let remaining = 0;
          this._charts.forEach((anims, chart)=>{
              if (!anims.running || !anims.items.length) {
                  return;
              }
              const items = anims.items;
              let i = items.length - 1;
              let draw = false;
              let item;
              for(; i >= 0; --i){
                  item = items[i];
                  if (item._active) {
                      if (item._total > anims.duration) {
                          anims.duration = item._total;
                      }
                      item.tick(date);
                      draw = true;
                  } else {
                      items[i] = items[items.length - 1];
                      items.pop();
                  }
              }
              if (draw) {
                  chart.draw();
                  this._notify(chart, anims, date, 'progress');
              }
              if (!items.length) {
                  anims.running = false;
                  this._notify(chart, anims, date, 'complete');
                  anims.initial = false;
              }
              remaining += items.length;
          });
          this._lastDate = date;
          if (remaining === 0) {
              this._running = false;
          }
      }
   _getAnims(chart) {
          const charts = this._charts;
          let anims = charts.get(chart);
          if (!anims) {
              anims = {
                  running: false,
                  initial: true,
                  items: [],
                  listeners: {
                      complete: [],
                      progress: []
                  }
              };
              charts.set(chart, anims);
          }
          return anims;
      }
   listen(chart, event, cb) {
          this._getAnims(chart).listeners[event].push(cb);
      }
   add(chart, items) {
          if (!items || !items.length) {
              return;
          }
          this._getAnims(chart).items.push(...items);
      }
   has(chart) {
          return this._getAnims(chart).items.length > 0;
      }
   start(chart) {
          const anims = this._charts.get(chart);
          if (!anims) {
              return;
          }
          anims.running = true;
          anims.start = Date.now();
          anims.duration = anims.items.reduce((acc, cur)=>Math.max(acc, cur._duration), 0);
          this._refresh();
      }
      running(chart) {
          if (!this._running) {
              return false;
          }
          const anims = this._charts.get(chart);
          if (!anims || !anims.running || !anims.items.length) {
              return false;
          }
          return true;
      }
   stop(chart) {
          const anims = this._charts.get(chart);
          if (!anims || !anims.items.length) {
              return;
          }
          const items = anims.items;
          let i = items.length - 1;
          for(; i >= 0; --i){
              items[i].cancel();
          }
          anims.items = [];
          this._notify(chart, anims, Date.now(), 'complete');
      }
   remove(chart) {
          return this._charts.delete(chart);
      }
  }
  var animator = /* #__PURE__ */ new Animator();

  const transparent = 'transparent';
  const interpolators = {
      boolean (from, to, factor) {
          return factor > 0.5 ? to : from;
      },
   color (from, to, factor) {
          const c0 = color(from || transparent);
          const c1 = c0.valid && color(to || transparent);
          return c1 && c1.valid ? c1.mix(c0, factor).hexString() : to;
      },
      number (from, to, factor) {
          return from + (to - from) * factor;
      }
  };
  class Animation {
      constructor(cfg, target, prop, to){
          const currentValue = target[prop];
          to = resolve([
              cfg.to,
              to,
              currentValue,
              cfg.from
          ]);
          const from = resolve([
              cfg.from,
              currentValue,
              to
          ]);
          this._active = true;
          this._fn = cfg.fn || interpolators[cfg.type || typeof from];
          this._easing = effects[cfg.easing] || effects.linear;
          this._start = Math.floor(Date.now() + (cfg.delay || 0));
          this._duration = this._total = Math.floor(cfg.duration);
          this._loop = !!cfg.loop;
          this._target = target;
          this._prop = prop;
          this._from = from;
          this._to = to;
          this._promises = undefined;
      }
      active() {
          return this._active;
      }
      update(cfg, to, date) {
          if (this._active) {
              this._notify(false);
              const currentValue = this._target[this._prop];
              const elapsed = date - this._start;
              const remain = this._duration - elapsed;
              this._start = date;
              this._duration = Math.floor(Math.max(remain, cfg.duration));
              this._total += elapsed;
              this._loop = !!cfg.loop;
              this._to = resolve([
                  cfg.to,
                  to,
                  currentValue,
                  cfg.from
              ]);
              this._from = resolve([
                  cfg.from,
                  currentValue,
                  to
              ]);
          }
      }
      cancel() {
          if (this._active) {
              this.tick(Date.now());
              this._active = false;
              this._notify(false);
          }
      }
      tick(date) {
          const elapsed = date - this._start;
          const duration = this._duration;
          const prop = this._prop;
          const from = this._from;
          const loop = this._loop;
          const to = this._to;
          let factor;
          this._active = from !== to && (loop || elapsed < duration);
          if (!this._active) {
              this._target[prop] = to;
              this._notify(true);
              return;
          }
          if (elapsed < 0) {
              this._target[prop] = from;
              return;
          }
          factor = elapsed / duration % 2;
          factor = loop && factor > 1 ? 2 - factor : factor;
          factor = this._easing(Math.min(1, Math.max(0, factor)));
          this._target[prop] = this._fn(from, to, factor);
      }
      wait() {
          const promises = this._promises || (this._promises = []);
          return new Promise((res, rej)=>{
              promises.push({
                  res,
                  rej
              });
          });
      }
      _notify(resolved) {
          const method = resolved ? 'res' : 'rej';
          const promises = this._promises || [];
          for(let i = 0; i < promises.length; i++){
              promises[i][method]();
          }
      }
  }

  class Animations {
      constructor(chart, config){
          this._chart = chart;
          this._properties = new Map();
          this.configure(config);
      }
      configure(config) {
          if (!isObject(config)) {
              return;
          }
          const animationOptions = Object.keys(defaults$1.animation);
          const animatedProps = this._properties;
          Object.getOwnPropertyNames(config).forEach((key)=>{
              const cfg = config[key];
              if (!isObject(cfg)) {
                  return;
              }
              const resolved = {};
              for (const option of animationOptions){
                  resolved[option] = cfg[option];
              }
              (isArray(cfg.properties) && cfg.properties || [
                  key
              ]).forEach((prop)=>{
                  if (prop === key || !animatedProps.has(prop)) {
                      animatedProps.set(prop, resolved);
                  }
              });
          });
      }
   _animateOptions(target, values) {
          const newOptions = values.options;
          const options = resolveTargetOptions(target, newOptions);
          if (!options) {
              return [];
          }
          const animations = this._createAnimations(options, newOptions);
          if (newOptions.$shared) {
              awaitAll(target.options.$animations, newOptions).then(()=>{
                  target.options = newOptions;
              }, ()=>{
              });
          }
          return animations;
      }
   _createAnimations(target, values) {
          const animatedProps = this._properties;
          const animations = [];
          const running = target.$animations || (target.$animations = {});
          const props = Object.keys(values);
          const date = Date.now();
          let i;
          for(i = props.length - 1; i >= 0; --i){
              const prop = props[i];
              if (prop.charAt(0) === '$') {
                  continue;
              }
              if (prop === 'options') {
                  animations.push(...this._animateOptions(target, values));
                  continue;
              }
              const value = values[prop];
              let animation = running[prop];
              const cfg = animatedProps.get(prop);
              if (animation) {
                  if (cfg && animation.active()) {
                      animation.update(cfg, value, date);
                      continue;
                  } else {
                      animation.cancel();
                  }
              }
              if (!cfg || !cfg.duration) {
                  target[prop] = value;
                  continue;
              }
              running[prop] = animation = new Animation(cfg, target, prop, value);
              animations.push(animation);
          }
          return animations;
      }
   update(target, values) {
          if (this._properties.size === 0) {
              Object.assign(target, values);
              return;
          }
          const animations = this._createAnimations(target, values);
          if (animations.length) {
              animator.add(this._chart, animations);
              return true;
          }
      }
  }
  function awaitAll(animations, properties) {
      const running = [];
      const keys = Object.keys(properties);
      for(let i = 0; i < keys.length; i++){
          const anim = animations[keys[i]];
          if (anim && anim.active()) {
              running.push(anim.wait());
          }
      }
      return Promise.all(running);
  }
  function resolveTargetOptions(target, newOptions) {
      if (!newOptions) {
          return;
      }
      let options = target.options;
      if (!options) {
          target.options = newOptions;
          return;
      }
      if (options.$shared) {
          target.options = options = Object.assign({}, options, {
              $shared: false,
              $animations: {}
          });
      }
      return options;
  }

  function scaleClip(scale, allowedOverflow) {
      const opts = scale && scale.options || {};
      const reverse = opts.reverse;
      const min = opts.min === undefined ? allowedOverflow : 0;
      const max = opts.max === undefined ? allowedOverflow : 0;
      return {
          start: reverse ? max : min,
          end: reverse ? min : max
      };
  }
  function defaultClip(xScale, yScale, allowedOverflow) {
      if (allowedOverflow === false) {
          return false;
      }
      const x = scaleClip(xScale, allowedOverflow);
      const y = scaleClip(yScale, allowedOverflow);
      return {
          top: y.end,
          right: x.end,
          bottom: y.start,
          left: x.start
      };
  }
  function toClip(value) {
      let t, r, b, l;
      if (isObject(value)) {
          t = value.top;
          r = value.right;
          b = value.bottom;
          l = value.left;
      } else {
          t = r = b = l = value;
      }
      return {
          top: t,
          right: r,
          bottom: b,
          left: l,
          disabled: value === false
      };
  }
  function getSortedDatasetIndices(chart, filterVisible) {
      const keys = [];
      const metasets = chart._getSortedDatasetMetas(filterVisible);
      let i, ilen;
      for(i = 0, ilen = metasets.length; i < ilen; ++i){
          keys.push(metasets[i].index);
      }
      return keys;
  }
  function applyStack(stack, value, dsIndex, options = {}) {
      const keys = stack.keys;
      const singleMode = options.mode === 'single';
      let i, ilen, datasetIndex, otherValue;
      if (value === null) {
          return;
      }
      for(i = 0, ilen = keys.length; i < ilen; ++i){
          datasetIndex = +keys[i];
          if (datasetIndex === dsIndex) {
              if (options.all) {
                  continue;
              }
              break;
          }
          otherValue = stack.values[datasetIndex];
          if (isNumberFinite(otherValue) && (singleMode || value === 0 || sign(value) === sign(otherValue))) {
              value += otherValue;
          }
      }
      return value;
  }
  function convertObjectDataToArray(data, meta) {
      const { iScale , vScale  } = meta;
      const iAxisKey = iScale.axis === 'x' ? 'x' : 'y';
      const vAxisKey = vScale.axis === 'x' ? 'x' : 'y';
      const keys = Object.keys(data);
      const adata = new Array(keys.length);
      let i, ilen, key;
      for(i = 0, ilen = keys.length; i < ilen; ++i){
          key = keys[i];
          adata[i] = {
              [iAxisKey]: key,
              [vAxisKey]: data[key]
          };
      }
      return adata;
  }
  function isStacked(scale, meta) {
      const stacked = scale && scale.options.stacked;
      return stacked || stacked === undefined && meta.stack !== undefined;
  }
  function getStackKey(indexScale, valueScale, meta) {
      return `${indexScale.id}.${valueScale.id}.${meta.stack || meta.type}`;
  }
  function getUserBounds(scale) {
      const { min , max , minDefined , maxDefined  } = scale.getUserBounds();
      return {
          min: minDefined ? min : Number.NEGATIVE_INFINITY,
          max: maxDefined ? max : Number.POSITIVE_INFINITY
      };
  }
  function getOrCreateStack(stacks, stackKey, indexValue) {
      const subStack = stacks[stackKey] || (stacks[stackKey] = {});
      return subStack[indexValue] || (subStack[indexValue] = {});
  }
  function getLastIndexInStack(stack, vScale, positive, type) {
      for (const meta of vScale.getMatchingVisibleMetas(type).reverse()){
          const value = stack[meta.index];
          if (positive && value > 0 || !positive && value < 0) {
              return meta.index;
          }
      }
      return null;
  }
  function updateStacks(controller, parsed) {
      const { chart , _cachedMeta: meta  } = controller;
      const stacks = chart._stacks || (chart._stacks = {});
      const { iScale , vScale , index: datasetIndex  } = meta;
      const iAxis = iScale.axis;
      const vAxis = vScale.axis;
      const key = getStackKey(iScale, vScale, meta);
      const ilen = parsed.length;
      let stack;
      for(let i = 0; i < ilen; ++i){
          const item = parsed[i];
          const { [iAxis]: index , [vAxis]: value  } = item;
          const itemStacks = item._stacks || (item._stacks = {});
          stack = itemStacks[vAxis] = getOrCreateStack(stacks, key, index);
          stack[datasetIndex] = value;
          stack._top = getLastIndexInStack(stack, vScale, true, meta.type);
          stack._bottom = getLastIndexInStack(stack, vScale, false, meta.type);
          const visualValues = stack._visualValues || (stack._visualValues = {});
          visualValues[datasetIndex] = value;
      }
  }
  function getFirstScaleId(chart, axis) {
      const scales = chart.scales;
      return Object.keys(scales).filter((key)=>scales[key].axis === axis).shift();
  }
  function createDatasetContext(parent, index) {
      return createContext(parent, {
          active: false,
          dataset: undefined,
          datasetIndex: index,
          index,
          mode: 'default',
          type: 'dataset'
      });
  }
  function createDataContext(parent, index, element) {
      return createContext(parent, {
          active: false,
          dataIndex: index,
          parsed: undefined,
          raw: undefined,
          element,
          index,
          mode: 'default',
          type: 'data'
      });
  }
  function clearStacks(meta, items) {
      const datasetIndex = meta.controller.index;
      const axis = meta.vScale && meta.vScale.axis;
      if (!axis) {
          return;
      }
      items = items || meta._parsed;
      for (const parsed of items){
          const stacks = parsed._stacks;
          if (!stacks || stacks[axis] === undefined || stacks[axis][datasetIndex] === undefined) {
              return;
          }
          delete stacks[axis][datasetIndex];
          if (stacks[axis]._visualValues !== undefined && stacks[axis]._visualValues[datasetIndex] !== undefined) {
              delete stacks[axis]._visualValues[datasetIndex];
          }
      }
  }
  const isDirectUpdateMode = (mode)=>mode === 'reset' || mode === 'none';
  const cloneIfNotShared = (cached, shared)=>shared ? cached : Object.assign({}, cached);
  const createStack = (canStack, meta, chart)=>canStack && !meta.hidden && meta._stacked && {
          keys: getSortedDatasetIndices(chart, true),
          values: null
      };
  class DatasetController {
   static defaults = {};
   static datasetElementType = null;
   static dataElementType = null;
   constructor(chart, datasetIndex){
          this.chart = chart;
          this._ctx = chart.ctx;
          this.index = datasetIndex;
          this._cachedDataOpts = {};
          this._cachedMeta = this.getMeta();
          this._type = this._cachedMeta.type;
          this.options = undefined;
           this._parsing = false;
          this._data = undefined;
          this._objectData = undefined;
          this._sharedOptions = undefined;
          this._drawStart = undefined;
          this._drawCount = undefined;
          this.enableOptionSharing = false;
          this.supportsDecimation = false;
          this.$context = undefined;
          this._syncList = [];
          this.datasetElementType = new.target.datasetElementType;
          this.dataElementType = new.target.dataElementType;
          this.initialize();
      }
      initialize() {
          const meta = this._cachedMeta;
          this.configure();
          this.linkScales();
          meta._stacked = isStacked(meta.vScale, meta);
          this.addElements();
          if (this.options.fill && !this.chart.isPluginEnabled('filler')) {
              console.warn("Tried to use the 'fill' option without the 'Filler' plugin enabled. Please import and register the 'Filler' plugin and make sure it is not disabled in the options");
          }
      }
      updateIndex(datasetIndex) {
          if (this.index !== datasetIndex) {
              clearStacks(this._cachedMeta);
          }
          this.index = datasetIndex;
      }
      linkScales() {
          const chart = this.chart;
          const meta = this._cachedMeta;
          const dataset = this.getDataset();
          const chooseId = (axis, x, y, r)=>axis === 'x' ? x : axis === 'r' ? r : y;
          const xid = meta.xAxisID = valueOrDefault(dataset.xAxisID, getFirstScaleId(chart, 'x'));
          const yid = meta.yAxisID = valueOrDefault(dataset.yAxisID, getFirstScaleId(chart, 'y'));
          const rid = meta.rAxisID = valueOrDefault(dataset.rAxisID, getFirstScaleId(chart, 'r'));
          const indexAxis = meta.indexAxis;
          const iid = meta.iAxisID = chooseId(indexAxis, xid, yid, rid);
          const vid = meta.vAxisID = chooseId(indexAxis, yid, xid, rid);
          meta.xScale = this.getScaleForId(xid);
          meta.yScale = this.getScaleForId(yid);
          meta.rScale = this.getScaleForId(rid);
          meta.iScale = this.getScaleForId(iid);
          meta.vScale = this.getScaleForId(vid);
      }
      getDataset() {
          return this.chart.data.datasets[this.index];
      }
      getMeta() {
          return this.chart.getDatasetMeta(this.index);
      }
   getScaleForId(scaleID) {
          return this.chart.scales[scaleID];
      }
   _getOtherScale(scale) {
          const meta = this._cachedMeta;
          return scale === meta.iScale ? meta.vScale : meta.iScale;
      }
      reset() {
          this._update('reset');
      }
   _destroy() {
          const meta = this._cachedMeta;
          if (this._data) {
              unlistenArrayEvents(this._data, this);
          }
          if (meta._stacked) {
              clearStacks(meta);
          }
      }
   _dataCheck() {
          const dataset = this.getDataset();
          const data = dataset.data || (dataset.data = []);
          const _data = this._data;
          if (isObject(data)) {
              const meta = this._cachedMeta;
              this._data = convertObjectDataToArray(data, meta);
          } else if (_data !== data) {
              if (_data) {
                  unlistenArrayEvents(_data, this);
                  const meta = this._cachedMeta;
                  clearStacks(meta);
                  meta._parsed = [];
              }
              if (data && Object.isExtensible(data)) {
                  listenArrayEvents(data, this);
              }
              this._syncList = [];
              this._data = data;
          }
      }
      addElements() {
          const meta = this._cachedMeta;
          this._dataCheck();
          if (this.datasetElementType) {
              meta.dataset = new this.datasetElementType();
          }
      }
      buildOrUpdateElements(resetNewElements) {
          const meta = this._cachedMeta;
          const dataset = this.getDataset();
          let stackChanged = false;
          this._dataCheck();
          const oldStacked = meta._stacked;
          meta._stacked = isStacked(meta.vScale, meta);
          if (meta.stack !== dataset.stack) {
              stackChanged = true;
              clearStacks(meta);
              meta.stack = dataset.stack;
          }
          this._resyncElements(resetNewElements);
          if (stackChanged || oldStacked !== meta._stacked) {
              updateStacks(this, meta._parsed);
          }
      }
   configure() {
          const config = this.chart.config;
          const scopeKeys = config.datasetScopeKeys(this._type);
          const scopes = config.getOptionScopes(this.getDataset(), scopeKeys, true);
          this.options = config.createResolver(scopes, this.getContext());
          this._parsing = this.options.parsing;
          this._cachedDataOpts = {};
      }
   parse(start, count) {
          const { _cachedMeta: meta , _data: data  } = this;
          const { iScale , _stacked  } = meta;
          const iAxis = iScale.axis;
          let sorted = start === 0 && count === data.length ? true : meta._sorted;
          let prev = start > 0 && meta._parsed[start - 1];
          let i, cur, parsed;
          if (this._parsing === false) {
              meta._parsed = data;
              meta._sorted = true;
              parsed = data;
          } else {
              if (isArray(data[start])) {
                  parsed = this.parseArrayData(meta, data, start, count);
              } else if (isObject(data[start])) {
                  parsed = this.parseObjectData(meta, data, start, count);
              } else {
                  parsed = this.parsePrimitiveData(meta, data, start, count);
              }
              const isNotInOrderComparedToPrev = ()=>cur[iAxis] === null || prev && cur[iAxis] < prev[iAxis];
              for(i = 0; i < count; ++i){
                  meta._parsed[i + start] = cur = parsed[i];
                  if (sorted) {
                      if (isNotInOrderComparedToPrev()) {
                          sorted = false;
                      }
                      prev = cur;
                  }
              }
              meta._sorted = sorted;
          }
          if (_stacked) {
              updateStacks(this, parsed);
          }
      }
   parsePrimitiveData(meta, data, start, count) {
          const { iScale , vScale  } = meta;
          const iAxis = iScale.axis;
          const vAxis = vScale.axis;
          const labels = iScale.getLabels();
          const singleScale = iScale === vScale;
          const parsed = new Array(count);
          let i, ilen, index;
          for(i = 0, ilen = count; i < ilen; ++i){
              index = i + start;
              parsed[i] = {
                  [iAxis]: singleScale || iScale.parse(labels[index], index),
                  [vAxis]: vScale.parse(data[index], index)
              };
          }
          return parsed;
      }
   parseArrayData(meta, data, start, count) {
          const { xScale , yScale  } = meta;
          const parsed = new Array(count);
          let i, ilen, index, item;
          for(i = 0, ilen = count; i < ilen; ++i){
              index = i + start;
              item = data[index];
              parsed[i] = {
                  x: xScale.parse(item[0], index),
                  y: yScale.parse(item[1], index)
              };
          }
          return parsed;
      }
   parseObjectData(meta, data, start, count) {
          const { xScale , yScale  } = meta;
          const { xAxisKey ='x' , yAxisKey ='y'  } = this._parsing;
          const parsed = new Array(count);
          let i, ilen, index, item;
          for(i = 0, ilen = count; i < ilen; ++i){
              index = i + start;
              item = data[index];
              parsed[i] = {
                  x: xScale.parse(resolveObjectKey(item, xAxisKey), index),
                  y: yScale.parse(resolveObjectKey(item, yAxisKey), index)
              };
          }
          return parsed;
      }
   getParsed(index) {
          return this._cachedMeta._parsed[index];
      }
   getDataElement(index) {
          return this._cachedMeta.data[index];
      }
   applyStack(scale, parsed, mode) {
          const chart = this.chart;
          const meta = this._cachedMeta;
          const value = parsed[scale.axis];
          const stack = {
              keys: getSortedDatasetIndices(chart, true),
              values: parsed._stacks[scale.axis]._visualValues
          };
          return applyStack(stack, value, meta.index, {
              mode
          });
      }
   updateRangeFromParsed(range, scale, parsed, stack) {
          const parsedValue = parsed[scale.axis];
          let value = parsedValue === null ? NaN : parsedValue;
          const values = stack && parsed._stacks[scale.axis];
          if (stack && values) {
              stack.values = values;
              value = applyStack(stack, parsedValue, this._cachedMeta.index);
          }
          range.min = Math.min(range.min, value);
          range.max = Math.max(range.max, value);
      }
   getMinMax(scale, canStack) {
          const meta = this._cachedMeta;
          const _parsed = meta._parsed;
          const sorted = meta._sorted && scale === meta.iScale;
          const ilen = _parsed.length;
          const otherScale = this._getOtherScale(scale);
          const stack = createStack(canStack, meta, this.chart);
          const range = {
              min: Number.POSITIVE_INFINITY,
              max: Number.NEGATIVE_INFINITY
          };
          const { min: otherMin , max: otherMax  } = getUserBounds(otherScale);
          let i, parsed;
          function _skip() {
              parsed = _parsed[i];
              const otherValue = parsed[otherScale.axis];
              return !isNumberFinite(parsed[scale.axis]) || otherMin > otherValue || otherMax < otherValue;
          }
          for(i = 0; i < ilen; ++i){
              if (_skip()) {
                  continue;
              }
              this.updateRangeFromParsed(range, scale, parsed, stack);
              if (sorted) {
                  break;
              }
          }
          if (sorted) {
              for(i = ilen - 1; i >= 0; --i){
                  if (_skip()) {
                      continue;
                  }
                  this.updateRangeFromParsed(range, scale, parsed, stack);
                  break;
              }
          }
          return range;
      }
      getAllParsedValues(scale) {
          const parsed = this._cachedMeta._parsed;
          const values = [];
          let i, ilen, value;
          for(i = 0, ilen = parsed.length; i < ilen; ++i){
              value = parsed[i][scale.axis];
              if (isNumberFinite(value)) {
                  values.push(value);
              }
          }
          return values;
      }
   getMaxOverflow() {
          return false;
      }
   getLabelAndValue(index) {
          const meta = this._cachedMeta;
          const iScale = meta.iScale;
          const vScale = meta.vScale;
          const parsed = this.getParsed(index);
          return {
              label: iScale ? '' + iScale.getLabelForValue(parsed[iScale.axis]) : '',
              value: vScale ? '' + vScale.getLabelForValue(parsed[vScale.axis]) : ''
          };
      }
   _update(mode) {
          const meta = this._cachedMeta;
          this.update(mode || 'default');
          meta._clip = toClip(valueOrDefault(this.options.clip, defaultClip(meta.xScale, meta.yScale, this.getMaxOverflow())));
      }
   update(mode) {}
      draw() {
          const ctx = this._ctx;
          const chart = this.chart;
          const meta = this._cachedMeta;
          const elements = meta.data || [];
          const area = chart.chartArea;
          const active = [];
          const start = this._drawStart || 0;
          const count = this._drawCount || elements.length - start;
          const drawActiveElementsOnTop = this.options.drawActiveElementsOnTop;
          let i;
          if (meta.dataset) {
              meta.dataset.draw(ctx, area, start, count);
          }
          for(i = start; i < start + count; ++i){
              const element = elements[i];
              if (element.hidden) {
                  continue;
              }
              if (element.active && drawActiveElementsOnTop) {
                  active.push(element);
              } else {
                  element.draw(ctx, area);
              }
          }
          for(i = 0; i < active.length; ++i){
              active[i].draw(ctx, area);
          }
      }
   getStyle(index, active) {
          const mode = active ? 'active' : 'default';
          return index === undefined && this._cachedMeta.dataset ? this.resolveDatasetElementOptions(mode) : this.resolveDataElementOptions(index || 0, mode);
      }
   getContext(index, active, mode) {
          const dataset = this.getDataset();
          let context;
          if (index >= 0 && index < this._cachedMeta.data.length) {
              const element = this._cachedMeta.data[index];
              context = element.$context || (element.$context = createDataContext(this.getContext(), index, element));
              context.parsed = this.getParsed(index);
              context.raw = dataset.data[index];
              context.index = context.dataIndex = index;
          } else {
              context = this.$context || (this.$context = createDatasetContext(this.chart.getContext(), this.index));
              context.dataset = dataset;
              context.index = context.datasetIndex = this.index;
          }
          context.active = !!active;
          context.mode = mode;
          return context;
      }
   resolveDatasetElementOptions(mode) {
          return this._resolveElementOptions(this.datasetElementType.id, mode);
      }
   resolveDataElementOptions(index, mode) {
          return this._resolveElementOptions(this.dataElementType.id, mode, index);
      }
   _resolveElementOptions(elementType, mode = 'default', index) {
          const active = mode === 'active';
          const cache = this._cachedDataOpts;
          const cacheKey = elementType + '-' + mode;
          const cached = cache[cacheKey];
          const sharing = this.enableOptionSharing && defined(index);
          if (cached) {
              return cloneIfNotShared(cached, sharing);
          }
          const config = this.chart.config;
          const scopeKeys = config.datasetElementScopeKeys(this._type, elementType);
          const prefixes = active ? [
              `${elementType}Hover`,
              'hover',
              elementType,
              ''
          ] : [
              elementType,
              ''
          ];
          const scopes = config.getOptionScopes(this.getDataset(), scopeKeys);
          const names = Object.keys(defaults$1.elements[elementType]);
          const context = ()=>this.getContext(index, active, mode);
          const values = config.resolveNamedOptions(scopes, names, context, prefixes);
          if (values.$shared) {
              values.$shared = sharing;
              cache[cacheKey] = Object.freeze(cloneIfNotShared(values, sharing));
          }
          return values;
      }
   _resolveAnimations(index, transition, active) {
          const chart = this.chart;
          const cache = this._cachedDataOpts;
          const cacheKey = `animation-${transition}`;
          const cached = cache[cacheKey];
          if (cached) {
              return cached;
          }
          let options;
          if (chart.options.animation !== false) {
              const config = this.chart.config;
              const scopeKeys = config.datasetAnimationScopeKeys(this._type, transition);
              const scopes = config.getOptionScopes(this.getDataset(), scopeKeys);
              options = config.createResolver(scopes, this.getContext(index, active, transition));
          }
          const animations = new Animations(chart, options && options.animations);
          if (options && options._cacheable) {
              cache[cacheKey] = Object.freeze(animations);
          }
          return animations;
      }
   getSharedOptions(options) {
          if (!options.$shared) {
              return;
          }
          return this._sharedOptions || (this._sharedOptions = Object.assign({}, options));
      }
   includeOptions(mode, sharedOptions) {
          return !sharedOptions || isDirectUpdateMode(mode) || this.chart._animationsDisabled;
      }
   _getSharedOptions(start, mode) {
          const firstOpts = this.resolveDataElementOptions(start, mode);
          const previouslySharedOptions = this._sharedOptions;
          const sharedOptions = this.getSharedOptions(firstOpts);
          const includeOptions = this.includeOptions(mode, sharedOptions) || sharedOptions !== previouslySharedOptions;
          this.updateSharedOptions(sharedOptions, mode, firstOpts);
          return {
              sharedOptions,
              includeOptions
          };
      }
   updateElement(element, index, properties, mode) {
          if (isDirectUpdateMode(mode)) {
              Object.assign(element, properties);
          } else {
              this._resolveAnimations(index, mode).update(element, properties);
          }
      }
   updateSharedOptions(sharedOptions, mode, newOptions) {
          if (sharedOptions && !isDirectUpdateMode(mode)) {
              this._resolveAnimations(undefined, mode).update(sharedOptions, newOptions);
          }
      }
   _setStyle(element, index, mode, active) {
          element.active = active;
          const options = this.getStyle(index, active);
          this._resolveAnimations(index, mode, active).update(element, {
              options: !active && this.getSharedOptions(options) || options
          });
      }
      removeHoverStyle(element, datasetIndex, index) {
          this._setStyle(element, index, 'active', false);
      }
      setHoverStyle(element, datasetIndex, index) {
          this._setStyle(element, index, 'active', true);
      }
   _removeDatasetHoverStyle() {
          const element = this._cachedMeta.dataset;
          if (element) {
              this._setStyle(element, undefined, 'active', false);
          }
      }
   _setDatasetHoverStyle() {
          const element = this._cachedMeta.dataset;
          if (element) {
              this._setStyle(element, undefined, 'active', true);
          }
      }
   _resyncElements(resetNewElements) {
          const data = this._data;
          const elements = this._cachedMeta.data;
          for (const [method, arg1, arg2] of this._syncList){
              this[method](arg1, arg2);
          }
          this._syncList = [];
          const numMeta = elements.length;
          const numData = data.length;
          const count = Math.min(numData, numMeta);
          if (count) {
              this.parse(0, count);
          }
          if (numData > numMeta) {
              this._insertElements(numMeta, numData - numMeta, resetNewElements);
          } else if (numData < numMeta) {
              this._removeElements(numData, numMeta - numData);
          }
      }
   _insertElements(start, count, resetNewElements = true) {
          const meta = this._cachedMeta;
          const data = meta.data;
          const end = start + count;
          let i;
          const move = (arr)=>{
              arr.length += count;
              for(i = arr.length - 1; i >= end; i--){
                  arr[i] = arr[i - count];
              }
          };
          move(data);
          for(i = start; i < end; ++i){
              data[i] = new this.dataElementType();
          }
          if (this._parsing) {
              move(meta._parsed);
          }
          this.parse(start, count);
          if (resetNewElements) {
              this.updateElements(data, start, count, 'reset');
          }
      }
      updateElements(element, start, count, mode) {}
   _removeElements(start, count) {
          const meta = this._cachedMeta;
          if (this._parsing) {
              const removed = meta._parsed.splice(start, count);
              if (meta._stacked) {
                  clearStacks(meta, removed);
              }
          }
          meta.data.splice(start, count);
      }
   _sync(args) {
          if (this._parsing) {
              this._syncList.push(args);
          } else {
              const [method, arg1, arg2] = args;
              this[method](arg1, arg2);
          }
          this.chart._dataChanges.push([
              this.index,
              ...args
          ]);
      }
      _onDataPush() {
          const count = arguments.length;
          this._sync([
              '_insertElements',
              this.getDataset().data.length - count,
              count
          ]);
      }
      _onDataPop() {
          this._sync([
              '_removeElements',
              this._cachedMeta.data.length - 1,
              1
          ]);
      }
      _onDataShift() {
          this._sync([
              '_removeElements',
              0,
              1
          ]);
      }
      _onDataSplice(start, count) {
          if (count) {
              this._sync([
                  '_removeElements',
                  start,
                  count
              ]);
          }
          const newCount = arguments.length - 2;
          if (newCount) {
              this._sync([
                  '_insertElements',
                  start,
                  newCount
              ]);
          }
      }
      _onDataUnshift() {
          this._sync([
              '_insertElements',
              0,
              arguments.length
          ]);
      }
  }

  function getAllScaleValues(scale, type) {
      if (!scale._cache.$bar) {
          const visibleMetas = scale.getMatchingVisibleMetas(type);
          let values = [];
          for(let i = 0, ilen = visibleMetas.length; i < ilen; i++){
              values = values.concat(visibleMetas[i].controller.getAllParsedValues(scale));
          }
          scale._cache.$bar = _arrayUnique(values.sort((a, b)=>a - b));
      }
      return scale._cache.$bar;
  }
   function computeMinSampleSize(meta) {
      const scale = meta.iScale;
      const values = getAllScaleValues(scale, meta.type);
      let min = scale._length;
      let i, ilen, curr, prev;
      const updateMinAndPrev = ()=>{
          if (curr === 32767 || curr === -32768) {
              return;
          }
          if (defined(prev)) {
              min = Math.min(min, Math.abs(curr - prev) || min);
          }
          prev = curr;
      };
      for(i = 0, ilen = values.length; i < ilen; ++i){
          curr = scale.getPixelForValue(values[i]);
          updateMinAndPrev();
      }
      prev = undefined;
      for(i = 0, ilen = scale.ticks.length; i < ilen; ++i){
          curr = scale.getPixelForTick(i);
          updateMinAndPrev();
      }
      return min;
  }
   function computeFitCategoryTraits(index, ruler, options, stackCount) {
      const thickness = options.barThickness;
      let size, ratio;
      if (isNullOrUndef(thickness)) {
          size = ruler.min * options.categoryPercentage;
          ratio = options.barPercentage;
      } else {
          size = thickness * stackCount;
          ratio = 1;
      }
      return {
          chunk: size / stackCount,
          ratio,
          start: ruler.pixels[index] - size / 2
      };
  }
   function computeFlexCategoryTraits(index, ruler, options, stackCount) {
      const pixels = ruler.pixels;
      const curr = pixels[index];
      let prev = index > 0 ? pixels[index - 1] : null;
      let next = index < pixels.length - 1 ? pixels[index + 1] : null;
      const percent = options.categoryPercentage;
      if (prev === null) {
          prev = curr - (next === null ? ruler.end - ruler.start : next - curr);
      }
      if (next === null) {
          next = curr + curr - prev;
      }
      const start = curr - (curr - Math.min(prev, next)) / 2 * percent;
      const size = Math.abs(next - prev) / 2 * percent;
      return {
          chunk: size / stackCount,
          ratio: options.barPercentage,
          start
      };
  }
  function parseFloatBar(entry, item, vScale, i) {
      const startValue = vScale.parse(entry[0], i);
      const endValue = vScale.parse(entry[1], i);
      const min = Math.min(startValue, endValue);
      const max = Math.max(startValue, endValue);
      let barStart = min;
      let barEnd = max;
      if (Math.abs(min) > Math.abs(max)) {
          barStart = max;
          barEnd = min;
      }
      item[vScale.axis] = barEnd;
      item._custom = {
          barStart,
          barEnd,
          start: startValue,
          end: endValue,
          min,
          max
      };
  }
  function parseValue(entry, item, vScale, i) {
      if (isArray(entry)) {
          parseFloatBar(entry, item, vScale, i);
      } else {
          item[vScale.axis] = vScale.parse(entry, i);
      }
      return item;
  }
  function parseArrayOrPrimitive(meta, data, start, count) {
      const iScale = meta.iScale;
      const vScale = meta.vScale;
      const labels = iScale.getLabels();
      const singleScale = iScale === vScale;
      const parsed = [];
      let i, ilen, item, entry;
      for(i = start, ilen = start + count; i < ilen; ++i){
          entry = data[i];
          item = {};
          item[iScale.axis] = singleScale || iScale.parse(labels[i], i);
          parsed.push(parseValue(entry, item, vScale, i));
      }
      return parsed;
  }
  function isFloatBar(custom) {
      return custom && custom.barStart !== undefined && custom.barEnd !== undefined;
  }
  function barSign(size, vScale, actualBase) {
      if (size !== 0) {
          return sign(size);
      }
      return (vScale.isHorizontal() ? 1 : -1) * (vScale.min >= actualBase ? 1 : -1);
  }
  function borderProps(properties) {
      let reverse, start, end, top, bottom;
      if (properties.horizontal) {
          reverse = properties.base > properties.x;
          start = 'left';
          end = 'right';
      } else {
          reverse = properties.base < properties.y;
          start = 'bottom';
          end = 'top';
      }
      if (reverse) {
          top = 'end';
          bottom = 'start';
      } else {
          top = 'start';
          bottom = 'end';
      }
      return {
          start,
          end,
          reverse,
          top,
          bottom
      };
  }
  function setBorderSkipped(properties, options, stack, index) {
      let edge = options.borderSkipped;
      const res = {};
      if (!edge) {
          properties.borderSkipped = res;
          return;
      }
      if (edge === true) {
          properties.borderSkipped = {
              top: true,
              right: true,
              bottom: true,
              left: true
          };
          return;
      }
      const { start , end , reverse , top , bottom  } = borderProps(properties);
      if (edge === 'middle' && stack) {
          properties.enableBorderRadius = true;
          if ((stack._top || 0) === index) {
              edge = top;
          } else if ((stack._bottom || 0) === index) {
              edge = bottom;
          } else {
              res[parseEdge(bottom, start, end, reverse)] = true;
              edge = top;
          }
      }
      res[parseEdge(edge, start, end, reverse)] = true;
      properties.borderSkipped = res;
  }
  function parseEdge(edge, a, b, reverse) {
      if (reverse) {
          edge = swap(edge, a, b);
          edge = startEnd(edge, b, a);
      } else {
          edge = startEnd(edge, a, b);
      }
      return edge;
  }
  function swap(orig, v1, v2) {
      return orig === v1 ? v2 : orig === v2 ? v1 : orig;
  }
  function startEnd(v, start, end) {
      return v === 'start' ? start : v === 'end' ? end : v;
  }
  function setInflateAmount(properties, { inflateAmount  }, ratio) {
      properties.inflateAmount = inflateAmount === 'auto' ? ratio === 1 ? 0.33 : 0 : inflateAmount;
  }
  class BarController extends DatasetController {
      static id = 'bar';
   static defaults = {
          datasetElementType: false,
          dataElementType: 'bar',
          categoryPercentage: 0.8,
          barPercentage: 0.9,
          grouped: true,
          animations: {
              numbers: {
                  type: 'number',
                  properties: [
                      'x',
                      'y',
                      'base',
                      'width',
                      'height'
                  ]
              }
          }
      };
   static overrides = {
          scales: {
              _index_: {
                  type: 'category',
                  offset: true,
                  grid: {
                      offset: true
                  }
              },
              _value_: {
                  type: 'linear',
                  beginAtZero: true
              }
          }
      };
   parsePrimitiveData(meta, data, start, count) {
          return parseArrayOrPrimitive(meta, data, start, count);
      }
   parseArrayData(meta, data, start, count) {
          return parseArrayOrPrimitive(meta, data, start, count);
      }
   parseObjectData(meta, data, start, count) {
          const { iScale , vScale  } = meta;
          const { xAxisKey ='x' , yAxisKey ='y'  } = this._parsing;
          const iAxisKey = iScale.axis === 'x' ? xAxisKey : yAxisKey;
          const vAxisKey = vScale.axis === 'x' ? xAxisKey : yAxisKey;
          const parsed = [];
          let i, ilen, item, obj;
          for(i = start, ilen = start + count; i < ilen; ++i){
              obj = data[i];
              item = {};
              item[iScale.axis] = iScale.parse(resolveObjectKey(obj, iAxisKey), i);
              parsed.push(parseValue(resolveObjectKey(obj, vAxisKey), item, vScale, i));
          }
          return parsed;
      }
   updateRangeFromParsed(range, scale, parsed, stack) {
          super.updateRangeFromParsed(range, scale, parsed, stack);
          const custom = parsed._custom;
          if (custom && scale === this._cachedMeta.vScale) {
              range.min = Math.min(range.min, custom.min);
              range.max = Math.max(range.max, custom.max);
          }
      }
   getMaxOverflow() {
          return 0;
      }
   getLabelAndValue(index) {
          const meta = this._cachedMeta;
          const { iScale , vScale  } = meta;
          const parsed = this.getParsed(index);
          const custom = parsed._custom;
          const value = isFloatBar(custom) ? '[' + custom.start + ', ' + custom.end + ']' : '' + vScale.getLabelForValue(parsed[vScale.axis]);
          return {
              label: '' + iScale.getLabelForValue(parsed[iScale.axis]),
              value
          };
      }
      initialize() {
          this.enableOptionSharing = true;
          super.initialize();
          const meta = this._cachedMeta;
          meta.stack = this.getDataset().stack;
      }
      update(mode) {
          const meta = this._cachedMeta;
          this.updateElements(meta.data, 0, meta.data.length, mode);
      }
      updateElements(bars, start, count, mode) {
          const reset = mode === 'reset';
          const { index , _cachedMeta: { vScale  }  } = this;
          const base = vScale.getBasePixel();
          const horizontal = vScale.isHorizontal();
          const ruler = this._getRuler();
          const { sharedOptions , includeOptions  } = this._getSharedOptions(start, mode);
          for(let i = start; i < start + count; i++){
              const parsed = this.getParsed(i);
              const vpixels = reset || isNullOrUndef(parsed[vScale.axis]) ? {
                  base,
                  head: base
              } : this._calculateBarValuePixels(i);
              const ipixels = this._calculateBarIndexPixels(i, ruler);
              const stack = (parsed._stacks || {})[vScale.axis];
              const properties = {
                  horizontal,
                  base: vpixels.base,
                  enableBorderRadius: !stack || isFloatBar(parsed._custom) || index === stack._top || index === stack._bottom,
                  x: horizontal ? vpixels.head : ipixels.center,
                  y: horizontal ? ipixels.center : vpixels.head,
                  height: horizontal ? ipixels.size : Math.abs(vpixels.size),
                  width: horizontal ? Math.abs(vpixels.size) : ipixels.size
              };
              if (includeOptions) {
                  properties.options = sharedOptions || this.resolveDataElementOptions(i, bars[i].active ? 'active' : mode);
              }
              const options = properties.options || bars[i].options;
              setBorderSkipped(properties, options, stack, index);
              setInflateAmount(properties, options, ruler.ratio);
              this.updateElement(bars[i], i, properties, mode);
          }
      }
   _getStacks(last, dataIndex) {
          const { iScale  } = this._cachedMeta;
          const metasets = iScale.getMatchingVisibleMetas(this._type).filter((meta)=>meta.controller.options.grouped);
          const stacked = iScale.options.stacked;
          const stacks = [];
          const currentParsed = this._cachedMeta.controller.getParsed(dataIndex);
          const iScaleValue = currentParsed && currentParsed[iScale.axis];
          const skipNull = (meta)=>{
              const parsed = meta._parsed.find((item)=>item[iScale.axis] === iScaleValue);
              const val = parsed && parsed[meta.vScale.axis];
              if (isNullOrUndef(val) || isNaN(val)) {
                  return true;
              }
          };
          for (const meta of metasets){
              if (dataIndex !== undefined && skipNull(meta)) {
                  continue;
              }
              if (stacked === false || stacks.indexOf(meta.stack) === -1 || stacked === undefined && meta.stack === undefined) {
                  stacks.push(meta.stack);
              }
              if (meta.index === last) {
                  break;
              }
          }
          if (!stacks.length) {
              stacks.push(undefined);
          }
          return stacks;
      }
   _getStackCount(index) {
          return this._getStacks(undefined, index).length;
      }
   _getStackIndex(datasetIndex, name, dataIndex) {
          const stacks = this._getStacks(datasetIndex, dataIndex);
          const index = name !== undefined ? stacks.indexOf(name) : -1;
          return index === -1 ? stacks.length - 1 : index;
      }
   _getRuler() {
          const opts = this.options;
          const meta = this._cachedMeta;
          const iScale = meta.iScale;
          const pixels = [];
          let i, ilen;
          for(i = 0, ilen = meta.data.length; i < ilen; ++i){
              pixels.push(iScale.getPixelForValue(this.getParsed(i)[iScale.axis], i));
          }
          const barThickness = opts.barThickness;
          const min = barThickness || computeMinSampleSize(meta);
          return {
              min,
              pixels,
              start: iScale._startPixel,
              end: iScale._endPixel,
              stackCount: this._getStackCount(),
              scale: iScale,
              grouped: opts.grouped,
              ratio: barThickness ? 1 : opts.categoryPercentage * opts.barPercentage
          };
      }
   _calculateBarValuePixels(index) {
          const { _cachedMeta: { vScale , _stacked , index: datasetIndex  } , options: { base: baseValue , minBarLength  }  } = this;
          const actualBase = baseValue || 0;
          const parsed = this.getParsed(index);
          const custom = parsed._custom;
          const floating = isFloatBar(custom);
          let value = parsed[vScale.axis];
          let start = 0;
          let length = _stacked ? this.applyStack(vScale, parsed, _stacked) : value;
          let head, size;
          if (length !== value) {
              start = length - value;
              length = value;
          }
          if (floating) {
              value = custom.barStart;
              length = custom.barEnd - custom.barStart;
              if (value !== 0 && sign(value) !== sign(custom.barEnd)) {
                  start = 0;
              }
              start += value;
          }
          const startValue = !isNullOrUndef(baseValue) && !floating ? baseValue : start;
          let base = vScale.getPixelForValue(startValue);
          if (this.chart.getDataVisibility(index)) {
              head = vScale.getPixelForValue(start + length);
          } else {
              head = base;
          }
          size = head - base;
          if (Math.abs(size) < minBarLength) {
              size = barSign(size, vScale, actualBase) * minBarLength;
              if (value === actualBase) {
                  base -= size / 2;
              }
              const startPixel = vScale.getPixelForDecimal(0);
              const endPixel = vScale.getPixelForDecimal(1);
              const min = Math.min(startPixel, endPixel);
              const max = Math.max(startPixel, endPixel);
              base = Math.max(Math.min(base, max), min);
              head = base + size;
              if (_stacked && !floating) {
                  parsed._stacks[vScale.axis]._visualValues[datasetIndex] = vScale.getValueForPixel(head) - vScale.getValueForPixel(base);
              }
          }
          if (base === vScale.getPixelForValue(actualBase)) {
              const halfGrid = sign(size) * vScale.getLineWidthForValue(actualBase) / 2;
              base += halfGrid;
              size -= halfGrid;
          }
          return {
              size,
              base,
              head,
              center: head + size / 2
          };
      }
   _calculateBarIndexPixels(index, ruler) {
          const scale = ruler.scale;
          const options = this.options;
          const skipNull = options.skipNull;
          const maxBarThickness = valueOrDefault(options.maxBarThickness, Infinity);
          let center, size;
          if (ruler.grouped) {
              const stackCount = skipNull ? this._getStackCount(index) : ruler.stackCount;
              const range = options.barThickness === 'flex' ? computeFlexCategoryTraits(index, ruler, options, stackCount) : computeFitCategoryTraits(index, ruler, options, stackCount);
              const stackIndex = this._getStackIndex(this.index, this._cachedMeta.stack, skipNull ? index : undefined);
              center = range.start + range.chunk * stackIndex + range.chunk / 2;
              size = Math.min(maxBarThickness, range.chunk * range.ratio);
          } else {
              center = scale.getPixelForValue(this.getParsed(index)[scale.axis], index);
              size = Math.min(maxBarThickness, ruler.min * ruler.ratio);
          }
          return {
              base: center - size / 2,
              head: center + size / 2,
              center,
              size
          };
      }
      draw() {
          const meta = this._cachedMeta;
          const vScale = meta.vScale;
          const rects = meta.data;
          const ilen = rects.length;
          let i = 0;
          for(; i < ilen; ++i){
              if (this.getParsed(i)[vScale.axis] !== null && !rects[i].hidden) {
                  rects[i].draw(this._ctx);
              }
          }
      }
  }

  class BubbleController extends DatasetController {
      static id = 'bubble';
   static defaults = {
          datasetElementType: false,
          dataElementType: 'point',
          animations: {
              numbers: {
                  type: 'number',
                  properties: [
                      'x',
                      'y',
                      'borderWidth',
                      'radius'
                  ]
              }
          }
      };
   static overrides = {
          scales: {
              x: {
                  type: 'linear'
              },
              y: {
                  type: 'linear'
              }
          }
      };
      initialize() {
          this.enableOptionSharing = true;
          super.initialize();
      }
   parsePrimitiveData(meta, data, start, count) {
          const parsed = super.parsePrimitiveData(meta, data, start, count);
          for(let i = 0; i < parsed.length; i++){
              parsed[i]._custom = this.resolveDataElementOptions(i + start).radius;
          }
          return parsed;
      }
   parseArrayData(meta, data, start, count) {
          const parsed = super.parseArrayData(meta, data, start, count);
          for(let i = 0; i < parsed.length; i++){
              const item = data[start + i];
              parsed[i]._custom = valueOrDefault(item[2], this.resolveDataElementOptions(i + start).radius);
          }
          return parsed;
      }
   parseObjectData(meta, data, start, count) {
          const parsed = super.parseObjectData(meta, data, start, count);
          for(let i = 0; i < parsed.length; i++){
              const item = data[start + i];
              parsed[i]._custom = valueOrDefault(item && item.r && +item.r, this.resolveDataElementOptions(i + start).radius);
          }
          return parsed;
      }
   getMaxOverflow() {
          const data = this._cachedMeta.data;
          let max = 0;
          for(let i = data.length - 1; i >= 0; --i){
              max = Math.max(max, data[i].size(this.resolveDataElementOptions(i)) / 2);
          }
          return max > 0 && max;
      }
   getLabelAndValue(index) {
          const meta = this._cachedMeta;
          const labels = this.chart.data.labels || [];
          const { xScale , yScale  } = meta;
          const parsed = this.getParsed(index);
          const x = xScale.getLabelForValue(parsed.x);
          const y = yScale.getLabelForValue(parsed.y);
          const r = parsed._custom;
          return {
              label: labels[index] || '',
              value: '(' + x + ', ' + y + (r ? ', ' + r : '') + ')'
          };
      }
      update(mode) {
          const points = this._cachedMeta.data;
          this.updateElements(points, 0, points.length, mode);
      }
      updateElements(points, start, count, mode) {
          const reset = mode === 'reset';
          const { iScale , vScale  } = this._cachedMeta;
          const { sharedOptions , includeOptions  } = this._getSharedOptions(start, mode);
          const iAxis = iScale.axis;
          const vAxis = vScale.axis;
          for(let i = start; i < start + count; i++){
              const point = points[i];
              const parsed = !reset && this.getParsed(i);
              const properties = {};
              const iPixel = properties[iAxis] = reset ? iScale.getPixelForDecimal(0.5) : iScale.getPixelForValue(parsed[iAxis]);
              const vPixel = properties[vAxis] = reset ? vScale.getBasePixel() : vScale.getPixelForValue(parsed[vAxis]);
              properties.skip = isNaN(iPixel) || isNaN(vPixel);
              if (includeOptions) {
                  properties.options = sharedOptions || this.resolveDataElementOptions(i, point.active ? 'active' : mode);
                  if (reset) {
                      properties.options.radius = 0;
                  }
              }
              this.updateElement(point, i, properties, mode);
          }
      }
   resolveDataElementOptions(index, mode) {
          const parsed = this.getParsed(index);
          let values = super.resolveDataElementOptions(index, mode);
          if (values.$shared) {
              values = Object.assign({}, values, {
                  $shared: false
              });
          }
          const radius = values.radius;
          if (mode !== 'active') {
              values.radius = 0;
          }
          values.radius += valueOrDefault(parsed && parsed._custom, radius);
          return values;
      }
  }

  function getRatioAndOffset(rotation, circumference, cutout) {
      let ratioX = 1;
      let ratioY = 1;
      let offsetX = 0;
      let offsetY = 0;
      if (circumference < TAU) {
          const startAngle = rotation;
          const endAngle = startAngle + circumference;
          const startX = Math.cos(startAngle);
          const startY = Math.sin(startAngle);
          const endX = Math.cos(endAngle);
          const endY = Math.sin(endAngle);
          const calcMax = (angle, a, b)=>_angleBetween(angle, startAngle, endAngle, true) ? 1 : Math.max(a, a * cutout, b, b * cutout);
          const calcMin = (angle, a, b)=>_angleBetween(angle, startAngle, endAngle, true) ? -1 : Math.min(a, a * cutout, b, b * cutout);
          const maxX = calcMax(0, startX, endX);
          const maxY = calcMax(HALF_PI, startY, endY);
          const minX = calcMin(PI, startX, endX);
          const minY = calcMin(PI + HALF_PI, startY, endY);
          ratioX = (maxX - minX) / 2;
          ratioY = (maxY - minY) / 2;
          offsetX = -(maxX + minX) / 2;
          offsetY = -(maxY + minY) / 2;
      }
      return {
          ratioX,
          ratioY,
          offsetX,
          offsetY
      };
  }
  class DoughnutController extends DatasetController {
      static id = 'doughnut';
   static defaults = {
          datasetElementType: false,
          dataElementType: 'arc',
          animation: {
              animateRotate: true,
              animateScale: false
          },
          animations: {
              numbers: {
                  type: 'number',
                  properties: [
                      'circumference',
                      'endAngle',
                      'innerRadius',
                      'outerRadius',
                      'startAngle',
                      'x',
                      'y',
                      'offset',
                      'borderWidth',
                      'spacing'
                  ]
              }
          },
          cutout: '50%',
          rotation: 0,
          circumference: 360,
          radius: '100%',
          spacing: 0,
          indexAxis: 'r'
      };
      static descriptors = {
          _scriptable: (name)=>name !== 'spacing',
          _indexable: (name)=>name !== 'spacing' && !name.startsWith('borderDash') && !name.startsWith('hoverBorderDash')
      };
   static overrides = {
          aspectRatio: 1,
          plugins: {
              legend: {
                  labels: {
                      generateLabels (chart) {
                          const data = chart.data;
                          if (data.labels.length && data.datasets.length) {
                              const { labels: { pointStyle , color  }  } = chart.legend.options;
                              return data.labels.map((label, i)=>{
                                  const meta = chart.getDatasetMeta(0);
                                  const style = meta.controller.getStyle(i);
                                  return {
                                      text: label,
                                      fillStyle: style.backgroundColor,
                                      strokeStyle: style.borderColor,
                                      fontColor: color,
                                      lineWidth: style.borderWidth,
                                      pointStyle: pointStyle,
                                      hidden: !chart.getDataVisibility(i),
                                      index: i
                                  };
                              });
                          }
                          return [];
                      }
                  },
                  onClick (e, legendItem, legend) {
                      legend.chart.toggleDataVisibility(legendItem.index);
                      legend.chart.update();
                  }
              }
          }
      };
      constructor(chart, datasetIndex){
          super(chart, datasetIndex);
          this.enableOptionSharing = true;
          this.innerRadius = undefined;
          this.outerRadius = undefined;
          this.offsetX = undefined;
          this.offsetY = undefined;
      }
      linkScales() {}
   parse(start, count) {
          const data = this.getDataset().data;
          const meta = this._cachedMeta;
          if (this._parsing === false) {
              meta._parsed = data;
          } else {
              let getter = (i)=>+data[i];
              if (isObject(data[start])) {
                  const { key ='value'  } = this._parsing;
                  getter = (i)=>+resolveObjectKey(data[i], key);
              }
              let i, ilen;
              for(i = start, ilen = start + count; i < ilen; ++i){
                  meta._parsed[i] = getter(i);
              }
          }
      }
   _getRotation() {
          return toRadians(this.options.rotation - 90);
      }
   _getCircumference() {
          return toRadians(this.options.circumference);
      }
   _getRotationExtents() {
          let min = TAU;
          let max = -TAU;
          for(let i = 0; i < this.chart.data.datasets.length; ++i){
              if (this.chart.isDatasetVisible(i) && this.chart.getDatasetMeta(i).type === this._type) {
                  const controller = this.chart.getDatasetMeta(i).controller;
                  const rotation = controller._getRotation();
                  const circumference = controller._getCircumference();
                  min = Math.min(min, rotation);
                  max = Math.max(max, rotation + circumference);
              }
          }
          return {
              rotation: min,
              circumference: max - min
          };
      }
   update(mode) {
          const chart = this.chart;
          const { chartArea  } = chart;
          const meta = this._cachedMeta;
          const arcs = meta.data;
          const spacing = this.getMaxBorderWidth() + this.getMaxOffset(arcs) + this.options.spacing;
          const maxSize = Math.max((Math.min(chartArea.width, chartArea.height) - spacing) / 2, 0);
          const cutout = Math.min(toPercentage(this.options.cutout, maxSize), 1);
          const chartWeight = this._getRingWeight(this.index);
          const { circumference , rotation  } = this._getRotationExtents();
          const { ratioX , ratioY , offsetX , offsetY  } = getRatioAndOffset(rotation, circumference, cutout);
          const maxWidth = (chartArea.width - spacing) / ratioX;
          const maxHeight = (chartArea.height - spacing) / ratioY;
          const maxRadius = Math.max(Math.min(maxWidth, maxHeight) / 2, 0);
          const outerRadius = toDimension(this.options.radius, maxRadius);
          const innerRadius = Math.max(outerRadius * cutout, 0);
          const radiusLength = (outerRadius - innerRadius) / this._getVisibleDatasetWeightTotal();
          this.offsetX = offsetX * outerRadius;
          this.offsetY = offsetY * outerRadius;
          meta.total = this.calculateTotal();
          this.outerRadius = outerRadius - radiusLength * this._getRingWeightOffset(this.index);
          this.innerRadius = Math.max(this.outerRadius - radiusLength * chartWeight, 0);
          this.updateElements(arcs, 0, arcs.length, mode);
      }
   _circumference(i, reset) {
          const opts = this.options;
          const meta = this._cachedMeta;
          const circumference = this._getCircumference();
          if (reset && opts.animation.animateRotate || !this.chart.getDataVisibility(i) || meta._parsed[i] === null || meta.data[i].hidden) {
              return 0;
          }
          return this.calculateCircumference(meta._parsed[i] * circumference / TAU);
      }
      updateElements(arcs, start, count, mode) {
          const reset = mode === 'reset';
          const chart = this.chart;
          const chartArea = chart.chartArea;
          const opts = chart.options;
          const animationOpts = opts.animation;
          const centerX = (chartArea.left + chartArea.right) / 2;
          const centerY = (chartArea.top + chartArea.bottom) / 2;
          const animateScale = reset && animationOpts.animateScale;
          const innerRadius = animateScale ? 0 : this.innerRadius;
          const outerRadius = animateScale ? 0 : this.outerRadius;
          const { sharedOptions , includeOptions  } = this._getSharedOptions(start, mode);
          let startAngle = this._getRotation();
          let i;
          for(i = 0; i < start; ++i){
              startAngle += this._circumference(i, reset);
          }
          for(i = start; i < start + count; ++i){
              const circumference = this._circumference(i, reset);
              const arc = arcs[i];
              const properties = {
                  x: centerX + this.offsetX,
                  y: centerY + this.offsetY,
                  startAngle,
                  endAngle: startAngle + circumference,
                  circumference,
                  outerRadius,
                  innerRadius
              };
              if (includeOptions) {
                  properties.options = sharedOptions || this.resolveDataElementOptions(i, arc.active ? 'active' : mode);
              }
              startAngle += circumference;
              this.updateElement(arc, i, properties, mode);
          }
      }
      calculateTotal() {
          const meta = this._cachedMeta;
          const metaData = meta.data;
          let total = 0;
          let i;
          for(i = 0; i < metaData.length; i++){
              const value = meta._parsed[i];
              if (value !== null && !isNaN(value) && this.chart.getDataVisibility(i) && !metaData[i].hidden) {
                  total += Math.abs(value);
              }
          }
          return total;
      }
      calculateCircumference(value) {
          const total = this._cachedMeta.total;
          if (total > 0 && !isNaN(value)) {
              return TAU * (Math.abs(value) / total);
          }
          return 0;
      }
      getLabelAndValue(index) {
          const meta = this._cachedMeta;
          const chart = this.chart;
          const labels = chart.data.labels || [];
          const value = formatNumber(meta._parsed[index], chart.options.locale);
          return {
              label: labels[index] || '',
              value
          };
      }
      getMaxBorderWidth(arcs) {
          let max = 0;
          const chart = this.chart;
          let i, ilen, meta, controller, options;
          if (!arcs) {
              for(i = 0, ilen = chart.data.datasets.length; i < ilen; ++i){
                  if (chart.isDatasetVisible(i)) {
                      meta = chart.getDatasetMeta(i);
                      arcs = meta.data;
                      controller = meta.controller;
                      break;
                  }
              }
          }
          if (!arcs) {
              return 0;
          }
          for(i = 0, ilen = arcs.length; i < ilen; ++i){
              options = controller.resolveDataElementOptions(i);
              if (options.borderAlign !== 'inner') {
                  max = Math.max(max, options.borderWidth || 0, options.hoverBorderWidth || 0);
              }
          }
          return max;
      }
      getMaxOffset(arcs) {
          let max = 0;
          for(let i = 0, ilen = arcs.length; i < ilen; ++i){
              const options = this.resolveDataElementOptions(i);
              max = Math.max(max, options.offset || 0, options.hoverOffset || 0);
          }
          return max;
      }
   _getRingWeightOffset(datasetIndex) {
          let ringWeightOffset = 0;
          for(let i = 0; i < datasetIndex; ++i){
              if (this.chart.isDatasetVisible(i)) {
                  ringWeightOffset += this._getRingWeight(i);
              }
          }
          return ringWeightOffset;
      }
   _getRingWeight(datasetIndex) {
          return Math.max(valueOrDefault(this.chart.data.datasets[datasetIndex].weight, 1), 0);
      }
   _getVisibleDatasetWeightTotal() {
          return this._getRingWeightOffset(this.chart.data.datasets.length) || 1;
      }
  }

  class LineController extends DatasetController {
      static id = 'line';
   static defaults = {
          datasetElementType: 'line',
          dataElementType: 'point',
          showLine: true,
          spanGaps: false
      };
   static overrides = {
          scales: {
              _index_: {
                  type: 'category'
              },
              _value_: {
                  type: 'linear'
              }
          }
      };
      initialize() {
          this.enableOptionSharing = true;
          this.supportsDecimation = true;
          super.initialize();
      }
      update(mode) {
          const meta = this._cachedMeta;
          const { dataset: line , data: points = [] , _dataset  } = meta;
          const animationsDisabled = this.chart._animationsDisabled;
          let { start , count  } = _getStartAndCountOfVisiblePoints(meta, points, animationsDisabled);
          this._drawStart = start;
          this._drawCount = count;
          if (_scaleRangesChanged(meta)) {
              start = 0;
              count = points.length;
          }
          line._chart = this.chart;
          line._datasetIndex = this.index;
          line._decimated = !!_dataset._decimated;
          line.points = points;
          const options = this.resolveDatasetElementOptions(mode);
          if (!this.options.showLine) {
              options.borderWidth = 0;
          }
          options.segment = this.options.segment;
          this.updateElement(line, undefined, {
              animated: !animationsDisabled,
              options
          }, mode);
          this.updateElements(points, start, count, mode);
      }
      updateElements(points, start, count, mode) {
          const reset = mode === 'reset';
          const { iScale , vScale , _stacked , _dataset  } = this._cachedMeta;
          const { sharedOptions , includeOptions  } = this._getSharedOptions(start, mode);
          const iAxis = iScale.axis;
          const vAxis = vScale.axis;
          const { spanGaps , segment  } = this.options;
          const maxGapLength = isNumber(spanGaps) ? spanGaps : Number.POSITIVE_INFINITY;
          const directUpdate = this.chart._animationsDisabled || reset || mode === 'none';
          const end = start + count;
          const pointsCount = points.length;
          let prevParsed = start > 0 && this.getParsed(start - 1);
          for(let i = 0; i < pointsCount; ++i){
              const point = points[i];
              const properties = directUpdate ? point : {};
              if (i < start || i >= end) {
                  properties.skip = true;
                  continue;
              }
              const parsed = this.getParsed(i);
              const nullData = isNullOrUndef(parsed[vAxis]);
              const iPixel = properties[iAxis] = iScale.getPixelForValue(parsed[iAxis], i);
              const vPixel = properties[vAxis] = reset || nullData ? vScale.getBasePixel() : vScale.getPixelForValue(_stacked ? this.applyStack(vScale, parsed, _stacked) : parsed[vAxis], i);
              properties.skip = isNaN(iPixel) || isNaN(vPixel) || nullData;
              properties.stop = i > 0 && Math.abs(parsed[iAxis] - prevParsed[iAxis]) > maxGapLength;
              if (segment) {
                  properties.parsed = parsed;
                  properties.raw = _dataset.data[i];
              }
              if (includeOptions) {
                  properties.options = sharedOptions || this.resolveDataElementOptions(i, point.active ? 'active' : mode);
              }
              if (!directUpdate) {
                  this.updateElement(point, i, properties, mode);
              }
              prevParsed = parsed;
          }
      }
   getMaxOverflow() {
          const meta = this._cachedMeta;
          const dataset = meta.dataset;
          const border = dataset.options && dataset.options.borderWidth || 0;
          const data = meta.data || [];
          if (!data.length) {
              return border;
          }
          const firstPoint = data[0].size(this.resolveDataElementOptions(0));
          const lastPoint = data[data.length - 1].size(this.resolveDataElementOptions(data.length - 1));
          return Math.max(border, firstPoint, lastPoint) / 2;
      }
      draw() {
          const meta = this._cachedMeta;
          meta.dataset.updateControlPoints(this.chart.chartArea, meta.iScale.axis);
          super.draw();
      }
  }

  class PolarAreaController extends DatasetController {
      static id = 'polarArea';
   static defaults = {
          dataElementType: 'arc',
          animation: {
              animateRotate: true,
              animateScale: true
          },
          animations: {
              numbers: {
                  type: 'number',
                  properties: [
                      'x',
                      'y',
                      'startAngle',
                      'endAngle',
                      'innerRadius',
                      'outerRadius'
                  ]
              }
          },
          indexAxis: 'r',
          startAngle: 0
      };
   static overrides = {
          aspectRatio: 1,
          plugins: {
              legend: {
                  labels: {
                      generateLabels (chart) {
                          const data = chart.data;
                          if (data.labels.length && data.datasets.length) {
                              const { labels: { pointStyle , color  }  } = chart.legend.options;
                              return data.labels.map((label, i)=>{
                                  const meta = chart.getDatasetMeta(0);
                                  const style = meta.controller.getStyle(i);
                                  return {
                                      text: label,
                                      fillStyle: style.backgroundColor,
                                      strokeStyle: style.borderColor,
                                      fontColor: color,
                                      lineWidth: style.borderWidth,
                                      pointStyle: pointStyle,
                                      hidden: !chart.getDataVisibility(i),
                                      index: i
                                  };
                              });
                          }
                          return [];
                      }
                  },
                  onClick (e, legendItem, legend) {
                      legend.chart.toggleDataVisibility(legendItem.index);
                      legend.chart.update();
                  }
              }
          },
          scales: {
              r: {
                  type: 'radialLinear',
                  angleLines: {
                      display: false
                  },
                  beginAtZero: true,
                  grid: {
                      circular: true
                  },
                  pointLabels: {
                      display: false
                  },
                  startAngle: 0
              }
          }
      };
      constructor(chart, datasetIndex){
          super(chart, datasetIndex);
          this.innerRadius = undefined;
          this.outerRadius = undefined;
      }
      getLabelAndValue(index) {
          const meta = this._cachedMeta;
          const chart = this.chart;
          const labels = chart.data.labels || [];
          const value = formatNumber(meta._parsed[index].r, chart.options.locale);
          return {
              label: labels[index] || '',
              value
          };
      }
      parseObjectData(meta, data, start, count) {
          return _parseObjectDataRadialScale.bind(this)(meta, data, start, count);
      }
      update(mode) {
          const arcs = this._cachedMeta.data;
          this._updateRadius();
          this.updateElements(arcs, 0, arcs.length, mode);
      }
   getMinMax() {
          const meta = this._cachedMeta;
          const range = {
              min: Number.POSITIVE_INFINITY,
              max: Number.NEGATIVE_INFINITY
          };
          meta.data.forEach((element, index)=>{
              const parsed = this.getParsed(index).r;
              if (!isNaN(parsed) && this.chart.getDataVisibility(index)) {
                  if (parsed < range.min) {
                      range.min = parsed;
                  }
                  if (parsed > range.max) {
                      range.max = parsed;
                  }
              }
          });
          return range;
      }
   _updateRadius() {
          const chart = this.chart;
          const chartArea = chart.chartArea;
          const opts = chart.options;
          const minSize = Math.min(chartArea.right - chartArea.left, chartArea.bottom - chartArea.top);
          const outerRadius = Math.max(minSize / 2, 0);
          const innerRadius = Math.max(opts.cutoutPercentage ? outerRadius / 100 * opts.cutoutPercentage : 1, 0);
          const radiusLength = (outerRadius - innerRadius) / chart.getVisibleDatasetCount();
          this.outerRadius = outerRadius - radiusLength * this.index;
          this.innerRadius = this.outerRadius - radiusLength;
      }
      updateElements(arcs, start, count, mode) {
          const reset = mode === 'reset';
          const chart = this.chart;
          const opts = chart.options;
          const animationOpts = opts.animation;
          const scale = this._cachedMeta.rScale;
          const centerX = scale.xCenter;
          const centerY = scale.yCenter;
          const datasetStartAngle = scale.getIndexAngle(0) - 0.5 * PI;
          let angle = datasetStartAngle;
          let i;
          const defaultAngle = 360 / this.countVisibleElements();
          for(i = 0; i < start; ++i){
              angle += this._computeAngle(i, mode, defaultAngle);
          }
          for(i = start; i < start + count; i++){
              const arc = arcs[i];
              let startAngle = angle;
              let endAngle = angle + this._computeAngle(i, mode, defaultAngle);
              let outerRadius = chart.getDataVisibility(i) ? scale.getDistanceFromCenterForValue(this.getParsed(i).r) : 0;
              angle = endAngle;
              if (reset) {
                  if (animationOpts.animateScale) {
                      outerRadius = 0;
                  }
                  if (animationOpts.animateRotate) {
                      startAngle = endAngle = datasetStartAngle;
                  }
              }
              const properties = {
                  x: centerX,
                  y: centerY,
                  innerRadius: 0,
                  outerRadius,
                  startAngle,
                  endAngle,
                  options: this.resolveDataElementOptions(i, arc.active ? 'active' : mode)
              };
              this.updateElement(arc, i, properties, mode);
          }
      }
      countVisibleElements() {
          const meta = this._cachedMeta;
          let count = 0;
          meta.data.forEach((element, index)=>{
              if (!isNaN(this.getParsed(index).r) && this.chart.getDataVisibility(index)) {
                  count++;
              }
          });
          return count;
      }
   _computeAngle(index, mode, defaultAngle) {
          return this.chart.getDataVisibility(index) ? toRadians(this.resolveDataElementOptions(index, mode).angle || defaultAngle) : 0;
      }
  }

  class PieController extends DoughnutController {
      static id = 'pie';
   static defaults = {
          cutout: 0,
          rotation: 0,
          circumference: 360,
          radius: '100%'
      };
  }

  class RadarController extends DatasetController {
      static id = 'radar';
   static defaults = {
          datasetElementType: 'line',
          dataElementType: 'point',
          indexAxis: 'r',
          showLine: true,
          elements: {
              line: {
                  fill: 'start'
              }
          }
      };
   static overrides = {
          aspectRatio: 1,
          scales: {
              r: {
                  type: 'radialLinear'
              }
          }
      };
   getLabelAndValue(index) {
          const vScale = this._cachedMeta.vScale;
          const parsed = this.getParsed(index);
          return {
              label: vScale.getLabels()[index],
              value: '' + vScale.getLabelForValue(parsed[vScale.axis])
          };
      }
      parseObjectData(meta, data, start, count) {
          return _parseObjectDataRadialScale.bind(this)(meta, data, start, count);
      }
      update(mode) {
          const meta = this._cachedMeta;
          const line = meta.dataset;
          const points = meta.data || [];
          const labels = meta.iScale.getLabels();
          line.points = points;
          if (mode !== 'resize') {
              const options = this.resolveDatasetElementOptions(mode);
              if (!this.options.showLine) {
                  options.borderWidth = 0;
              }
              const properties = {
                  _loop: true,
                  _fullLoop: labels.length === points.length,
                  options
              };
              this.updateElement(line, undefined, properties, mode);
          }
          this.updateElements(points, 0, points.length, mode);
      }
      updateElements(points, start, count, mode) {
          const scale = this._cachedMeta.rScale;
          const reset = mode === 'reset';
          for(let i = start; i < start + count; i++){
              const point = points[i];
              const options = this.resolveDataElementOptions(i, point.active ? 'active' : mode);
              const pointPosition = scale.getPointPositionForValue(i, this.getParsed(i).r);
              const x = reset ? scale.xCenter : pointPosition.x;
              const y = reset ? scale.yCenter : pointPosition.y;
              const properties = {
                  x,
                  y,
                  angle: pointPosition.angle,
                  skip: isNaN(x) || isNaN(y),
                  options
              };
              this.updateElement(point, i, properties, mode);
          }
      }
  }

  class ScatterController extends DatasetController {
      static id = 'scatter';
   static defaults = {
          datasetElementType: false,
          dataElementType: 'point',
          showLine: false,
          fill: false
      };
   static overrides = {
          interaction: {
              mode: 'point'
          },
          scales: {
              x: {
                  type: 'linear'
              },
              y: {
                  type: 'linear'
              }
          }
      };
   getLabelAndValue(index) {
          const meta = this._cachedMeta;
          const labels = this.chart.data.labels || [];
          const { xScale , yScale  } = meta;
          const parsed = this.getParsed(index);
          const x = xScale.getLabelForValue(parsed.x);
          const y = yScale.getLabelForValue(parsed.y);
          return {
              label: labels[index] || '',
              value: '(' + x + ', ' + y + ')'
          };
      }
      update(mode) {
          const meta = this._cachedMeta;
          const { data: points = []  } = meta;
          const animationsDisabled = this.chart._animationsDisabled;
          let { start , count  } = _getStartAndCountOfVisiblePoints(meta, points, animationsDisabled);
          this._drawStart = start;
          this._drawCount = count;
          if (_scaleRangesChanged(meta)) {
              start = 0;
              count = points.length;
          }
          if (this.options.showLine) {
              if (!this.datasetElementType) {
                  this.addElements();
              }
              const { dataset: line , _dataset  } = meta;
              line._chart = this.chart;
              line._datasetIndex = this.index;
              line._decimated = !!_dataset._decimated;
              line.points = points;
              const options = this.resolveDatasetElementOptions(mode);
              options.segment = this.options.segment;
              this.updateElement(line, undefined, {
                  animated: !animationsDisabled,
                  options
              }, mode);
          } else if (this.datasetElementType) {
              delete meta.dataset;
              this.datasetElementType = false;
          }
          this.updateElements(points, start, count, mode);
      }
      addElements() {
          const { showLine  } = this.options;
          if (!this.datasetElementType && showLine) {
              this.datasetElementType = this.chart.registry.getElement('line');
          }
          super.addElements();
      }
      updateElements(points, start, count, mode) {
          const reset = mode === 'reset';
          const { iScale , vScale , _stacked , _dataset  } = this._cachedMeta;
          const firstOpts = this.resolveDataElementOptions(start, mode);
          const sharedOptions = this.getSharedOptions(firstOpts);
          const includeOptions = this.includeOptions(mode, sharedOptions);
          const iAxis = iScale.axis;
          const vAxis = vScale.axis;
          const { spanGaps , segment  } = this.options;
          const maxGapLength = isNumber(spanGaps) ? spanGaps : Number.POSITIVE_INFINITY;
          const directUpdate = this.chart._animationsDisabled || reset || mode === 'none';
          let prevParsed = start > 0 && this.getParsed(start - 1);
          for(let i = start; i < start + count; ++i){
              const point = points[i];
              const parsed = this.getParsed(i);
              const properties = directUpdate ? point : {};
              const nullData = isNullOrUndef(parsed[vAxis]);
              const iPixel = properties[iAxis] = iScale.getPixelForValue(parsed[iAxis], i);
              const vPixel = properties[vAxis] = reset || nullData ? vScale.getBasePixel() : vScale.getPixelForValue(_stacked ? this.applyStack(vScale, parsed, _stacked) : parsed[vAxis], i);
              properties.skip = isNaN(iPixel) || isNaN(vPixel) || nullData;
              properties.stop = i > 0 && Math.abs(parsed[iAxis] - prevParsed[iAxis]) > maxGapLength;
              if (segment) {
                  properties.parsed = parsed;
                  properties.raw = _dataset.data[i];
              }
              if (includeOptions) {
                  properties.options = sharedOptions || this.resolveDataElementOptions(i, point.active ? 'active' : mode);
              }
              if (!directUpdate) {
                  this.updateElement(point, i, properties, mode);
              }
              prevParsed = parsed;
          }
          this.updateSharedOptions(sharedOptions, mode, firstOpts);
      }
   getMaxOverflow() {
          const meta = this._cachedMeta;
          const data = meta.data || [];
          if (!this.options.showLine) {
              let max = 0;
              for(let i = data.length - 1; i >= 0; --i){
                  max = Math.max(max, data[i].size(this.resolveDataElementOptions(i)) / 2);
              }
              return max > 0 && max;
          }
          const dataset = meta.dataset;
          const border = dataset.options && dataset.options.borderWidth || 0;
          if (!data.length) {
              return border;
          }
          const firstPoint = data[0].size(this.resolveDataElementOptions(0));
          const lastPoint = data[data.length - 1].size(this.resolveDataElementOptions(data.length - 1));
          return Math.max(border, firstPoint, lastPoint) / 2;
      }
  }

  var controllers = /*#__PURE__*/Object.freeze({
  __proto__: null,
  BarController: BarController,
  BubbleController: BubbleController,
  DoughnutController: DoughnutController,
  LineController: LineController,
  PieController: PieController,
  PolarAreaController: PolarAreaController,
  RadarController: RadarController,
  ScatterController: ScatterController
  });

  /**
   * @namespace Chart._adapters
   * @since 2.8.0
   * @private
   */ function abstract() {
      throw new Error('This method is not implemented: Check that a complete date adapter is provided.');
  }
  /**
   * Date adapter (current used by the time scale)
   * @namespace Chart._adapters._date
   * @memberof Chart._adapters
   * @private
   */ class DateAdapterBase {
      /**
     * Override default date adapter methods.
     * Accepts type parameter to define options type.
     * @example
     * Chart._adapters._date.override<{myAdapterOption: string}>({
     *   init() {
     *     console.log(this.options.myAdapterOption);
     *   }
     * })
     */ static override(members) {
          Object.assign(DateAdapterBase.prototype, members);
      }
      options;
      constructor(options){
          this.options = options || {};
      }
      // eslint-disable-next-line @typescript-eslint/no-empty-function
      init() {}
      formats() {
          return abstract();
      }
      parse() {
          return abstract();
      }
      format() {
          return abstract();
      }
      add() {
          return abstract();
      }
      diff() {
          return abstract();
      }
      startOf() {
          return abstract();
      }
      endOf() {
          return abstract();
      }
  }
  var adapters = {
      _date: DateAdapterBase
  };

  function binarySearch(metaset, axis, value, intersect) {
      const { controller , data , _sorted  } = metaset;
      const iScale = controller._cachedMeta.iScale;
      if (iScale && axis === iScale.axis && axis !== 'r' && _sorted && data.length) {
          const lookupMethod = iScale._reversePixels ? _rlookupByKey : _lookupByKey;
          if (!intersect) {
              return lookupMethod(data, axis, value);
          } else if (controller._sharedOptions) {
              const el = data[0];
              const range = typeof el.getRange === 'function' && el.getRange(axis);
              if (range) {
                  const start = lookupMethod(data, axis, value - range);
                  const end = lookupMethod(data, axis, value + range);
                  return {
                      lo: start.lo,
                      hi: end.hi
                  };
              }
          }
      }
      return {
          lo: 0,
          hi: data.length - 1
      };
  }
   function evaluateInteractionItems(chart, axis, position, handler, intersect) {
      const metasets = chart.getSortedVisibleDatasetMetas();
      const value = position[axis];
      for(let i = 0, ilen = metasets.length; i < ilen; ++i){
          const { index , data  } = metasets[i];
          const { lo , hi  } = binarySearch(metasets[i], axis, value, intersect);
          for(let j = lo; j <= hi; ++j){
              const element = data[j];
              if (!element.skip) {
                  handler(element, index, j);
              }
          }
      }
  }
   function getDistanceMetricForAxis(axis) {
      const useX = axis.indexOf('x') !== -1;
      const useY = axis.indexOf('y') !== -1;
      return function(pt1, pt2) {
          const deltaX = useX ? Math.abs(pt1.x - pt2.x) : 0;
          const deltaY = useY ? Math.abs(pt1.y - pt2.y) : 0;
          return Math.sqrt(Math.pow(deltaX, 2) + Math.pow(deltaY, 2));
      };
  }
   function getIntersectItems(chart, position, axis, useFinalPosition, includeInvisible) {
      const items = [];
      if (!includeInvisible && !chart.isPointInArea(position)) {
          return items;
      }
      const evaluationFunc = function(element, datasetIndex, index) {
          if (!includeInvisible && !_isPointInArea(element, chart.chartArea, 0)) {
              return;
          }
          if (element.inRange(position.x, position.y, useFinalPosition)) {
              items.push({
                  element,
                  datasetIndex,
                  index
              });
          }
      };
      evaluateInteractionItems(chart, axis, position, evaluationFunc, true);
      return items;
  }
   function getNearestRadialItems(chart, position, axis, useFinalPosition) {
      let items = [];
      function evaluationFunc(element, datasetIndex, index) {
          const { startAngle , endAngle  } = element.getProps([
              'startAngle',
              'endAngle'
          ], useFinalPosition);
          const { angle  } = getAngleFromPoint(element, {
              x: position.x,
              y: position.y
          });
          if (_angleBetween(angle, startAngle, endAngle)) {
              items.push({
                  element,
                  datasetIndex,
                  index
              });
          }
      }
      evaluateInteractionItems(chart, axis, position, evaluationFunc);
      return items;
  }
   function getNearestCartesianItems(chart, position, axis, intersect, useFinalPosition, includeInvisible) {
      let items = [];
      const distanceMetric = getDistanceMetricForAxis(axis);
      let minDistance = Number.POSITIVE_INFINITY;
      function evaluationFunc(element, datasetIndex, index) {
          const inRange = element.inRange(position.x, position.y, useFinalPosition);
          if (intersect && !inRange) {
              return;
          }
          const center = element.getCenterPoint(useFinalPosition);
          const pointInArea = !!includeInvisible || chart.isPointInArea(center);
          if (!pointInArea && !inRange) {
              return;
          }
          const distance = distanceMetric(position, center);
          if (distance < minDistance) {
              items = [
                  {
                      element,
                      datasetIndex,
                      index
                  }
              ];
              minDistance = distance;
          } else if (distance === minDistance) {
              items.push({
                  element,
                  datasetIndex,
                  index
              });
          }
      }
      evaluateInteractionItems(chart, axis, position, evaluationFunc);
      return items;
  }
   function getNearestItems(chart, position, axis, intersect, useFinalPosition, includeInvisible) {
      if (!includeInvisible && !chart.isPointInArea(position)) {
          return [];
      }
      return axis === 'r' && !intersect ? getNearestRadialItems(chart, position, axis, useFinalPosition) : getNearestCartesianItems(chart, position, axis, intersect, useFinalPosition, includeInvisible);
  }
   function getAxisItems(chart, position, axis, intersect, useFinalPosition) {
      const items = [];
      const rangeMethod = axis === 'x' ? 'inXRange' : 'inYRange';
      let intersectsItem = false;
      evaluateInteractionItems(chart, axis, position, (element, datasetIndex, index)=>{
          if (element[rangeMethod] && element[rangeMethod](position[axis], useFinalPosition)) {
              items.push({
                  element,
                  datasetIndex,
                  index
              });
              intersectsItem = intersectsItem || element.inRange(position.x, position.y, useFinalPosition);
          }
      });
      if (intersect && !intersectsItem) {
          return [];
      }
      return items;
  }
   var Interaction = {
      evaluateInteractionItems,
      modes: {
   index (chart, e, options, useFinalPosition) {
              const position = getRelativePosition(e, chart);
              const axis = options.axis || 'x';
              const includeInvisible = options.includeInvisible || false;
              const items = options.intersect ? getIntersectItems(chart, position, axis, useFinalPosition, includeInvisible) : getNearestItems(chart, position, axis, false, useFinalPosition, includeInvisible);
              const elements = [];
              if (!items.length) {
                  return [];
              }
              chart.getSortedVisibleDatasetMetas().forEach((meta)=>{
                  const index = items[0].index;
                  const element = meta.data[index];
                  if (element && !element.skip) {
                      elements.push({
                          element,
                          datasetIndex: meta.index,
                          index
                      });
                  }
              });
              return elements;
          },
   dataset (chart, e, options, useFinalPosition) {
              const position = getRelativePosition(e, chart);
              const axis = options.axis || 'xy';
              const includeInvisible = options.includeInvisible || false;
              let items = options.intersect ? getIntersectItems(chart, position, axis, useFinalPosition, includeInvisible) : getNearestItems(chart, position, axis, false, useFinalPosition, includeInvisible);
              if (items.length > 0) {
                  const datasetIndex = items[0].datasetIndex;
                  const data = chart.getDatasetMeta(datasetIndex).data;
                  items = [];
                  for(let i = 0; i < data.length; ++i){
                      items.push({
                          element: data[i],
                          datasetIndex,
                          index: i
                      });
                  }
              }
              return items;
          },
   point (chart, e, options, useFinalPosition) {
              const position = getRelativePosition(e, chart);
              const axis = options.axis || 'xy';
              const includeInvisible = options.includeInvisible || false;
              return getIntersectItems(chart, position, axis, useFinalPosition, includeInvisible);
          },
   nearest (chart, e, options, useFinalPosition) {
              const position = getRelativePosition(e, chart);
              const axis = options.axis || 'xy';
              const includeInvisible = options.includeInvisible || false;
              return getNearestItems(chart, position, axis, options.intersect, useFinalPosition, includeInvisible);
          },
   x (chart, e, options, useFinalPosition) {
              const position = getRelativePosition(e, chart);
              return getAxisItems(chart, position, 'x', options.intersect, useFinalPosition);
          },
   y (chart, e, options, useFinalPosition) {
              const position = getRelativePosition(e, chart);
              return getAxisItems(chart, position, 'y', options.intersect, useFinalPosition);
          }
      }
  };

  const STATIC_POSITIONS = [
      'left',
      'top',
      'right',
      'bottom'
  ];
  function filterByPosition(array, position) {
      return array.filter((v)=>v.pos === position);
  }
  function filterDynamicPositionByAxis(array, axis) {
      return array.filter((v)=>STATIC_POSITIONS.indexOf(v.pos) === -1 && v.box.axis === axis);
  }
  function sortByWeight(array, reverse) {
      return array.sort((a, b)=>{
          const v0 = reverse ? b : a;
          const v1 = reverse ? a : b;
          return v0.weight === v1.weight ? v0.index - v1.index : v0.weight - v1.weight;
      });
  }
  function wrapBoxes(boxes) {
      const layoutBoxes = [];
      let i, ilen, box, pos, stack, stackWeight;
      for(i = 0, ilen = (boxes || []).length; i < ilen; ++i){
          box = boxes[i];
          ({ position: pos , options: { stack , stackWeight =1  }  } = box);
          layoutBoxes.push({
              index: i,
              box,
              pos,
              horizontal: box.isHorizontal(),
              weight: box.weight,
              stack: stack && pos + stack,
              stackWeight
          });
      }
      return layoutBoxes;
  }
  function buildStacks(layouts) {
      const stacks = {};
      for (const wrap of layouts){
          const { stack , pos , stackWeight  } = wrap;
          if (!stack || !STATIC_POSITIONS.includes(pos)) {
              continue;
          }
          const _stack = stacks[stack] || (stacks[stack] = {
              count: 0,
              placed: 0,
              weight: 0,
              size: 0
          });
          _stack.count++;
          _stack.weight += stackWeight;
      }
      return stacks;
  }
   function setLayoutDims(layouts, params) {
      const stacks = buildStacks(layouts);
      const { vBoxMaxWidth , hBoxMaxHeight  } = params;
      let i, ilen, layout;
      for(i = 0, ilen = layouts.length; i < ilen; ++i){
          layout = layouts[i];
          const { fullSize  } = layout.box;
          const stack = stacks[layout.stack];
          const factor = stack && layout.stackWeight / stack.weight;
          if (layout.horizontal) {
              layout.width = factor ? factor * vBoxMaxWidth : fullSize && params.availableWidth;
              layout.height = hBoxMaxHeight;
          } else {
              layout.width = vBoxMaxWidth;
              layout.height = factor ? factor * hBoxMaxHeight : fullSize && params.availableHeight;
          }
      }
      return stacks;
  }
  function buildLayoutBoxes(boxes) {
      const layoutBoxes = wrapBoxes(boxes);
      const fullSize = sortByWeight(layoutBoxes.filter((wrap)=>wrap.box.fullSize), true);
      const left = sortByWeight(filterByPosition(layoutBoxes, 'left'), true);
      const right = sortByWeight(filterByPosition(layoutBoxes, 'right'));
      const top = sortByWeight(filterByPosition(layoutBoxes, 'top'), true);
      const bottom = sortByWeight(filterByPosition(layoutBoxes, 'bottom'));
      const centerHorizontal = filterDynamicPositionByAxis(layoutBoxes, 'x');
      const centerVertical = filterDynamicPositionByAxis(layoutBoxes, 'y');
      return {
          fullSize,
          leftAndTop: left.concat(top),
          rightAndBottom: right.concat(centerVertical).concat(bottom).concat(centerHorizontal),
          chartArea: filterByPosition(layoutBoxes, 'chartArea'),
          vertical: left.concat(right).concat(centerVertical),
          horizontal: top.concat(bottom).concat(centerHorizontal)
      };
  }
  function getCombinedMax(maxPadding, chartArea, a, b) {
      return Math.max(maxPadding[a], chartArea[a]) + Math.max(maxPadding[b], chartArea[b]);
  }
  function updateMaxPadding(maxPadding, boxPadding) {
      maxPadding.top = Math.max(maxPadding.top, boxPadding.top);
      maxPadding.left = Math.max(maxPadding.left, boxPadding.left);
      maxPadding.bottom = Math.max(maxPadding.bottom, boxPadding.bottom);
      maxPadding.right = Math.max(maxPadding.right, boxPadding.right);
  }
  function updateDims(chartArea, params, layout, stacks) {
      const { pos , box  } = layout;
      const maxPadding = chartArea.maxPadding;
      if (!isObject(pos)) {
          if (layout.size) {
              chartArea[pos] -= layout.size;
          }
          const stack = stacks[layout.stack] || {
              size: 0,
              count: 1
          };
          stack.size = Math.max(stack.size, layout.horizontal ? box.height : box.width);
          layout.size = stack.size / stack.count;
          chartArea[pos] += layout.size;
      }
      if (box.getPadding) {
          updateMaxPadding(maxPadding, box.getPadding());
      }
      const newWidth = Math.max(0, params.outerWidth - getCombinedMax(maxPadding, chartArea, 'left', 'right'));
      const newHeight = Math.max(0, params.outerHeight - getCombinedMax(maxPadding, chartArea, 'top', 'bottom'));
      const widthChanged = newWidth !== chartArea.w;
      const heightChanged = newHeight !== chartArea.h;
      chartArea.w = newWidth;
      chartArea.h = newHeight;
      return layout.horizontal ? {
          same: widthChanged,
          other: heightChanged
      } : {
          same: heightChanged,
          other: widthChanged
      };
  }
  function handleMaxPadding(chartArea) {
      const maxPadding = chartArea.maxPadding;
      function updatePos(pos) {
          const change = Math.max(maxPadding[pos] - chartArea[pos], 0);
          chartArea[pos] += change;
          return change;
      }
      chartArea.y += updatePos('top');
      chartArea.x += updatePos('left');
      updatePos('right');
      updatePos('bottom');
  }
  function getMargins(horizontal, chartArea) {
      const maxPadding = chartArea.maxPadding;
      function marginForPositions(positions) {
          const margin = {
              left: 0,
              top: 0,
              right: 0,
              bottom: 0
          };
          positions.forEach((pos)=>{
              margin[pos] = Math.max(chartArea[pos], maxPadding[pos]);
          });
          return margin;
      }
      return horizontal ? marginForPositions([
          'left',
          'right'
      ]) : marginForPositions([
          'top',
          'bottom'
      ]);
  }
  function fitBoxes(boxes, chartArea, params, stacks) {
      const refitBoxes = [];
      let i, ilen, layout, box, refit, changed;
      for(i = 0, ilen = boxes.length, refit = 0; i < ilen; ++i){
          layout = boxes[i];
          box = layout.box;
          box.update(layout.width || chartArea.w, layout.height || chartArea.h, getMargins(layout.horizontal, chartArea));
          const { same , other  } = updateDims(chartArea, params, layout, stacks);
          refit |= same && refitBoxes.length;
          changed = changed || other;
          if (!box.fullSize) {
              refitBoxes.push(layout);
          }
      }
      return refit && fitBoxes(refitBoxes, chartArea, params, stacks) || changed;
  }
  function setBoxDims(box, left, top, width, height) {
      box.top = top;
      box.left = left;
      box.right = left + width;
      box.bottom = top + height;
      box.width = width;
      box.height = height;
  }
  function placeBoxes(boxes, chartArea, params, stacks) {
      const userPadding = params.padding;
      let { x , y  } = chartArea;
      for (const layout of boxes){
          const box = layout.box;
          const stack = stacks[layout.stack] || {
              count: 1,
              placed: 0,
              weight: 1
          };
          const weight = layout.stackWeight / stack.weight || 1;
          if (layout.horizontal) {
              const width = chartArea.w * weight;
              const height = stack.size || box.height;
              if (defined(stack.start)) {
                  y = stack.start;
              }
              if (box.fullSize) {
                  setBoxDims(box, userPadding.left, y, params.outerWidth - userPadding.right - userPadding.left, height);
              } else {
                  setBoxDims(box, chartArea.left + stack.placed, y, width, height);
              }
              stack.start = y;
              stack.placed += width;
              y = box.bottom;
          } else {
              const height = chartArea.h * weight;
              const width = stack.size || box.width;
              if (defined(stack.start)) {
                  x = stack.start;
              }
              if (box.fullSize) {
                  setBoxDims(box, x, userPadding.top, width, params.outerHeight - userPadding.bottom - userPadding.top);
              } else {
                  setBoxDims(box, x, chartArea.top + stack.placed, width, height);
              }
              stack.start = x;
              stack.placed += height;
              x = box.right;
          }
      }
      chartArea.x = x;
      chartArea.y = y;
  }
  var layouts = {
   addBox (chart, item) {
          if (!chart.boxes) {
              chart.boxes = [];
          }
          item.fullSize = item.fullSize || false;
          item.position = item.position || 'top';
          item.weight = item.weight || 0;
          item._layers = item._layers || function() {
              return [
                  {
                      z: 0,
                      draw (chartArea) {
                          item.draw(chartArea);
                      }
                  }
              ];
          };
          chart.boxes.push(item);
      },
   removeBox (chart, layoutItem) {
          const index = chart.boxes ? chart.boxes.indexOf(layoutItem) : -1;
          if (index !== -1) {
              chart.boxes.splice(index, 1);
          }
      },
   configure (chart, item, options) {
          item.fullSize = options.fullSize;
          item.position = options.position;
          item.weight = options.weight;
      },
   update (chart, width, height, minPadding) {
          if (!chart) {
              return;
          }
          const padding = toPadding(chart.options.layout.padding);
          const availableWidth = Math.max(width - padding.width, 0);
          const availableHeight = Math.max(height - padding.height, 0);
          const boxes = buildLayoutBoxes(chart.boxes);
          const verticalBoxes = boxes.vertical;
          const horizontalBoxes = boxes.horizontal;
          each(chart.boxes, (box)=>{
              if (typeof box.beforeLayout === 'function') {
                  box.beforeLayout();
              }
          });
          const visibleVerticalBoxCount = verticalBoxes.reduce((total, wrap)=>wrap.box.options && wrap.box.options.display === false ? total : total + 1, 0) || 1;
          const params = Object.freeze({
              outerWidth: width,
              outerHeight: height,
              padding,
              availableWidth,
              availableHeight,
              vBoxMaxWidth: availableWidth / 2 / visibleVerticalBoxCount,
              hBoxMaxHeight: availableHeight / 2
          });
          const maxPadding = Object.assign({}, padding);
          updateMaxPadding(maxPadding, toPadding(minPadding));
          const chartArea = Object.assign({
              maxPadding,
              w: availableWidth,
              h: availableHeight,
              x: padding.left,
              y: padding.top
          }, padding);
          const stacks = setLayoutDims(verticalBoxes.concat(horizontalBoxes), params);
          fitBoxes(boxes.fullSize, chartArea, params, stacks);
          fitBoxes(verticalBoxes, chartArea, params, stacks);
          if (fitBoxes(horizontalBoxes, chartArea, params, stacks)) {
              fitBoxes(verticalBoxes, chartArea, params, stacks);
          }
          handleMaxPadding(chartArea);
          placeBoxes(boxes.leftAndTop, chartArea, params, stacks);
          chartArea.x += chartArea.w;
          chartArea.y += chartArea.h;
          placeBoxes(boxes.rightAndBottom, chartArea, params, stacks);
          chart.chartArea = {
              left: chartArea.left,
              top: chartArea.top,
              right: chartArea.left + chartArea.w,
              bottom: chartArea.top + chartArea.h,
              height: chartArea.h,
              width: chartArea.w
          };
          each(boxes.chartArea, (layout)=>{
              const box = layout.box;
              Object.assign(box, chart.chartArea);
              box.update(chartArea.w, chartArea.h, {
                  left: 0,
                  top: 0,
                  right: 0,
                  bottom: 0
              });
          });
      }
  };

  class BasePlatform {
   acquireContext(canvas, aspectRatio) {}
   releaseContext(context) {
          return false;
      }
   addEventListener(chart, type, listener) {}
   removeEventListener(chart, type, listener) {}
   getDevicePixelRatio() {
          return 1;
      }
   getMaximumSize(element, width, height, aspectRatio) {
          width = Math.max(0, width || element.width);
          height = height || element.height;
          return {
              width,
              height: Math.max(0, aspectRatio ? Math.floor(width / aspectRatio) : height)
          };
      }
   isAttached(canvas) {
          return true;
      }
   updateConfig(config) {
      }
  }

  class BasicPlatform extends BasePlatform {
      acquireContext(item) {
          return item && item.getContext && item.getContext('2d') || null;
      }
      updateConfig(config) {
          config.options.animation = false;
      }
  }

  const EXPANDO_KEY = '$chartjs';
   const EVENT_TYPES = {
      touchstart: 'mousedown',
      touchmove: 'mousemove',
      touchend: 'mouseup',
      pointerenter: 'mouseenter',
      pointerdown: 'mousedown',
      pointermove: 'mousemove',
      pointerup: 'mouseup',
      pointerleave: 'mouseout',
      pointerout: 'mouseout'
  };
  const isNullOrEmpty = (value)=>value === null || value === '';
   function initCanvas(canvas, aspectRatio) {
      const style = canvas.style;
      const renderHeight = canvas.getAttribute('height');
      const renderWidth = canvas.getAttribute('width');
      canvas[EXPANDO_KEY] = {
          initial: {
              height: renderHeight,
              width: renderWidth,
              style: {
                  display: style.display,
                  height: style.height,
                  width: style.width
              }
          }
      };
      style.display = style.display || 'block';
      style.boxSizing = style.boxSizing || 'border-box';
      if (isNullOrEmpty(renderWidth)) {
          const displayWidth = readUsedSize(canvas, 'width');
          if (displayWidth !== undefined) {
              canvas.width = displayWidth;
          }
      }
      if (isNullOrEmpty(renderHeight)) {
          if (canvas.style.height === '') {
              canvas.height = canvas.width / (aspectRatio || 2);
          } else {
              const displayHeight = readUsedSize(canvas, 'height');
              if (displayHeight !== undefined) {
                  canvas.height = displayHeight;
              }
          }
      }
      return canvas;
  }
  const eventListenerOptions = supportsEventListenerOptions ? {
      passive: true
  } : false;
  function addListener(node, type, listener) {
      if (node) {
          node.addEventListener(type, listener, eventListenerOptions);
      }
  }
  function removeListener(chart, type, listener) {
      if (chart && chart.canvas) {
          chart.canvas.removeEventListener(type, listener, eventListenerOptions);
      }
  }
  function fromNativeEvent(event, chart) {
      const type = EVENT_TYPES[event.type] || event.type;
      const { x , y  } = getRelativePosition(event, chart);
      return {
          type,
          chart,
          native: event,
          x: x !== undefined ? x : null,
          y: y !== undefined ? y : null
      };
  }
  function nodeListContains(nodeList, canvas) {
      for (const node of nodeList){
          if (node === canvas || node.contains(canvas)) {
              return true;
          }
      }
  }
  function createAttachObserver(chart, type, listener) {
      const canvas = chart.canvas;
      const observer = new MutationObserver((entries)=>{
          let trigger = false;
          for (const entry of entries){
              trigger = trigger || nodeListContains(entry.addedNodes, canvas);
              trigger = trigger && !nodeListContains(entry.removedNodes, canvas);
          }
          if (trigger) {
              listener();
          }
      });
      observer.observe(document, {
          childList: true,
          subtree: true
      });
      return observer;
  }
  function createDetachObserver(chart, type, listener) {
      const canvas = chart.canvas;
      const observer = new MutationObserver((entries)=>{
          let trigger = false;
          for (const entry of entries){
              trigger = trigger || nodeListContains(entry.removedNodes, canvas);
              trigger = trigger && !nodeListContains(entry.addedNodes, canvas);
          }
          if (trigger) {
              listener();
          }
      });
      observer.observe(document, {
          childList: true,
          subtree: true
      });
      return observer;
  }
  const drpListeningCharts = new Map();
  let oldDevicePixelRatio = 0;
  function onWindowResize() {
      const dpr = window.devicePixelRatio;
      if (dpr === oldDevicePixelRatio) {
          return;
      }
      oldDevicePixelRatio = dpr;
      drpListeningCharts.forEach((resize, chart)=>{
          if (chart.currentDevicePixelRatio !== dpr) {
              resize();
          }
      });
  }
  function listenDevicePixelRatioChanges(chart, resize) {
      if (!drpListeningCharts.size) {
          window.addEventListener('resize', onWindowResize);
      }
      drpListeningCharts.set(chart, resize);
  }
  function unlistenDevicePixelRatioChanges(chart) {
      drpListeningCharts.delete(chart);
      if (!drpListeningCharts.size) {
          window.removeEventListener('resize', onWindowResize);
      }
  }
  function createResizeObserver(chart, type, listener) {
      const canvas = chart.canvas;
      const container = canvas && _getParentNode(canvas);
      if (!container) {
          return;
      }
      const resize = throttled((width, height)=>{
          const w = container.clientWidth;
          listener(width, height);
          if (w < container.clientWidth) {
              listener();
          }
      }, window);
      const observer = new ResizeObserver((entries)=>{
          const entry = entries[0];
          const width = entry.contentRect.width;
          const height = entry.contentRect.height;
          if (width === 0 && height === 0) {
              return;
          }
          resize(width, height);
      });
      observer.observe(container);
      listenDevicePixelRatioChanges(chart, resize);
      return observer;
  }
  function releaseObserver(chart, type, observer) {
      if (observer) {
          observer.disconnect();
      }
      if (type === 'resize') {
          unlistenDevicePixelRatioChanges(chart);
      }
  }
  function createProxyAndListen(chart, type, listener) {
      const canvas = chart.canvas;
      const proxy = throttled((event)=>{
          if (chart.ctx !== null) {
              listener(fromNativeEvent(event, chart));
          }
      }, chart);
      addListener(canvas, type, proxy);
      return proxy;
  }
   class DomPlatform extends BasePlatform {
   acquireContext(canvas, aspectRatio) {
          const context = canvas && canvas.getContext && canvas.getContext('2d');
          if (context && context.canvas === canvas) {
              initCanvas(canvas, aspectRatio);
              return context;
          }
          return null;
      }
   releaseContext(context) {
          const canvas = context.canvas;
          if (!canvas[EXPANDO_KEY]) {
              return false;
          }
          const initial = canvas[EXPANDO_KEY].initial;
          [
              'height',
              'width'
          ].forEach((prop)=>{
              const value = initial[prop];
              if (isNullOrUndef(value)) {
                  canvas.removeAttribute(prop);
              } else {
                  canvas.setAttribute(prop, value);
              }
          });
          const style = initial.style || {};
          Object.keys(style).forEach((key)=>{
              canvas.style[key] = style[key];
          });
          canvas.width = canvas.width;
          delete canvas[EXPANDO_KEY];
          return true;
      }
   addEventListener(chart, type, listener) {
          this.removeEventListener(chart, type);
          const proxies = chart.$proxies || (chart.$proxies = {});
          const handlers = {
              attach: createAttachObserver,
              detach: createDetachObserver,
              resize: createResizeObserver
          };
          const handler = handlers[type] || createProxyAndListen;
          proxies[type] = handler(chart, type, listener);
      }
   removeEventListener(chart, type) {
          const proxies = chart.$proxies || (chart.$proxies = {});
          const proxy = proxies[type];
          if (!proxy) {
              return;
          }
          const handlers = {
              attach: releaseObserver,
              detach: releaseObserver,
              resize: releaseObserver
          };
          const handler = handlers[type] || removeListener;
          handler(chart, type, proxy);
          proxies[type] = undefined;
      }
      getDevicePixelRatio() {
          return window.devicePixelRatio;
      }
   getMaximumSize(canvas, width, height, aspectRatio) {
          return getMaximumSize(canvas, width, height, aspectRatio);
      }
   isAttached(canvas) {
          const container = canvas && _getParentNode(canvas);
          return !!(container && container.isConnected);
      }
  }

  function _detectPlatform(canvas) {
      if (!_isDomSupported() || typeof OffscreenCanvas !== 'undefined' && canvas instanceof OffscreenCanvas) {
          return BasicPlatform;
      }
      return DomPlatform;
  }

  let Element$1 = class Element {
      static defaults = {};
      static defaultRoutes = undefined;
      x;
      y;
      active = false;
      options;
      $animations;
      tooltipPosition(useFinalPosition) {
          const { x , y  } = this.getProps([
              'x',
              'y'
          ], useFinalPosition);
          return {
              x,
              y
          };
      }
      hasValue() {
          return isNumber(this.x) && isNumber(this.y);
      }
      getProps(props, final) {
          const anims = this.$animations;
          if (!final || !anims) {
              // let's not create an object, if not needed
              return this;
          }
          const ret = {};
          props.forEach((prop)=>{
              ret[prop] = anims[prop] && anims[prop].active() ? anims[prop]._to : this[prop];
          });
          return ret;
      }
  };

  function autoSkip(scale, ticks) {
      const tickOpts = scale.options.ticks;
      const determinedMaxTicks = determineMaxTicks(scale);
      const ticksLimit = Math.min(tickOpts.maxTicksLimit || determinedMaxTicks, determinedMaxTicks);
      const majorIndices = tickOpts.major.enabled ? getMajorIndices(ticks) : [];
      const numMajorIndices = majorIndices.length;
      const first = majorIndices[0];
      const last = majorIndices[numMajorIndices - 1];
      const newTicks = [];
      if (numMajorIndices > ticksLimit) {
          skipMajors(ticks, newTicks, majorIndices, numMajorIndices / ticksLimit);
          return newTicks;
      }
      const spacing = calculateSpacing(majorIndices, ticks, ticksLimit);
      if (numMajorIndices > 0) {
          let i, ilen;
          const avgMajorSpacing = numMajorIndices > 1 ? Math.round((last - first) / (numMajorIndices - 1)) : null;
          skip(ticks, newTicks, spacing, isNullOrUndef(avgMajorSpacing) ? 0 : first - avgMajorSpacing, first);
          for(i = 0, ilen = numMajorIndices - 1; i < ilen; i++){
              skip(ticks, newTicks, spacing, majorIndices[i], majorIndices[i + 1]);
          }
          skip(ticks, newTicks, spacing, last, isNullOrUndef(avgMajorSpacing) ? ticks.length : last + avgMajorSpacing);
          return newTicks;
      }
      skip(ticks, newTicks, spacing);
      return newTicks;
  }
  function determineMaxTicks(scale) {
      const offset = scale.options.offset;
      const tickLength = scale._tickSize();
      const maxScale = scale._length / tickLength + (offset ? 0 : 1);
      const maxChart = scale._maxLength / tickLength;
      return Math.floor(Math.min(maxScale, maxChart));
  }
   function calculateSpacing(majorIndices, ticks, ticksLimit) {
      const evenMajorSpacing = getEvenSpacing(majorIndices);
      const spacing = ticks.length / ticksLimit;
      if (!evenMajorSpacing) {
          return Math.max(spacing, 1);
      }
      const factors = _factorize(evenMajorSpacing);
      for(let i = 0, ilen = factors.length - 1; i < ilen; i++){
          const factor = factors[i];
          if (factor > spacing) {
              return factor;
          }
      }
      return Math.max(spacing, 1);
  }
   function getMajorIndices(ticks) {
      const result = [];
      let i, ilen;
      for(i = 0, ilen = ticks.length; i < ilen; i++){
          if (ticks[i].major) {
              result.push(i);
          }
      }
      return result;
  }
   function skipMajors(ticks, newTicks, majorIndices, spacing) {
      let count = 0;
      let next = majorIndices[0];
      let i;
      spacing = Math.ceil(spacing);
      for(i = 0; i < ticks.length; i++){
          if (i === next) {
              newTicks.push(ticks[i]);
              count++;
              next = majorIndices[count * spacing];
          }
      }
  }
   function skip(ticks, newTicks, spacing, majorStart, majorEnd) {
      const start = valueOrDefault(majorStart, 0);
      const end = Math.min(valueOrDefault(majorEnd, ticks.length), ticks.length);
      let count = 0;
      let length, i, next;
      spacing = Math.ceil(spacing);
      if (majorEnd) {
          length = majorEnd - majorStart;
          spacing = length / Math.floor(length / spacing);
      }
      next = start;
      while(next < 0){
          count++;
          next = Math.round(start + count * spacing);
      }
      for(i = Math.max(start, 0); i < end; i++){
          if (i === next) {
              newTicks.push(ticks[i]);
              count++;
              next = Math.round(start + count * spacing);
          }
      }
  }
   function getEvenSpacing(arr) {
      const len = arr.length;
      let i, diff;
      if (len < 2) {
          return false;
      }
      for(diff = arr[0], i = 1; i < len; ++i){
          if (arr[i] - arr[i - 1] !== diff) {
              return false;
          }
      }
      return diff;
  }

  const reverseAlign = (align)=>align === 'left' ? 'right' : align === 'right' ? 'left' : align;
  const offsetFromEdge = (scale, edge, offset)=>edge === 'top' || edge === 'left' ? scale[edge] + offset : scale[edge] - offset;
  const getTicksLimit = (ticksLength, maxTicksLimit)=>Math.min(maxTicksLimit || ticksLength, ticksLength);
   function sample(arr, numItems) {
      const result = [];
      const increment = arr.length / numItems;
      const len = arr.length;
      let i = 0;
      for(; i < len; i += increment){
          result.push(arr[Math.floor(i)]);
      }
      return result;
  }
   function getPixelForGridLine(scale, index, offsetGridLines) {
      const length = scale.ticks.length;
      const validIndex = Math.min(index, length - 1);
      const start = scale._startPixel;
      const end = scale._endPixel;
      const epsilon = 1e-6;
      let lineValue = scale.getPixelForTick(validIndex);
      let offset;
      if (offsetGridLines) {
          if (length === 1) {
              offset = Math.max(lineValue - start, end - lineValue);
          } else if (index === 0) {
              offset = (scale.getPixelForTick(1) - lineValue) / 2;
          } else {
              offset = (lineValue - scale.getPixelForTick(validIndex - 1)) / 2;
          }
          lineValue += validIndex < index ? offset : -offset;
          if (lineValue < start - epsilon || lineValue > end + epsilon) {
              return;
          }
      }
      return lineValue;
  }
   function garbageCollect(caches, length) {
      each(caches, (cache)=>{
          const gc = cache.gc;
          const gcLen = gc.length / 2;
          let i;
          if (gcLen > length) {
              for(i = 0; i < gcLen; ++i){
                  delete cache.data[gc[i]];
              }
              gc.splice(0, gcLen);
          }
      });
  }
   function getTickMarkLength(options) {
      return options.drawTicks ? options.tickLength : 0;
  }
   function getTitleHeight(options, fallback) {
      if (!options.display) {
          return 0;
      }
      const font = toFont(options.font, fallback);
      const padding = toPadding(options.padding);
      const lines = isArray(options.text) ? options.text.length : 1;
      return lines * font.lineHeight + padding.height;
  }
  function createScaleContext(parent, scale) {
      return createContext(parent, {
          scale,
          type: 'scale'
      });
  }
  function createTickContext(parent, index, tick) {
      return createContext(parent, {
          tick,
          index,
          type: 'tick'
      });
  }
  function titleAlign(align, position, reverse) {
       let ret = _toLeftRightCenter(align);
      if (reverse && position !== 'right' || !reverse && position === 'right') {
          ret = reverseAlign(ret);
      }
      return ret;
  }
  function titleArgs(scale, offset, position, align) {
      const { top , left , bottom , right , chart  } = scale;
      const { chartArea , scales  } = chart;
      let rotation = 0;
      let maxWidth, titleX, titleY;
      const height = bottom - top;
      const width = right - left;
      if (scale.isHorizontal()) {
          titleX = _alignStartEnd(align, left, right);
          if (isObject(position)) {
              const positionAxisID = Object.keys(position)[0];
              const value = position[positionAxisID];
              titleY = scales[positionAxisID].getPixelForValue(value) + height - offset;
          } else if (position === 'center') {
              titleY = (chartArea.bottom + chartArea.top) / 2 + height - offset;
          } else {
              titleY = offsetFromEdge(scale, position, offset);
          }
          maxWidth = right - left;
      } else {
          if (isObject(position)) {
              const positionAxisID = Object.keys(position)[0];
              const value = position[positionAxisID];
              titleX = scales[positionAxisID].getPixelForValue(value) - width + offset;
          } else if (position === 'center') {
              titleX = (chartArea.left + chartArea.right) / 2 - width + offset;
          } else {
              titleX = offsetFromEdge(scale, position, offset);
          }
          titleY = _alignStartEnd(align, bottom, top);
          rotation = position === 'left' ? -HALF_PI : HALF_PI;
      }
      return {
          titleX,
          titleY,
          maxWidth,
          rotation
      };
  }
  class Scale extends Element$1 {
      constructor(cfg){
          super();
           this.id = cfg.id;
           this.type = cfg.type;
           this.options = undefined;
           this.ctx = cfg.ctx;
           this.chart = cfg.chart;
           this.top = undefined;
           this.bottom = undefined;
           this.left = undefined;
           this.right = undefined;
           this.width = undefined;
           this.height = undefined;
          this._margins = {
              left: 0,
              right: 0,
              top: 0,
              bottom: 0
          };
           this.maxWidth = undefined;
           this.maxHeight = undefined;
           this.paddingTop = undefined;
           this.paddingBottom = undefined;
           this.paddingLeft = undefined;
           this.paddingRight = undefined;
           this.axis = undefined;
           this.labelRotation = undefined;
          this.min = undefined;
          this.max = undefined;
          this._range = undefined;
           this.ticks = [];
           this._gridLineItems = null;
           this._labelItems = null;
           this._labelSizes = null;
          this._length = 0;
          this._maxLength = 0;
          this._longestTextCache = {};
           this._startPixel = undefined;
           this._endPixel = undefined;
          this._reversePixels = false;
          this._userMax = undefined;
          this._userMin = undefined;
          this._suggestedMax = undefined;
          this._suggestedMin = undefined;
          this._ticksLength = 0;
          this._borderValue = 0;
          this._cache = {};
          this._dataLimitsCached = false;
          this.$context = undefined;
      }
   init(options) {
          this.options = options.setContext(this.getContext());
          this.axis = options.axis;
          this._userMin = this.parse(options.min);
          this._userMax = this.parse(options.max);
          this._suggestedMin = this.parse(options.suggestedMin);
          this._suggestedMax = this.parse(options.suggestedMax);
      }
   parse(raw, index) {
          return raw;
      }
   getUserBounds() {
          let { _userMin , _userMax , _suggestedMin , _suggestedMax  } = this;
          _userMin = finiteOrDefault(_userMin, Number.POSITIVE_INFINITY);
          _userMax = finiteOrDefault(_userMax, Number.NEGATIVE_INFINITY);
          _suggestedMin = finiteOrDefault(_suggestedMin, Number.POSITIVE_INFINITY);
          _suggestedMax = finiteOrDefault(_suggestedMax, Number.NEGATIVE_INFINITY);
          return {
              min: finiteOrDefault(_userMin, _suggestedMin),
              max: finiteOrDefault(_userMax, _suggestedMax),
              minDefined: isNumberFinite(_userMin),
              maxDefined: isNumberFinite(_userMax)
          };
      }
   getMinMax(canStack) {
          let { min , max , minDefined , maxDefined  } = this.getUserBounds();
          let range;
          if (minDefined && maxDefined) {
              return {
                  min,
                  max
              };
          }
          const metas = this.getMatchingVisibleMetas();
          for(let i = 0, ilen = metas.length; i < ilen; ++i){
              range = metas[i].controller.getMinMax(this, canStack);
              if (!minDefined) {
                  min = Math.min(min, range.min);
              }
              if (!maxDefined) {
                  max = Math.max(max, range.max);
              }
          }
          min = maxDefined && min > max ? max : min;
          max = minDefined && min > max ? min : max;
          return {
              min: finiteOrDefault(min, finiteOrDefault(max, min)),
              max: finiteOrDefault(max, finiteOrDefault(min, max))
          };
      }
   getPadding() {
          return {
              left: this.paddingLeft || 0,
              top: this.paddingTop || 0,
              right: this.paddingRight || 0,
              bottom: this.paddingBottom || 0
          };
      }
   getTicks() {
          return this.ticks;
      }
   getLabels() {
          const data = this.chart.data;
          return this.options.labels || (this.isHorizontal() ? data.xLabels : data.yLabels) || data.labels || [];
      }
   getLabelItems(chartArea = this.chart.chartArea) {
          const items = this._labelItems || (this._labelItems = this._computeLabelItems(chartArea));
          return items;
      }
      beforeLayout() {
          this._cache = {};
          this._dataLimitsCached = false;
      }
      beforeUpdate() {
          callback(this.options.beforeUpdate, [
              this
          ]);
      }
   update(maxWidth, maxHeight, margins) {
          const { beginAtZero , grace , ticks: tickOpts  } = this.options;
          const sampleSize = tickOpts.sampleSize;
          this.beforeUpdate();
          this.maxWidth = maxWidth;
          this.maxHeight = maxHeight;
          this._margins = margins = Object.assign({
              left: 0,
              right: 0,
              top: 0,
              bottom: 0
          }, margins);
          this.ticks = null;
          this._labelSizes = null;
          this._gridLineItems = null;
          this._labelItems = null;
          this.beforeSetDimensions();
          this.setDimensions();
          this.afterSetDimensions();
          this._maxLength = this.isHorizontal() ? this.width + margins.left + margins.right : this.height + margins.top + margins.bottom;
          if (!this._dataLimitsCached) {
              this.beforeDataLimits();
              this.determineDataLimits();
              this.afterDataLimits();
              this._range = _addGrace(this, grace, beginAtZero);
              this._dataLimitsCached = true;
          }
          this.beforeBuildTicks();
          this.ticks = this.buildTicks() || [];
          this.afterBuildTicks();
          const samplingEnabled = sampleSize < this.ticks.length;
          this._convertTicksToLabels(samplingEnabled ? sample(this.ticks, sampleSize) : this.ticks);
          this.configure();
          this.beforeCalculateLabelRotation();
          this.calculateLabelRotation();
          this.afterCalculateLabelRotation();
          if (tickOpts.display && (tickOpts.autoSkip || tickOpts.source === 'auto')) {
              this.ticks = autoSkip(this, this.ticks);
              this._labelSizes = null;
              this.afterAutoSkip();
          }
          if (samplingEnabled) {
              this._convertTicksToLabels(this.ticks);
          }
          this.beforeFit();
          this.fit();
          this.afterFit();
          this.afterUpdate();
      }
   configure() {
          let reversePixels = this.options.reverse;
          let startPixel, endPixel;
          if (this.isHorizontal()) {
              startPixel = this.left;
              endPixel = this.right;
          } else {
              startPixel = this.top;
              endPixel = this.bottom;
              reversePixels = !reversePixels;
          }
          this._startPixel = startPixel;
          this._endPixel = endPixel;
          this._reversePixels = reversePixels;
          this._length = endPixel - startPixel;
          this._alignToPixels = this.options.alignToPixels;
      }
      afterUpdate() {
          callback(this.options.afterUpdate, [
              this
          ]);
      }
      beforeSetDimensions() {
          callback(this.options.beforeSetDimensions, [
              this
          ]);
      }
      setDimensions() {
          if (this.isHorizontal()) {
              this.width = this.maxWidth;
              this.left = 0;
              this.right = this.width;
          } else {
              this.height = this.maxHeight;
              this.top = 0;
              this.bottom = this.height;
          }
          this.paddingLeft = 0;
          this.paddingTop = 0;
          this.paddingRight = 0;
          this.paddingBottom = 0;
      }
      afterSetDimensions() {
          callback(this.options.afterSetDimensions, [
              this
          ]);
      }
      _callHooks(name) {
          this.chart.notifyPlugins(name, this.getContext());
          callback(this.options[name], [
              this
          ]);
      }
      beforeDataLimits() {
          this._callHooks('beforeDataLimits');
      }
      determineDataLimits() {}
      afterDataLimits() {
          this._callHooks('afterDataLimits');
      }
      beforeBuildTicks() {
          this._callHooks('beforeBuildTicks');
      }
   buildTicks() {
          return [];
      }
      afterBuildTicks() {
          this._callHooks('afterBuildTicks');
      }
      beforeTickToLabelConversion() {
          callback(this.options.beforeTickToLabelConversion, [
              this
          ]);
      }
   generateTickLabels(ticks) {
          const tickOpts = this.options.ticks;
          let i, ilen, tick;
          for(i = 0, ilen = ticks.length; i < ilen; i++){
              tick = ticks[i];
              tick.label = callback(tickOpts.callback, [
                  tick.value,
                  i,
                  ticks
              ], this);
          }
      }
      afterTickToLabelConversion() {
          callback(this.options.afterTickToLabelConversion, [
              this
          ]);
      }
      beforeCalculateLabelRotation() {
          callback(this.options.beforeCalculateLabelRotation, [
              this
          ]);
      }
      calculateLabelRotation() {
          const options = this.options;
          const tickOpts = options.ticks;
          const numTicks = getTicksLimit(this.ticks.length, options.ticks.maxTicksLimit);
          const minRotation = tickOpts.minRotation || 0;
          const maxRotation = tickOpts.maxRotation;
          let labelRotation = minRotation;
          let tickWidth, maxHeight, maxLabelDiagonal;
          if (!this._isVisible() || !tickOpts.display || minRotation >= maxRotation || numTicks <= 1 || !this.isHorizontal()) {
              this.labelRotation = minRotation;
              return;
          }
          const labelSizes = this._getLabelSizes();
          const maxLabelWidth = labelSizes.widest.width;
          const maxLabelHeight = labelSizes.highest.height;
          const maxWidth = _limitValue(this.chart.width - maxLabelWidth, 0, this.maxWidth);
          tickWidth = options.offset ? this.maxWidth / numTicks : maxWidth / (numTicks - 1);
          if (maxLabelWidth + 6 > tickWidth) {
              tickWidth = maxWidth / (numTicks - (options.offset ? 0.5 : 1));
              maxHeight = this.maxHeight - getTickMarkLength(options.grid) - tickOpts.padding - getTitleHeight(options.title, this.chart.options.font);
              maxLabelDiagonal = Math.sqrt(maxLabelWidth * maxLabelWidth + maxLabelHeight * maxLabelHeight);
              labelRotation = toDegrees(Math.min(Math.asin(_limitValue((labelSizes.highest.height + 6) / tickWidth, -1, 1)), Math.asin(_limitValue(maxHeight / maxLabelDiagonal, -1, 1)) - Math.asin(_limitValue(maxLabelHeight / maxLabelDiagonal, -1, 1))));
              labelRotation = Math.max(minRotation, Math.min(maxRotation, labelRotation));
          }
          this.labelRotation = labelRotation;
      }
      afterCalculateLabelRotation() {
          callback(this.options.afterCalculateLabelRotation, [
              this
          ]);
      }
      afterAutoSkip() {}
      beforeFit() {
          callback(this.options.beforeFit, [
              this
          ]);
      }
      fit() {
          const minSize = {
              width: 0,
              height: 0
          };
          const { chart , options: { ticks: tickOpts , title: titleOpts , grid: gridOpts  }  } = this;
          const display = this._isVisible();
          const isHorizontal = this.isHorizontal();
          if (display) {
              const titleHeight = getTitleHeight(titleOpts, chart.options.font);
              if (isHorizontal) {
                  minSize.width = this.maxWidth;
                  minSize.height = getTickMarkLength(gridOpts) + titleHeight;
              } else {
                  minSize.height = this.maxHeight;
                  minSize.width = getTickMarkLength(gridOpts) + titleHeight;
              }
              if (tickOpts.display && this.ticks.length) {
                  const { first , last , widest , highest  } = this._getLabelSizes();
                  const tickPadding = tickOpts.padding * 2;
                  const angleRadians = toRadians(this.labelRotation);
                  const cos = Math.cos(angleRadians);
                  const sin = Math.sin(angleRadians);
                  if (isHorizontal) {
                      const labelHeight = tickOpts.mirror ? 0 : sin * widest.width + cos * highest.height;
                      minSize.height = Math.min(this.maxHeight, minSize.height + labelHeight + tickPadding);
                  } else {
                      const labelWidth = tickOpts.mirror ? 0 : cos * widest.width + sin * highest.height;
                      minSize.width = Math.min(this.maxWidth, minSize.width + labelWidth + tickPadding);
                  }
                  this._calculatePadding(first, last, sin, cos);
              }
          }
          this._handleMargins();
          if (isHorizontal) {
              this.width = this._length = chart.width - this._margins.left - this._margins.right;
              this.height = minSize.height;
          } else {
              this.width = minSize.width;
              this.height = this._length = chart.height - this._margins.top - this._margins.bottom;
          }
      }
      _calculatePadding(first, last, sin, cos) {
          const { ticks: { align , padding  } , position  } = this.options;
          const isRotated = this.labelRotation !== 0;
          const labelsBelowTicks = position !== 'top' && this.axis === 'x';
          if (this.isHorizontal()) {
              const offsetLeft = this.getPixelForTick(0) - this.left;
              const offsetRight = this.right - this.getPixelForTick(this.ticks.length - 1);
              let paddingLeft = 0;
              let paddingRight = 0;
              if (isRotated) {
                  if (labelsBelowTicks) {
                      paddingLeft = cos * first.width;
                      paddingRight = sin * last.height;
                  } else {
                      paddingLeft = sin * first.height;
                      paddingRight = cos * last.width;
                  }
              } else if (align === 'start') {
                  paddingRight = last.width;
              } else if (align === 'end') {
                  paddingLeft = first.width;
              } else if (align !== 'inner') {
                  paddingLeft = first.width / 2;
                  paddingRight = last.width / 2;
              }
              this.paddingLeft = Math.max((paddingLeft - offsetLeft + padding) * this.width / (this.width - offsetLeft), 0);
              this.paddingRight = Math.max((paddingRight - offsetRight + padding) * this.width / (this.width - offsetRight), 0);
          } else {
              let paddingTop = last.height / 2;
              let paddingBottom = first.height / 2;
              if (align === 'start') {
                  paddingTop = 0;
                  paddingBottom = first.height;
              } else if (align === 'end') {
                  paddingTop = last.height;
                  paddingBottom = 0;
              }
              this.paddingTop = paddingTop + padding;
              this.paddingBottom = paddingBottom + padding;
          }
      }
   _handleMargins() {
          if (this._margins) {
              this._margins.left = Math.max(this.paddingLeft, this._margins.left);
              this._margins.top = Math.max(this.paddingTop, this._margins.top);
              this._margins.right = Math.max(this.paddingRight, this._margins.right);
              this._margins.bottom = Math.max(this.paddingBottom, this._margins.bottom);
          }
      }
      afterFit() {
          callback(this.options.afterFit, [
              this
          ]);
      }
   isHorizontal() {
          const { axis , position  } = this.options;
          return position === 'top' || position === 'bottom' || axis === 'x';
      }
   isFullSize() {
          return this.options.fullSize;
      }
   _convertTicksToLabels(ticks) {
          this.beforeTickToLabelConversion();
          this.generateTickLabels(ticks);
          let i, ilen;
          for(i = 0, ilen = ticks.length; i < ilen; i++){
              if (isNullOrUndef(ticks[i].label)) {
                  ticks.splice(i, 1);
                  ilen--;
                  i--;
              }
          }
          this.afterTickToLabelConversion();
      }
   _getLabelSizes() {
          let labelSizes = this._labelSizes;
          if (!labelSizes) {
              const sampleSize = this.options.ticks.sampleSize;
              let ticks = this.ticks;
              if (sampleSize < ticks.length) {
                  ticks = sample(ticks, sampleSize);
              }
              this._labelSizes = labelSizes = this._computeLabelSizes(ticks, ticks.length, this.options.ticks.maxTicksLimit);
          }
          return labelSizes;
      }
   _computeLabelSizes(ticks, length, maxTicksLimit) {
          const { ctx , _longestTextCache: caches  } = this;
          const widths = [];
          const heights = [];
          const increment = Math.floor(length / getTicksLimit(length, maxTicksLimit));
          let widestLabelSize = 0;
          let highestLabelSize = 0;
          let i, j, jlen, label, tickFont, fontString, cache, lineHeight, width, height, nestedLabel;
          for(i = 0; i < length; i += increment){
              label = ticks[i].label;
              tickFont = this._resolveTickFontOptions(i);
              ctx.font = fontString = tickFont.string;
              cache = caches[fontString] = caches[fontString] || {
                  data: {},
                  gc: []
              };
              lineHeight = tickFont.lineHeight;
              width = height = 0;
              if (!isNullOrUndef(label) && !isArray(label)) {
                  width = _measureText(ctx, cache.data, cache.gc, width, label);
                  height = lineHeight;
              } else if (isArray(label)) {
                  for(j = 0, jlen = label.length; j < jlen; ++j){
                      nestedLabel =  label[j];
                      if (!isNullOrUndef(nestedLabel) && !isArray(nestedLabel)) {
                          width = _measureText(ctx, cache.data, cache.gc, width, nestedLabel);
                          height += lineHeight;
                      }
                  }
              }
              widths.push(width);
              heights.push(height);
              widestLabelSize = Math.max(width, widestLabelSize);
              highestLabelSize = Math.max(height, highestLabelSize);
          }
          garbageCollect(caches, length);
          const widest = widths.indexOf(widestLabelSize);
          const highest = heights.indexOf(highestLabelSize);
          const valueAt = (idx)=>({
                  width: widths[idx] || 0,
                  height: heights[idx] || 0
              });
          return {
              first: valueAt(0),
              last: valueAt(length - 1),
              widest: valueAt(widest),
              highest: valueAt(highest),
              widths,
              heights
          };
      }
   getLabelForValue(value) {
          return value;
      }
   getPixelForValue(value, index) {
          return NaN;
      }
   getValueForPixel(pixel) {}
   getPixelForTick(index) {
          const ticks = this.ticks;
          if (index < 0 || index > ticks.length - 1) {
              return null;
          }
          return this.getPixelForValue(ticks[index].value);
      }
   getPixelForDecimal(decimal) {
          if (this._reversePixels) {
              decimal = 1 - decimal;
          }
          const pixel = this._startPixel + decimal * this._length;
          return _int16Range(this._alignToPixels ? _alignPixel(this.chart, pixel, 0) : pixel);
      }
   getDecimalForPixel(pixel) {
          const decimal = (pixel - this._startPixel) / this._length;
          return this._reversePixels ? 1 - decimal : decimal;
      }
   getBasePixel() {
          return this.getPixelForValue(this.getBaseValue());
      }
   getBaseValue() {
          const { min , max  } = this;
          return min < 0 && max < 0 ? max : min > 0 && max > 0 ? min : 0;
      }
   getContext(index) {
          const ticks = this.ticks || [];
          if (index >= 0 && index < ticks.length) {
              const tick = ticks[index];
              return tick.$context || (tick.$context = createTickContext(this.getContext(), index, tick));
          }
          return this.$context || (this.$context = createScaleContext(this.chart.getContext(), this));
      }
   _tickSize() {
          const optionTicks = this.options.ticks;
          const rot = toRadians(this.labelRotation);
          const cos = Math.abs(Math.cos(rot));
          const sin = Math.abs(Math.sin(rot));
          const labelSizes = this._getLabelSizes();
          const padding = optionTicks.autoSkipPadding || 0;
          const w = labelSizes ? labelSizes.widest.width + padding : 0;
          const h = labelSizes ? labelSizes.highest.height + padding : 0;
          return this.isHorizontal() ? h * cos > w * sin ? w / cos : h / sin : h * sin < w * cos ? h / cos : w / sin;
      }
   _isVisible() {
          const display = this.options.display;
          if (display !== 'auto') {
              return !!display;
          }
          return this.getMatchingVisibleMetas().length > 0;
      }
   _computeGridLineItems(chartArea) {
          const axis = this.axis;
          const chart = this.chart;
          const options = this.options;
          const { grid , position , border  } = options;
          const offset = grid.offset;
          const isHorizontal = this.isHorizontal();
          const ticks = this.ticks;
          const ticksLength = ticks.length + (offset ? 1 : 0);
          const tl = getTickMarkLength(grid);
          const items = [];
          const borderOpts = border.setContext(this.getContext());
          const axisWidth = borderOpts.display ? borderOpts.width : 0;
          const axisHalfWidth = axisWidth / 2;
          const alignBorderValue = function(pixel) {
              return _alignPixel(chart, pixel, axisWidth);
          };
          let borderValue, i, lineValue, alignedLineValue;
          let tx1, ty1, tx2, ty2, x1, y1, x2, y2;
          if (position === 'top') {
              borderValue = alignBorderValue(this.bottom);
              ty1 = this.bottom - tl;
              ty2 = borderValue - axisHalfWidth;
              y1 = alignBorderValue(chartArea.top) + axisHalfWidth;
              y2 = chartArea.bottom;
          } else if (position === 'bottom') {
              borderValue = alignBorderValue(this.top);
              y1 = chartArea.top;
              y2 = alignBorderValue(chartArea.bottom) - axisHalfWidth;
              ty1 = borderValue + axisHalfWidth;
              ty2 = this.top + tl;
          } else if (position === 'left') {
              borderValue = alignBorderValue(this.right);
              tx1 = this.right - tl;
              tx2 = borderValue - axisHalfWidth;
              x1 = alignBorderValue(chartArea.left) + axisHalfWidth;
              x2 = chartArea.right;
          } else if (position === 'right') {
              borderValue = alignBorderValue(this.left);
              x1 = chartArea.left;
              x2 = alignBorderValue(chartArea.right) - axisHalfWidth;
              tx1 = borderValue + axisHalfWidth;
              tx2 = this.left + tl;
          } else if (axis === 'x') {
              if (position === 'center') {
                  borderValue = alignBorderValue((chartArea.top + chartArea.bottom) / 2 + 0.5);
              } else if (isObject(position)) {
                  const positionAxisID = Object.keys(position)[0];
                  const value = position[positionAxisID];
                  borderValue = alignBorderValue(this.chart.scales[positionAxisID].getPixelForValue(value));
              }
              y1 = chartArea.top;
              y2 = chartArea.bottom;
              ty1 = borderValue + axisHalfWidth;
              ty2 = ty1 + tl;
          } else if (axis === 'y') {
              if (position === 'center') {
                  borderValue = alignBorderValue((chartArea.left + chartArea.right) / 2);
              } else if (isObject(position)) {
                  const positionAxisID = Object.keys(position)[0];
                  const value = position[positionAxisID];
                  borderValue = alignBorderValue(this.chart.scales[positionAxisID].getPixelForValue(value));
              }
              tx1 = borderValue - axisHalfWidth;
              tx2 = tx1 - tl;
              x1 = chartArea.left;
              x2 = chartArea.right;
          }
          const limit = valueOrDefault(options.ticks.maxTicksLimit, ticksLength);
          const step = Math.max(1, Math.ceil(ticksLength / limit));
          for(i = 0; i < ticksLength; i += step){
              const context = this.getContext(i);
              const optsAtIndex = grid.setContext(context);
              const optsAtIndexBorder = border.setContext(context);
              const lineWidth = optsAtIndex.lineWidth;
              const lineColor = optsAtIndex.color;
              const borderDash = optsAtIndexBorder.dash || [];
              const borderDashOffset = optsAtIndexBorder.dashOffset;
              const tickWidth = optsAtIndex.tickWidth;
              const tickColor = optsAtIndex.tickColor;
              const tickBorderDash = optsAtIndex.tickBorderDash || [];
              const tickBorderDashOffset = optsAtIndex.tickBorderDashOffset;
              lineValue = getPixelForGridLine(this, i, offset);
              if (lineValue === undefined) {
                  continue;
              }
              alignedLineValue = _alignPixel(chart, lineValue, lineWidth);
              if (isHorizontal) {
                  tx1 = tx2 = x1 = x2 = alignedLineValue;
              } else {
                  ty1 = ty2 = y1 = y2 = alignedLineValue;
              }
              items.push({
                  tx1,
                  ty1,
                  tx2,
                  ty2,
                  x1,
                  y1,
                  x2,
                  y2,
                  width: lineWidth,
                  color: lineColor,
                  borderDash,
                  borderDashOffset,
                  tickWidth,
                  tickColor,
                  tickBorderDash,
                  tickBorderDashOffset
              });
          }
          this._ticksLength = ticksLength;
          this._borderValue = borderValue;
          return items;
      }
   _computeLabelItems(chartArea) {
          const axis = this.axis;
          const options = this.options;
          const { position , ticks: optionTicks  } = options;
          const isHorizontal = this.isHorizontal();
          const ticks = this.ticks;
          const { align , crossAlign , padding , mirror  } = optionTicks;
          const tl = getTickMarkLength(options.grid);
          const tickAndPadding = tl + padding;
          const hTickAndPadding = mirror ? -padding : tickAndPadding;
          const rotation = -toRadians(this.labelRotation);
          const items = [];
          let i, ilen, tick, label, x, y, textAlign, pixel, font, lineHeight, lineCount, textOffset;
          let textBaseline = 'middle';
          if (position === 'top') {
              y = this.bottom - hTickAndPadding;
              textAlign = this._getXAxisLabelAlignment();
          } else if (position === 'bottom') {
              y = this.top + hTickAndPadding;
              textAlign = this._getXAxisLabelAlignment();
          } else if (position === 'left') {
              const ret = this._getYAxisLabelAlignment(tl);
              textAlign = ret.textAlign;
              x = ret.x;
          } else if (position === 'right') {
              const ret = this._getYAxisLabelAlignment(tl);
              textAlign = ret.textAlign;
              x = ret.x;
          } else if (axis === 'x') {
              if (position === 'center') {
                  y = (chartArea.top + chartArea.bottom) / 2 + tickAndPadding;
              } else if (isObject(position)) {
                  const positionAxisID = Object.keys(position)[0];
                  const value = position[positionAxisID];
                  y = this.chart.scales[positionAxisID].getPixelForValue(value) + tickAndPadding;
              }
              textAlign = this._getXAxisLabelAlignment();
          } else if (axis === 'y') {
              if (position === 'center') {
                  x = (chartArea.left + chartArea.right) / 2 - tickAndPadding;
              } else if (isObject(position)) {
                  const positionAxisID = Object.keys(position)[0];
                  const value = position[positionAxisID];
                  x = this.chart.scales[positionAxisID].getPixelForValue(value);
              }
              textAlign = this._getYAxisLabelAlignment(tl).textAlign;
          }
          if (axis === 'y') {
              if (align === 'start') {
                  textBaseline = 'top';
              } else if (align === 'end') {
                  textBaseline = 'bottom';
              }
          }
          const labelSizes = this._getLabelSizes();
          for(i = 0, ilen = ticks.length; i < ilen; ++i){
              tick = ticks[i];
              label = tick.label;
              const optsAtIndex = optionTicks.setContext(this.getContext(i));
              pixel = this.getPixelForTick(i) + optionTicks.labelOffset;
              font = this._resolveTickFontOptions(i);
              lineHeight = font.lineHeight;
              lineCount = isArray(label) ? label.length : 1;
              const halfCount = lineCount / 2;
              const color = optsAtIndex.color;
              const strokeColor = optsAtIndex.textStrokeColor;
              const strokeWidth = optsAtIndex.textStrokeWidth;
              let tickTextAlign = textAlign;
              if (isHorizontal) {
                  x = pixel;
                  if (textAlign === 'inner') {
                      if (i === ilen - 1) {
                          tickTextAlign = !this.options.reverse ? 'right' : 'left';
                      } else if (i === 0) {
                          tickTextAlign = !this.options.reverse ? 'left' : 'right';
                      } else {
                          tickTextAlign = 'center';
                      }
                  }
                  if (position === 'top') {
                      if (crossAlign === 'near' || rotation !== 0) {
                          textOffset = -lineCount * lineHeight + lineHeight / 2;
                      } else if (crossAlign === 'center') {
                          textOffset = -labelSizes.highest.height / 2 - halfCount * lineHeight + lineHeight;
                      } else {
                          textOffset = -labelSizes.highest.height + lineHeight / 2;
                      }
                  } else {
                      if (crossAlign === 'near' || rotation !== 0) {
                          textOffset = lineHeight / 2;
                      } else if (crossAlign === 'center') {
                          textOffset = labelSizes.highest.height / 2 - halfCount * lineHeight;
                      } else {
                          textOffset = labelSizes.highest.height - lineCount * lineHeight;
                      }
                  }
                  if (mirror) {
                      textOffset *= -1;
                  }
                  if (rotation !== 0 && !optsAtIndex.showLabelBackdrop) {
                      x += lineHeight / 2 * Math.sin(rotation);
                  }
              } else {
                  y = pixel;
                  textOffset = (1 - lineCount) * lineHeight / 2;
              }
              let backdrop;
              if (optsAtIndex.showLabelBackdrop) {
                  const labelPadding = toPadding(optsAtIndex.backdropPadding);
                  const height = labelSizes.heights[i];
                  const width = labelSizes.widths[i];
                  let top = textOffset - labelPadding.top;
                  let left = 0 - labelPadding.left;
                  switch(textBaseline){
                      case 'middle':
                          top -= height / 2;
                          break;
                      case 'bottom':
                          top -= height;
                          break;
                  }
                  switch(textAlign){
                      case 'center':
                          left -= width / 2;
                          break;
                      case 'right':
                          left -= width;
                          break;
                      case 'inner':
                          if (i === ilen - 1) {
                              left -= width;
                          } else if (i > 0) {
                              left -= width / 2;
                          }
                          break;
                  }
                  backdrop = {
                      left,
                      top,
                      width: width + labelPadding.width,
                      height: height + labelPadding.height,
                      color: optsAtIndex.backdropColor
                  };
              }
              items.push({
                  label,
                  font,
                  textOffset,
                  options: {
                      rotation,
                      color,
                      strokeColor,
                      strokeWidth,
                      textAlign: tickTextAlign,
                      textBaseline,
                      translation: [
                          x,
                          y
                      ],
                      backdrop
                  }
              });
          }
          return items;
      }
      _getXAxisLabelAlignment() {
          const { position , ticks  } = this.options;
          const rotation = -toRadians(this.labelRotation);
          if (rotation) {
              return position === 'top' ? 'left' : 'right';
          }
          let align = 'center';
          if (ticks.align === 'start') {
              align = 'left';
          } else if (ticks.align === 'end') {
              align = 'right';
          } else if (ticks.align === 'inner') {
              align = 'inner';
          }
          return align;
      }
      _getYAxisLabelAlignment(tl) {
          const { position , ticks: { crossAlign , mirror , padding  }  } = this.options;
          const labelSizes = this._getLabelSizes();
          const tickAndPadding = tl + padding;
          const widest = labelSizes.widest.width;
          let textAlign;
          let x;
          if (position === 'left') {
              if (mirror) {
                  x = this.right + padding;
                  if (crossAlign === 'near') {
                      textAlign = 'left';
                  } else if (crossAlign === 'center') {
                      textAlign = 'center';
                      x += widest / 2;
                  } else {
                      textAlign = 'right';
                      x += widest;
                  }
              } else {
                  x = this.right - tickAndPadding;
                  if (crossAlign === 'near') {
                      textAlign = 'right';
                  } else if (crossAlign === 'center') {
                      textAlign = 'center';
                      x -= widest / 2;
                  } else {
                      textAlign = 'left';
                      x = this.left;
                  }
              }
          } else if (position === 'right') {
              if (mirror) {
                  x = this.left + padding;
                  if (crossAlign === 'near') {
                      textAlign = 'right';
                  } else if (crossAlign === 'center') {
                      textAlign = 'center';
                      x -= widest / 2;
                  } else {
                      textAlign = 'left';
                      x -= widest;
                  }
              } else {
                  x = this.left + tickAndPadding;
                  if (crossAlign === 'near') {
                      textAlign = 'left';
                  } else if (crossAlign === 'center') {
                      textAlign = 'center';
                      x += widest / 2;
                  } else {
                      textAlign = 'right';
                      x = this.right;
                  }
              }
          } else {
              textAlign = 'right';
          }
          return {
              textAlign,
              x
          };
      }
   _computeLabelArea() {
          if (this.options.ticks.mirror) {
              return;
          }
          const chart = this.chart;
          const position = this.options.position;
          if (position === 'left' || position === 'right') {
              return {
                  top: 0,
                  left: this.left,
                  bottom: chart.height,
                  right: this.right
              };
          }
          if (position === 'top' || position === 'bottom') {
              return {
                  top: this.top,
                  left: 0,
                  bottom: this.bottom,
                  right: chart.width
              };
          }
      }
   drawBackground() {
          const { ctx , options: { backgroundColor  } , left , top , width , height  } = this;
          if (backgroundColor) {
              ctx.save();
              ctx.fillStyle = backgroundColor;
              ctx.fillRect(left, top, width, height);
              ctx.restore();
          }
      }
      getLineWidthForValue(value) {
          const grid = this.options.grid;
          if (!this._isVisible() || !grid.display) {
              return 0;
          }
          const ticks = this.ticks;
          const index = ticks.findIndex((t)=>t.value === value);
          if (index >= 0) {
              const opts = grid.setContext(this.getContext(index));
              return opts.lineWidth;
          }
          return 0;
      }
   drawGrid(chartArea) {
          const grid = this.options.grid;
          const ctx = this.ctx;
          const items = this._gridLineItems || (this._gridLineItems = this._computeGridLineItems(chartArea));
          let i, ilen;
          const drawLine = (p1, p2, style)=>{
              if (!style.width || !style.color) {
                  return;
              }
              ctx.save();
              ctx.lineWidth = style.width;
              ctx.strokeStyle = style.color;
              ctx.setLineDash(style.borderDash || []);
              ctx.lineDashOffset = style.borderDashOffset;
              ctx.beginPath();
              ctx.moveTo(p1.x, p1.y);
              ctx.lineTo(p2.x, p2.y);
              ctx.stroke();
              ctx.restore();
          };
          if (grid.display) {
              for(i = 0, ilen = items.length; i < ilen; ++i){
                  const item = items[i];
                  if (grid.drawOnChartArea) {
                      drawLine({
                          x: item.x1,
                          y: item.y1
                      }, {
                          x: item.x2,
                          y: item.y2
                      }, item);
                  }
                  if (grid.drawTicks) {
                      drawLine({
                          x: item.tx1,
                          y: item.ty1
                      }, {
                          x: item.tx2,
                          y: item.ty2
                      }, {
                          color: item.tickColor,
                          width: item.tickWidth,
                          borderDash: item.tickBorderDash,
                          borderDashOffset: item.tickBorderDashOffset
                      });
                  }
              }
          }
      }
   drawBorder() {
          const { chart , ctx , options: { border , grid  }  } = this;
          const borderOpts = border.setContext(this.getContext());
          const axisWidth = border.display ? borderOpts.width : 0;
          if (!axisWidth) {
              return;
          }
          const lastLineWidth = grid.setContext(this.getContext(0)).lineWidth;
          const borderValue = this._borderValue;
          let x1, x2, y1, y2;
          if (this.isHorizontal()) {
              x1 = _alignPixel(chart, this.left, axisWidth) - axisWidth / 2;
              x2 = _alignPixel(chart, this.right, lastLineWidth) + lastLineWidth / 2;
              y1 = y2 = borderValue;
          } else {
              y1 = _alignPixel(chart, this.top, axisWidth) - axisWidth / 2;
              y2 = _alignPixel(chart, this.bottom, lastLineWidth) + lastLineWidth / 2;
              x1 = x2 = borderValue;
          }
          ctx.save();
          ctx.lineWidth = borderOpts.width;
          ctx.strokeStyle = borderOpts.color;
          ctx.beginPath();
          ctx.moveTo(x1, y1);
          ctx.lineTo(x2, y2);
          ctx.stroke();
          ctx.restore();
      }
   drawLabels(chartArea) {
          const optionTicks = this.options.ticks;
          if (!optionTicks.display) {
              return;
          }
          const ctx = this.ctx;
          const area = this._computeLabelArea();
          if (area) {
              clipArea(ctx, area);
          }
          const items = this.getLabelItems(chartArea);
          for (const item of items){
              const renderTextOptions = item.options;
              const tickFont = item.font;
              const label = item.label;
              const y = item.textOffset;
              renderText(ctx, label, 0, y, tickFont, renderTextOptions);
          }
          if (area) {
              unclipArea(ctx);
          }
      }
   drawTitle() {
          const { ctx , options: { position , title , reverse  }  } = this;
          if (!title.display) {
              return;
          }
          const font = toFont(title.font);
          const padding = toPadding(title.padding);
          const align = title.align;
          let offset = font.lineHeight / 2;
          if (position === 'bottom' || position === 'center' || isObject(position)) {
              offset += padding.bottom;
              if (isArray(title.text)) {
                  offset += font.lineHeight * (title.text.length - 1);
              }
          } else {
              offset += padding.top;
          }
          const { titleX , titleY , maxWidth , rotation  } = titleArgs(this, offset, position, align);
          renderText(ctx, title.text, 0, 0, font, {
              color: title.color,
              maxWidth,
              rotation,
              textAlign: titleAlign(align, position, reverse),
              textBaseline: 'middle',
              translation: [
                  titleX,
                  titleY
              ]
          });
      }
      draw(chartArea) {
          if (!this._isVisible()) {
              return;
          }
          this.drawBackground();
          this.drawGrid(chartArea);
          this.drawBorder();
          this.drawTitle();
          this.drawLabels(chartArea);
      }
   _layers() {
          const opts = this.options;
          const tz = opts.ticks && opts.ticks.z || 0;
          const gz = valueOrDefault(opts.grid && opts.grid.z, -1);
          const bz = valueOrDefault(opts.border && opts.border.z, 0);
          if (!this._isVisible() || this.draw !== Scale.prototype.draw) {
              return [
                  {
                      z: tz,
                      draw: (chartArea)=>{
                          this.draw(chartArea);
                      }
                  }
              ];
          }
          return [
              {
                  z: gz,
                  draw: (chartArea)=>{
                      this.drawBackground();
                      this.drawGrid(chartArea);
                      this.drawTitle();
                  }
              },
              {
                  z: bz,
                  draw: ()=>{
                      this.drawBorder();
                  }
              },
              {
                  z: tz,
                  draw: (chartArea)=>{
                      this.drawLabels(chartArea);
                  }
              }
          ];
      }
   getMatchingVisibleMetas(type) {
          const metas = this.chart.getSortedVisibleDatasetMetas();
          const axisID = this.axis + 'AxisID';
          const result = [];
          let i, ilen;
          for(i = 0, ilen = metas.length; i < ilen; ++i){
              const meta = metas[i];
              if (meta[axisID] === this.id && (!type || meta.type === type)) {
                  result.push(meta);
              }
          }
          return result;
      }
   _resolveTickFontOptions(index) {
          const opts = this.options.ticks.setContext(this.getContext(index));
          return toFont(opts.font);
      }
   _maxDigits() {
          const fontSize = this._resolveTickFontOptions(0).lineHeight;
          return (this.isHorizontal() ? this.width : this.height) / fontSize;
      }
  }

  class TypedRegistry {
      constructor(type, scope, override){
          this.type = type;
          this.scope = scope;
          this.override = override;
          this.items = Object.create(null);
      }
      isForType(type) {
          return Object.prototype.isPrototypeOf.call(this.type.prototype, type.prototype);
      }
   register(item) {
          const proto = Object.getPrototypeOf(item);
          let parentScope;
          if (isIChartComponent(proto)) {
              parentScope = this.register(proto);
          }
          const items = this.items;
          const id = item.id;
          const scope = this.scope + '.' + id;
          if (!id) {
              throw new Error('class does not have id: ' + item);
          }
          if (id in items) {
              return scope;
          }
          items[id] = item;
          registerDefaults(item, scope, parentScope);
          if (this.override) {
              defaults$1.override(item.id, item.overrides);
          }
          return scope;
      }
   get(id) {
          return this.items[id];
      }
   unregister(item) {
          const items = this.items;
          const id = item.id;
          const scope = this.scope;
          if (id in items) {
              delete items[id];
          }
          if (scope && id in defaults$1[scope]) {
              delete defaults$1[scope][id];
              if (this.override) {
                  delete overrides[id];
              }
          }
      }
  }
  function registerDefaults(item, scope, parentScope) {
      const itemDefaults = merge(Object.create(null), [
          parentScope ? defaults$1.get(parentScope) : {},
          defaults$1.get(scope),
          item.defaults
      ]);
      defaults$1.set(scope, itemDefaults);
      if (item.defaultRoutes) {
          routeDefaults(scope, item.defaultRoutes);
      }
      if (item.descriptors) {
          defaults$1.describe(scope, item.descriptors);
      }
  }
  function routeDefaults(scope, routes) {
      Object.keys(routes).forEach((property)=>{
          const propertyParts = property.split('.');
          const sourceName = propertyParts.pop();
          const sourceScope = [
              scope
          ].concat(propertyParts).join('.');
          const parts = routes[property].split('.');
          const targetName = parts.pop();
          const targetScope = parts.join('.');
          defaults$1.route(sourceScope, sourceName, targetScope, targetName);
      });
  }
  function isIChartComponent(proto) {
      return 'id' in proto && 'defaults' in proto;
  }

  class Registry {
      constructor(){
          this.controllers = new TypedRegistry(DatasetController, 'datasets', true);
          this.elements = new TypedRegistry(Element$1, 'elements');
          this.plugins = new TypedRegistry(Object, 'plugins');
          this.scales = new TypedRegistry(Scale, 'scales');
          this._typedRegistries = [
              this.controllers,
              this.scales,
              this.elements
          ];
      }
   add(...args) {
          this._each('register', args);
      }
      remove(...args) {
          this._each('unregister', args);
      }
   addControllers(...args) {
          this._each('register', args, this.controllers);
      }
   addElements(...args) {
          this._each('register', args, this.elements);
      }
   addPlugins(...args) {
          this._each('register', args, this.plugins);
      }
   addScales(...args) {
          this._each('register', args, this.scales);
      }
   getController(id) {
          return this._get(id, this.controllers, 'controller');
      }
   getElement(id) {
          return this._get(id, this.elements, 'element');
      }
   getPlugin(id) {
          return this._get(id, this.plugins, 'plugin');
      }
   getScale(id) {
          return this._get(id, this.scales, 'scale');
      }
   removeControllers(...args) {
          this._each('unregister', args, this.controllers);
      }
   removeElements(...args) {
          this._each('unregister', args, this.elements);
      }
   removePlugins(...args) {
          this._each('unregister', args, this.plugins);
      }
   removeScales(...args) {
          this._each('unregister', args, this.scales);
      }
   _each(method, args, typedRegistry) {
          [
              ...args
          ].forEach((arg)=>{
              const reg = typedRegistry || this._getRegistryForType(arg);
              if (typedRegistry || reg.isForType(arg) || reg === this.plugins && arg.id) {
                  this._exec(method, reg, arg);
              } else {
                  each(arg, (item)=>{
                      const itemReg = typedRegistry || this._getRegistryForType(item);
                      this._exec(method, itemReg, item);
                  });
              }
          });
      }
   _exec(method, registry, component) {
          const camelMethod = _capitalize(method);
          callback(component['before' + camelMethod], [], component);
          registry[method](component);
          callback(component['after' + camelMethod], [], component);
      }
   _getRegistryForType(type) {
          for(let i = 0; i < this._typedRegistries.length; i++){
              const reg = this._typedRegistries[i];
              if (reg.isForType(type)) {
                  return reg;
              }
          }
          return this.plugins;
      }
   _get(id, typedRegistry, type) {
          const item = typedRegistry.get(id);
          if (item === undefined) {
              throw new Error('"' + id + '" is not a registered ' + type + '.');
          }
          return item;
      }
  }
  var registry = /* #__PURE__ */ new Registry();

  class PluginService {
      constructor(){
          this._init = [];
      }
   notify(chart, hook, args, filter) {
          if (hook === 'beforeInit') {
              this._init = this._createDescriptors(chart, true);
              this._notify(this._init, chart, 'install');
          }
          const descriptors = filter ? this._descriptors(chart).filter(filter) : this._descriptors(chart);
          const result = this._notify(descriptors, chart, hook, args);
          if (hook === 'afterDestroy') {
              this._notify(descriptors, chart, 'stop');
              this._notify(this._init, chart, 'uninstall');
          }
          return result;
      }
   _notify(descriptors, chart, hook, args) {
          args = args || {};
          for (const descriptor of descriptors){
              const plugin = descriptor.plugin;
              const method = plugin[hook];
              const params = [
                  chart,
                  args,
                  descriptor.options
              ];
              if (callback(method, params, plugin) === false && args.cancelable) {
                  return false;
              }
          }
          return true;
      }
      invalidate() {
          if (!isNullOrUndef(this._cache)) {
              this._oldCache = this._cache;
              this._cache = undefined;
          }
      }
   _descriptors(chart) {
          if (this._cache) {
              return this._cache;
          }
          const descriptors = this._cache = this._createDescriptors(chart);
          this._notifyStateChanges(chart);
          return descriptors;
      }
      _createDescriptors(chart, all) {
          const config = chart && chart.config;
          const options = valueOrDefault(config.options && config.options.plugins, {});
          const plugins = allPlugins(config);
          return options === false && !all ? [] : createDescriptors(chart, plugins, options, all);
      }
   _notifyStateChanges(chart) {
          const previousDescriptors = this._oldCache || [];
          const descriptors = this._cache;
          const diff = (a, b)=>a.filter((x)=>!b.some((y)=>x.plugin.id === y.plugin.id));
          this._notify(diff(previousDescriptors, descriptors), chart, 'stop');
          this._notify(diff(descriptors, previousDescriptors), chart, 'start');
      }
  }
   function allPlugins(config) {
      const localIds = {};
      const plugins = [];
      const keys = Object.keys(registry.plugins.items);
      for(let i = 0; i < keys.length; i++){
          plugins.push(registry.getPlugin(keys[i]));
      }
      const local = config.plugins || [];
      for(let i = 0; i < local.length; i++){
          const plugin = local[i];
          if (plugins.indexOf(plugin) === -1) {
              plugins.push(plugin);
              localIds[plugin.id] = true;
          }
      }
      return {
          plugins,
          localIds
      };
  }
  function getOpts(options, all) {
      if (!all && options === false) {
          return null;
      }
      if (options === true) {
          return {};
      }
      return options;
  }
  function createDescriptors(chart, { plugins , localIds  }, options, all) {
      const result = [];
      const context = chart.getContext();
      for (const plugin of plugins){
          const id = plugin.id;
          const opts = getOpts(options[id], all);
          if (opts === null) {
              continue;
          }
          result.push({
              plugin,
              options: pluginOpts(chart.config, {
                  plugin,
                  local: localIds[id]
              }, opts, context)
          });
      }
      return result;
  }
  function pluginOpts(config, { plugin , local  }, opts, context) {
      const keys = config.pluginScopeKeys(plugin);
      const scopes = config.getOptionScopes(opts, keys);
      if (local && plugin.defaults) {
          scopes.push(plugin.defaults);
      }
      return config.createResolver(scopes, context, [
          ''
      ], {
          scriptable: false,
          indexable: false,
          allKeys: true
      });
  }

  function getIndexAxis(type, options) {
      const datasetDefaults = defaults$1.datasets[type] || {};
      const datasetOptions = (options.datasets || {})[type] || {};
      return datasetOptions.indexAxis || options.indexAxis || datasetDefaults.indexAxis || 'x';
  }
  function getAxisFromDefaultScaleID(id, indexAxis) {
      let axis = id;
      if (id === '_index_') {
          axis = indexAxis;
      } else if (id === '_value_') {
          axis = indexAxis === 'x' ? 'y' : 'x';
      }
      return axis;
  }
  function getDefaultScaleIDFromAxis(axis, indexAxis) {
      return axis === indexAxis ? '_index_' : '_value_';
  }
  function idMatchesAxis(id) {
      if (id === 'x' || id === 'y' || id === 'r') {
          return id;
      }
  }
  function axisFromPosition(position) {
      if (position === 'top' || position === 'bottom') {
          return 'x';
      }
      if (position === 'left' || position === 'right') {
          return 'y';
      }
  }
  function determineAxis(id, ...scaleOptions) {
      if (idMatchesAxis(id)) {
          return id;
      }
      for (const opts of scaleOptions){
          const axis = opts.axis || axisFromPosition(opts.position) || id.length > 1 && idMatchesAxis(id[0].toLowerCase());
          if (axis) {
              return axis;
          }
      }
      throw new Error(`Cannot determine type of '${id}' axis. Please provide 'axis' or 'position' option.`);
  }
  function getAxisFromDataset(id, axis, dataset) {
      if (dataset[axis + 'AxisID'] === id) {
          return {
              axis
          };
      }
  }
  function retrieveAxisFromDatasets(id, config) {
      if (config.data && config.data.datasets) {
          const boundDs = config.data.datasets.filter((d)=>d.xAxisID === id || d.yAxisID === id);
          if (boundDs.length) {
              return getAxisFromDataset(id, 'x', boundDs[0]) || getAxisFromDataset(id, 'y', boundDs[0]);
          }
      }
      return {};
  }
  function mergeScaleConfig(config, options) {
      const chartDefaults = overrides[config.type] || {
          scales: {}
      };
      const configScales = options.scales || {};
      const chartIndexAxis = getIndexAxis(config.type, options);
      const scales = Object.create(null);
      Object.keys(configScales).forEach((id)=>{
          const scaleConf = configScales[id];
          if (!isObject(scaleConf)) {
              return console.error(`Invalid scale configuration for scale: ${id}`);
          }
          if (scaleConf._proxy) {
              return console.warn(`Ignoring resolver passed as options for scale: ${id}`);
          }
          const axis = determineAxis(id, scaleConf, retrieveAxisFromDatasets(id, config), defaults$1.scales[scaleConf.type]);
          const defaultId = getDefaultScaleIDFromAxis(axis, chartIndexAxis);
          const defaultScaleOptions = chartDefaults.scales || {};
          scales[id] = mergeIf(Object.create(null), [
              {
                  axis
              },
              scaleConf,
              defaultScaleOptions[axis],
              defaultScaleOptions[defaultId]
          ]);
      });
      config.data.datasets.forEach((dataset)=>{
          const type = dataset.type || config.type;
          const indexAxis = dataset.indexAxis || getIndexAxis(type, options);
          const datasetDefaults = overrides[type] || {};
          const defaultScaleOptions = datasetDefaults.scales || {};
          Object.keys(defaultScaleOptions).forEach((defaultID)=>{
              const axis = getAxisFromDefaultScaleID(defaultID, indexAxis);
              const id = dataset[axis + 'AxisID'] || axis;
              scales[id] = scales[id] || Object.create(null);
              mergeIf(scales[id], [
                  {
                      axis
                  },
                  configScales[id],
                  defaultScaleOptions[defaultID]
              ]);
          });
      });
      Object.keys(scales).forEach((key)=>{
          const scale = scales[key];
          mergeIf(scale, [
              defaults$1.scales[scale.type],
              defaults$1.scale
          ]);
      });
      return scales;
  }
  function initOptions(config) {
      const options = config.options || (config.options = {});
      options.plugins = valueOrDefault(options.plugins, {});
      options.scales = mergeScaleConfig(config, options);
  }
  function initData(data) {
      data = data || {};
      data.datasets = data.datasets || [];
      data.labels = data.labels || [];
      return data;
  }
  function initConfig(config) {
      config = config || {};
      config.data = initData(config.data);
      initOptions(config);
      return config;
  }
  const keyCache = new Map();
  const keysCached = new Set();
  function cachedKeys(cacheKey, generate) {
      let keys = keyCache.get(cacheKey);
      if (!keys) {
          keys = generate();
          keyCache.set(cacheKey, keys);
          keysCached.add(keys);
      }
      return keys;
  }
  const addIfFound = (set, obj, key)=>{
      const opts = resolveObjectKey(obj, key);
      if (opts !== undefined) {
          set.add(opts);
      }
  };
  class Config {
      constructor(config){
          this._config = initConfig(config);
          this._scopeCache = new Map();
          this._resolverCache = new Map();
      }
      get platform() {
          return this._config.platform;
      }
      get type() {
          return this._config.type;
      }
      set type(type) {
          this._config.type = type;
      }
      get data() {
          return this._config.data;
      }
      set data(data) {
          this._config.data = initData(data);
      }
      get options() {
          return this._config.options;
      }
      set options(options) {
          this._config.options = options;
      }
      get plugins() {
          return this._config.plugins;
      }
      update() {
          const config = this._config;
          this.clearCache();
          initOptions(config);
      }
      clearCache() {
          this._scopeCache.clear();
          this._resolverCache.clear();
      }
   datasetScopeKeys(datasetType) {
          return cachedKeys(datasetType, ()=>[
                  [
                      `datasets.${datasetType}`,
                      ''
                  ]
              ]);
      }
   datasetAnimationScopeKeys(datasetType, transition) {
          return cachedKeys(`${datasetType}.transition.${transition}`, ()=>[
                  [
                      `datasets.${datasetType}.transitions.${transition}`,
                      `transitions.${transition}`
                  ],
                  [
                      `datasets.${datasetType}`,
                      ''
                  ]
              ]);
      }
   datasetElementScopeKeys(datasetType, elementType) {
          return cachedKeys(`${datasetType}-${elementType}`, ()=>[
                  [
                      `datasets.${datasetType}.elements.${elementType}`,
                      `datasets.${datasetType}`,
                      `elements.${elementType}`,
                      ''
                  ]
              ]);
      }
   pluginScopeKeys(plugin) {
          const id = plugin.id;
          const type = this.type;
          return cachedKeys(`${type}-plugin-${id}`, ()=>[
                  [
                      `plugins.${id}`,
                      ...plugin.additionalOptionScopes || []
                  ]
              ]);
      }
   _cachedScopes(mainScope, resetCache) {
          const _scopeCache = this._scopeCache;
          let cache = _scopeCache.get(mainScope);
          if (!cache || resetCache) {
              cache = new Map();
              _scopeCache.set(mainScope, cache);
          }
          return cache;
      }
   getOptionScopes(mainScope, keyLists, resetCache) {
          const { options , type  } = this;
          const cache = this._cachedScopes(mainScope, resetCache);
          const cached = cache.get(keyLists);
          if (cached) {
              return cached;
          }
          const scopes = new Set();
          keyLists.forEach((keys)=>{
              if (mainScope) {
                  scopes.add(mainScope);
                  keys.forEach((key)=>addIfFound(scopes, mainScope, key));
              }
              keys.forEach((key)=>addIfFound(scopes, options, key));
              keys.forEach((key)=>addIfFound(scopes, overrides[type] || {}, key));
              keys.forEach((key)=>addIfFound(scopes, defaults$1, key));
              keys.forEach((key)=>addIfFound(scopes, descriptors, key));
          });
          const array = Array.from(scopes);
          if (array.length === 0) {
              array.push(Object.create(null));
          }
          if (keysCached.has(keyLists)) {
              cache.set(keyLists, array);
          }
          return array;
      }
   chartOptionScopes() {
          const { options , type  } = this;
          return [
              options,
              overrides[type] || {},
              defaults$1.datasets[type] || {},
              {
                  type
              },
              defaults$1,
              descriptors
          ];
      }
   resolveNamedOptions(scopes, names, context, prefixes = [
          ''
      ]) {
          const result = {
              $shared: true
          };
          const { resolver , subPrefixes  } = getResolver(this._resolverCache, scopes, prefixes);
          let options = resolver;
          if (needContext(resolver, names)) {
              result.$shared = false;
              context = isFunction(context) ? context() : context;
              const subResolver = this.createResolver(scopes, context, subPrefixes);
              options = _attachContext(resolver, context, subResolver);
          }
          for (const prop of names){
              result[prop] = options[prop];
          }
          return result;
      }
   createResolver(scopes, context, prefixes = [
          ''
      ], descriptorDefaults) {
          const { resolver  } = getResolver(this._resolverCache, scopes, prefixes);
          return isObject(context) ? _attachContext(resolver, context, undefined, descriptorDefaults) : resolver;
      }
  }
  function getResolver(resolverCache, scopes, prefixes) {
      let cache = resolverCache.get(scopes);
      if (!cache) {
          cache = new Map();
          resolverCache.set(scopes, cache);
      }
      const cacheKey = prefixes.join();
      let cached = cache.get(cacheKey);
      if (!cached) {
          const resolver = _createResolver(scopes, prefixes);
          cached = {
              resolver,
              subPrefixes: prefixes.filter((p)=>!p.toLowerCase().includes('hover'))
          };
          cache.set(cacheKey, cached);
      }
      return cached;
  }
  const hasFunction = (value)=>isObject(value) && Object.getOwnPropertyNames(value).some((key)=>isFunction(value[key]));
  function needContext(proxy, names) {
      const { isScriptable , isIndexable  } = _descriptors(proxy);
      for (const prop of names){
          const scriptable = isScriptable(prop);
          const indexable = isIndexable(prop);
          const value = (indexable || scriptable) && proxy[prop];
          if (scriptable && (isFunction(value) || hasFunction(value)) || indexable && isArray(value)) {
              return true;
          }
      }
      return false;
  }

  var version$1 = "4.4.4";

  const KNOWN_POSITIONS = [
      'top',
      'bottom',
      'left',
      'right',
      'chartArea'
  ];
  function positionIsHorizontal(position, axis) {
      return position === 'top' || position === 'bottom' || KNOWN_POSITIONS.indexOf(position) === -1 && axis === 'x';
  }
  function compare2Level(l1, l2) {
      return function(a, b) {
          return a[l1] === b[l1] ? a[l2] - b[l2] : a[l1] - b[l1];
      };
  }
  function onAnimationsComplete(context) {
      const chart = context.chart;
      const animationOptions = chart.options.animation;
      chart.notifyPlugins('afterRender');
      callback(animationOptions && animationOptions.onComplete, [
          context
      ], chart);
  }
  function onAnimationProgress(context) {
      const chart = context.chart;
      const animationOptions = chart.options.animation;
      callback(animationOptions && animationOptions.onProgress, [
          context
      ], chart);
  }
   function getCanvas(item) {
      if (_isDomSupported() && typeof item === 'string') {
          item = document.getElementById(item);
      } else if (item && item.length) {
          item = item[0];
      }
      if (item && item.canvas) {
          item = item.canvas;
      }
      return item;
  }
  const instances = {};
  const getChart = (key)=>{
      const canvas = getCanvas(key);
      return Object.values(instances).filter((c)=>c.canvas === canvas).pop();
  };
  function moveNumericKeys(obj, start, move) {
      const keys = Object.keys(obj);
      for (const key of keys){
          const intKey = +key;
          if (intKey >= start) {
              const value = obj[key];
              delete obj[key];
              if (move > 0 || intKey > start) {
                  obj[intKey + move] = value;
              }
          }
      }
  }
   function determineLastEvent(e, lastEvent, inChartArea, isClick) {
      if (!inChartArea || e.type === 'mouseout') {
          return null;
      }
      if (isClick) {
          return lastEvent;
      }
      return e;
  }
  function getSizeForArea(scale, chartArea, field) {
      return scale.options.clip ? scale[field] : chartArea[field];
  }
  function getDatasetArea(meta, chartArea) {
      const { xScale , yScale  } = meta;
      if (xScale && yScale) {
          return {
              left: getSizeForArea(xScale, chartArea, 'left'),
              right: getSizeForArea(xScale, chartArea, 'right'),
              top: getSizeForArea(yScale, chartArea, 'top'),
              bottom: getSizeForArea(yScale, chartArea, 'bottom')
          };
      }
      return chartArea;
  }
  class Chart {
      static defaults = defaults$1;
      static instances = instances;
      static overrides = overrides;
      static registry = registry;
      static version = version$1;
      static getChart = getChart;
      static register(...items) {
          registry.add(...items);
          invalidatePlugins();
      }
      static unregister(...items) {
          registry.remove(...items);
          invalidatePlugins();
      }
      constructor(item, userConfig){
          const config = this.config = new Config(userConfig);
          const initialCanvas = getCanvas(item);
          const existingChart = getChart(initialCanvas);
          if (existingChart) {
              throw new Error('Canvas is already in use. Chart with ID \'' + existingChart.id + '\'' + ' must be destroyed before the canvas with ID \'' + existingChart.canvas.id + '\' can be reused.');
          }
          const options = config.createResolver(config.chartOptionScopes(), this.getContext());
          this.platform = new (config.platform || _detectPlatform(initialCanvas))();
          this.platform.updateConfig(config);
          const context = this.platform.acquireContext(initialCanvas, options.aspectRatio);
          const canvas = context && context.canvas;
          const height = canvas && canvas.height;
          const width = canvas && canvas.width;
          this.id = uid();
          this.ctx = context;
          this.canvas = canvas;
          this.width = width;
          this.height = height;
          this._options = options;
          this._aspectRatio = this.aspectRatio;
          this._layers = [];
          this._metasets = [];
          this._stacks = undefined;
          this.boxes = [];
          this.currentDevicePixelRatio = undefined;
          this.chartArea = undefined;
          this._active = [];
          this._lastEvent = undefined;
          this._listeners = {};
           this._responsiveListeners = undefined;
          this._sortedMetasets = [];
          this.scales = {};
          this._plugins = new PluginService();
          this.$proxies = {};
          this._hiddenIndices = {};
          this.attached = false;
          this._animationsDisabled = undefined;
          this.$context = undefined;
          this._doResize = debounce((mode)=>this.update(mode), options.resizeDelay || 0);
          this._dataChanges = [];
          instances[this.id] = this;
          if (!context || !canvas) {
              console.error("Failed to create chart: can't acquire context from the given item");
              return;
          }
          animator.listen(this, 'complete', onAnimationsComplete);
          animator.listen(this, 'progress', onAnimationProgress);
          this._initialize();
          if (this.attached) {
              this.update();
          }
      }
      get aspectRatio() {
          const { options: { aspectRatio , maintainAspectRatio  } , width , height , _aspectRatio  } = this;
          if (!isNullOrUndef(aspectRatio)) {
              return aspectRatio;
          }
          if (maintainAspectRatio && _aspectRatio) {
              return _aspectRatio;
          }
          return height ? width / height : null;
      }
      get data() {
          return this.config.data;
      }
      set data(data) {
          this.config.data = data;
      }
      get options() {
          return this._options;
      }
      set options(options) {
          this.config.options = options;
      }
      get registry() {
          return registry;
      }
   _initialize() {
          this.notifyPlugins('beforeInit');
          if (this.options.responsive) {
              this.resize();
          } else {
              retinaScale(this, this.options.devicePixelRatio);
          }
          this.bindEvents();
          this.notifyPlugins('afterInit');
          return this;
      }
      clear() {
          clearCanvas(this.canvas, this.ctx);
          return this;
      }
      stop() {
          animator.stop(this);
          return this;
      }
   resize(width, height) {
          if (!animator.running(this)) {
              this._resize(width, height);
          } else {
              this._resizeBeforeDraw = {
                  width,
                  height
              };
          }
      }
      _resize(width, height) {
          const options = this.options;
          const canvas = this.canvas;
          const aspectRatio = options.maintainAspectRatio && this.aspectRatio;
          const newSize = this.platform.getMaximumSize(canvas, width, height, aspectRatio);
          const newRatio = options.devicePixelRatio || this.platform.getDevicePixelRatio();
          const mode = this.width ? 'resize' : 'attach';
          this.width = newSize.width;
          this.height = newSize.height;
          this._aspectRatio = this.aspectRatio;
          if (!retinaScale(this, newRatio, true)) {
              return;
          }
          this.notifyPlugins('resize', {
              size: newSize
          });
          callback(options.onResize, [
              this,
              newSize
          ], this);
          if (this.attached) {
              if (this._doResize(mode)) {
                  this.render();
              }
          }
      }
      ensureScalesHaveIDs() {
          const options = this.options;
          const scalesOptions = options.scales || {};
          each(scalesOptions, (axisOptions, axisID)=>{
              axisOptions.id = axisID;
          });
      }
   buildOrUpdateScales() {
          const options = this.options;
          const scaleOpts = options.scales;
          const scales = this.scales;
          const updated = Object.keys(scales).reduce((obj, id)=>{
              obj[id] = false;
              return obj;
          }, {});
          let items = [];
          if (scaleOpts) {
              items = items.concat(Object.keys(scaleOpts).map((id)=>{
                  const scaleOptions = scaleOpts[id];
                  const axis = determineAxis(id, scaleOptions);
                  const isRadial = axis === 'r';
                  const isHorizontal = axis === 'x';
                  return {
                      options: scaleOptions,
                      dposition: isRadial ? 'chartArea' : isHorizontal ? 'bottom' : 'left',
                      dtype: isRadial ? 'radialLinear' : isHorizontal ? 'category' : 'linear'
                  };
              }));
          }
          each(items, (item)=>{
              const scaleOptions = item.options;
              const id = scaleOptions.id;
              const axis = determineAxis(id, scaleOptions);
              const scaleType = valueOrDefault(scaleOptions.type, item.dtype);
              if (scaleOptions.position === undefined || positionIsHorizontal(scaleOptions.position, axis) !== positionIsHorizontal(item.dposition)) {
                  scaleOptions.position = item.dposition;
              }
              updated[id] = true;
              let scale = null;
              if (id in scales && scales[id].type === scaleType) {
                  scale = scales[id];
              } else {
                  const scaleClass = registry.getScale(scaleType);
                  scale = new scaleClass({
                      id,
                      type: scaleType,
                      ctx: this.ctx,
                      chart: this
                  });
                  scales[scale.id] = scale;
              }
              scale.init(scaleOptions, options);
          });
          each(updated, (hasUpdated, id)=>{
              if (!hasUpdated) {
                  delete scales[id];
              }
          });
          each(scales, (scale)=>{
              layouts.configure(this, scale, scale.options);
              layouts.addBox(this, scale);
          });
      }
   _updateMetasets() {
          const metasets = this._metasets;
          const numData = this.data.datasets.length;
          const numMeta = metasets.length;
          metasets.sort((a, b)=>a.index - b.index);
          if (numMeta > numData) {
              for(let i = numData; i < numMeta; ++i){
                  this._destroyDatasetMeta(i);
              }
              metasets.splice(numData, numMeta - numData);
          }
          this._sortedMetasets = metasets.slice(0).sort(compare2Level('order', 'index'));
      }
   _removeUnreferencedMetasets() {
          const { _metasets: metasets , data: { datasets  }  } = this;
          if (metasets.length > datasets.length) {
              delete this._stacks;
          }
          metasets.forEach((meta, index)=>{
              if (datasets.filter((x)=>x === meta._dataset).length === 0) {
                  this._destroyDatasetMeta(index);
              }
          });
      }
      buildOrUpdateControllers() {
          const newControllers = [];
          const datasets = this.data.datasets;
          let i, ilen;
          this._removeUnreferencedMetasets();
          for(i = 0, ilen = datasets.length; i < ilen; i++){
              const dataset = datasets[i];
              let meta = this.getDatasetMeta(i);
              const type = dataset.type || this.config.type;
              if (meta.type && meta.type !== type) {
                  this._destroyDatasetMeta(i);
                  meta = this.getDatasetMeta(i);
              }
              meta.type = type;
              meta.indexAxis = dataset.indexAxis || getIndexAxis(type, this.options);
              meta.order = dataset.order || 0;
              meta.index = i;
              meta.label = '' + dataset.label;
              meta.visible = this.isDatasetVisible(i);
              if (meta.controller) {
                  meta.controller.updateIndex(i);
                  meta.controller.linkScales();
              } else {
                  const ControllerClass = registry.getController(type);
                  const { datasetElementType , dataElementType  } = defaults$1.datasets[type];
                  Object.assign(ControllerClass, {
                      dataElementType: registry.getElement(dataElementType),
                      datasetElementType: datasetElementType && registry.getElement(datasetElementType)
                  });
                  meta.controller = new ControllerClass(this, i);
                  newControllers.push(meta.controller);
              }
          }
          this._updateMetasets();
          return newControllers;
      }
   _resetElements() {
          each(this.data.datasets, (dataset, datasetIndex)=>{
              this.getDatasetMeta(datasetIndex).controller.reset();
          }, this);
      }
   reset() {
          this._resetElements();
          this.notifyPlugins('reset');
      }
      update(mode) {
          const config = this.config;
          config.update();
          const options = this._options = config.createResolver(config.chartOptionScopes(), this.getContext());
          const animsDisabled = this._animationsDisabled = !options.animation;
          this._updateScales();
          this._checkEventBindings();
          this._updateHiddenIndices();
          this._plugins.invalidate();
          if (this.notifyPlugins('beforeUpdate', {
              mode,
              cancelable: true
          }) === false) {
              return;
          }
          const newControllers = this.buildOrUpdateControllers();
          this.notifyPlugins('beforeElementsUpdate');
          let minPadding = 0;
          for(let i = 0, ilen = this.data.datasets.length; i < ilen; i++){
              const { controller  } = this.getDatasetMeta(i);
              const reset = !animsDisabled && newControllers.indexOf(controller) === -1;
              controller.buildOrUpdateElements(reset);
              minPadding = Math.max(+controller.getMaxOverflow(), minPadding);
          }
          minPadding = this._minPadding = options.layout.autoPadding ? minPadding : 0;
          this._updateLayout(minPadding);
          if (!animsDisabled) {
              each(newControllers, (controller)=>{
                  controller.reset();
              });
          }
          this._updateDatasets(mode);
          this.notifyPlugins('afterUpdate', {
              mode
          });
          this._layers.sort(compare2Level('z', '_idx'));
          const { _active , _lastEvent  } = this;
          if (_lastEvent) {
              this._eventHandler(_lastEvent, true);
          } else if (_active.length) {
              this._updateHoverStyles(_active, _active, true);
          }
          this.render();
      }
   _updateScales() {
          each(this.scales, (scale)=>{
              layouts.removeBox(this, scale);
          });
          this.ensureScalesHaveIDs();
          this.buildOrUpdateScales();
      }
   _checkEventBindings() {
          const options = this.options;
          const existingEvents = new Set(Object.keys(this._listeners));
          const newEvents = new Set(options.events);
          if (!setsEqual(existingEvents, newEvents) || !!this._responsiveListeners !== options.responsive) {
              this.unbindEvents();
              this.bindEvents();
          }
      }
   _updateHiddenIndices() {
          const { _hiddenIndices  } = this;
          const changes = this._getUniformDataChanges() || [];
          for (const { method , start , count  } of changes){
              const move = method === '_removeElements' ? -count : count;
              moveNumericKeys(_hiddenIndices, start, move);
          }
      }
   _getUniformDataChanges() {
          const _dataChanges = this._dataChanges;
          if (!_dataChanges || !_dataChanges.length) {
              return;
          }
          this._dataChanges = [];
          const datasetCount = this.data.datasets.length;
          const makeSet = (idx)=>new Set(_dataChanges.filter((c)=>c[0] === idx).map((c, i)=>i + ',' + c.splice(1).join(',')));
          const changeSet = makeSet(0);
          for(let i = 1; i < datasetCount; i++){
              if (!setsEqual(changeSet, makeSet(i))) {
                  return;
              }
          }
          return Array.from(changeSet).map((c)=>c.split(',')).map((a)=>({
                  method: a[1],
                  start: +a[2],
                  count: +a[3]
              }));
      }
   _updateLayout(minPadding) {
          if (this.notifyPlugins('beforeLayout', {
              cancelable: true
          }) === false) {
              return;
          }
          layouts.update(this, this.width, this.height, minPadding);
          const area = this.chartArea;
          const noArea = area.width <= 0 || area.height <= 0;
          this._layers = [];
          each(this.boxes, (box)=>{
              if (noArea && box.position === 'chartArea') {
                  return;
              }
              if (box.configure) {
                  box.configure();
              }
              this._layers.push(...box._layers());
          }, this);
          this._layers.forEach((item, index)=>{
              item._idx = index;
          });
          this.notifyPlugins('afterLayout');
      }
   _updateDatasets(mode) {
          if (this.notifyPlugins('beforeDatasetsUpdate', {
              mode,
              cancelable: true
          }) === false) {
              return;
          }
          for(let i = 0, ilen = this.data.datasets.length; i < ilen; ++i){
              this.getDatasetMeta(i).controller.configure();
          }
          for(let i = 0, ilen = this.data.datasets.length; i < ilen; ++i){
              this._updateDataset(i, isFunction(mode) ? mode({
                  datasetIndex: i
              }) : mode);
          }
          this.notifyPlugins('afterDatasetsUpdate', {
              mode
          });
      }
   _updateDataset(index, mode) {
          const meta = this.getDatasetMeta(index);
          const args = {
              meta,
              index,
              mode,
              cancelable: true
          };
          if (this.notifyPlugins('beforeDatasetUpdate', args) === false) {
              return;
          }
          meta.controller._update(mode);
          args.cancelable = false;
          this.notifyPlugins('afterDatasetUpdate', args);
      }
      render() {
          if (this.notifyPlugins('beforeRender', {
              cancelable: true
          }) === false) {
              return;
          }
          if (animator.has(this)) {
              if (this.attached && !animator.running(this)) {
                  animator.start(this);
              }
          } else {
              this.draw();
              onAnimationsComplete({
                  chart: this
              });
          }
      }
      draw() {
          let i;
          if (this._resizeBeforeDraw) {
              const { width , height  } = this._resizeBeforeDraw;
              this._resizeBeforeDraw = null;
              this._resize(width, height);
          }
          this.clear();
          if (this.width <= 0 || this.height <= 0) {
              return;
          }
          if (this.notifyPlugins('beforeDraw', {
              cancelable: true
          }) === false) {
              return;
          }
          const layers = this._layers;
          for(i = 0; i < layers.length && layers[i].z <= 0; ++i){
              layers[i].draw(this.chartArea);
          }
          this._drawDatasets();
          for(; i < layers.length; ++i){
              layers[i].draw(this.chartArea);
          }
          this.notifyPlugins('afterDraw');
      }
   _getSortedDatasetMetas(filterVisible) {
          const metasets = this._sortedMetasets;
          const result = [];
          let i, ilen;
          for(i = 0, ilen = metasets.length; i < ilen; ++i){
              const meta = metasets[i];
              if (!filterVisible || meta.visible) {
                  result.push(meta);
              }
          }
          return result;
      }
   getSortedVisibleDatasetMetas() {
          return this._getSortedDatasetMetas(true);
      }
   _drawDatasets() {
          if (this.notifyPlugins('beforeDatasetsDraw', {
              cancelable: true
          }) === false) {
              return;
          }
          const metasets = this.getSortedVisibleDatasetMetas();
          for(let i = metasets.length - 1; i >= 0; --i){
              this._drawDataset(metasets[i]);
          }
          this.notifyPlugins('afterDatasetsDraw');
      }
   _drawDataset(meta) {
          const ctx = this.ctx;
          const clip = meta._clip;
          const useClip = !clip.disabled;
          const area = getDatasetArea(meta, this.chartArea);
          const args = {
              meta,
              index: meta.index,
              cancelable: true
          };
          if (this.notifyPlugins('beforeDatasetDraw', args) === false) {
              return;
          }
          if (useClip) {
              clipArea(ctx, {
                  left: clip.left === false ? 0 : area.left - clip.left,
                  right: clip.right === false ? this.width : area.right + clip.right,
                  top: clip.top === false ? 0 : area.top - clip.top,
                  bottom: clip.bottom === false ? this.height : area.bottom + clip.bottom
              });
          }
          meta.controller.draw();
          if (useClip) {
              unclipArea(ctx);
          }
          args.cancelable = false;
          this.notifyPlugins('afterDatasetDraw', args);
      }
   isPointInArea(point) {
          return _isPointInArea(point, this.chartArea, this._minPadding);
      }
      getElementsAtEventForMode(e, mode, options, useFinalPosition) {
          const method = Interaction.modes[mode];
          if (typeof method === 'function') {
              return method(this, e, options, useFinalPosition);
          }
          return [];
      }
      getDatasetMeta(datasetIndex) {
          const dataset = this.data.datasets[datasetIndex];
          const metasets = this._metasets;
          let meta = metasets.filter((x)=>x && x._dataset === dataset).pop();
          if (!meta) {
              meta = {
                  type: null,
                  data: [],
                  dataset: null,
                  controller: null,
                  hidden: null,
                  xAxisID: null,
                  yAxisID: null,
                  order: dataset && dataset.order || 0,
                  index: datasetIndex,
                  _dataset: dataset,
                  _parsed: [],
                  _sorted: false
              };
              metasets.push(meta);
          }
          return meta;
      }
      getContext() {
          return this.$context || (this.$context = createContext(null, {
              chart: this,
              type: 'chart'
          }));
      }
      getVisibleDatasetCount() {
          return this.getSortedVisibleDatasetMetas().length;
      }
      isDatasetVisible(datasetIndex) {
          const dataset = this.data.datasets[datasetIndex];
          if (!dataset) {
              return false;
          }
          const meta = this.getDatasetMeta(datasetIndex);
          return typeof meta.hidden === 'boolean' ? !meta.hidden : !dataset.hidden;
      }
      setDatasetVisibility(datasetIndex, visible) {
          const meta = this.getDatasetMeta(datasetIndex);
          meta.hidden = !visible;
      }
      toggleDataVisibility(index) {
          this._hiddenIndices[index] = !this._hiddenIndices[index];
      }
      getDataVisibility(index) {
          return !this._hiddenIndices[index];
      }
   _updateVisibility(datasetIndex, dataIndex, visible) {
          const mode = visible ? 'show' : 'hide';
          const meta = this.getDatasetMeta(datasetIndex);
          const anims = meta.controller._resolveAnimations(undefined, mode);
          if (defined(dataIndex)) {
              meta.data[dataIndex].hidden = !visible;
              this.update();
          } else {
              this.setDatasetVisibility(datasetIndex, visible);
              anims.update(meta, {
                  visible
              });
              this.update((ctx)=>ctx.datasetIndex === datasetIndex ? mode : undefined);
          }
      }
      hide(datasetIndex, dataIndex) {
          this._updateVisibility(datasetIndex, dataIndex, false);
      }
      show(datasetIndex, dataIndex) {
          this._updateVisibility(datasetIndex, dataIndex, true);
      }
   _destroyDatasetMeta(datasetIndex) {
          const meta = this._metasets[datasetIndex];
          if (meta && meta.controller) {
              meta.controller._destroy();
          }
          delete this._metasets[datasetIndex];
      }
      _stop() {
          let i, ilen;
          this.stop();
          animator.remove(this);
          for(i = 0, ilen = this.data.datasets.length; i < ilen; ++i){
              this._destroyDatasetMeta(i);
          }
      }
      destroy() {
          this.notifyPlugins('beforeDestroy');
          const { canvas , ctx  } = this;
          this._stop();
          this.config.clearCache();
          if (canvas) {
              this.unbindEvents();
              clearCanvas(canvas, ctx);
              this.platform.releaseContext(ctx);
              this.canvas = null;
              this.ctx = null;
          }
          delete instances[this.id];
          this.notifyPlugins('afterDestroy');
      }
      toBase64Image(...args) {
          return this.canvas.toDataURL(...args);
      }
   bindEvents() {
          this.bindUserEvents();
          if (this.options.responsive) {
              this.bindResponsiveEvents();
          } else {
              this.attached = true;
          }
      }
   bindUserEvents() {
          const listeners = this._listeners;
          const platform = this.platform;
          const _add = (type, listener)=>{
              platform.addEventListener(this, type, listener);
              listeners[type] = listener;
          };
          const listener = (e, x, y)=>{
              e.offsetX = x;
              e.offsetY = y;
              this._eventHandler(e);
          };
          each(this.options.events, (type)=>_add(type, listener));
      }
   bindResponsiveEvents() {
          if (!this._responsiveListeners) {
              this._responsiveListeners = {};
          }
          const listeners = this._responsiveListeners;
          const platform = this.platform;
          const _add = (type, listener)=>{
              platform.addEventListener(this, type, listener);
              listeners[type] = listener;
          };
          const _remove = (type, listener)=>{
              if (listeners[type]) {
                  platform.removeEventListener(this, type, listener);
                  delete listeners[type];
              }
          };
          const listener = (width, height)=>{
              if (this.canvas) {
                  this.resize(width, height);
              }
          };
          let detached;
          const attached = ()=>{
              _remove('attach', attached);
              this.attached = true;
              this.resize();
              _add('resize', listener);
              _add('detach', detached);
          };
          detached = ()=>{
              this.attached = false;
              _remove('resize', listener);
              this._stop();
              this._resize(0, 0);
              _add('attach', attached);
          };
          if (platform.isAttached(this.canvas)) {
              attached();
          } else {
              detached();
          }
      }
   unbindEvents() {
          each(this._listeners, (listener, type)=>{
              this.platform.removeEventListener(this, type, listener);
          });
          this._listeners = {};
          each(this._responsiveListeners, (listener, type)=>{
              this.platform.removeEventListener(this, type, listener);
          });
          this._responsiveListeners = undefined;
      }
      updateHoverStyle(items, mode, enabled) {
          const prefix = enabled ? 'set' : 'remove';
          let meta, item, i, ilen;
          if (mode === 'dataset') {
              meta = this.getDatasetMeta(items[0].datasetIndex);
              meta.controller['_' + prefix + 'DatasetHoverStyle']();
          }
          for(i = 0, ilen = items.length; i < ilen; ++i){
              item = items[i];
              const controller = item && this.getDatasetMeta(item.datasetIndex).controller;
              if (controller) {
                  controller[prefix + 'HoverStyle'](item.element, item.datasetIndex, item.index);
              }
          }
      }
   getActiveElements() {
          return this._active || [];
      }
   setActiveElements(activeElements) {
          const lastActive = this._active || [];
          const active = activeElements.map(({ datasetIndex , index  })=>{
              const meta = this.getDatasetMeta(datasetIndex);
              if (!meta) {
                  throw new Error('No dataset found at index ' + datasetIndex);
              }
              return {
                  datasetIndex,
                  element: meta.data[index],
                  index
              };
          });
          const changed = !_elementsEqual(active, lastActive);
          if (changed) {
              this._active = active;
              this._lastEvent = null;
              this._updateHoverStyles(active, lastActive);
          }
      }
   notifyPlugins(hook, args, filter) {
          return this._plugins.notify(this, hook, args, filter);
      }
   isPluginEnabled(pluginId) {
          return this._plugins._cache.filter((p)=>p.plugin.id === pluginId).length === 1;
      }
   _updateHoverStyles(active, lastActive, replay) {
          const hoverOptions = this.options.hover;
          const diff = (a, b)=>a.filter((x)=>!b.some((y)=>x.datasetIndex === y.datasetIndex && x.index === y.index));
          const deactivated = diff(lastActive, active);
          const activated = replay ? active : diff(active, lastActive);
          if (deactivated.length) {
              this.updateHoverStyle(deactivated, hoverOptions.mode, false);
          }
          if (activated.length && hoverOptions.mode) {
              this.updateHoverStyle(activated, hoverOptions.mode, true);
          }
      }
   _eventHandler(e, replay) {
          const args = {
              event: e,
              replay,
              cancelable: true,
              inChartArea: this.isPointInArea(e)
          };
          const eventFilter = (plugin)=>(plugin.options.events || this.options.events).includes(e.native.type);
          if (this.notifyPlugins('beforeEvent', args, eventFilter) === false) {
              return;
          }
          const changed = this._handleEvent(e, replay, args.inChartArea);
          args.cancelable = false;
          this.notifyPlugins('afterEvent', args, eventFilter);
          if (changed || args.changed) {
              this.render();
          }
          return this;
      }
   _handleEvent(e, replay, inChartArea) {
          const { _active: lastActive = [] , options  } = this;
          const useFinalPosition = replay;
          const active = this._getActiveElements(e, lastActive, inChartArea, useFinalPosition);
          const isClick = _isClickEvent(e);
          const lastEvent = determineLastEvent(e, this._lastEvent, inChartArea, isClick);
          if (inChartArea) {
              this._lastEvent = null;
              callback(options.onHover, [
                  e,
                  active,
                  this
              ], this);
              if (isClick) {
                  callback(options.onClick, [
                      e,
                      active,
                      this
                  ], this);
              }
          }
          const changed = !_elementsEqual(active, lastActive);
          if (changed || replay) {
              this._active = active;
              this._updateHoverStyles(active, lastActive, replay);
          }
          this._lastEvent = lastEvent;
          return changed;
      }
   _getActiveElements(e, lastActive, inChartArea, useFinalPosition) {
          if (e.type === 'mouseout') {
              return [];
          }
          if (!inChartArea) {
              return lastActive;
          }
          const hoverOptions = this.options.hover;
          return this.getElementsAtEventForMode(e, hoverOptions.mode, hoverOptions, useFinalPosition);
      }
  }
  function invalidatePlugins() {
      return each(Chart.instances, (chart)=>chart._plugins.invalidate());
  }

  function clipArc(ctx, element, endAngle) {
      const { startAngle , pixelMargin , x , y , outerRadius , innerRadius  } = element;
      let angleMargin = pixelMargin / outerRadius;
      // Draw an inner border by clipping the arc and drawing a double-width border
      // Enlarge the clipping arc by 0.33 pixels to eliminate glitches between borders
      ctx.beginPath();
      ctx.arc(x, y, outerRadius, startAngle - angleMargin, endAngle + angleMargin);
      if (innerRadius > pixelMargin) {
          angleMargin = pixelMargin / innerRadius;
          ctx.arc(x, y, innerRadius, endAngle + angleMargin, startAngle - angleMargin, true);
      } else {
          ctx.arc(x, y, pixelMargin, endAngle + HALF_PI, startAngle - HALF_PI);
      }
      ctx.closePath();
      ctx.clip();
  }
  function toRadiusCorners(value) {
      return _readValueToProps(value, [
          'outerStart',
          'outerEnd',
          'innerStart',
          'innerEnd'
      ]);
  }
  /**
   * Parse border radius from the provided options
   */ function parseBorderRadius$1(arc, innerRadius, outerRadius, angleDelta) {
      const o = toRadiusCorners(arc.options.borderRadius);
      const halfThickness = (outerRadius - innerRadius) / 2;
      const innerLimit = Math.min(halfThickness, angleDelta * innerRadius / 2);
      // Outer limits are complicated. We want to compute the available angular distance at
      // a radius of outerRadius - borderRadius because for small angular distances, this term limits.
      // We compute at r = outerRadius - borderRadius because this circle defines the center of the border corners.
      //
      // If the borderRadius is large, that value can become negative.
      // This causes the outer borders to lose their radius entirely, which is rather unexpected. To solve that, if borderRadius > outerRadius
      // we know that the thickness term will dominate and compute the limits at that point
      const computeOuterLimit = (val)=>{
          const outerArcLimit = (outerRadius - Math.min(halfThickness, val)) * angleDelta / 2;
          return _limitValue(val, 0, Math.min(halfThickness, outerArcLimit));
      };
      return {
          outerStart: computeOuterLimit(o.outerStart),
          outerEnd: computeOuterLimit(o.outerEnd),
          innerStart: _limitValue(o.innerStart, 0, innerLimit),
          innerEnd: _limitValue(o.innerEnd, 0, innerLimit)
      };
  }
  /**
   * Convert (r, 𝜃) to (x, y)
   */ function rThetaToXY(r, theta, x, y) {
      return {
          x: x + r * Math.cos(theta),
          y: y + r * Math.sin(theta)
      };
  }
  /**
   * Path the arc, respecting border radius by separating into left and right halves.
   *
   *   Start      End
   *
   *    1--->a--->2    Outer
   *   /           \
   *   8           3
   *   |           |
   *   |           |
   *   7           4
   *   \           /
   *    6<---b<---5    Inner
   */ function pathArc(ctx, element, offset, spacing, end, circular) {
      const { x , y , startAngle: start , pixelMargin , innerRadius: innerR  } = element;
      const outerRadius = Math.max(element.outerRadius + spacing + offset - pixelMargin, 0);
      const innerRadius = innerR > 0 ? innerR + spacing + offset + pixelMargin : 0;
      let spacingOffset = 0;
      const alpha = end - start;
      if (spacing) {
          // When spacing is present, it is the same for all items
          // So we adjust the start and end angle of the arc such that
          // the distance is the same as it would be without the spacing
          const noSpacingInnerRadius = innerR > 0 ? innerR - spacing : 0;
          const noSpacingOuterRadius = outerRadius > 0 ? outerRadius - spacing : 0;
          const avNogSpacingRadius = (noSpacingInnerRadius + noSpacingOuterRadius) / 2;
          const adjustedAngle = avNogSpacingRadius !== 0 ? alpha * avNogSpacingRadius / (avNogSpacingRadius + spacing) : alpha;
          spacingOffset = (alpha - adjustedAngle) / 2;
      }
      const beta = Math.max(0.001, alpha * outerRadius - offset / PI) / outerRadius;
      const angleOffset = (alpha - beta) / 2;
      const startAngle = start + angleOffset + spacingOffset;
      const endAngle = end - angleOffset - spacingOffset;
      const { outerStart , outerEnd , innerStart , innerEnd  } = parseBorderRadius$1(element, innerRadius, outerRadius, endAngle - startAngle);
      const outerStartAdjustedRadius = outerRadius - outerStart;
      const outerEndAdjustedRadius = outerRadius - outerEnd;
      const outerStartAdjustedAngle = startAngle + outerStart / outerStartAdjustedRadius;
      const outerEndAdjustedAngle = endAngle - outerEnd / outerEndAdjustedRadius;
      const innerStartAdjustedRadius = innerRadius + innerStart;
      const innerEndAdjustedRadius = innerRadius + innerEnd;
      const innerStartAdjustedAngle = startAngle + innerStart / innerStartAdjustedRadius;
      const innerEndAdjustedAngle = endAngle - innerEnd / innerEndAdjustedRadius;
      ctx.beginPath();
      if (circular) {
          // The first arc segments from point 1 to point a to point 2
          const outerMidAdjustedAngle = (outerStartAdjustedAngle + outerEndAdjustedAngle) / 2;
          ctx.arc(x, y, outerRadius, outerStartAdjustedAngle, outerMidAdjustedAngle);
          ctx.arc(x, y, outerRadius, outerMidAdjustedAngle, outerEndAdjustedAngle);
          // The corner segment from point 2 to point 3
          if (outerEnd > 0) {
              const pCenter = rThetaToXY(outerEndAdjustedRadius, outerEndAdjustedAngle, x, y);
              ctx.arc(pCenter.x, pCenter.y, outerEnd, outerEndAdjustedAngle, endAngle + HALF_PI);
          }
          // The line from point 3 to point 4
          const p4 = rThetaToXY(innerEndAdjustedRadius, endAngle, x, y);
          ctx.lineTo(p4.x, p4.y);
          // The corner segment from point 4 to point 5
          if (innerEnd > 0) {
              const pCenter = rThetaToXY(innerEndAdjustedRadius, innerEndAdjustedAngle, x, y);
              ctx.arc(pCenter.x, pCenter.y, innerEnd, endAngle + HALF_PI, innerEndAdjustedAngle + Math.PI);
          }
          // The inner arc from point 5 to point b to point 6
          const innerMidAdjustedAngle = (endAngle - innerEnd / innerRadius + (startAngle + innerStart / innerRadius)) / 2;
          ctx.arc(x, y, innerRadius, endAngle - innerEnd / innerRadius, innerMidAdjustedAngle, true);
          ctx.arc(x, y, innerRadius, innerMidAdjustedAngle, startAngle + innerStart / innerRadius, true);
          // The corner segment from point 6 to point 7
          if (innerStart > 0) {
              const pCenter = rThetaToXY(innerStartAdjustedRadius, innerStartAdjustedAngle, x, y);
              ctx.arc(pCenter.x, pCenter.y, innerStart, innerStartAdjustedAngle + Math.PI, startAngle - HALF_PI);
          }
          // The line from point 7 to point 8
          const p8 = rThetaToXY(outerStartAdjustedRadius, startAngle, x, y);
          ctx.lineTo(p8.x, p8.y);
          // The corner segment from point 8 to point 1
          if (outerStart > 0) {
              const pCenter = rThetaToXY(outerStartAdjustedRadius, outerStartAdjustedAngle, x, y);
              ctx.arc(pCenter.x, pCenter.y, outerStart, startAngle - HALF_PI, outerStartAdjustedAngle);
          }
      } else {
          ctx.moveTo(x, y);
          const outerStartX = Math.cos(outerStartAdjustedAngle) * outerRadius + x;
          const outerStartY = Math.sin(outerStartAdjustedAngle) * outerRadius + y;
          ctx.lineTo(outerStartX, outerStartY);
          const outerEndX = Math.cos(outerEndAdjustedAngle) * outerRadius + x;
          const outerEndY = Math.sin(outerEndAdjustedAngle) * outerRadius + y;
          ctx.lineTo(outerEndX, outerEndY);
      }
      ctx.closePath();
  }
  function drawArc(ctx, element, offset, spacing, circular) {
      const { fullCircles , startAngle , circumference  } = element;
      let endAngle = element.endAngle;
      if (fullCircles) {
          pathArc(ctx, element, offset, spacing, endAngle, circular);
          for(let i = 0; i < fullCircles; ++i){
              ctx.fill();
          }
          if (!isNaN(circumference)) {
              endAngle = startAngle + (circumference % TAU || TAU);
          }
      }
      pathArc(ctx, element, offset, spacing, endAngle, circular);
      ctx.fill();
      return endAngle;
  }
  function drawBorder(ctx, element, offset, spacing, circular) {
      const { fullCircles , startAngle , circumference , options  } = element;
      const { borderWidth , borderJoinStyle , borderDash , borderDashOffset  } = options;
      const inner = options.borderAlign === 'inner';
      if (!borderWidth) {
          return;
      }
      ctx.setLineDash(borderDash || []);
      ctx.lineDashOffset = borderDashOffset;
      if (inner) {
          ctx.lineWidth = borderWidth * 2;
          ctx.lineJoin = borderJoinStyle || 'round';
      } else {
          ctx.lineWidth = borderWidth;
          ctx.lineJoin = borderJoinStyle || 'bevel';
      }
      let endAngle = element.endAngle;
      if (fullCircles) {
          pathArc(ctx, element, offset, spacing, endAngle, circular);
          for(let i = 0; i < fullCircles; ++i){
              ctx.stroke();
          }
          if (!isNaN(circumference)) {
              endAngle = startAngle + (circumference % TAU || TAU);
          }
      }
      if (inner) {
          clipArc(ctx, element, endAngle);
      }
      if (!fullCircles) {
          pathArc(ctx, element, offset, spacing, endAngle, circular);
          ctx.stroke();
      }
  }
  class ArcElement extends Element$1 {
      static id = 'arc';
      static defaults = {
          borderAlign: 'center',
          borderColor: '#fff',
          borderDash: [],
          borderDashOffset: 0,
          borderJoinStyle: undefined,
          borderRadius: 0,
          borderWidth: 2,
          offset: 0,
          spacing: 0,
          angle: undefined,
          circular: true
      };
      static defaultRoutes = {
          backgroundColor: 'backgroundColor'
      };
      static descriptors = {
          _scriptable: true,
          _indexable: (name)=>name !== 'borderDash'
      };
      circumference;
      endAngle;
      fullCircles;
      innerRadius;
      outerRadius;
      pixelMargin;
      startAngle;
      constructor(cfg){
          super();
          this.options = undefined;
          this.circumference = undefined;
          this.startAngle = undefined;
          this.endAngle = undefined;
          this.innerRadius = undefined;
          this.outerRadius = undefined;
          this.pixelMargin = 0;
          this.fullCircles = 0;
          if (cfg) {
              Object.assign(this, cfg);
          }
      }
      inRange(chartX, chartY, useFinalPosition) {
          const point = this.getProps([
              'x',
              'y'
          ], useFinalPosition);
          const { angle , distance  } = getAngleFromPoint(point, {
              x: chartX,
              y: chartY
          });
          const { startAngle , endAngle , innerRadius , outerRadius , circumference  } = this.getProps([
              'startAngle',
              'endAngle',
              'innerRadius',
              'outerRadius',
              'circumference'
          ], useFinalPosition);
          const rAdjust = (this.options.spacing + this.options.borderWidth) / 2;
          const _circumference = valueOrDefault(circumference, endAngle - startAngle);
          const nonZeroBetween = _angleBetween(angle, startAngle, endAngle) && startAngle !== endAngle;
          const betweenAngles = _circumference >= TAU || nonZeroBetween;
          const withinRadius = _isBetween(distance, innerRadius + rAdjust, outerRadius + rAdjust);
          return betweenAngles && withinRadius;
      }
      getCenterPoint(useFinalPosition) {
          const { x , y , startAngle , endAngle , innerRadius , outerRadius  } = this.getProps([
              'x',
              'y',
              'startAngle',
              'endAngle',
              'innerRadius',
              'outerRadius'
          ], useFinalPosition);
          const { offset , spacing  } = this.options;
          const halfAngle = (startAngle + endAngle) / 2;
          const halfRadius = (innerRadius + outerRadius + spacing + offset) / 2;
          return {
              x: x + Math.cos(halfAngle) * halfRadius,
              y: y + Math.sin(halfAngle) * halfRadius
          };
      }
      tooltipPosition(useFinalPosition) {
          return this.getCenterPoint(useFinalPosition);
      }
      draw(ctx) {
          const { options , circumference  } = this;
          const offset = (options.offset || 0) / 4;
          const spacing = (options.spacing || 0) / 2;
          const circular = options.circular;
          this.pixelMargin = options.borderAlign === 'inner' ? 0.33 : 0;
          this.fullCircles = circumference > TAU ? Math.floor(circumference / TAU) : 0;
          if (circumference === 0 || this.innerRadius < 0 || this.outerRadius < 0) {
              return;
          }
          ctx.save();
          const halfAngle = (this.startAngle + this.endAngle) / 2;
          ctx.translate(Math.cos(halfAngle) * offset, Math.sin(halfAngle) * offset);
          const fix = 1 - Math.sin(Math.min(PI, circumference || 0));
          const radiusOffset = offset * fix;
          ctx.fillStyle = options.backgroundColor;
          ctx.strokeStyle = options.borderColor;
          drawArc(ctx, this, radiusOffset, spacing, circular);
          drawBorder(ctx, this, radiusOffset, spacing, circular);
          ctx.restore();
      }
  }

  function setStyle(ctx, options, style = options) {
      ctx.lineCap = valueOrDefault(style.borderCapStyle, options.borderCapStyle);
      ctx.setLineDash(valueOrDefault(style.borderDash, options.borderDash));
      ctx.lineDashOffset = valueOrDefault(style.borderDashOffset, options.borderDashOffset);
      ctx.lineJoin = valueOrDefault(style.borderJoinStyle, options.borderJoinStyle);
      ctx.lineWidth = valueOrDefault(style.borderWidth, options.borderWidth);
      ctx.strokeStyle = valueOrDefault(style.borderColor, options.borderColor);
  }
  function lineTo(ctx, previous, target) {
      ctx.lineTo(target.x, target.y);
  }
   function getLineMethod(options) {
      if (options.stepped) {
          return _steppedLineTo;
      }
      if (options.tension || options.cubicInterpolationMode === 'monotone') {
          return _bezierCurveTo;
      }
      return lineTo;
  }
  function pathVars(points, segment, params = {}) {
      const count = points.length;
      const { start: paramsStart = 0 , end: paramsEnd = count - 1  } = params;
      const { start: segmentStart , end: segmentEnd  } = segment;
      const start = Math.max(paramsStart, segmentStart);
      const end = Math.min(paramsEnd, segmentEnd);
      const outside = paramsStart < segmentStart && paramsEnd < segmentStart || paramsStart > segmentEnd && paramsEnd > segmentEnd;
      return {
          count,
          start,
          loop: segment.loop,
          ilen: end < start && !outside ? count + end - start : end - start
      };
  }
   function pathSegment(ctx, line, segment, params) {
      const { points , options  } = line;
      const { count , start , loop , ilen  } = pathVars(points, segment, params);
      const lineMethod = getLineMethod(options);
      let { move =true , reverse  } = params || {};
      let i, point, prev;
      for(i = 0; i <= ilen; ++i){
          point = points[(start + (reverse ? ilen - i : i)) % count];
          if (point.skip) {
              continue;
          } else if (move) {
              ctx.moveTo(point.x, point.y);
              move = false;
          } else {
              lineMethod(ctx, prev, point, reverse, options.stepped);
          }
          prev = point;
      }
      if (loop) {
          point = points[(start + (reverse ? ilen : 0)) % count];
          lineMethod(ctx, prev, point, reverse, options.stepped);
      }
      return !!loop;
  }
   function fastPathSegment(ctx, line, segment, params) {
      const points = line.points;
      const { count , start , ilen  } = pathVars(points, segment, params);
      const { move =true , reverse  } = params || {};
      let avgX = 0;
      let countX = 0;
      let i, point, prevX, minY, maxY, lastY;
      const pointIndex = (index)=>(start + (reverse ? ilen - index : index)) % count;
      const drawX = ()=>{
          if (minY !== maxY) {
              ctx.lineTo(avgX, maxY);
              ctx.lineTo(avgX, minY);
              ctx.lineTo(avgX, lastY);
          }
      };
      if (move) {
          point = points[pointIndex(0)];
          ctx.moveTo(point.x, point.y);
      }
      for(i = 0; i <= ilen; ++i){
          point = points[pointIndex(i)];
          if (point.skip) {
              continue;
          }
          const x = point.x;
          const y = point.y;
          const truncX = x | 0;
          if (truncX === prevX) {
              if (y < minY) {
                  minY = y;
              } else if (y > maxY) {
                  maxY = y;
              }
              avgX = (countX * avgX + x) / ++countX;
          } else {
              drawX();
              ctx.lineTo(x, y);
              prevX = truncX;
              countX = 0;
              minY = maxY = y;
          }
          lastY = y;
      }
      drawX();
  }
   function _getSegmentMethod(line) {
      const opts = line.options;
      const borderDash = opts.borderDash && opts.borderDash.length;
      const useFastPath = !line._decimated && !line._loop && !opts.tension && opts.cubicInterpolationMode !== 'monotone' && !opts.stepped && !borderDash;
      return useFastPath ? fastPathSegment : pathSegment;
  }
   function _getInterpolationMethod(options) {
      if (options.stepped) {
          return _steppedInterpolation;
      }
      if (options.tension || options.cubicInterpolationMode === 'monotone') {
          return _bezierInterpolation;
      }
      return _pointInLine;
  }
  function strokePathWithCache(ctx, line, start, count) {
      let path = line._path;
      if (!path) {
          path = line._path = new Path2D();
          if (line.path(path, start, count)) {
              path.closePath();
          }
      }
      setStyle(ctx, line.options);
      ctx.stroke(path);
  }
  function strokePathDirect(ctx, line, start, count) {
      const { segments , options  } = line;
      const segmentMethod = _getSegmentMethod(line);
      for (const segment of segments){
          setStyle(ctx, options, segment.style);
          ctx.beginPath();
          if (segmentMethod(ctx, line, segment, {
              start,
              end: start + count - 1
          })) {
              ctx.closePath();
          }
          ctx.stroke();
      }
  }
  const usePath2D = typeof Path2D === 'function';
  function draw(ctx, line, start, count) {
      if (usePath2D && !line.options.segment) {
          strokePathWithCache(ctx, line, start, count);
      } else {
          strokePathDirect(ctx, line, start, count);
      }
  }
  class LineElement extends Element$1 {
      static id = 'line';
   static defaults = {
          borderCapStyle: 'butt',
          borderDash: [],
          borderDashOffset: 0,
          borderJoinStyle: 'miter',
          borderWidth: 3,
          capBezierPoints: true,
          cubicInterpolationMode: 'default',
          fill: false,
          spanGaps: false,
          stepped: false,
          tension: 0
      };
   static defaultRoutes = {
          backgroundColor: 'backgroundColor',
          borderColor: 'borderColor'
      };
      static descriptors = {
          _scriptable: true,
          _indexable: (name)=>name !== 'borderDash' && name !== 'fill'
      };
      constructor(cfg){
          super();
          this.animated = true;
          this.options = undefined;
          this._chart = undefined;
          this._loop = undefined;
          this._fullLoop = undefined;
          this._path = undefined;
          this._points = undefined;
          this._segments = undefined;
          this._decimated = false;
          this._pointsUpdated = false;
          this._datasetIndex = undefined;
          if (cfg) {
              Object.assign(this, cfg);
          }
      }
      updateControlPoints(chartArea, indexAxis) {
          const options = this.options;
          if ((options.tension || options.cubicInterpolationMode === 'monotone') && !options.stepped && !this._pointsUpdated) {
              const loop = options.spanGaps ? this._loop : this._fullLoop;
              _updateBezierControlPoints(this._points, options, chartArea, loop, indexAxis);
              this._pointsUpdated = true;
          }
      }
      set points(points) {
          this._points = points;
          delete this._segments;
          delete this._path;
          this._pointsUpdated = false;
      }
      get points() {
          return this._points;
      }
      get segments() {
          return this._segments || (this._segments = _computeSegments(this, this.options.segment));
      }
   first() {
          const segments = this.segments;
          const points = this.points;
          return segments.length && points[segments[0].start];
      }
   last() {
          const segments = this.segments;
          const points = this.points;
          const count = segments.length;
          return count && points[segments[count - 1].end];
      }
   interpolate(point, property) {
          const options = this.options;
          const value = point[property];
          const points = this.points;
          const segments = _boundSegments(this, {
              property,
              start: value,
              end: value
          });
          if (!segments.length) {
              return;
          }
          const result = [];
          const _interpolate = _getInterpolationMethod(options);
          let i, ilen;
          for(i = 0, ilen = segments.length; i < ilen; ++i){
              const { start , end  } = segments[i];
              const p1 = points[start];
              const p2 = points[end];
              if (p1 === p2) {
                  result.push(p1);
                  continue;
              }
              const t = Math.abs((value - p1[property]) / (p2[property] - p1[property]));
              const interpolated = _interpolate(p1, p2, t, options.stepped);
              interpolated[property] = point[property];
              result.push(interpolated);
          }
          return result.length === 1 ? result[0] : result;
      }
   pathSegment(ctx, segment, params) {
          const segmentMethod = _getSegmentMethod(this);
          return segmentMethod(ctx, this, segment, params);
      }
   path(ctx, start, count) {
          const segments = this.segments;
          const segmentMethod = _getSegmentMethod(this);
          let loop = this._loop;
          start = start || 0;
          count = count || this.points.length - start;
          for (const segment of segments){
              loop &= segmentMethod(ctx, this, segment, {
                  start,
                  end: start + count - 1
              });
          }
          return !!loop;
      }
   draw(ctx, chartArea, start, count) {
          const options = this.options || {};
          const points = this.points || [];
          if (points.length && options.borderWidth) {
              ctx.save();
              draw(ctx, this, start, count);
              ctx.restore();
          }
          if (this.animated) {
              this._pointsUpdated = false;
              this._path = undefined;
          }
      }
  }

  function inRange$1(el, pos, axis, useFinalPosition) {
      const options = el.options;
      const { [axis]: value  } = el.getProps([
          axis
      ], useFinalPosition);
      return Math.abs(pos - value) < options.radius + options.hitRadius;
  }
  class PointElement extends Element$1 {
      static id = 'point';
      parsed;
      skip;
      stop;
      /**
     * @type {any}
     */ static defaults = {
          borderWidth: 1,
          hitRadius: 1,
          hoverBorderWidth: 1,
          hoverRadius: 4,
          pointStyle: 'circle',
          radius: 3,
          rotation: 0
      };
      /**
     * @type {any}
     */ static defaultRoutes = {
          backgroundColor: 'backgroundColor',
          borderColor: 'borderColor'
      };
      constructor(cfg){
          super();
          this.options = undefined;
          this.parsed = undefined;
          this.skip = undefined;
          this.stop = undefined;
          if (cfg) {
              Object.assign(this, cfg);
          }
      }
      inRange(mouseX, mouseY, useFinalPosition) {
          const options = this.options;
          const { x , y  } = this.getProps([
              'x',
              'y'
          ], useFinalPosition);
          return Math.pow(mouseX - x, 2) + Math.pow(mouseY - y, 2) < Math.pow(options.hitRadius + options.radius, 2);
      }
      inXRange(mouseX, useFinalPosition) {
          return inRange$1(this, mouseX, 'x', useFinalPosition);
      }
      inYRange(mouseY, useFinalPosition) {
          return inRange$1(this, mouseY, 'y', useFinalPosition);
      }
      getCenterPoint(useFinalPosition) {
          const { x , y  } = this.getProps([
              'x',
              'y'
          ], useFinalPosition);
          return {
              x,
              y
          };
      }
      size(options) {
          options = options || this.options || {};
          let radius = options.radius || 0;
          radius = Math.max(radius, radius && options.hoverRadius || 0);
          const borderWidth = radius && options.borderWidth || 0;
          return (radius + borderWidth) * 2;
      }
      draw(ctx, area) {
          const options = this.options;
          if (this.skip || options.radius < 0.1 || !_isPointInArea(this, area, this.size(options) / 2)) {
              return;
          }
          ctx.strokeStyle = options.borderColor;
          ctx.lineWidth = options.borderWidth;
          ctx.fillStyle = options.backgroundColor;
          drawPoint(ctx, options, this.x, this.y);
      }
      getRange() {
          const options = this.options || {};
          // @ts-expect-error Fallbacks should never be hit in practice
          return options.radius + options.hitRadius;
      }
  }

  function getBarBounds(bar, useFinalPosition) {
      const { x , y , base , width , height  } =  bar.getProps([
          'x',
          'y',
          'base',
          'width',
          'height'
      ], useFinalPosition);
      let left, right, top, bottom, half;
      if (bar.horizontal) {
          half = height / 2;
          left = Math.min(x, base);
          right = Math.max(x, base);
          top = y - half;
          bottom = y + half;
      } else {
          half = width / 2;
          left = x - half;
          right = x + half;
          top = Math.min(y, base);
          bottom = Math.max(y, base);
      }
      return {
          left,
          top,
          right,
          bottom
      };
  }
  function skipOrLimit(skip, value, min, max) {
      return skip ? 0 : _limitValue(value, min, max);
  }
  function parseBorderWidth(bar, maxW, maxH) {
      const value = bar.options.borderWidth;
      const skip = bar.borderSkipped;
      const o = toTRBL(value);
      return {
          t: skipOrLimit(skip.top, o.top, 0, maxH),
          r: skipOrLimit(skip.right, o.right, 0, maxW),
          b: skipOrLimit(skip.bottom, o.bottom, 0, maxH),
          l: skipOrLimit(skip.left, o.left, 0, maxW)
      };
  }
  function parseBorderRadius(bar, maxW, maxH) {
      const { enableBorderRadius  } = bar.getProps([
          'enableBorderRadius'
      ]);
      const value = bar.options.borderRadius;
      const o = toTRBLCorners(value);
      const maxR = Math.min(maxW, maxH);
      const skip = bar.borderSkipped;
      const enableBorder = enableBorderRadius || isObject(value);
      return {
          topLeft: skipOrLimit(!enableBorder || skip.top || skip.left, o.topLeft, 0, maxR),
          topRight: skipOrLimit(!enableBorder || skip.top || skip.right, o.topRight, 0, maxR),
          bottomLeft: skipOrLimit(!enableBorder || skip.bottom || skip.left, o.bottomLeft, 0, maxR),
          bottomRight: skipOrLimit(!enableBorder || skip.bottom || skip.right, o.bottomRight, 0, maxR)
      };
  }
  function boundingRects(bar) {
      const bounds = getBarBounds(bar);
      const width = bounds.right - bounds.left;
      const height = bounds.bottom - bounds.top;
      const border = parseBorderWidth(bar, width / 2, height / 2);
      const radius = parseBorderRadius(bar, width / 2, height / 2);
      return {
          outer: {
              x: bounds.left,
              y: bounds.top,
              w: width,
              h: height,
              radius
          },
          inner: {
              x: bounds.left + border.l,
              y: bounds.top + border.t,
              w: width - border.l - border.r,
              h: height - border.t - border.b,
              radius: {
                  topLeft: Math.max(0, radius.topLeft - Math.max(border.t, border.l)),
                  topRight: Math.max(0, radius.topRight - Math.max(border.t, border.r)),
                  bottomLeft: Math.max(0, radius.bottomLeft - Math.max(border.b, border.l)),
                  bottomRight: Math.max(0, radius.bottomRight - Math.max(border.b, border.r))
              }
          }
      };
  }
  function inRange(bar, x, y, useFinalPosition) {
      const skipX = x === null;
      const skipY = y === null;
      const skipBoth = skipX && skipY;
      const bounds = bar && !skipBoth && getBarBounds(bar, useFinalPosition);
      return bounds && (skipX || _isBetween(x, bounds.left, bounds.right)) && (skipY || _isBetween(y, bounds.top, bounds.bottom));
  }
  function hasRadius(radius) {
      return radius.topLeft || radius.topRight || radius.bottomLeft || radius.bottomRight;
  }
   function addNormalRectPath(ctx, rect) {
      ctx.rect(rect.x, rect.y, rect.w, rect.h);
  }
  function inflateRect(rect, amount, refRect = {}) {
      const x = rect.x !== refRect.x ? -amount : 0;
      const y = rect.y !== refRect.y ? -amount : 0;
      const w = (rect.x + rect.w !== refRect.x + refRect.w ? amount : 0) - x;
      const h = (rect.y + rect.h !== refRect.y + refRect.h ? amount : 0) - y;
      return {
          x: rect.x + x,
          y: rect.y + y,
          w: rect.w + w,
          h: rect.h + h,
          radius: rect.radius
      };
  }
  class BarElement extends Element$1 {
      static id = 'bar';
   static defaults = {
          borderSkipped: 'start',
          borderWidth: 0,
          borderRadius: 0,
          inflateAmount: 'auto',
          pointStyle: undefined
      };
   static defaultRoutes = {
          backgroundColor: 'backgroundColor',
          borderColor: 'borderColor'
      };
      constructor(cfg){
          super();
          this.options = undefined;
          this.horizontal = undefined;
          this.base = undefined;
          this.width = undefined;
          this.height = undefined;
          this.inflateAmount = undefined;
          if (cfg) {
              Object.assign(this, cfg);
          }
      }
      draw(ctx) {
          const { inflateAmount , options: { borderColor , backgroundColor  }  } = this;
          const { inner , outer  } = boundingRects(this);
          const addRectPath = hasRadius(outer.radius) ? addRoundedRectPath : addNormalRectPath;
          ctx.save();
          if (outer.w !== inner.w || outer.h !== inner.h) {
              ctx.beginPath();
              addRectPath(ctx, inflateRect(outer, inflateAmount, inner));
              ctx.clip();
              addRectPath(ctx, inflateRect(inner, -inflateAmount, outer));
              ctx.fillStyle = borderColor;
              ctx.fill('evenodd');
          }
          ctx.beginPath();
          addRectPath(ctx, inflateRect(inner, inflateAmount));
          ctx.fillStyle = backgroundColor;
          ctx.fill();
          ctx.restore();
      }
      inRange(mouseX, mouseY, useFinalPosition) {
          return inRange(this, mouseX, mouseY, useFinalPosition);
      }
      inXRange(mouseX, useFinalPosition) {
          return inRange(this, mouseX, null, useFinalPosition);
      }
      inYRange(mouseY, useFinalPosition) {
          return inRange(this, null, mouseY, useFinalPosition);
      }
      getCenterPoint(useFinalPosition) {
          const { x , y , base , horizontal  } =  this.getProps([
              'x',
              'y',
              'base',
              'horizontal'
          ], useFinalPosition);
          return {
              x: horizontal ? (x + base) / 2 : x,
              y: horizontal ? y : (y + base) / 2
          };
      }
      getRange(axis) {
          return axis === 'x' ? this.width / 2 : this.height / 2;
      }
  }

  var elements = /*#__PURE__*/Object.freeze({
  __proto__: null,
  ArcElement: ArcElement,
  BarElement: BarElement,
  LineElement: LineElement,
  PointElement: PointElement
  });

  const BORDER_COLORS = [
      'rgb(54, 162, 235)',
      'rgb(255, 99, 132)',
      'rgb(255, 159, 64)',
      'rgb(255, 205, 86)',
      'rgb(75, 192, 192)',
      'rgb(153, 102, 255)',
      'rgb(201, 203, 207)' // grey
  ];
  // Border colors with 50% transparency
  const BACKGROUND_COLORS = /* #__PURE__ */ BORDER_COLORS.map((color)=>color.replace('rgb(', 'rgba(').replace(')', ', 0.5)'));
  function getBorderColor(i) {
      return BORDER_COLORS[i % BORDER_COLORS.length];
  }
  function getBackgroundColor(i) {
      return BACKGROUND_COLORS[i % BACKGROUND_COLORS.length];
  }
  function colorizeDefaultDataset(dataset, i) {
      dataset.borderColor = getBorderColor(i);
      dataset.backgroundColor = getBackgroundColor(i);
      return ++i;
  }
  function colorizeDoughnutDataset(dataset, i) {
      dataset.backgroundColor = dataset.data.map(()=>getBorderColor(i++));
      return i;
  }
  function colorizePolarAreaDataset(dataset, i) {
      dataset.backgroundColor = dataset.data.map(()=>getBackgroundColor(i++));
      return i;
  }
  function getColorizer(chart) {
      let i = 0;
      return (dataset, datasetIndex)=>{
          const controller = chart.getDatasetMeta(datasetIndex).controller;
          if (controller instanceof DoughnutController) {
              i = colorizeDoughnutDataset(dataset, i);
          } else if (controller instanceof PolarAreaController) {
              i = colorizePolarAreaDataset(dataset, i);
          } else if (controller) {
              i = colorizeDefaultDataset(dataset, i);
          }
      };
  }
  function containsColorsDefinitions(descriptors) {
      let k;
      for(k in descriptors){
          if (descriptors[k].borderColor || descriptors[k].backgroundColor) {
              return true;
          }
      }
      return false;
  }
  function containsColorsDefinition(descriptor) {
      return descriptor && (descriptor.borderColor || descriptor.backgroundColor);
  }
  var plugin_colors = {
      id: 'colors',
      defaults: {
          enabled: true,
          forceOverride: false
      },
      beforeLayout (chart, _args, options) {
          if (!options.enabled) {
              return;
          }
          const { data: { datasets  } , options: chartOptions  } = chart.config;
          const { elements  } = chartOptions;
          if (!options.forceOverride && (containsColorsDefinitions(datasets) || containsColorsDefinition(chartOptions) || elements && containsColorsDefinitions(elements))) {
              return;
          }
          const colorizer = getColorizer(chart);
          datasets.forEach(colorizer);
      }
  };

  function lttbDecimation(data, start, count, availableWidth, options) {
   const samples = options.samples || availableWidth;
      if (samples >= count) {
          return data.slice(start, start + count);
      }
      const decimated = [];
      const bucketWidth = (count - 2) / (samples - 2);
      let sampledIndex = 0;
      const endIndex = start + count - 1;
      let a = start;
      let i, maxAreaPoint, maxArea, area, nextA;
      decimated[sampledIndex++] = data[a];
      for(i = 0; i < samples - 2; i++){
          let avgX = 0;
          let avgY = 0;
          let j;
          const avgRangeStart = Math.floor((i + 1) * bucketWidth) + 1 + start;
          const avgRangeEnd = Math.min(Math.floor((i + 2) * bucketWidth) + 1, count) + start;
          const avgRangeLength = avgRangeEnd - avgRangeStart;
          for(j = avgRangeStart; j < avgRangeEnd; j++){
              avgX += data[j].x;
              avgY += data[j].y;
          }
          avgX /= avgRangeLength;
          avgY /= avgRangeLength;
          const rangeOffs = Math.floor(i * bucketWidth) + 1 + start;
          const rangeTo = Math.min(Math.floor((i + 1) * bucketWidth) + 1, count) + start;
          const { x: pointAx , y: pointAy  } = data[a];
          maxArea = area = -1;
          for(j = rangeOffs; j < rangeTo; j++){
              area = 0.5 * Math.abs((pointAx - avgX) * (data[j].y - pointAy) - (pointAx - data[j].x) * (avgY - pointAy));
              if (area > maxArea) {
                  maxArea = area;
                  maxAreaPoint = data[j];
                  nextA = j;
              }
          }
          decimated[sampledIndex++] = maxAreaPoint;
          a = nextA;
      }
      decimated[sampledIndex++] = data[endIndex];
      return decimated;
  }
  function minMaxDecimation(data, start, count, availableWidth) {
      let avgX = 0;
      let countX = 0;
      let i, point, x, y, prevX, minIndex, maxIndex, startIndex, minY, maxY;
      const decimated = [];
      const endIndex = start + count - 1;
      const xMin = data[start].x;
      const xMax = data[endIndex].x;
      const dx = xMax - xMin;
      for(i = start; i < start + count; ++i){
          point = data[i];
          x = (point.x - xMin) / dx * availableWidth;
          y = point.y;
          const truncX = x | 0;
          if (truncX === prevX) {
              if (y < minY) {
                  minY = y;
                  minIndex = i;
              } else if (y > maxY) {
                  maxY = y;
                  maxIndex = i;
              }
              avgX = (countX * avgX + point.x) / ++countX;
          } else {
              const lastIndex = i - 1;
              if (!isNullOrUndef(minIndex) && !isNullOrUndef(maxIndex)) {
                  const intermediateIndex1 = Math.min(minIndex, maxIndex);
                  const intermediateIndex2 = Math.max(minIndex, maxIndex);
                  if (intermediateIndex1 !== startIndex && intermediateIndex1 !== lastIndex) {
                      decimated.push({
                          ...data[intermediateIndex1],
                          x: avgX
                      });
                  }
                  if (intermediateIndex2 !== startIndex && intermediateIndex2 !== lastIndex) {
                      decimated.push({
                          ...data[intermediateIndex2],
                          x: avgX
                      });
                  }
              }
              if (i > 0 && lastIndex !== startIndex) {
                  decimated.push(data[lastIndex]);
              }
              decimated.push(point);
              prevX = truncX;
              countX = 0;
              minY = maxY = y;
              minIndex = maxIndex = startIndex = i;
          }
      }
      return decimated;
  }
  function cleanDecimatedDataset(dataset) {
      if (dataset._decimated) {
          const data = dataset._data;
          delete dataset._decimated;
          delete dataset._data;
          Object.defineProperty(dataset, 'data', {
              configurable: true,
              enumerable: true,
              writable: true,
              value: data
          });
      }
  }
  function cleanDecimatedData(chart) {
      chart.data.datasets.forEach((dataset)=>{
          cleanDecimatedDataset(dataset);
      });
  }
  function getStartAndCountOfVisiblePointsSimplified(meta, points) {
      const pointCount = points.length;
      let start = 0;
      let count;
      const { iScale  } = meta;
      const { min , max , minDefined , maxDefined  } = iScale.getUserBounds();
      if (minDefined) {
          start = _limitValue(_lookupByKey(points, iScale.axis, min).lo, 0, pointCount - 1);
      }
      if (maxDefined) {
          count = _limitValue(_lookupByKey(points, iScale.axis, max).hi + 1, start, pointCount) - start;
      } else {
          count = pointCount - start;
      }
      return {
          start,
          count
      };
  }
  var plugin_decimation = {
      id: 'decimation',
      defaults: {
          algorithm: 'min-max',
          enabled: false
      },
      beforeElementsUpdate: (chart, args, options)=>{
          if (!options.enabled) {
              cleanDecimatedData(chart);
              return;
          }
          const availableWidth = chart.width;
          chart.data.datasets.forEach((dataset, datasetIndex)=>{
              const { _data , indexAxis  } = dataset;
              const meta = chart.getDatasetMeta(datasetIndex);
              const data = _data || dataset.data;
              if (resolve([
                  indexAxis,
                  chart.options.indexAxis
              ]) === 'y') {
                  return;
              }
              if (!meta.controller.supportsDecimation) {
                  return;
              }
              const xAxis = chart.scales[meta.xAxisID];
              if (xAxis.type !== 'linear' && xAxis.type !== 'time') {
                  return;
              }
              if (chart.options.parsing) {
                  return;
              }
              let { start , count  } = getStartAndCountOfVisiblePointsSimplified(meta, data);
              const threshold = options.threshold || 4 * availableWidth;
              if (count <= threshold) {
                  cleanDecimatedDataset(dataset);
                  return;
              }
              if (isNullOrUndef(_data)) {
                  dataset._data = data;
                  delete dataset.data;
                  Object.defineProperty(dataset, 'data', {
                      configurable: true,
                      enumerable: true,
                      get: function() {
                          return this._decimated;
                      },
                      set: function(d) {
                          this._data = d;
                      }
                  });
              }
              let decimated;
              switch(options.algorithm){
                  case 'lttb':
                      decimated = lttbDecimation(data, start, count, availableWidth, options);
                      break;
                  case 'min-max':
                      decimated = minMaxDecimation(data, start, count, availableWidth);
                      break;
                  default:
                      throw new Error(`Unsupported decimation algorithm '${options.algorithm}'`);
              }
              dataset._decimated = decimated;
          });
      },
      destroy (chart) {
          cleanDecimatedData(chart);
      }
  };

  function _segments(line, target, property) {
      const segments = line.segments;
      const points = line.points;
      const tpoints = target.points;
      const parts = [];
      for (const segment of segments){
          let { start , end  } = segment;
          end = _findSegmentEnd(start, end, points);
          const bounds = _getBounds(property, points[start], points[end], segment.loop);
          if (!target.segments) {
              parts.push({
                  source: segment,
                  target: bounds,
                  start: points[start],
                  end: points[end]
              });
              continue;
          }
          const targetSegments = _boundSegments(target, bounds);
          for (const tgt of targetSegments){
              const subBounds = _getBounds(property, tpoints[tgt.start], tpoints[tgt.end], tgt.loop);
              const fillSources = _boundSegment(segment, points, subBounds);
              for (const fillSource of fillSources){
                  parts.push({
                      source: fillSource,
                      target: tgt,
                      start: {
                          [property]: _getEdge(bounds, subBounds, 'start', Math.max)
                      },
                      end: {
                          [property]: _getEdge(bounds, subBounds, 'end', Math.min)
                      }
                  });
              }
          }
      }
      return parts;
  }
  function _getBounds(property, first, last, loop) {
      if (loop) {
          return;
      }
      let start = first[property];
      let end = last[property];
      if (property === 'angle') {
          start = _normalizeAngle(start);
          end = _normalizeAngle(end);
      }
      return {
          property,
          start,
          end
      };
  }
  function _pointsFromSegments(boundary, line) {
      const { x =null , y =null  } = boundary || {};
      const linePoints = line.points;
      const points = [];
      line.segments.forEach(({ start , end  })=>{
          end = _findSegmentEnd(start, end, linePoints);
          const first = linePoints[start];
          const last = linePoints[end];
          if (y !== null) {
              points.push({
                  x: first.x,
                  y
              });
              points.push({
                  x: last.x,
                  y
              });
          } else if (x !== null) {
              points.push({
                  x,
                  y: first.y
              });
              points.push({
                  x,
                  y: last.y
              });
          }
      });
      return points;
  }
  function _findSegmentEnd(start, end, points) {
      for(; end > start; end--){
          const point = points[end];
          if (!isNaN(point.x) && !isNaN(point.y)) {
              break;
          }
      }
      return end;
  }
  function _getEdge(a, b, prop, fn) {
      if (a && b) {
          return fn(a[prop], b[prop]);
      }
      return a ? a[prop] : b ? b[prop] : 0;
  }

  function _createBoundaryLine(boundary, line) {
      let points = [];
      let _loop = false;
      if (isArray(boundary)) {
          _loop = true;
          points = boundary;
      } else {
          points = _pointsFromSegments(boundary, line);
      }
      return points.length ? new LineElement({
          points,
          options: {
              tension: 0
          },
          _loop,
          _fullLoop: _loop
      }) : null;
  }
  function _shouldApplyFill(source) {
      return source && source.fill !== false;
  }

  function _resolveTarget(sources, index, propagate) {
      const source = sources[index];
      let fill = source.fill;
      const visited = [
          index
      ];
      let target;
      if (!propagate) {
          return fill;
      }
      while(fill !== false && visited.indexOf(fill) === -1){
          if (!isNumberFinite(fill)) {
              return fill;
          }
          target = sources[fill];
          if (!target) {
              return false;
          }
          if (target.visible) {
              return fill;
          }
          visited.push(fill);
          fill = target.fill;
      }
      return false;
  }
   function _decodeFill(line, index, count) {
       const fill = parseFillOption(line);
      if (isObject(fill)) {
          return isNaN(fill.value) ? false : fill;
      }
      let target = parseFloat(fill);
      if (isNumberFinite(target) && Math.floor(target) === target) {
          return decodeTargetIndex(fill[0], index, target, count);
      }
      return [
          'origin',
          'start',
          'end',
          'stack',
          'shape'
      ].indexOf(fill) >= 0 && fill;
  }
  function decodeTargetIndex(firstCh, index, target, count) {
      if (firstCh === '-' || firstCh === '+') {
          target = index + target;
      }
      if (target === index || target < 0 || target >= count) {
          return false;
      }
      return target;
  }
   function _getTargetPixel(fill, scale) {
      let pixel = null;
      if (fill === 'start') {
          pixel = scale.bottom;
      } else if (fill === 'end') {
          pixel = scale.top;
      } else if (isObject(fill)) {
          pixel = scale.getPixelForValue(fill.value);
      } else if (scale.getBasePixel) {
          pixel = scale.getBasePixel();
      }
      return pixel;
  }
   function _getTargetValue(fill, scale, startValue) {
      let value;
      if (fill === 'start') {
          value = startValue;
      } else if (fill === 'end') {
          value = scale.options.reverse ? scale.min : scale.max;
      } else if (isObject(fill)) {
          value = fill.value;
      } else {
          value = scale.getBaseValue();
      }
      return value;
  }
   function parseFillOption(line) {
      const options = line.options;
      const fillOption = options.fill;
      let fill = valueOrDefault(fillOption && fillOption.target, fillOption);
      if (fill === undefined) {
          fill = !!options.backgroundColor;
      }
      if (fill === false || fill === null) {
          return false;
      }
      if (fill === true) {
          return 'origin';
      }
      return fill;
  }

  function _buildStackLine(source) {
      const { scale , index , line  } = source;
      const points = [];
      const segments = line.segments;
      const sourcePoints = line.points;
      const linesBelow = getLinesBelow(scale, index);
      linesBelow.push(_createBoundaryLine({
          x: null,
          y: scale.bottom
      }, line));
      for(let i = 0; i < segments.length; i++){
          const segment = segments[i];
          for(let j = segment.start; j <= segment.end; j++){
              addPointsBelow(points, sourcePoints[j], linesBelow);
          }
      }
      return new LineElement({
          points,
          options: {}
      });
  }
   function getLinesBelow(scale, index) {
      const below = [];
      const metas = scale.getMatchingVisibleMetas('line');
      for(let i = 0; i < metas.length; i++){
          const meta = metas[i];
          if (meta.index === index) {
              break;
          }
          if (!meta.hidden) {
              below.unshift(meta.dataset);
          }
      }
      return below;
  }
   function addPointsBelow(points, sourcePoint, linesBelow) {
      const postponed = [];
      for(let j = 0; j < linesBelow.length; j++){
          const line = linesBelow[j];
          const { first , last , point  } = findPoint(line, sourcePoint, 'x');
          if (!point || first && last) {
              continue;
          }
          if (first) {
              postponed.unshift(point);
          } else {
              points.push(point);
              if (!last) {
                  break;
              }
          }
      }
      points.push(...postponed);
  }
   function findPoint(line, sourcePoint, property) {
      const point = line.interpolate(sourcePoint, property);
      if (!point) {
          return {};
      }
      const pointValue = point[property];
      const segments = line.segments;
      const linePoints = line.points;
      let first = false;
      let last = false;
      for(let i = 0; i < segments.length; i++){
          const segment = segments[i];
          const firstValue = linePoints[segment.start][property];
          const lastValue = linePoints[segment.end][property];
          if (_isBetween(pointValue, firstValue, lastValue)) {
              first = pointValue === firstValue;
              last = pointValue === lastValue;
              break;
          }
      }
      return {
          first,
          last,
          point
      };
  }

  class simpleArc {
      constructor(opts){
          this.x = opts.x;
          this.y = opts.y;
          this.radius = opts.radius;
      }
      pathSegment(ctx, bounds, opts) {
          const { x , y , radius  } = this;
          bounds = bounds || {
              start: 0,
              end: TAU
          };
          ctx.arc(x, y, radius, bounds.end, bounds.start, true);
          return !opts.bounds;
      }
      interpolate(point) {
          const { x , y , radius  } = this;
          const angle = point.angle;
          return {
              x: x + Math.cos(angle) * radius,
              y: y + Math.sin(angle) * radius,
              angle
          };
      }
  }

  function _getTarget(source) {
      const { chart , fill , line  } = source;
      if (isNumberFinite(fill)) {
          return getLineByIndex(chart, fill);
      }
      if (fill === 'stack') {
          return _buildStackLine(source);
      }
      if (fill === 'shape') {
          return true;
      }
      const boundary = computeBoundary(source);
      if (boundary instanceof simpleArc) {
          return boundary;
      }
      return _createBoundaryLine(boundary, line);
  }
   function getLineByIndex(chart, index) {
      const meta = chart.getDatasetMeta(index);
      const visible = meta && chart.isDatasetVisible(index);
      return visible ? meta.dataset : null;
  }
  function computeBoundary(source) {
      const scale = source.scale || {};
      if (scale.getPointPositionForValue) {
          return computeCircularBoundary(source);
      }
      return computeLinearBoundary(source);
  }
  function computeLinearBoundary(source) {
      const { scale ={} , fill  } = source;
      const pixel = _getTargetPixel(fill, scale);
      if (isNumberFinite(pixel)) {
          const horizontal = scale.isHorizontal();
          return {
              x: horizontal ? pixel : null,
              y: horizontal ? null : pixel
          };
      }
      return null;
  }
  function computeCircularBoundary(source) {
      const { scale , fill  } = source;
      const options = scale.options;
      const length = scale.getLabels().length;
      const start = options.reverse ? scale.max : scale.min;
      const value = _getTargetValue(fill, scale, start);
      const target = [];
      if (options.grid.circular) {
          const center = scale.getPointPositionForValue(0, start);
          return new simpleArc({
              x: center.x,
              y: center.y,
              radius: scale.getDistanceFromCenterForValue(value)
          });
      }
      for(let i = 0; i < length; ++i){
          target.push(scale.getPointPositionForValue(i, value));
      }
      return target;
  }

  function _drawfill(ctx, source, area) {
      const target = _getTarget(source);
      const { line , scale , axis  } = source;
      const lineOpts = line.options;
      const fillOption = lineOpts.fill;
      const color = lineOpts.backgroundColor;
      const { above =color , below =color  } = fillOption || {};
      if (target && line.points.length) {
          clipArea(ctx, area);
          doFill(ctx, {
              line,
              target,
              above,
              below,
              area,
              scale,
              axis
          });
          unclipArea(ctx);
      }
  }
  function doFill(ctx, cfg) {
      const { line , target , above , below , area , scale  } = cfg;
      const property = line._loop ? 'angle' : cfg.axis;
      ctx.save();
      if (property === 'x' && below !== above) {
          clipVertical(ctx, target, area.top);
          fill(ctx, {
              line,
              target,
              color: above,
              scale,
              property
          });
          ctx.restore();
          ctx.save();
          clipVertical(ctx, target, area.bottom);
      }
      fill(ctx, {
          line,
          target,
          color: below,
          scale,
          property
      });
      ctx.restore();
  }
  function clipVertical(ctx, target, clipY) {
      const { segments , points  } = target;
      let first = true;
      let lineLoop = false;
      ctx.beginPath();
      for (const segment of segments){
          const { start , end  } = segment;
          const firstPoint = points[start];
          const lastPoint = points[_findSegmentEnd(start, end, points)];
          if (first) {
              ctx.moveTo(firstPoint.x, firstPoint.y);
              first = false;
          } else {
              ctx.lineTo(firstPoint.x, clipY);
              ctx.lineTo(firstPoint.x, firstPoint.y);
          }
          lineLoop = !!target.pathSegment(ctx, segment, {
              move: lineLoop
          });
          if (lineLoop) {
              ctx.closePath();
          } else {
              ctx.lineTo(lastPoint.x, clipY);
          }
      }
      ctx.lineTo(target.first().x, clipY);
      ctx.closePath();
      ctx.clip();
  }
  function fill(ctx, cfg) {
      const { line , target , property , color , scale  } = cfg;
      const segments = _segments(line, target, property);
      for (const { source: src , target: tgt , start , end  } of segments){
          const { style: { backgroundColor =color  } = {}  } = src;
          const notShape = target !== true;
          ctx.save();
          ctx.fillStyle = backgroundColor;
          clipBounds(ctx, scale, notShape && _getBounds(property, start, end));
          ctx.beginPath();
          const lineLoop = !!line.pathSegment(ctx, src);
          let loop;
          if (notShape) {
              if (lineLoop) {
                  ctx.closePath();
              } else {
                  interpolatedLineTo(ctx, target, end, property);
              }
              const targetLoop = !!target.pathSegment(ctx, tgt, {
                  move: lineLoop,
                  reverse: true
              });
              loop = lineLoop && targetLoop;
              if (!loop) {
                  interpolatedLineTo(ctx, target, start, property);
              }
          }
          ctx.closePath();
          ctx.fill(loop ? 'evenodd' : 'nonzero');
          ctx.restore();
      }
  }
  function clipBounds(ctx, scale, bounds) {
      const { top , bottom  } = scale.chart.chartArea;
      const { property , start , end  } = bounds || {};
      if (property === 'x') {
          ctx.beginPath();
          ctx.rect(start, top, end - start, bottom - top);
          ctx.clip();
      }
  }
  function interpolatedLineTo(ctx, target, point, property) {
      const interpolatedPoint = target.interpolate(point, property);
      if (interpolatedPoint) {
          ctx.lineTo(interpolatedPoint.x, interpolatedPoint.y);
      }
  }

  var index$1 = {
      id: 'filler',
      afterDatasetsUpdate (chart, _args, options) {
          const count = (chart.data.datasets || []).length;
          const sources = [];
          let meta, i, line, source;
          for(i = 0; i < count; ++i){
              meta = chart.getDatasetMeta(i);
              line = meta.dataset;
              source = null;
              if (line && line.options && line instanceof LineElement) {
                  source = {
                      visible: chart.isDatasetVisible(i),
                      index: i,
                      fill: _decodeFill(line, i, count),
                      chart,
                      axis: meta.controller.options.indexAxis,
                      scale: meta.vScale,
                      line
                  };
              }
              meta.$filler = source;
              sources.push(source);
          }
          for(i = 0; i < count; ++i){
              source = sources[i];
              if (!source || source.fill === false) {
                  continue;
              }
              source.fill = _resolveTarget(sources, i, options.propagate);
          }
      },
      beforeDraw (chart, _args, options) {
          const draw = options.drawTime === 'beforeDraw';
          const metasets = chart.getSortedVisibleDatasetMetas();
          const area = chart.chartArea;
          for(let i = metasets.length - 1; i >= 0; --i){
              const source = metasets[i].$filler;
              if (!source) {
                  continue;
              }
              source.line.updateControlPoints(area, source.axis);
              if (draw && source.fill) {
                  _drawfill(chart.ctx, source, area);
              }
          }
      },
      beforeDatasetsDraw (chart, _args, options) {
          if (options.drawTime !== 'beforeDatasetsDraw') {
              return;
          }
          const metasets = chart.getSortedVisibleDatasetMetas();
          for(let i = metasets.length - 1; i >= 0; --i){
              const source = metasets[i].$filler;
              if (_shouldApplyFill(source)) {
                  _drawfill(chart.ctx, source, chart.chartArea);
              }
          }
      },
      beforeDatasetDraw (chart, args, options) {
          const source = args.meta.$filler;
          if (!_shouldApplyFill(source) || options.drawTime !== 'beforeDatasetDraw') {
              return;
          }
          _drawfill(chart.ctx, source, chart.chartArea);
      },
      defaults: {
          propagate: true,
          drawTime: 'beforeDatasetDraw'
      }
  };

  const getBoxSize = (labelOpts, fontSize)=>{
      let { boxHeight =fontSize , boxWidth =fontSize  } = labelOpts;
      if (labelOpts.usePointStyle) {
          boxHeight = Math.min(boxHeight, fontSize);
          boxWidth = labelOpts.pointStyleWidth || Math.min(boxWidth, fontSize);
      }
      return {
          boxWidth,
          boxHeight,
          itemHeight: Math.max(fontSize, boxHeight)
      };
  };
  const itemsEqual = (a, b)=>a !== null && b !== null && a.datasetIndex === b.datasetIndex && a.index === b.index;
  class Legend extends Element$1 {
   constructor(config){
          super();
          this._added = false;
          this.legendHitBoxes = [];
   this._hoveredItem = null;
          this.doughnutMode = false;
          this.chart = config.chart;
          this.options = config.options;
          this.ctx = config.ctx;
          this.legendItems = undefined;
          this.columnSizes = undefined;
          this.lineWidths = undefined;
          this.maxHeight = undefined;
          this.maxWidth = undefined;
          this.top = undefined;
          this.bottom = undefined;
          this.left = undefined;
          this.right = undefined;
          this.height = undefined;
          this.width = undefined;
          this._margins = undefined;
          this.position = undefined;
          this.weight = undefined;
          this.fullSize = undefined;
      }
      update(maxWidth, maxHeight, margins) {
          this.maxWidth = maxWidth;
          this.maxHeight = maxHeight;
          this._margins = margins;
          this.setDimensions();
          this.buildLabels();
          this.fit();
      }
      setDimensions() {
          if (this.isHorizontal()) {
              this.width = this.maxWidth;
              this.left = this._margins.left;
              this.right = this.width;
          } else {
              this.height = this.maxHeight;
              this.top = this._margins.top;
              this.bottom = this.height;
          }
      }
      buildLabels() {
          const labelOpts = this.options.labels || {};
          let legendItems = callback(labelOpts.generateLabels, [
              this.chart
          ], this) || [];
          if (labelOpts.filter) {
              legendItems = legendItems.filter((item)=>labelOpts.filter(item, this.chart.data));
          }
          if (labelOpts.sort) {
              legendItems = legendItems.sort((a, b)=>labelOpts.sort(a, b, this.chart.data));
          }
          if (this.options.reverse) {
              legendItems.reverse();
          }
          this.legendItems = legendItems;
      }
      fit() {
          const { options , ctx  } = this;
          if (!options.display) {
              this.width = this.height = 0;
              return;
          }
          const labelOpts = options.labels;
          const labelFont = toFont(labelOpts.font);
          const fontSize = labelFont.size;
          const titleHeight = this._computeTitleHeight();
          const { boxWidth , itemHeight  } = getBoxSize(labelOpts, fontSize);
          let width, height;
          ctx.font = labelFont.string;
          if (this.isHorizontal()) {
              width = this.maxWidth;
              height = this._fitRows(titleHeight, fontSize, boxWidth, itemHeight) + 10;
          } else {
              height = this.maxHeight;
              width = this._fitCols(titleHeight, labelFont, boxWidth, itemHeight) + 10;
          }
          this.width = Math.min(width, options.maxWidth || this.maxWidth);
          this.height = Math.min(height, options.maxHeight || this.maxHeight);
      }
   _fitRows(titleHeight, fontSize, boxWidth, itemHeight) {
          const { ctx , maxWidth , options: { labels: { padding  }  }  } = this;
          const hitboxes = this.legendHitBoxes = [];
          const lineWidths = this.lineWidths = [
              0
          ];
          const lineHeight = itemHeight + padding;
          let totalHeight = titleHeight;
          ctx.textAlign = 'left';
          ctx.textBaseline = 'middle';
          let row = -1;
          let top = -lineHeight;
          this.legendItems.forEach((legendItem, i)=>{
              const itemWidth = boxWidth + fontSize / 2 + ctx.measureText(legendItem.text).width;
              if (i === 0 || lineWidths[lineWidths.length - 1] + itemWidth + 2 * padding > maxWidth) {
                  totalHeight += lineHeight;
                  lineWidths[lineWidths.length - (i > 0 ? 0 : 1)] = 0;
                  top += lineHeight;
                  row++;
              }
              hitboxes[i] = {
                  left: 0,
                  top,
                  row,
                  width: itemWidth,
                  height: itemHeight
              };
              lineWidths[lineWidths.length - 1] += itemWidth + padding;
          });
          return totalHeight;
      }
      _fitCols(titleHeight, labelFont, boxWidth, _itemHeight) {
          const { ctx , maxHeight , options: { labels: { padding  }  }  } = this;
          const hitboxes = this.legendHitBoxes = [];
          const columnSizes = this.columnSizes = [];
          const heightLimit = maxHeight - titleHeight;
          let totalWidth = padding;
          let currentColWidth = 0;
          let currentColHeight = 0;
          let left = 0;
          let col = 0;
          this.legendItems.forEach((legendItem, i)=>{
              const { itemWidth , itemHeight  } = calculateItemSize(boxWidth, labelFont, ctx, legendItem, _itemHeight);
              if (i > 0 && currentColHeight + itemHeight + 2 * padding > heightLimit) {
                  totalWidth += currentColWidth + padding;
                  columnSizes.push({
                      width: currentColWidth,
                      height: currentColHeight
                  });
                  left += currentColWidth + padding;
                  col++;
                  currentColWidth = currentColHeight = 0;
              }
              hitboxes[i] = {
                  left,
                  top: currentColHeight,
                  col,
                  width: itemWidth,
                  height: itemHeight
              };
              currentColWidth = Math.max(currentColWidth, itemWidth);
              currentColHeight += itemHeight + padding;
          });
          totalWidth += currentColWidth;
          columnSizes.push({
              width: currentColWidth,
              height: currentColHeight
          });
          return totalWidth;
      }
      adjustHitBoxes() {
          if (!this.options.display) {
              return;
          }
          const titleHeight = this._computeTitleHeight();
          const { legendHitBoxes: hitboxes , options: { align , labels: { padding  } , rtl  }  } = this;
          const rtlHelper = getRtlAdapter(rtl, this.left, this.width);
          if (this.isHorizontal()) {
              let row = 0;
              let left = _alignStartEnd(align, this.left + padding, this.right - this.lineWidths[row]);
              for (const hitbox of hitboxes){
                  if (row !== hitbox.row) {
                      row = hitbox.row;
                      left = _alignStartEnd(align, this.left + padding, this.right - this.lineWidths[row]);
                  }
                  hitbox.top += this.top + titleHeight + padding;
                  hitbox.left = rtlHelper.leftForLtr(rtlHelper.x(left), hitbox.width);
                  left += hitbox.width + padding;
              }
          } else {
              let col = 0;
              let top = _alignStartEnd(align, this.top + titleHeight + padding, this.bottom - this.columnSizes[col].height);
              for (const hitbox of hitboxes){
                  if (hitbox.col !== col) {
                      col = hitbox.col;
                      top = _alignStartEnd(align, this.top + titleHeight + padding, this.bottom - this.columnSizes[col].height);
                  }
                  hitbox.top = top;
                  hitbox.left += this.left + padding;
                  hitbox.left = rtlHelper.leftForLtr(rtlHelper.x(hitbox.left), hitbox.width);
                  top += hitbox.height + padding;
              }
          }
      }
      isHorizontal() {
          return this.options.position === 'top' || this.options.position === 'bottom';
      }
      draw() {
          if (this.options.display) {
              const ctx = this.ctx;
              clipArea(ctx, this);
              this._draw();
              unclipArea(ctx);
          }
      }
   _draw() {
          const { options: opts , columnSizes , lineWidths , ctx  } = this;
          const { align , labels: labelOpts  } = opts;
          const defaultColor = defaults$1.color;
          const rtlHelper = getRtlAdapter(opts.rtl, this.left, this.width);
          const labelFont = toFont(labelOpts.font);
          const { padding  } = labelOpts;
          const fontSize = labelFont.size;
          const halfFontSize = fontSize / 2;
          let cursor;
          this.drawTitle();
          ctx.textAlign = rtlHelper.textAlign('left');
          ctx.textBaseline = 'middle';
          ctx.lineWidth = 0.5;
          ctx.font = labelFont.string;
          const { boxWidth , boxHeight , itemHeight  } = getBoxSize(labelOpts, fontSize);
          const drawLegendBox = function(x, y, legendItem) {
              if (isNaN(boxWidth) || boxWidth <= 0 || isNaN(boxHeight) || boxHeight < 0) {
                  return;
              }
              ctx.save();
              const lineWidth = valueOrDefault(legendItem.lineWidth, 1);
              ctx.fillStyle = valueOrDefault(legendItem.fillStyle, defaultColor);
              ctx.lineCap = valueOrDefault(legendItem.lineCap, 'butt');
              ctx.lineDashOffset = valueOrDefault(legendItem.lineDashOffset, 0);
              ctx.lineJoin = valueOrDefault(legendItem.lineJoin, 'miter');
              ctx.lineWidth = lineWidth;
              ctx.strokeStyle = valueOrDefault(legendItem.strokeStyle, defaultColor);
              ctx.setLineDash(valueOrDefault(legendItem.lineDash, []));
              if (labelOpts.usePointStyle) {
                  const drawOptions = {
                      radius: boxHeight * Math.SQRT2 / 2,
                      pointStyle: legendItem.pointStyle,
                      rotation: legendItem.rotation,
                      borderWidth: lineWidth
                  };
                  const centerX = rtlHelper.xPlus(x, boxWidth / 2);
                  const centerY = y + halfFontSize;
                  drawPointLegend(ctx, drawOptions, centerX, centerY, labelOpts.pointStyleWidth && boxWidth);
              } else {
                  const yBoxTop = y + Math.max((fontSize - boxHeight) / 2, 0);
                  const xBoxLeft = rtlHelper.leftForLtr(x, boxWidth);
                  const borderRadius = toTRBLCorners(legendItem.borderRadius);
                  ctx.beginPath();
                  if (Object.values(borderRadius).some((v)=>v !== 0)) {
                      addRoundedRectPath(ctx, {
                          x: xBoxLeft,
                          y: yBoxTop,
                          w: boxWidth,
                          h: boxHeight,
                          radius: borderRadius
                      });
                  } else {
                      ctx.rect(xBoxLeft, yBoxTop, boxWidth, boxHeight);
                  }
                  ctx.fill();
                  if (lineWidth !== 0) {
                      ctx.stroke();
                  }
              }
              ctx.restore();
          };
          const fillText = function(x, y, legendItem) {
              renderText(ctx, legendItem.text, x, y + itemHeight / 2, labelFont, {
                  strikethrough: legendItem.hidden,
                  textAlign: rtlHelper.textAlign(legendItem.textAlign)
              });
          };
          const isHorizontal = this.isHorizontal();
          const titleHeight = this._computeTitleHeight();
          if (isHorizontal) {
              cursor = {
                  x: _alignStartEnd(align, this.left + padding, this.right - lineWidths[0]),
                  y: this.top + padding + titleHeight,
                  line: 0
              };
          } else {
              cursor = {
                  x: this.left + padding,
                  y: _alignStartEnd(align, this.top + titleHeight + padding, this.bottom - columnSizes[0].height),
                  line: 0
              };
          }
          overrideTextDirection(this.ctx, opts.textDirection);
          const lineHeight = itemHeight + padding;
          this.legendItems.forEach((legendItem, i)=>{
              ctx.strokeStyle = legendItem.fontColor;
              ctx.fillStyle = legendItem.fontColor;
              const textWidth = ctx.measureText(legendItem.text).width;
              const textAlign = rtlHelper.textAlign(legendItem.textAlign || (legendItem.textAlign = labelOpts.textAlign));
              const width = boxWidth + halfFontSize + textWidth;
              let x = cursor.x;
              let y = cursor.y;
              rtlHelper.setWidth(this.width);
              if (isHorizontal) {
                  if (i > 0 && x + width + padding > this.right) {
                      y = cursor.y += lineHeight;
                      cursor.line++;
                      x = cursor.x = _alignStartEnd(align, this.left + padding, this.right - lineWidths[cursor.line]);
                  }
              } else if (i > 0 && y + lineHeight > this.bottom) {
                  x = cursor.x = x + columnSizes[cursor.line].width + padding;
                  cursor.line++;
                  y = cursor.y = _alignStartEnd(align, this.top + titleHeight + padding, this.bottom - columnSizes[cursor.line].height);
              }
              const realX = rtlHelper.x(x);
              drawLegendBox(realX, y, legendItem);
              x = _textX(textAlign, x + boxWidth + halfFontSize, isHorizontal ? x + width : this.right, opts.rtl);
              fillText(rtlHelper.x(x), y, legendItem);
              if (isHorizontal) {
                  cursor.x += width + padding;
              } else if (typeof legendItem.text !== 'string') {
                  const fontLineHeight = labelFont.lineHeight;
                  cursor.y += calculateLegendItemHeight(legendItem, fontLineHeight) + padding;
              } else {
                  cursor.y += lineHeight;
              }
          });
          restoreTextDirection(this.ctx, opts.textDirection);
      }
   drawTitle() {
          const opts = this.options;
          const titleOpts = opts.title;
          const titleFont = toFont(titleOpts.font);
          const titlePadding = toPadding(titleOpts.padding);
          if (!titleOpts.display) {
              return;
          }
          const rtlHelper = getRtlAdapter(opts.rtl, this.left, this.width);
          const ctx = this.ctx;
          const position = titleOpts.position;
          const halfFontSize = titleFont.size / 2;
          const topPaddingPlusHalfFontSize = titlePadding.top + halfFontSize;
          let y;
          let left = this.left;
          let maxWidth = this.width;
          if (this.isHorizontal()) {
              maxWidth = Math.max(...this.lineWidths);
              y = this.top + topPaddingPlusHalfFontSize;
              left = _alignStartEnd(opts.align, left, this.right - maxWidth);
          } else {
              const maxHeight = this.columnSizes.reduce((acc, size)=>Math.max(acc, size.height), 0);
              y = topPaddingPlusHalfFontSize + _alignStartEnd(opts.align, this.top, this.bottom - maxHeight - opts.labels.padding - this._computeTitleHeight());
          }
          const x = _alignStartEnd(position, left, left + maxWidth);
          ctx.textAlign = rtlHelper.textAlign(_toLeftRightCenter(position));
          ctx.textBaseline = 'middle';
          ctx.strokeStyle = titleOpts.color;
          ctx.fillStyle = titleOpts.color;
          ctx.font = titleFont.string;
          renderText(ctx, titleOpts.text, x, y, titleFont);
      }
   _computeTitleHeight() {
          const titleOpts = this.options.title;
          const titleFont = toFont(titleOpts.font);
          const titlePadding = toPadding(titleOpts.padding);
          return titleOpts.display ? titleFont.lineHeight + titlePadding.height : 0;
      }
   _getLegendItemAt(x, y) {
          let i, hitBox, lh;
          if (_isBetween(x, this.left, this.right) && _isBetween(y, this.top, this.bottom)) {
              lh = this.legendHitBoxes;
              for(i = 0; i < lh.length; ++i){
                  hitBox = lh[i];
                  if (_isBetween(x, hitBox.left, hitBox.left + hitBox.width) && _isBetween(y, hitBox.top, hitBox.top + hitBox.height)) {
                      return this.legendItems[i];
                  }
              }
          }
          return null;
      }
   handleEvent(e) {
          const opts = this.options;
          if (!isListened(e.type, opts)) {
              return;
          }
          const hoveredItem = this._getLegendItemAt(e.x, e.y);
          if (e.type === 'mousemove' || e.type === 'mouseout') {
              const previous = this._hoveredItem;
              const sameItem = itemsEqual(previous, hoveredItem);
              if (previous && !sameItem) {
                  callback(opts.onLeave, [
                      e,
                      previous,
                      this
                  ], this);
              }
              this._hoveredItem = hoveredItem;
              if (hoveredItem && !sameItem) {
                  callback(opts.onHover, [
                      e,
                      hoveredItem,
                      this
                  ], this);
              }
          } else if (hoveredItem) {
              callback(opts.onClick, [
                  e,
                  hoveredItem,
                  this
              ], this);
          }
      }
  }
  function calculateItemSize(boxWidth, labelFont, ctx, legendItem, _itemHeight) {
      const itemWidth = calculateItemWidth(legendItem, boxWidth, labelFont, ctx);
      const itemHeight = calculateItemHeight(_itemHeight, legendItem, labelFont.lineHeight);
      return {
          itemWidth,
          itemHeight
      };
  }
  function calculateItemWidth(legendItem, boxWidth, labelFont, ctx) {
      let legendItemText = legendItem.text;
      if (legendItemText && typeof legendItemText !== 'string') {
          legendItemText = legendItemText.reduce((a, b)=>a.length > b.length ? a : b);
      }
      return boxWidth + labelFont.size / 2 + ctx.measureText(legendItemText).width;
  }
  function calculateItemHeight(_itemHeight, legendItem, fontLineHeight) {
      let itemHeight = _itemHeight;
      if (typeof legendItem.text !== 'string') {
          itemHeight = calculateLegendItemHeight(legendItem, fontLineHeight);
      }
      return itemHeight;
  }
  function calculateLegendItemHeight(legendItem, fontLineHeight) {
      const labelHeight = legendItem.text ? legendItem.text.length : 0;
      return fontLineHeight * labelHeight;
  }
  function isListened(type, opts) {
      if ((type === 'mousemove' || type === 'mouseout') && (opts.onHover || opts.onLeave)) {
          return true;
      }
      if (opts.onClick && (type === 'click' || type === 'mouseup')) {
          return true;
      }
      return false;
  }
  var plugin_legend = {
      id: 'legend',
   _element: Legend,
      start (chart, _args, options) {
          const legend = chart.legend = new Legend({
              ctx: chart.ctx,
              options,
              chart
          });
          layouts.configure(chart, legend, options);
          layouts.addBox(chart, legend);
      },
      stop (chart) {
          layouts.removeBox(chart, chart.legend);
          delete chart.legend;
      },
      beforeUpdate (chart, _args, options) {
          const legend = chart.legend;
          layouts.configure(chart, legend, options);
          legend.options = options;
      },
      afterUpdate (chart) {
          const legend = chart.legend;
          legend.buildLabels();
          legend.adjustHitBoxes();
      },
      afterEvent (chart, args) {
          if (!args.replay) {
              chart.legend.handleEvent(args.event);
          }
      },
      defaults: {
          display: true,
          position: 'top',
          align: 'center',
          fullSize: true,
          reverse: false,
          weight: 1000,
          onClick (e, legendItem, legend) {
              const index = legendItem.datasetIndex;
              const ci = legend.chart;
              if (ci.isDatasetVisible(index)) {
                  ci.hide(index);
                  legendItem.hidden = true;
              } else {
                  ci.show(index);
                  legendItem.hidden = false;
              }
          },
          onHover: null,
          onLeave: null,
          labels: {
              color: (ctx)=>ctx.chart.options.color,
              boxWidth: 40,
              padding: 10,
              generateLabels (chart) {
                  const datasets = chart.data.datasets;
                  const { labels: { usePointStyle , pointStyle , textAlign , color , useBorderRadius , borderRadius  }  } = chart.legend.options;
                  return chart._getSortedDatasetMetas().map((meta)=>{
                      const style = meta.controller.getStyle(usePointStyle ? 0 : undefined);
                      const borderWidth = toPadding(style.borderWidth);
                      return {
                          text: datasets[meta.index].label,
                          fillStyle: style.backgroundColor,
                          fontColor: color,
                          hidden: !meta.visible,
                          lineCap: style.borderCapStyle,
                          lineDash: style.borderDash,
                          lineDashOffset: style.borderDashOffset,
                          lineJoin: style.borderJoinStyle,
                          lineWidth: (borderWidth.width + borderWidth.height) / 4,
                          strokeStyle: style.borderColor,
                          pointStyle: pointStyle || style.pointStyle,
                          rotation: style.rotation,
                          textAlign: textAlign || style.textAlign,
                          borderRadius: useBorderRadius && (borderRadius || style.borderRadius),
                          datasetIndex: meta.index
                      };
                  }, this);
              }
          },
          title: {
              color: (ctx)=>ctx.chart.options.color,
              display: false,
              position: 'center',
              text: ''
          }
      },
      descriptors: {
          _scriptable: (name)=>!name.startsWith('on'),
          labels: {
              _scriptable: (name)=>![
                      'generateLabels',
                      'filter',
                      'sort'
                  ].includes(name)
          }
      }
  };

  class Title extends Element$1 {
   constructor(config){
          super();
          this.chart = config.chart;
          this.options = config.options;
          this.ctx = config.ctx;
          this._padding = undefined;
          this.top = undefined;
          this.bottom = undefined;
          this.left = undefined;
          this.right = undefined;
          this.width = undefined;
          this.height = undefined;
          this.position = undefined;
          this.weight = undefined;
          this.fullSize = undefined;
      }
      update(maxWidth, maxHeight) {
          const opts = this.options;
          this.left = 0;
          this.top = 0;
          if (!opts.display) {
              this.width = this.height = this.right = this.bottom = 0;
              return;
          }
          this.width = this.right = maxWidth;
          this.height = this.bottom = maxHeight;
          const lineCount = isArray(opts.text) ? opts.text.length : 1;
          this._padding = toPadding(opts.padding);
          const textSize = lineCount * toFont(opts.font).lineHeight + this._padding.height;
          if (this.isHorizontal()) {
              this.height = textSize;
          } else {
              this.width = textSize;
          }
      }
      isHorizontal() {
          const pos = this.options.position;
          return pos === 'top' || pos === 'bottom';
      }
      _drawArgs(offset) {
          const { top , left , bottom , right , options  } = this;
          const align = options.align;
          let rotation = 0;
          let maxWidth, titleX, titleY;
          if (this.isHorizontal()) {
              titleX = _alignStartEnd(align, left, right);
              titleY = top + offset;
              maxWidth = right - left;
          } else {
              if (options.position === 'left') {
                  titleX = left + offset;
                  titleY = _alignStartEnd(align, bottom, top);
                  rotation = PI * -0.5;
              } else {
                  titleX = right - offset;
                  titleY = _alignStartEnd(align, top, bottom);
                  rotation = PI * 0.5;
              }
              maxWidth = bottom - top;
          }
          return {
              titleX,
              titleY,
              maxWidth,
              rotation
          };
      }
      draw() {
          const ctx = this.ctx;
          const opts = this.options;
          if (!opts.display) {
              return;
          }
          const fontOpts = toFont(opts.font);
          const lineHeight = fontOpts.lineHeight;
          const offset = lineHeight / 2 + this._padding.top;
          const { titleX , titleY , maxWidth , rotation  } = this._drawArgs(offset);
          renderText(ctx, opts.text, 0, 0, fontOpts, {
              color: opts.color,
              maxWidth,
              rotation,
              textAlign: _toLeftRightCenter(opts.align),
              textBaseline: 'middle',
              translation: [
                  titleX,
                  titleY
              ]
          });
      }
  }
  function createTitle(chart, titleOpts) {
      const title = new Title({
          ctx: chart.ctx,
          options: titleOpts,
          chart
      });
      layouts.configure(chart, title, titleOpts);
      layouts.addBox(chart, title);
      chart.titleBlock = title;
  }
  var plugin_title = {
      id: 'title',
   _element: Title,
      start (chart, _args, options) {
          createTitle(chart, options);
      },
      stop (chart) {
          const titleBlock = chart.titleBlock;
          layouts.removeBox(chart, titleBlock);
          delete chart.titleBlock;
      },
      beforeUpdate (chart, _args, options) {
          const title = chart.titleBlock;
          layouts.configure(chart, title, options);
          title.options = options;
      },
      defaults: {
          align: 'center',
          display: false,
          font: {
              weight: 'bold'
          },
          fullSize: true,
          padding: 10,
          position: 'top',
          text: '',
          weight: 2000
      },
      defaultRoutes: {
          color: 'color'
      },
      descriptors: {
          _scriptable: true,
          _indexable: false
      }
  };

  const map = new WeakMap();
  var plugin_subtitle = {
      id: 'subtitle',
      start (chart, _args, options) {
          const title = new Title({
              ctx: chart.ctx,
              options,
              chart
          });
          layouts.configure(chart, title, options);
          layouts.addBox(chart, title);
          map.set(chart, title);
      },
      stop (chart) {
          layouts.removeBox(chart, map.get(chart));
          map.delete(chart);
      },
      beforeUpdate (chart, _args, options) {
          const title = map.get(chart);
          layouts.configure(chart, title, options);
          title.options = options;
      },
      defaults: {
          align: 'center',
          display: false,
          font: {
              weight: 'normal'
          },
          fullSize: true,
          padding: 0,
          position: 'top',
          text: '',
          weight: 1500
      },
      defaultRoutes: {
          color: 'color'
      },
      descriptors: {
          _scriptable: true,
          _indexable: false
      }
  };

  const positioners = {
   average (items) {
          if (!items.length) {
              return false;
          }
          let i, len;
          let xSet = new Set();
          let y = 0;
          let count = 0;
          for(i = 0, len = items.length; i < len; ++i){
              const el = items[i].element;
              if (el && el.hasValue()) {
                  const pos = el.tooltipPosition();
                  xSet.add(pos.x);
                  y += pos.y;
                  ++count;
              }
          }
          if (count === 0 || xSet.size === 0) {
              return false;
          }
          const xAverage = [
              ...xSet
          ].reduce((a, b)=>a + b) / xSet.size;
          return {
              x: xAverage,
              y: y / count
          };
      },
   nearest (items, eventPosition) {
          if (!items.length) {
              return false;
          }
          let x = eventPosition.x;
          let y = eventPosition.y;
          let minDistance = Number.POSITIVE_INFINITY;
          let i, len, nearestElement;
          for(i = 0, len = items.length; i < len; ++i){
              const el = items[i].element;
              if (el && el.hasValue()) {
                  const center = el.getCenterPoint();
                  const d = distanceBetweenPoints(eventPosition, center);
                  if (d < minDistance) {
                      minDistance = d;
                      nearestElement = el;
                  }
              }
          }
          if (nearestElement) {
              const tp = nearestElement.tooltipPosition();
              x = tp.x;
              y = tp.y;
          }
          return {
              x,
              y
          };
      }
  };
  function pushOrConcat(base, toPush) {
      if (toPush) {
          if (isArray(toPush)) {
              Array.prototype.push.apply(base, toPush);
          } else {
              base.push(toPush);
          }
      }
      return base;
  }
   function splitNewlines(str) {
      if ((typeof str === 'string' || str instanceof String) && str.indexOf('\n') > -1) {
          return str.split('\n');
      }
      return str;
  }
   function createTooltipItem(chart, item) {
      const { element , datasetIndex , index  } = item;
      const controller = chart.getDatasetMeta(datasetIndex).controller;
      const { label , value  } = controller.getLabelAndValue(index);
      return {
          chart,
          label,
          parsed: controller.getParsed(index),
          raw: chart.data.datasets[datasetIndex].data[index],
          formattedValue: value,
          dataset: controller.getDataset(),
          dataIndex: index,
          datasetIndex,
          element
      };
  }
   function getTooltipSize(tooltip, options) {
      const ctx = tooltip.chart.ctx;
      const { body , footer , title  } = tooltip;
      const { boxWidth , boxHeight  } = options;
      const bodyFont = toFont(options.bodyFont);
      const titleFont = toFont(options.titleFont);
      const footerFont = toFont(options.footerFont);
      const titleLineCount = title.length;
      const footerLineCount = footer.length;
      const bodyLineItemCount = body.length;
      const padding = toPadding(options.padding);
      let height = padding.height;
      let width = 0;
      let combinedBodyLength = body.reduce((count, bodyItem)=>count + bodyItem.before.length + bodyItem.lines.length + bodyItem.after.length, 0);
      combinedBodyLength += tooltip.beforeBody.length + tooltip.afterBody.length;
      if (titleLineCount) {
          height += titleLineCount * titleFont.lineHeight + (titleLineCount - 1) * options.titleSpacing + options.titleMarginBottom;
      }
      if (combinedBodyLength) {
          const bodyLineHeight = options.displayColors ? Math.max(boxHeight, bodyFont.lineHeight) : bodyFont.lineHeight;
          height += bodyLineItemCount * bodyLineHeight + (combinedBodyLength - bodyLineItemCount) * bodyFont.lineHeight + (combinedBodyLength - 1) * options.bodySpacing;
      }
      if (footerLineCount) {
          height += options.footerMarginTop + footerLineCount * footerFont.lineHeight + (footerLineCount - 1) * options.footerSpacing;
      }
      let widthPadding = 0;
      const maxLineWidth = function(line) {
          width = Math.max(width, ctx.measureText(line).width + widthPadding);
      };
      ctx.save();
      ctx.font = titleFont.string;
      each(tooltip.title, maxLineWidth);
      ctx.font = bodyFont.string;
      each(tooltip.beforeBody.concat(tooltip.afterBody), maxLineWidth);
      widthPadding = options.displayColors ? boxWidth + 2 + options.boxPadding : 0;
      each(body, (bodyItem)=>{
          each(bodyItem.before, maxLineWidth);
          each(bodyItem.lines, maxLineWidth);
          each(bodyItem.after, maxLineWidth);
      });
      widthPadding = 0;
      ctx.font = footerFont.string;
      each(tooltip.footer, maxLineWidth);
      ctx.restore();
      width += padding.width;
      return {
          width,
          height
      };
  }
  function determineYAlign(chart, size) {
      const { y , height  } = size;
      if (y < height / 2) {
          return 'top';
      } else if (y > chart.height - height / 2) {
          return 'bottom';
      }
      return 'center';
  }
  function doesNotFitWithAlign(xAlign, chart, options, size) {
      const { x , width  } = size;
      const caret = options.caretSize + options.caretPadding;
      if (xAlign === 'left' && x + width + caret > chart.width) {
          return true;
      }
      if (xAlign === 'right' && x - width - caret < 0) {
          return true;
      }
  }
  function determineXAlign(chart, options, size, yAlign) {
      const { x , width  } = size;
      const { width: chartWidth , chartArea: { left , right  }  } = chart;
      let xAlign = 'center';
      if (yAlign === 'center') {
          xAlign = x <= (left + right) / 2 ? 'left' : 'right';
      } else if (x <= width / 2) {
          xAlign = 'left';
      } else if (x >= chartWidth - width / 2) {
          xAlign = 'right';
      }
      if (doesNotFitWithAlign(xAlign, chart, options, size)) {
          xAlign = 'center';
      }
      return xAlign;
  }
   function determineAlignment(chart, options, size) {
      const yAlign = size.yAlign || options.yAlign || determineYAlign(chart, size);
      return {
          xAlign: size.xAlign || options.xAlign || determineXAlign(chart, options, size, yAlign),
          yAlign
      };
  }
  function alignX(size, xAlign) {
      let { x , width  } = size;
      if (xAlign === 'right') {
          x -= width;
      } else if (xAlign === 'center') {
          x -= width / 2;
      }
      return x;
  }
  function alignY(size, yAlign, paddingAndSize) {
      let { y , height  } = size;
      if (yAlign === 'top') {
          y += paddingAndSize;
      } else if (yAlign === 'bottom') {
          y -= height + paddingAndSize;
      } else {
          y -= height / 2;
      }
      return y;
  }
   function getBackgroundPoint(options, size, alignment, chart) {
      const { caretSize , caretPadding , cornerRadius  } = options;
      const { xAlign , yAlign  } = alignment;
      const paddingAndSize = caretSize + caretPadding;
      const { topLeft , topRight , bottomLeft , bottomRight  } = toTRBLCorners(cornerRadius);
      let x = alignX(size, xAlign);
      const y = alignY(size, yAlign, paddingAndSize);
      if (yAlign === 'center') {
          if (xAlign === 'left') {
              x += paddingAndSize;
          } else if (xAlign === 'right') {
              x -= paddingAndSize;
          }
      } else if (xAlign === 'left') {
          x -= Math.max(topLeft, bottomLeft) + caretSize;
      } else if (xAlign === 'right') {
          x += Math.max(topRight, bottomRight) + caretSize;
      }
      return {
          x: _limitValue(x, 0, chart.width - size.width),
          y: _limitValue(y, 0, chart.height - size.height)
      };
  }
  function getAlignedX(tooltip, align, options) {
      const padding = toPadding(options.padding);
      return align === 'center' ? tooltip.x + tooltip.width / 2 : align === 'right' ? tooltip.x + tooltip.width - padding.right : tooltip.x + padding.left;
  }
   function getBeforeAfterBodyLines(callback) {
      return pushOrConcat([], splitNewlines(callback));
  }
  function createTooltipContext(parent, tooltip, tooltipItems) {
      return createContext(parent, {
          tooltip,
          tooltipItems,
          type: 'tooltip'
      });
  }
  function overrideCallbacks(callbacks, context) {
      const override = context && context.dataset && context.dataset.tooltip && context.dataset.tooltip.callbacks;
      return override ? callbacks.override(override) : callbacks;
  }
  const defaultCallbacks = {
      beforeTitle: noop,
      title (tooltipItems) {
          if (tooltipItems.length > 0) {
              const item = tooltipItems[0];
              const labels = item.chart.data.labels;
              const labelCount = labels ? labels.length : 0;
              if (this && this.options && this.options.mode === 'dataset') {
                  return item.dataset.label || '';
              } else if (item.label) {
                  return item.label;
              } else if (labelCount > 0 && item.dataIndex < labelCount) {
                  return labels[item.dataIndex];
              }
          }
          return '';
      },
      afterTitle: noop,
      beforeBody: noop,
      beforeLabel: noop,
      label (tooltipItem) {
          if (this && this.options && this.options.mode === 'dataset') {
              return tooltipItem.label + ': ' + tooltipItem.formattedValue || tooltipItem.formattedValue;
          }
          let label = tooltipItem.dataset.label || '';
          if (label) {
              label += ': ';
          }
          const value = tooltipItem.formattedValue;
          if (!isNullOrUndef(value)) {
              label += value;
          }
          return label;
      },
      labelColor (tooltipItem) {
          const meta = tooltipItem.chart.getDatasetMeta(tooltipItem.datasetIndex);
          const options = meta.controller.getStyle(tooltipItem.dataIndex);
          return {
              borderColor: options.borderColor,
              backgroundColor: options.backgroundColor,
              borderWidth: options.borderWidth,
              borderDash: options.borderDash,
              borderDashOffset: options.borderDashOffset,
              borderRadius: 0
          };
      },
      labelTextColor () {
          return this.options.bodyColor;
      },
      labelPointStyle (tooltipItem) {
          const meta = tooltipItem.chart.getDatasetMeta(tooltipItem.datasetIndex);
          const options = meta.controller.getStyle(tooltipItem.dataIndex);
          return {
              pointStyle: options.pointStyle,
              rotation: options.rotation
          };
      },
      afterLabel: noop,
      afterBody: noop,
      beforeFooter: noop,
      footer: noop,
      afterFooter: noop
  };
   function invokeCallbackWithFallback(callbacks, name, ctx, arg) {
      const result = callbacks[name].call(ctx, arg);
      if (typeof result === 'undefined') {
          return defaultCallbacks[name].call(ctx, arg);
      }
      return result;
  }
  class Tooltip extends Element$1 {
   static positioners = positioners;
      constructor(config){
          super();
          this.opacity = 0;
          this._active = [];
          this._eventPosition = undefined;
          this._size = undefined;
          this._cachedAnimations = undefined;
          this._tooltipItems = [];
          this.$animations = undefined;
          this.$context = undefined;
          this.chart = config.chart;
          this.options = config.options;
          this.dataPoints = undefined;
          this.title = undefined;
          this.beforeBody = undefined;
          this.body = undefined;
          this.afterBody = undefined;
          this.footer = undefined;
          this.xAlign = undefined;
          this.yAlign = undefined;
          this.x = undefined;
          this.y = undefined;
          this.height = undefined;
          this.width = undefined;
          this.caretX = undefined;
          this.caretY = undefined;
          this.labelColors = undefined;
          this.labelPointStyles = undefined;
          this.labelTextColors = undefined;
      }
      initialize(options) {
          this.options = options;
          this._cachedAnimations = undefined;
          this.$context = undefined;
      }
   _resolveAnimations() {
          const cached = this._cachedAnimations;
          if (cached) {
              return cached;
          }
          const chart = this.chart;
          const options = this.options.setContext(this.getContext());
          const opts = options.enabled && chart.options.animation && options.animations;
          const animations = new Animations(this.chart, opts);
          if (opts._cacheable) {
              this._cachedAnimations = Object.freeze(animations);
          }
          return animations;
      }
   getContext() {
          return this.$context || (this.$context = createTooltipContext(this.chart.getContext(), this, this._tooltipItems));
      }
      getTitle(context, options) {
          const { callbacks  } = options;
          const beforeTitle = invokeCallbackWithFallback(callbacks, 'beforeTitle', this, context);
          const title = invokeCallbackWithFallback(callbacks, 'title', this, context);
          const afterTitle = invokeCallbackWithFallback(callbacks, 'afterTitle', this, context);
          let lines = [];
          lines = pushOrConcat(lines, splitNewlines(beforeTitle));
          lines = pushOrConcat(lines, splitNewlines(title));
          lines = pushOrConcat(lines, splitNewlines(afterTitle));
          return lines;
      }
      getBeforeBody(tooltipItems, options) {
          return getBeforeAfterBodyLines(invokeCallbackWithFallback(options.callbacks, 'beforeBody', this, tooltipItems));
      }
      getBody(tooltipItems, options) {
          const { callbacks  } = options;
          const bodyItems = [];
          each(tooltipItems, (context)=>{
              const bodyItem = {
                  before: [],
                  lines: [],
                  after: []
              };
              const scoped = overrideCallbacks(callbacks, context);
              pushOrConcat(bodyItem.before, splitNewlines(invokeCallbackWithFallback(scoped, 'beforeLabel', this, context)));
              pushOrConcat(bodyItem.lines, invokeCallbackWithFallback(scoped, 'label', this, context));
              pushOrConcat(bodyItem.after, splitNewlines(invokeCallbackWithFallback(scoped, 'afterLabel', this, context)));
              bodyItems.push(bodyItem);
          });
          return bodyItems;
      }
      getAfterBody(tooltipItems, options) {
          return getBeforeAfterBodyLines(invokeCallbackWithFallback(options.callbacks, 'afterBody', this, tooltipItems));
      }
      getFooter(tooltipItems, options) {
          const { callbacks  } = options;
          const beforeFooter = invokeCallbackWithFallback(callbacks, 'beforeFooter', this, tooltipItems);
          const footer = invokeCallbackWithFallback(callbacks, 'footer', this, tooltipItems);
          const afterFooter = invokeCallbackWithFallback(callbacks, 'afterFooter', this, tooltipItems);
          let lines = [];
          lines = pushOrConcat(lines, splitNewlines(beforeFooter));
          lines = pushOrConcat(lines, splitNewlines(footer));
          lines = pushOrConcat(lines, splitNewlines(afterFooter));
          return lines;
      }
   _createItems(options) {
          const active = this._active;
          const data = this.chart.data;
          const labelColors = [];
          const labelPointStyles = [];
          const labelTextColors = [];
          let tooltipItems = [];
          let i, len;
          for(i = 0, len = active.length; i < len; ++i){
              tooltipItems.push(createTooltipItem(this.chart, active[i]));
          }
          if (options.filter) {
              tooltipItems = tooltipItems.filter((element, index, array)=>options.filter(element, index, array, data));
          }
          if (options.itemSort) {
              tooltipItems = tooltipItems.sort((a, b)=>options.itemSort(a, b, data));
          }
          each(tooltipItems, (context)=>{
              const scoped = overrideCallbacks(options.callbacks, context);
              labelColors.push(invokeCallbackWithFallback(scoped, 'labelColor', this, context));
              labelPointStyles.push(invokeCallbackWithFallback(scoped, 'labelPointStyle', this, context));
              labelTextColors.push(invokeCallbackWithFallback(scoped, 'labelTextColor', this, context));
          });
          this.labelColors = labelColors;
          this.labelPointStyles = labelPointStyles;
          this.labelTextColors = labelTextColors;
          this.dataPoints = tooltipItems;
          return tooltipItems;
      }
      update(changed, replay) {
          const options = this.options.setContext(this.getContext());
          const active = this._active;
          let properties;
          let tooltipItems = [];
          if (!active.length) {
              if (this.opacity !== 0) {
                  properties = {
                      opacity: 0
                  };
              }
          } else {
              const position = positioners[options.position].call(this, active, this._eventPosition);
              tooltipItems = this._createItems(options);
              this.title = this.getTitle(tooltipItems, options);
              this.beforeBody = this.getBeforeBody(tooltipItems, options);
              this.body = this.getBody(tooltipItems, options);
              this.afterBody = this.getAfterBody(tooltipItems, options);
              this.footer = this.getFooter(tooltipItems, options);
              const size = this._size = getTooltipSize(this, options);
              const positionAndSize = Object.assign({}, position, size);
              const alignment = determineAlignment(this.chart, options, positionAndSize);
              const backgroundPoint = getBackgroundPoint(options, positionAndSize, alignment, this.chart);
              this.xAlign = alignment.xAlign;
              this.yAlign = alignment.yAlign;
              properties = {
                  opacity: 1,
                  x: backgroundPoint.x,
                  y: backgroundPoint.y,
                  width: size.width,
                  height: size.height,
                  caretX: position.x,
                  caretY: position.y
              };
          }
          this._tooltipItems = tooltipItems;
          this.$context = undefined;
          if (properties) {
              this._resolveAnimations().update(this, properties);
          }
          if (changed && options.external) {
              options.external.call(this, {
                  chart: this.chart,
                  tooltip: this,
                  replay
              });
          }
      }
      drawCaret(tooltipPoint, ctx, size, options) {
          const caretPosition = this.getCaretPosition(tooltipPoint, size, options);
          ctx.lineTo(caretPosition.x1, caretPosition.y1);
          ctx.lineTo(caretPosition.x2, caretPosition.y2);
          ctx.lineTo(caretPosition.x3, caretPosition.y3);
      }
      getCaretPosition(tooltipPoint, size, options) {
          const { xAlign , yAlign  } = this;
          const { caretSize , cornerRadius  } = options;
          const { topLeft , topRight , bottomLeft , bottomRight  } = toTRBLCorners(cornerRadius);
          const { x: ptX , y: ptY  } = tooltipPoint;
          const { width , height  } = size;
          let x1, x2, x3, y1, y2, y3;
          if (yAlign === 'center') {
              y2 = ptY + height / 2;
              if (xAlign === 'left') {
                  x1 = ptX;
                  x2 = x1 - caretSize;
                  y1 = y2 + caretSize;
                  y3 = y2 - caretSize;
              } else {
                  x1 = ptX + width;
                  x2 = x1 + caretSize;
                  y1 = y2 - caretSize;
                  y3 = y2 + caretSize;
              }
              x3 = x1;
          } else {
              if (xAlign === 'left') {
                  x2 = ptX + Math.max(topLeft, bottomLeft) + caretSize;
              } else if (xAlign === 'right') {
                  x2 = ptX + width - Math.max(topRight, bottomRight) - caretSize;
              } else {
                  x2 = this.caretX;
              }
              if (yAlign === 'top') {
                  y1 = ptY;
                  y2 = y1 - caretSize;
                  x1 = x2 - caretSize;
                  x3 = x2 + caretSize;
              } else {
                  y1 = ptY + height;
                  y2 = y1 + caretSize;
                  x1 = x2 + caretSize;
                  x3 = x2 - caretSize;
              }
              y3 = y1;
          }
          return {
              x1,
              x2,
              x3,
              y1,
              y2,
              y3
          };
      }
      drawTitle(pt, ctx, options) {
          const title = this.title;
          const length = title.length;
          let titleFont, titleSpacing, i;
          if (length) {
              const rtlHelper = getRtlAdapter(options.rtl, this.x, this.width);
              pt.x = getAlignedX(this, options.titleAlign, options);
              ctx.textAlign = rtlHelper.textAlign(options.titleAlign);
              ctx.textBaseline = 'middle';
              titleFont = toFont(options.titleFont);
              titleSpacing = options.titleSpacing;
              ctx.fillStyle = options.titleColor;
              ctx.font = titleFont.string;
              for(i = 0; i < length; ++i){
                  ctx.fillText(title[i], rtlHelper.x(pt.x), pt.y + titleFont.lineHeight / 2);
                  pt.y += titleFont.lineHeight + titleSpacing;
                  if (i + 1 === length) {
                      pt.y += options.titleMarginBottom - titleSpacing;
                  }
              }
          }
      }
   _drawColorBox(ctx, pt, i, rtlHelper, options) {
          const labelColor = this.labelColors[i];
          const labelPointStyle = this.labelPointStyles[i];
          const { boxHeight , boxWidth  } = options;
          const bodyFont = toFont(options.bodyFont);
          const colorX = getAlignedX(this, 'left', options);
          const rtlColorX = rtlHelper.x(colorX);
          const yOffSet = boxHeight < bodyFont.lineHeight ? (bodyFont.lineHeight - boxHeight) / 2 : 0;
          const colorY = pt.y + yOffSet;
          if (options.usePointStyle) {
              const drawOptions = {
                  radius: Math.min(boxWidth, boxHeight) / 2,
                  pointStyle: labelPointStyle.pointStyle,
                  rotation: labelPointStyle.rotation,
                  borderWidth: 1
              };
              const centerX = rtlHelper.leftForLtr(rtlColorX, boxWidth) + boxWidth / 2;
              const centerY = colorY + boxHeight / 2;
              ctx.strokeStyle = options.multiKeyBackground;
              ctx.fillStyle = options.multiKeyBackground;
              drawPoint(ctx, drawOptions, centerX, centerY);
              ctx.strokeStyle = labelColor.borderColor;
              ctx.fillStyle = labelColor.backgroundColor;
              drawPoint(ctx, drawOptions, centerX, centerY);
          } else {
              ctx.lineWidth = isObject(labelColor.borderWidth) ? Math.max(...Object.values(labelColor.borderWidth)) : labelColor.borderWidth || 1;
              ctx.strokeStyle = labelColor.borderColor;
              ctx.setLineDash(labelColor.borderDash || []);
              ctx.lineDashOffset = labelColor.borderDashOffset || 0;
              const outerX = rtlHelper.leftForLtr(rtlColorX, boxWidth);
              const innerX = rtlHelper.leftForLtr(rtlHelper.xPlus(rtlColorX, 1), boxWidth - 2);
              const borderRadius = toTRBLCorners(labelColor.borderRadius);
              if (Object.values(borderRadius).some((v)=>v !== 0)) {
                  ctx.beginPath();
                  ctx.fillStyle = options.multiKeyBackground;
                  addRoundedRectPath(ctx, {
                      x: outerX,
                      y: colorY,
                      w: boxWidth,
                      h: boxHeight,
                      radius: borderRadius
                  });
                  ctx.fill();
                  ctx.stroke();
                  ctx.fillStyle = labelColor.backgroundColor;
                  ctx.beginPath();
                  addRoundedRectPath(ctx, {
                      x: innerX,
                      y: colorY + 1,
                      w: boxWidth - 2,
                      h: boxHeight - 2,
                      radius: borderRadius
                  });
                  ctx.fill();
              } else {
                  ctx.fillStyle = options.multiKeyBackground;
                  ctx.fillRect(outerX, colorY, boxWidth, boxHeight);
                  ctx.strokeRect(outerX, colorY, boxWidth, boxHeight);
                  ctx.fillStyle = labelColor.backgroundColor;
                  ctx.fillRect(innerX, colorY + 1, boxWidth - 2, boxHeight - 2);
              }
          }
          ctx.fillStyle = this.labelTextColors[i];
      }
      drawBody(pt, ctx, options) {
          const { body  } = this;
          const { bodySpacing , bodyAlign , displayColors , boxHeight , boxWidth , boxPadding  } = options;
          const bodyFont = toFont(options.bodyFont);
          let bodyLineHeight = bodyFont.lineHeight;
          let xLinePadding = 0;
          const rtlHelper = getRtlAdapter(options.rtl, this.x, this.width);
          const fillLineOfText = function(line) {
              ctx.fillText(line, rtlHelper.x(pt.x + xLinePadding), pt.y + bodyLineHeight / 2);
              pt.y += bodyLineHeight + bodySpacing;
          };
          const bodyAlignForCalculation = rtlHelper.textAlign(bodyAlign);
          let bodyItem, textColor, lines, i, j, ilen, jlen;
          ctx.textAlign = bodyAlign;
          ctx.textBaseline = 'middle';
          ctx.font = bodyFont.string;
          pt.x = getAlignedX(this, bodyAlignForCalculation, options);
          ctx.fillStyle = options.bodyColor;
          each(this.beforeBody, fillLineOfText);
          xLinePadding = displayColors && bodyAlignForCalculation !== 'right' ? bodyAlign === 'center' ? boxWidth / 2 + boxPadding : boxWidth + 2 + boxPadding : 0;
          for(i = 0, ilen = body.length; i < ilen; ++i){
              bodyItem = body[i];
              textColor = this.labelTextColors[i];
              ctx.fillStyle = textColor;
              each(bodyItem.before, fillLineOfText);
              lines = bodyItem.lines;
              if (displayColors && lines.length) {
                  this._drawColorBox(ctx, pt, i, rtlHelper, options);
                  bodyLineHeight = Math.max(bodyFont.lineHeight, boxHeight);
              }
              for(j = 0, jlen = lines.length; j < jlen; ++j){
                  fillLineOfText(lines[j]);
                  bodyLineHeight = bodyFont.lineHeight;
              }
              each(bodyItem.after, fillLineOfText);
          }
          xLinePadding = 0;
          bodyLineHeight = bodyFont.lineHeight;
          each(this.afterBody, fillLineOfText);
          pt.y -= bodySpacing;
      }
      drawFooter(pt, ctx, options) {
          const footer = this.footer;
          const length = footer.length;
          let footerFont, i;
          if (length) {
              const rtlHelper = getRtlAdapter(options.rtl, this.x, this.width);
              pt.x = getAlignedX(this, options.footerAlign, options);
              pt.y += options.footerMarginTop;
              ctx.textAlign = rtlHelper.textAlign(options.footerAlign);
              ctx.textBaseline = 'middle';
              footerFont = toFont(options.footerFont);
              ctx.fillStyle = options.footerColor;
              ctx.font = footerFont.string;
              for(i = 0; i < length; ++i){
                  ctx.fillText(footer[i], rtlHelper.x(pt.x), pt.y + footerFont.lineHeight / 2);
                  pt.y += footerFont.lineHeight + options.footerSpacing;
              }
          }
      }
      drawBackground(pt, ctx, tooltipSize, options) {
          const { xAlign , yAlign  } = this;
          const { x , y  } = pt;
          const { width , height  } = tooltipSize;
          const { topLeft , topRight , bottomLeft , bottomRight  } = toTRBLCorners(options.cornerRadius);
          ctx.fillStyle = options.backgroundColor;
          ctx.strokeStyle = options.borderColor;
          ctx.lineWidth = options.borderWidth;
          ctx.beginPath();
          ctx.moveTo(x + topLeft, y);
          if (yAlign === 'top') {
              this.drawCaret(pt, ctx, tooltipSize, options);
          }
          ctx.lineTo(x + width - topRight, y);
          ctx.quadraticCurveTo(x + width, y, x + width, y + topRight);
          if (yAlign === 'center' && xAlign === 'right') {
              this.drawCaret(pt, ctx, tooltipSize, options);
          }
          ctx.lineTo(x + width, y + height - bottomRight);
          ctx.quadraticCurveTo(x + width, y + height, x + width - bottomRight, y + height);
          if (yAlign === 'bottom') {
              this.drawCaret(pt, ctx, tooltipSize, options);
          }
          ctx.lineTo(x + bottomLeft, y + height);
          ctx.quadraticCurveTo(x, y + height, x, y + height - bottomLeft);
          if (yAlign === 'center' && xAlign === 'left') {
              this.drawCaret(pt, ctx, tooltipSize, options);
          }
          ctx.lineTo(x, y + topLeft);
          ctx.quadraticCurveTo(x, y, x + topLeft, y);
          ctx.closePath();
          ctx.fill();
          if (options.borderWidth > 0) {
              ctx.stroke();
          }
      }
   _updateAnimationTarget(options) {
          const chart = this.chart;
          const anims = this.$animations;
          const animX = anims && anims.x;
          const animY = anims && anims.y;
          if (animX || animY) {
              const position = positioners[options.position].call(this, this._active, this._eventPosition);
              if (!position) {
                  return;
              }
              const size = this._size = getTooltipSize(this, options);
              const positionAndSize = Object.assign({}, position, this._size);
              const alignment = determineAlignment(chart, options, positionAndSize);
              const point = getBackgroundPoint(options, positionAndSize, alignment, chart);
              if (animX._to !== point.x || animY._to !== point.y) {
                  this.xAlign = alignment.xAlign;
                  this.yAlign = alignment.yAlign;
                  this.width = size.width;
                  this.height = size.height;
                  this.caretX = position.x;
                  this.caretY = position.y;
                  this._resolveAnimations().update(this, point);
              }
          }
      }
   _willRender() {
          return !!this.opacity;
      }
      draw(ctx) {
          const options = this.options.setContext(this.getContext());
          let opacity = this.opacity;
          if (!opacity) {
              return;
          }
          this._updateAnimationTarget(options);
          const tooltipSize = {
              width: this.width,
              height: this.height
          };
          const pt = {
              x: this.x,
              y: this.y
          };
          opacity = Math.abs(opacity) < 1e-3 ? 0 : opacity;
          const padding = toPadding(options.padding);
          const hasTooltipContent = this.title.length || this.beforeBody.length || this.body.length || this.afterBody.length || this.footer.length;
          if (options.enabled && hasTooltipContent) {
              ctx.save();
              ctx.globalAlpha = opacity;
              this.drawBackground(pt, ctx, tooltipSize, options);
              overrideTextDirection(ctx, options.textDirection);
              pt.y += padding.top;
              this.drawTitle(pt, ctx, options);
              this.drawBody(pt, ctx, options);
              this.drawFooter(pt, ctx, options);
              restoreTextDirection(ctx, options.textDirection);
              ctx.restore();
          }
      }
   getActiveElements() {
          return this._active || [];
      }
   setActiveElements(activeElements, eventPosition) {
          const lastActive = this._active;
          const active = activeElements.map(({ datasetIndex , index  })=>{
              const meta = this.chart.getDatasetMeta(datasetIndex);
              if (!meta) {
                  throw new Error('Cannot find a dataset at index ' + datasetIndex);
              }
              return {
                  datasetIndex,
                  element: meta.data[index],
                  index
              };
          });
          const changed = !_elementsEqual(lastActive, active);
          const positionChanged = this._positionChanged(active, eventPosition);
          if (changed || positionChanged) {
              this._active = active;
              this._eventPosition = eventPosition;
              this._ignoreReplayEvents = true;
              this.update(true);
          }
      }
   handleEvent(e, replay, inChartArea = true) {
          if (replay && this._ignoreReplayEvents) {
              return false;
          }
          this._ignoreReplayEvents = false;
          const options = this.options;
          const lastActive = this._active || [];
          const active = this._getActiveElements(e, lastActive, replay, inChartArea);
          const positionChanged = this._positionChanged(active, e);
          const changed = replay || !_elementsEqual(active, lastActive) || positionChanged;
          if (changed) {
              this._active = active;
              if (options.enabled || options.external) {
                  this._eventPosition = {
                      x: e.x,
                      y: e.y
                  };
                  this.update(true, replay);
              }
          }
          return changed;
      }
   _getActiveElements(e, lastActive, replay, inChartArea) {
          const options = this.options;
          if (e.type === 'mouseout') {
              return [];
          }
          if (!inChartArea) {
              return lastActive.filter((i)=>this.chart.data.datasets[i.datasetIndex] && this.chart.getDatasetMeta(i.datasetIndex).controller.getParsed(i.index) !== undefined);
          }
          const active = this.chart.getElementsAtEventForMode(e, options.mode, options, replay);
          if (options.reverse) {
              active.reverse();
          }
          return active;
      }
   _positionChanged(active, e) {
          const { caretX , caretY , options  } = this;
          const position = positioners[options.position].call(this, active, e);
          return position !== false && (caretX !== position.x || caretY !== position.y);
      }
  }
  var plugin_tooltip = {
      id: 'tooltip',
      _element: Tooltip,
      positioners,
      afterInit (chart, _args, options) {
          if (options) {
              chart.tooltip = new Tooltip({
                  chart,
                  options
              });
          }
      },
      beforeUpdate (chart, _args, options) {
          if (chart.tooltip) {
              chart.tooltip.initialize(options);
          }
      },
      reset (chart, _args, options) {
          if (chart.tooltip) {
              chart.tooltip.initialize(options);
          }
      },
      afterDraw (chart) {
          const tooltip = chart.tooltip;
          if (tooltip && tooltip._willRender()) {
              const args = {
                  tooltip
              };
              if (chart.notifyPlugins('beforeTooltipDraw', {
                  ...args,
                  cancelable: true
              }) === false) {
                  return;
              }
              tooltip.draw(chart.ctx);
              chart.notifyPlugins('afterTooltipDraw', args);
          }
      },
      afterEvent (chart, args) {
          if (chart.tooltip) {
              const useFinalPosition = args.replay;
              if (chart.tooltip.handleEvent(args.event, useFinalPosition, args.inChartArea)) {
                  args.changed = true;
              }
          }
      },
      defaults: {
          enabled: true,
          external: null,
          position: 'average',
          backgroundColor: 'rgba(0,0,0,0.8)',
          titleColor: '#fff',
          titleFont: {
              weight: 'bold'
          },
          titleSpacing: 2,
          titleMarginBottom: 6,
          titleAlign: 'left',
          bodyColor: '#fff',
          bodySpacing: 2,
          bodyFont: {},
          bodyAlign: 'left',
          footerColor: '#fff',
          footerSpacing: 2,
          footerMarginTop: 6,
          footerFont: {
              weight: 'bold'
          },
          footerAlign: 'left',
          padding: 6,
          caretPadding: 2,
          caretSize: 5,
          cornerRadius: 6,
          boxHeight: (ctx, opts)=>opts.bodyFont.size,
          boxWidth: (ctx, opts)=>opts.bodyFont.size,
          multiKeyBackground: '#fff',
          displayColors: true,
          boxPadding: 0,
          borderColor: 'rgba(0,0,0,0)',
          borderWidth: 0,
          animation: {
              duration: 400,
              easing: 'easeOutQuart'
          },
          animations: {
              numbers: {
                  type: 'number',
                  properties: [
                      'x',
                      'y',
                      'width',
                      'height',
                      'caretX',
                      'caretY'
                  ]
              },
              opacity: {
                  easing: 'linear',
                  duration: 200
              }
          },
          callbacks: defaultCallbacks
      },
      defaultRoutes: {
          bodyFont: 'font',
          footerFont: 'font',
          titleFont: 'font'
      },
      descriptors: {
          _scriptable: (name)=>name !== 'filter' && name !== 'itemSort' && name !== 'external',
          _indexable: false,
          callbacks: {
              _scriptable: false,
              _indexable: false
          },
          animation: {
              _fallback: false
          },
          animations: {
              _fallback: 'animation'
          }
      },
      additionalOptionScopes: [
          'interaction'
      ]
  };

  var plugins$1 = /*#__PURE__*/Object.freeze({
  __proto__: null,
  Colors: plugin_colors,
  Decimation: plugin_decimation,
  Filler: index$1,
  Legend: plugin_legend,
  SubTitle: plugin_subtitle,
  Title: plugin_title,
  Tooltip: plugin_tooltip
  });

  const addIfString = (labels, raw, index, addedLabels)=>{
      if (typeof raw === 'string') {
          index = labels.push(raw) - 1;
          addedLabels.unshift({
              index,
              label: raw
          });
      } else if (isNaN(raw)) {
          index = null;
      }
      return index;
  };
  function findOrAddLabel(labels, raw, index, addedLabels) {
      const first = labels.indexOf(raw);
      if (first === -1) {
          return addIfString(labels, raw, index, addedLabels);
      }
      const last = labels.lastIndexOf(raw);
      return first !== last ? index : first;
  }
  const validIndex = (index, max)=>index === null ? null : _limitValue(Math.round(index), 0, max);
  function _getLabelForValue(value) {
      const labels = this.getLabels();
      if (value >= 0 && value < labels.length) {
          return labels[value];
      }
      return value;
  }
  class CategoryScale extends Scale {
      static id = 'category';
   static defaults = {
          ticks: {
              callback: _getLabelForValue
          }
      };
      constructor(cfg){
          super(cfg);
           this._startValue = undefined;
          this._valueRange = 0;
          this._addedLabels = [];
      }
      init(scaleOptions) {
          const added = this._addedLabels;
          if (added.length) {
              const labels = this.getLabels();
              for (const { index , label  } of added){
                  if (labels[index] === label) {
                      labels.splice(index, 1);
                  }
              }
              this._addedLabels = [];
          }
          super.init(scaleOptions);
      }
      parse(raw, index) {
          if (isNullOrUndef(raw)) {
              return null;
          }
          const labels = this.getLabels();
          index = isFinite(index) && labels[index] === raw ? index : findOrAddLabel(labels, raw, valueOrDefault(index, raw), this._addedLabels);
          return validIndex(index, labels.length - 1);
      }
      determineDataLimits() {
          const { minDefined , maxDefined  } = this.getUserBounds();
          let { min , max  } = this.getMinMax(true);
          if (this.options.bounds === 'ticks') {
              if (!minDefined) {
                  min = 0;
              }
              if (!maxDefined) {
                  max = this.getLabels().length - 1;
              }
          }
          this.min = min;
          this.max = max;
      }
      buildTicks() {
          const min = this.min;
          const max = this.max;
          const offset = this.options.offset;
          const ticks = [];
          let labels = this.getLabels();
          labels = min === 0 && max === labels.length - 1 ? labels : labels.slice(min, max + 1);
          this._valueRange = Math.max(labels.length - (offset ? 0 : 1), 1);
          this._startValue = this.min - (offset ? 0.5 : 0);
          for(let value = min; value <= max; value++){
              ticks.push({
                  value
              });
          }
          return ticks;
      }
      getLabelForValue(value) {
          return _getLabelForValue.call(this, value);
      }
   configure() {
          super.configure();
          if (!this.isHorizontal()) {
              this._reversePixels = !this._reversePixels;
          }
      }
      getPixelForValue(value) {
          if (typeof value !== 'number') {
              value = this.parse(value);
          }
          return value === null ? NaN : this.getPixelForDecimal((value - this._startValue) / this._valueRange);
      }
      getPixelForTick(index) {
          const ticks = this.ticks;
          if (index < 0 || index > ticks.length - 1) {
              return null;
          }
          return this.getPixelForValue(ticks[index].value);
      }
      getValueForPixel(pixel) {
          return Math.round(this._startValue + this.getDecimalForPixel(pixel) * this._valueRange);
      }
      getBasePixel() {
          return this.bottom;
      }
  }

  function generateTicks$1(generationOptions, dataRange) {
      const ticks = [];
      const MIN_SPACING = 1e-14;
      const { bounds , step , min , max , precision , count , maxTicks , maxDigits , includeBounds  } = generationOptions;
      const unit = step || 1;
      const maxSpaces = maxTicks - 1;
      const { min: rmin , max: rmax  } = dataRange;
      const minDefined = !isNullOrUndef(min);
      const maxDefined = !isNullOrUndef(max);
      const countDefined = !isNullOrUndef(count);
      const minSpacing = (rmax - rmin) / (maxDigits + 1);
      let spacing = niceNum((rmax - rmin) / maxSpaces / unit) * unit;
      let factor, niceMin, niceMax, numSpaces;
      if (spacing < MIN_SPACING && !minDefined && !maxDefined) {
          return [
              {
                  value: rmin
              },
              {
                  value: rmax
              }
          ];
      }
      numSpaces = Math.ceil(rmax / spacing) - Math.floor(rmin / spacing);
      if (numSpaces > maxSpaces) {
          spacing = niceNum(numSpaces * spacing / maxSpaces / unit) * unit;
      }
      if (!isNullOrUndef(precision)) {
          factor = Math.pow(10, precision);
          spacing = Math.ceil(spacing * factor) / factor;
      }
      if (bounds === 'ticks') {
          niceMin = Math.floor(rmin / spacing) * spacing;
          niceMax = Math.ceil(rmax / spacing) * spacing;
      } else {
          niceMin = rmin;
          niceMax = rmax;
      }
      if (minDefined && maxDefined && step && almostWhole((max - min) / step, spacing / 1000)) {
          numSpaces = Math.round(Math.min((max - min) / spacing, maxTicks));
          spacing = (max - min) / numSpaces;
          niceMin = min;
          niceMax = max;
      } else if (countDefined) {
          niceMin = minDefined ? min : niceMin;
          niceMax = maxDefined ? max : niceMax;
          numSpaces = count - 1;
          spacing = (niceMax - niceMin) / numSpaces;
      } else {
          numSpaces = (niceMax - niceMin) / spacing;
          if (almostEquals(numSpaces, Math.round(numSpaces), spacing / 1000)) {
              numSpaces = Math.round(numSpaces);
          } else {
              numSpaces = Math.ceil(numSpaces);
          }
      }
      const decimalPlaces = Math.max(_decimalPlaces(spacing), _decimalPlaces(niceMin));
      factor = Math.pow(10, isNullOrUndef(precision) ? decimalPlaces : precision);
      niceMin = Math.round(niceMin * factor) / factor;
      niceMax = Math.round(niceMax * factor) / factor;
      let j = 0;
      if (minDefined) {
          if (includeBounds && niceMin !== min) {
              ticks.push({
                  value: min
              });
              if (niceMin < min) {
                  j++;
              }
              if (almostEquals(Math.round((niceMin + j * spacing) * factor) / factor, min, relativeLabelSize(min, minSpacing, generationOptions))) {
                  j++;
              }
          } else if (niceMin < min) {
              j++;
          }
      }
      for(; j < numSpaces; ++j){
          const tickValue = Math.round((niceMin + j * spacing) * factor) / factor;
          if (maxDefined && tickValue > max) {
              break;
          }
          ticks.push({
              value: tickValue
          });
      }
      if (maxDefined && includeBounds && niceMax !== max) {
          if (ticks.length && almostEquals(ticks[ticks.length - 1].value, max, relativeLabelSize(max, minSpacing, generationOptions))) {
              ticks[ticks.length - 1].value = max;
          } else {
              ticks.push({
                  value: max
              });
          }
      } else if (!maxDefined || niceMax === max) {
          ticks.push({
              value: niceMax
          });
      }
      return ticks;
  }
  function relativeLabelSize(value, minSpacing, { horizontal , minRotation  }) {
      const rad = toRadians(minRotation);
      const ratio = (horizontal ? Math.sin(rad) : Math.cos(rad)) || 0.001;
      const length = 0.75 * minSpacing * ('' + value).length;
      return Math.min(minSpacing / ratio, length);
  }
  class LinearScaleBase extends Scale {
      constructor(cfg){
          super(cfg);
           this.start = undefined;
           this.end = undefined;
           this._startValue = undefined;
           this._endValue = undefined;
          this._valueRange = 0;
      }
      parse(raw, index) {
          if (isNullOrUndef(raw)) {
              return null;
          }
          if ((typeof raw === 'number' || raw instanceof Number) && !isFinite(+raw)) {
              return null;
          }
          return +raw;
      }
      handleTickRangeOptions() {
          const { beginAtZero  } = this.options;
          const { minDefined , maxDefined  } = this.getUserBounds();
          let { min , max  } = this;
          const setMin = (v)=>min = minDefined ? min : v;
          const setMax = (v)=>max = maxDefined ? max : v;
          if (beginAtZero) {
              const minSign = sign(min);
              const maxSign = sign(max);
              if (minSign < 0 && maxSign < 0) {
                  setMax(0);
              } else if (minSign > 0 && maxSign > 0) {
                  setMin(0);
              }
          }
          if (min === max) {
              let offset = max === 0 ? 1 : Math.abs(max * 0.05);
              setMax(max + offset);
              if (!beginAtZero) {
                  setMin(min - offset);
              }
          }
          this.min = min;
          this.max = max;
      }
      getTickLimit() {
          const tickOpts = this.options.ticks;
          let { maxTicksLimit , stepSize  } = tickOpts;
          let maxTicks;
          if (stepSize) {
              maxTicks = Math.ceil(this.max / stepSize) - Math.floor(this.min / stepSize) + 1;
              if (maxTicks > 1000) {
                  console.warn(`scales.${this.id}.ticks.stepSize: ${stepSize} would result generating up to ${maxTicks} ticks. Limiting to 1000.`);
                  maxTicks = 1000;
              }
          } else {
              maxTicks = this.computeTickLimit();
              maxTicksLimit = maxTicksLimit || 11;
          }
          if (maxTicksLimit) {
              maxTicks = Math.min(maxTicksLimit, maxTicks);
          }
          return maxTicks;
      }
   computeTickLimit() {
          return Number.POSITIVE_INFINITY;
      }
      buildTicks() {
          const opts = this.options;
          const tickOpts = opts.ticks;
          let maxTicks = this.getTickLimit();
          maxTicks = Math.max(2, maxTicks);
          const numericGeneratorOptions = {
              maxTicks,
              bounds: opts.bounds,
              min: opts.min,
              max: opts.max,
              precision: tickOpts.precision,
              step: tickOpts.stepSize,
              count: tickOpts.count,
              maxDigits: this._maxDigits(),
              horizontal: this.isHorizontal(),
              minRotation: tickOpts.minRotation || 0,
              includeBounds: tickOpts.includeBounds !== false
          };
          const dataRange = this._range || this;
          const ticks = generateTicks$1(numericGeneratorOptions, dataRange);
          if (opts.bounds === 'ticks') {
              _setMinAndMaxByKey(ticks, this, 'value');
          }
          if (opts.reverse) {
              ticks.reverse();
              this.start = this.max;
              this.end = this.min;
          } else {
              this.start = this.min;
              this.end = this.max;
          }
          return ticks;
      }
   configure() {
          const ticks = this.ticks;
          let start = this.min;
          let end = this.max;
          super.configure();
          if (this.options.offset && ticks.length) {
              const offset = (end - start) / Math.max(ticks.length - 1, 1) / 2;
              start -= offset;
              end += offset;
          }
          this._startValue = start;
          this._endValue = end;
          this._valueRange = end - start;
      }
      getLabelForValue(value) {
          return formatNumber(value, this.chart.options.locale, this.options.ticks.format);
      }
  }

  class LinearScale extends LinearScaleBase {
      static id = 'linear';
   static defaults = {
          ticks: {
              callback: Ticks.formatters.numeric
          }
      };
      determineDataLimits() {
          const { min , max  } = this.getMinMax(true);
          this.min = isNumberFinite(min) ? min : 0;
          this.max = isNumberFinite(max) ? max : 1;
          this.handleTickRangeOptions();
      }
   computeTickLimit() {
          const horizontal = this.isHorizontal();
          const length = horizontal ? this.width : this.height;
          const minRotation = toRadians(this.options.ticks.minRotation);
          const ratio = (horizontal ? Math.sin(minRotation) : Math.cos(minRotation)) || 0.001;
          const tickFont = this._resolveTickFontOptions(0);
          return Math.ceil(length / Math.min(40, tickFont.lineHeight / ratio));
      }
      getPixelForValue(value) {
          return value === null ? NaN : this.getPixelForDecimal((value - this._startValue) / this._valueRange);
      }
      getValueForPixel(pixel) {
          return this._startValue + this.getDecimalForPixel(pixel) * this._valueRange;
      }
  }

  const log10Floor = (v)=>Math.floor(log10(v));
  const changeExponent = (v, m)=>Math.pow(10, log10Floor(v) + m);
  function isMajor(tickVal) {
      const remain = tickVal / Math.pow(10, log10Floor(tickVal));
      return remain === 1;
  }
  function steps(min, max, rangeExp) {
      const rangeStep = Math.pow(10, rangeExp);
      const start = Math.floor(min / rangeStep);
      const end = Math.ceil(max / rangeStep);
      return end - start;
  }
  function startExp(min, max) {
      const range = max - min;
      let rangeExp = log10Floor(range);
      while(steps(min, max, rangeExp) > 10){
          rangeExp++;
      }
      while(steps(min, max, rangeExp) < 10){
          rangeExp--;
      }
      return Math.min(rangeExp, log10Floor(min));
  }
   function generateTicks(generationOptions, { min , max  }) {
      min = finiteOrDefault(generationOptions.min, min);
      const ticks = [];
      const minExp = log10Floor(min);
      let exp = startExp(min, max);
      let precision = exp < 0 ? Math.pow(10, Math.abs(exp)) : 1;
      const stepSize = Math.pow(10, exp);
      const base = minExp > exp ? Math.pow(10, minExp) : 0;
      const start = Math.round((min - base) * precision) / precision;
      const offset = Math.floor((min - base) / stepSize / 10) * stepSize * 10;
      let significand = Math.floor((start - offset) / Math.pow(10, exp));
      let value = finiteOrDefault(generationOptions.min, Math.round((base + offset + significand * Math.pow(10, exp)) * precision) / precision);
      while(value < max){
          ticks.push({
              value,
              major: isMajor(value),
              significand
          });
          if (significand >= 10) {
              significand = significand < 15 ? 15 : 20;
          } else {
              significand++;
          }
          if (significand >= 20) {
              exp++;
              significand = 2;
              precision = exp >= 0 ? 1 : precision;
          }
          value = Math.round((base + offset + significand * Math.pow(10, exp)) * precision) / precision;
      }
      const lastTick = finiteOrDefault(generationOptions.max, value);
      ticks.push({
          value: lastTick,
          major: isMajor(lastTick),
          significand
      });
      return ticks;
  }
  class LogarithmicScale extends Scale {
      static id = 'logarithmic';
   static defaults = {
          ticks: {
              callback: Ticks.formatters.logarithmic,
              major: {
                  enabled: true
              }
          }
      };
      constructor(cfg){
          super(cfg);
           this.start = undefined;
           this.end = undefined;
           this._startValue = undefined;
          this._valueRange = 0;
      }
      parse(raw, index) {
          const value = LinearScaleBase.prototype.parse.apply(this, [
              raw,
              index
          ]);
          if (value === 0) {
              this._zero = true;
              return undefined;
          }
          return isNumberFinite(value) && value > 0 ? value : null;
      }
      determineDataLimits() {
          const { min , max  } = this.getMinMax(true);
          this.min = isNumberFinite(min) ? Math.max(0, min) : null;
          this.max = isNumberFinite(max) ? Math.max(0, max) : null;
          if (this.options.beginAtZero) {
              this._zero = true;
          }
          if (this._zero && this.min !== this._suggestedMin && !isNumberFinite(this._userMin)) {
              this.min = min === changeExponent(this.min, 0) ? changeExponent(this.min, -1) : changeExponent(this.min, 0);
          }
          this.handleTickRangeOptions();
      }
      handleTickRangeOptions() {
          const { minDefined , maxDefined  } = this.getUserBounds();
          let min = this.min;
          let max = this.max;
          const setMin = (v)=>min = minDefined ? min : v;
          const setMax = (v)=>max = maxDefined ? max : v;
          if (min === max) {
              if (min <= 0) {
                  setMin(1);
                  setMax(10);
              } else {
                  setMin(changeExponent(min, -1));
                  setMax(changeExponent(max, +1));
              }
          }
          if (min <= 0) {
              setMin(changeExponent(max, -1));
          }
          if (max <= 0) {
              setMax(changeExponent(min, +1));
          }
          this.min = min;
          this.max = max;
      }
      buildTicks() {
          const opts = this.options;
          const generationOptions = {
              min: this._userMin,
              max: this._userMax
          };
          const ticks = generateTicks(generationOptions, this);
          if (opts.bounds === 'ticks') {
              _setMinAndMaxByKey(ticks, this, 'value');
          }
          if (opts.reverse) {
              ticks.reverse();
              this.start = this.max;
              this.end = this.min;
          } else {
              this.start = this.min;
              this.end = this.max;
          }
          return ticks;
      }
   getLabelForValue(value) {
          return value === undefined ? '0' : formatNumber(value, this.chart.options.locale, this.options.ticks.format);
      }
   configure() {
          const start = this.min;
          super.configure();
          this._startValue = log10(start);
          this._valueRange = log10(this.max) - log10(start);
      }
      getPixelForValue(value) {
          if (value === undefined || value === 0) {
              value = this.min;
          }
          if (value === null || isNaN(value)) {
              return NaN;
          }
          return this.getPixelForDecimal(value === this.min ? 0 : (log10(value) - this._startValue) / this._valueRange);
      }
      getValueForPixel(pixel) {
          const decimal = this.getDecimalForPixel(pixel);
          return Math.pow(10, this._startValue + decimal * this._valueRange);
      }
  }

  function getTickBackdropHeight(opts) {
      const tickOpts = opts.ticks;
      if (tickOpts.display && opts.display) {
          const padding = toPadding(tickOpts.backdropPadding);
          return valueOrDefault(tickOpts.font && tickOpts.font.size, defaults$1.font.size) + padding.height;
      }
      return 0;
  }
  function measureLabelSize(ctx, font, label) {
      label = isArray(label) ? label : [
          label
      ];
      return {
          w: _longestText(ctx, font.string, label),
          h: label.length * font.lineHeight
      };
  }
  function determineLimits(angle, pos, size, min, max) {
      if (angle === min || angle === max) {
          return {
              start: pos - size / 2,
              end: pos + size / 2
          };
      } else if (angle < min || angle > max) {
          return {
              start: pos - size,
              end: pos
          };
      }
      return {
          start: pos,
          end: pos + size
      };
  }
   function fitWithPointLabels(scale) {
      const orig = {
          l: scale.left + scale._padding.left,
          r: scale.right - scale._padding.right,
          t: scale.top + scale._padding.top,
          b: scale.bottom - scale._padding.bottom
      };
      const limits = Object.assign({}, orig);
      const labelSizes = [];
      const padding = [];
      const valueCount = scale._pointLabels.length;
      const pointLabelOpts = scale.options.pointLabels;
      const additionalAngle = pointLabelOpts.centerPointLabels ? PI / valueCount : 0;
      for(let i = 0; i < valueCount; i++){
          const opts = pointLabelOpts.setContext(scale.getPointLabelContext(i));
          padding[i] = opts.padding;
          const pointPosition = scale.getPointPosition(i, scale.drawingArea + padding[i], additionalAngle);
          const plFont = toFont(opts.font);
          const textSize = measureLabelSize(scale.ctx, plFont, scale._pointLabels[i]);
          labelSizes[i] = textSize;
          const angleRadians = _normalizeAngle(scale.getIndexAngle(i) + additionalAngle);
          const angle = Math.round(toDegrees(angleRadians));
          const hLimits = determineLimits(angle, pointPosition.x, textSize.w, 0, 180);
          const vLimits = determineLimits(angle, pointPosition.y, textSize.h, 90, 270);
          updateLimits(limits, orig, angleRadians, hLimits, vLimits);
      }
      scale.setCenterPoint(orig.l - limits.l, limits.r - orig.r, orig.t - limits.t, limits.b - orig.b);
      scale._pointLabelItems = buildPointLabelItems(scale, labelSizes, padding);
  }
  function updateLimits(limits, orig, angle, hLimits, vLimits) {
      const sin = Math.abs(Math.sin(angle));
      const cos = Math.abs(Math.cos(angle));
      let x = 0;
      let y = 0;
      if (hLimits.start < orig.l) {
          x = (orig.l - hLimits.start) / sin;
          limits.l = Math.min(limits.l, orig.l - x);
      } else if (hLimits.end > orig.r) {
          x = (hLimits.end - orig.r) / sin;
          limits.r = Math.max(limits.r, orig.r + x);
      }
      if (vLimits.start < orig.t) {
          y = (orig.t - vLimits.start) / cos;
          limits.t = Math.min(limits.t, orig.t - y);
      } else if (vLimits.end > orig.b) {
          y = (vLimits.end - orig.b) / cos;
          limits.b = Math.max(limits.b, orig.b + y);
      }
  }
  function createPointLabelItem(scale, index, itemOpts) {
      const outerDistance = scale.drawingArea;
      const { extra , additionalAngle , padding , size  } = itemOpts;
      const pointLabelPosition = scale.getPointPosition(index, outerDistance + extra + padding, additionalAngle);
      const angle = Math.round(toDegrees(_normalizeAngle(pointLabelPosition.angle + HALF_PI)));
      const y = yForAngle(pointLabelPosition.y, size.h, angle);
      const textAlign = getTextAlignForAngle(angle);
      const left = leftForTextAlign(pointLabelPosition.x, size.w, textAlign);
      return {
          visible: true,
          x: pointLabelPosition.x,
          y,
          textAlign,
          left,
          top: y,
          right: left + size.w,
          bottom: y + size.h
      };
  }
  function isNotOverlapped(item, area) {
      if (!area) {
          return true;
      }
      const { left , top , right , bottom  } = item;
      const apexesInArea = _isPointInArea({
          x: left,
          y: top
      }, area) || _isPointInArea({
          x: left,
          y: bottom
      }, area) || _isPointInArea({
          x: right,
          y: top
      }, area) || _isPointInArea({
          x: right,
          y: bottom
      }, area);
      return !apexesInArea;
  }
  function buildPointLabelItems(scale, labelSizes, padding) {
      const items = [];
      const valueCount = scale._pointLabels.length;
      const opts = scale.options;
      const { centerPointLabels , display  } = opts.pointLabels;
      const itemOpts = {
          extra: getTickBackdropHeight(opts) / 2,
          additionalAngle: centerPointLabels ? PI / valueCount : 0
      };
      let area;
      for(let i = 0; i < valueCount; i++){
          itemOpts.padding = padding[i];
          itemOpts.size = labelSizes[i];
          const item = createPointLabelItem(scale, i, itemOpts);
          items.push(item);
          if (display === 'auto') {
              item.visible = isNotOverlapped(item, area);
              if (item.visible) {
                  area = item;
              }
          }
      }
      return items;
  }
  function getTextAlignForAngle(angle) {
      if (angle === 0 || angle === 180) {
          return 'center';
      } else if (angle < 180) {
          return 'left';
      }
      return 'right';
  }
  function leftForTextAlign(x, w, align) {
      if (align === 'right') {
          x -= w;
      } else if (align === 'center') {
          x -= w / 2;
      }
      return x;
  }
  function yForAngle(y, h, angle) {
      if (angle === 90 || angle === 270) {
          y -= h / 2;
      } else if (angle > 270 || angle < 90) {
          y -= h;
      }
      return y;
  }
  function drawPointLabelBox(ctx, opts, item) {
      const { left , top , right , bottom  } = item;
      const { backdropColor  } = opts;
      if (!isNullOrUndef(backdropColor)) {
          const borderRadius = toTRBLCorners(opts.borderRadius);
          const padding = toPadding(opts.backdropPadding);
          ctx.fillStyle = backdropColor;
          const backdropLeft = left - padding.left;
          const backdropTop = top - padding.top;
          const backdropWidth = right - left + padding.width;
          const backdropHeight = bottom - top + padding.height;
          if (Object.values(borderRadius).some((v)=>v !== 0)) {
              ctx.beginPath();
              addRoundedRectPath(ctx, {
                  x: backdropLeft,
                  y: backdropTop,
                  w: backdropWidth,
                  h: backdropHeight,
                  radius: borderRadius
              });
              ctx.fill();
          } else {
              ctx.fillRect(backdropLeft, backdropTop, backdropWidth, backdropHeight);
          }
      }
  }
  function drawPointLabels(scale, labelCount) {
      const { ctx , options: { pointLabels  }  } = scale;
      for(let i = labelCount - 1; i >= 0; i--){
          const item = scale._pointLabelItems[i];
          if (!item.visible) {
              continue;
          }
          const optsAtIndex = pointLabels.setContext(scale.getPointLabelContext(i));
          drawPointLabelBox(ctx, optsAtIndex, item);
          const plFont = toFont(optsAtIndex.font);
          const { x , y , textAlign  } = item;
          renderText(ctx, scale._pointLabels[i], x, y + plFont.lineHeight / 2, plFont, {
              color: optsAtIndex.color,
              textAlign: textAlign,
              textBaseline: 'middle'
          });
      }
  }
  function pathRadiusLine(scale, radius, circular, labelCount) {
      const { ctx  } = scale;
      if (circular) {
          ctx.arc(scale.xCenter, scale.yCenter, radius, 0, TAU);
      } else {
          let pointPosition = scale.getPointPosition(0, radius);
          ctx.moveTo(pointPosition.x, pointPosition.y);
          for(let i = 1; i < labelCount; i++){
              pointPosition = scale.getPointPosition(i, radius);
              ctx.lineTo(pointPosition.x, pointPosition.y);
          }
      }
  }
  function drawRadiusLine(scale, gridLineOpts, radius, labelCount, borderOpts) {
      const ctx = scale.ctx;
      const circular = gridLineOpts.circular;
      const { color , lineWidth  } = gridLineOpts;
      if (!circular && !labelCount || !color || !lineWidth || radius < 0) {
          return;
      }
      ctx.save();
      ctx.strokeStyle = color;
      ctx.lineWidth = lineWidth;
      ctx.setLineDash(borderOpts.dash);
      ctx.lineDashOffset = borderOpts.dashOffset;
      ctx.beginPath();
      pathRadiusLine(scale, radius, circular, labelCount);
      ctx.closePath();
      ctx.stroke();
      ctx.restore();
  }
  function createPointLabelContext(parent, index, label) {
      return createContext(parent, {
          label,
          index,
          type: 'pointLabel'
      });
  }
  class RadialLinearScale extends LinearScaleBase {
      static id = 'radialLinear';
   static defaults = {
          display: true,
          animate: true,
          position: 'chartArea',
          angleLines: {
              display: true,
              lineWidth: 1,
              borderDash: [],
              borderDashOffset: 0.0
          },
          grid: {
              circular: false
          },
          startAngle: 0,
          ticks: {
              showLabelBackdrop: true,
              callback: Ticks.formatters.numeric
          },
          pointLabels: {
              backdropColor: undefined,
              backdropPadding: 2,
              display: true,
              font: {
                  size: 10
              },
              callback (label) {
                  return label;
              },
              padding: 5,
              centerPointLabels: false
          }
      };
      static defaultRoutes = {
          'angleLines.color': 'borderColor',
          'pointLabels.color': 'color',
          'ticks.color': 'color'
      };
      static descriptors = {
          angleLines: {
              _fallback: 'grid'
          }
      };
      constructor(cfg){
          super(cfg);
           this.xCenter = undefined;
           this.yCenter = undefined;
           this.drawingArea = undefined;
           this._pointLabels = [];
          this._pointLabelItems = [];
      }
      setDimensions() {
          const padding = this._padding = toPadding(getTickBackdropHeight(this.options) / 2);
          const w = this.width = this.maxWidth - padding.width;
          const h = this.height = this.maxHeight - padding.height;
          this.xCenter = Math.floor(this.left + w / 2 + padding.left);
          this.yCenter = Math.floor(this.top + h / 2 + padding.top);
          this.drawingArea = Math.floor(Math.min(w, h) / 2);
      }
      determineDataLimits() {
          const { min , max  } = this.getMinMax(false);
          this.min = isNumberFinite(min) && !isNaN(min) ? min : 0;
          this.max = isNumberFinite(max) && !isNaN(max) ? max : 0;
          this.handleTickRangeOptions();
      }
   computeTickLimit() {
          return Math.ceil(this.drawingArea / getTickBackdropHeight(this.options));
      }
      generateTickLabels(ticks) {
          LinearScaleBase.prototype.generateTickLabels.call(this, ticks);
          this._pointLabels = this.getLabels().map((value, index)=>{
              const label = callback(this.options.pointLabels.callback, [
                  value,
                  index
              ], this);
              return label || label === 0 ? label : '';
          }).filter((v, i)=>this.chart.getDataVisibility(i));
      }
      fit() {
          const opts = this.options;
          if (opts.display && opts.pointLabels.display) {
              fitWithPointLabels(this);
          } else {
              this.setCenterPoint(0, 0, 0, 0);
          }
      }
      setCenterPoint(leftMovement, rightMovement, topMovement, bottomMovement) {
          this.xCenter += Math.floor((leftMovement - rightMovement) / 2);
          this.yCenter += Math.floor((topMovement - bottomMovement) / 2);
          this.drawingArea -= Math.min(this.drawingArea / 2, Math.max(leftMovement, rightMovement, topMovement, bottomMovement));
      }
      getIndexAngle(index) {
          const angleMultiplier = TAU / (this._pointLabels.length || 1);
          const startAngle = this.options.startAngle || 0;
          return _normalizeAngle(index * angleMultiplier + toRadians(startAngle));
      }
      getDistanceFromCenterForValue(value) {
          if (isNullOrUndef(value)) {
              return NaN;
          }
          const scalingFactor = this.drawingArea / (this.max - this.min);
          if (this.options.reverse) {
              return (this.max - value) * scalingFactor;
          }
          return (value - this.min) * scalingFactor;
      }
      getValueForDistanceFromCenter(distance) {
          if (isNullOrUndef(distance)) {
              return NaN;
          }
          const scaledDistance = distance / (this.drawingArea / (this.max - this.min));
          return this.options.reverse ? this.max - scaledDistance : this.min + scaledDistance;
      }
      getPointLabelContext(index) {
          const pointLabels = this._pointLabels || [];
          if (index >= 0 && index < pointLabels.length) {
              const pointLabel = pointLabels[index];
              return createPointLabelContext(this.getContext(), index, pointLabel);
          }
      }
      getPointPosition(index, distanceFromCenter, additionalAngle = 0) {
          const angle = this.getIndexAngle(index) - HALF_PI + additionalAngle;
          return {
              x: Math.cos(angle) * distanceFromCenter + this.xCenter,
              y: Math.sin(angle) * distanceFromCenter + this.yCenter,
              angle
          };
      }
      getPointPositionForValue(index, value) {
          return this.getPointPosition(index, this.getDistanceFromCenterForValue(value));
      }
      getBasePosition(index) {
          return this.getPointPositionForValue(index || 0, this.getBaseValue());
      }
      getPointLabelPosition(index) {
          const { left , top , right , bottom  } = this._pointLabelItems[index];
          return {
              left,
              top,
              right,
              bottom
          };
      }
   drawBackground() {
          const { backgroundColor , grid: { circular  }  } = this.options;
          if (backgroundColor) {
              const ctx = this.ctx;
              ctx.save();
              ctx.beginPath();
              pathRadiusLine(this, this.getDistanceFromCenterForValue(this._endValue), circular, this._pointLabels.length);
              ctx.closePath();
              ctx.fillStyle = backgroundColor;
              ctx.fill();
              ctx.restore();
          }
      }
   drawGrid() {
          const ctx = this.ctx;
          const opts = this.options;
          const { angleLines , grid , border  } = opts;
          const labelCount = this._pointLabels.length;
          let i, offset, position;
          if (opts.pointLabels.display) {
              drawPointLabels(this, labelCount);
          }
          if (grid.display) {
              this.ticks.forEach((tick, index)=>{
                  if (index !== 0 || index === 0 && this.min < 0) {
                      offset = this.getDistanceFromCenterForValue(tick.value);
                      const context = this.getContext(index);
                      const optsAtIndex = grid.setContext(context);
                      const optsAtIndexBorder = border.setContext(context);
                      drawRadiusLine(this, optsAtIndex, offset, labelCount, optsAtIndexBorder);
                  }
              });
          }
          if (angleLines.display) {
              ctx.save();
              for(i = labelCount - 1; i >= 0; i--){
                  const optsAtIndex = angleLines.setContext(this.getPointLabelContext(i));
                  const { color , lineWidth  } = optsAtIndex;
                  if (!lineWidth || !color) {
                      continue;
                  }
                  ctx.lineWidth = lineWidth;
                  ctx.strokeStyle = color;
                  ctx.setLineDash(optsAtIndex.borderDash);
                  ctx.lineDashOffset = optsAtIndex.borderDashOffset;
                  offset = this.getDistanceFromCenterForValue(opts.reverse ? this.min : this.max);
                  position = this.getPointPosition(i, offset);
                  ctx.beginPath();
                  ctx.moveTo(this.xCenter, this.yCenter);
                  ctx.lineTo(position.x, position.y);
                  ctx.stroke();
              }
              ctx.restore();
          }
      }
   drawBorder() {}
   drawLabels() {
          const ctx = this.ctx;
          const opts = this.options;
          const tickOpts = opts.ticks;
          if (!tickOpts.display) {
              return;
          }
          const startAngle = this.getIndexAngle(0);
          let offset, width;
          ctx.save();
          ctx.translate(this.xCenter, this.yCenter);
          ctx.rotate(startAngle);
          ctx.textAlign = 'center';
          ctx.textBaseline = 'middle';
          this.ticks.forEach((tick, index)=>{
              if (index === 0 && this.min >= 0 && !opts.reverse) {
                  return;
              }
              const optsAtIndex = tickOpts.setContext(this.getContext(index));
              const tickFont = toFont(optsAtIndex.font);
              offset = this.getDistanceFromCenterForValue(this.ticks[index].value);
              if (optsAtIndex.showLabelBackdrop) {
                  ctx.font = tickFont.string;
                  width = ctx.measureText(tick.label).width;
                  ctx.fillStyle = optsAtIndex.backdropColor;
                  const padding = toPadding(optsAtIndex.backdropPadding);
                  ctx.fillRect(-width / 2 - padding.left, -offset - tickFont.size / 2 - padding.top, width + padding.width, tickFont.size + padding.height);
              }
              renderText(ctx, tick.label, 0, -offset, tickFont, {
                  color: optsAtIndex.color,
                  strokeColor: optsAtIndex.textStrokeColor,
                  strokeWidth: optsAtIndex.textStrokeWidth
              });
          });
          ctx.restore();
      }
   drawTitle() {}
  }

  const INTERVALS = {
      millisecond: {
          common: true,
          size: 1,
          steps: 1000
      },
      second: {
          common: true,
          size: 1000,
          steps: 60
      },
      minute: {
          common: true,
          size: 60000,
          steps: 60
      },
      hour: {
          common: true,
          size: 3600000,
          steps: 24
      },
      day: {
          common: true,
          size: 86400000,
          steps: 30
      },
      week: {
          common: false,
          size: 604800000,
          steps: 4
      },
      month: {
          common: true,
          size: 2.628e9,
          steps: 12
      },
      quarter: {
          common: false,
          size: 7.884e9,
          steps: 4
      },
      year: {
          common: true,
          size: 3.154e10
      }
  };
   const UNITS =  /* #__PURE__ */ Object.keys(INTERVALS);
   function sorter(a, b) {
      return a - b;
  }
   function parse(scale, input) {
      if (isNullOrUndef(input)) {
          return null;
      }
      const adapter = scale._adapter;
      const { parser , round , isoWeekday  } = scale._parseOpts;
      let value = input;
      if (typeof parser === 'function') {
          value = parser(value);
      }
      if (!isNumberFinite(value)) {
          value = typeof parser === 'string' ? adapter.parse(value,  parser) : adapter.parse(value);
      }
      if (value === null) {
          return null;
      }
      if (round) {
          value = round === 'week' && (isNumber(isoWeekday) || isoWeekday === true) ? adapter.startOf(value, 'isoWeek', isoWeekday) : adapter.startOf(value, round);
      }
      return +value;
  }
   function determineUnitForAutoTicks(minUnit, min, max, capacity) {
      const ilen = UNITS.length;
      for(let i = UNITS.indexOf(minUnit); i < ilen - 1; ++i){
          const interval = INTERVALS[UNITS[i]];
          const factor = interval.steps ? interval.steps : Number.MAX_SAFE_INTEGER;
          if (interval.common && Math.ceil((max - min) / (factor * interval.size)) <= capacity) {
              return UNITS[i];
          }
      }
      return UNITS[ilen - 1];
  }
   function determineUnitForFormatting(scale, numTicks, minUnit, min, max) {
      for(let i = UNITS.length - 1; i >= UNITS.indexOf(minUnit); i--){
          const unit = UNITS[i];
          if (INTERVALS[unit].common && scale._adapter.diff(max, min, unit) >= numTicks - 1) {
              return unit;
          }
      }
      return UNITS[minUnit ? UNITS.indexOf(minUnit) : 0];
  }
   function determineMajorUnit(unit) {
      for(let i = UNITS.indexOf(unit) + 1, ilen = UNITS.length; i < ilen; ++i){
          if (INTERVALS[UNITS[i]].common) {
              return UNITS[i];
          }
      }
  }
   function addTick(ticks, time, timestamps) {
      if (!timestamps) {
          ticks[time] = true;
      } else if (timestamps.length) {
          const { lo , hi  } = _lookup(timestamps, time);
          const timestamp = timestamps[lo] >= time ? timestamps[lo] : timestamps[hi];
          ticks[timestamp] = true;
      }
  }
   function setMajorTicks(scale, ticks, map, majorUnit) {
      const adapter = scale._adapter;
      const first = +adapter.startOf(ticks[0].value, majorUnit);
      const last = ticks[ticks.length - 1].value;
      let major, index;
      for(major = first; major <= last; major = +adapter.add(major, 1, majorUnit)){
          index = map[major];
          if (index >= 0) {
              ticks[index].major = true;
          }
      }
      return ticks;
  }
   function ticksFromTimestamps(scale, values, majorUnit) {
      const ticks = [];
       const map = {};
      const ilen = values.length;
      let i, value;
      for(i = 0; i < ilen; ++i){
          value = values[i];
          map[value] = i;
          ticks.push({
              value,
              major: false
          });
      }
      return ilen === 0 || !majorUnit ? ticks : setMajorTicks(scale, ticks, map, majorUnit);
  }
  class TimeScale extends Scale {
      static id = 'time';
   static defaults = {
   bounds: 'data',
          adapters: {},
          time: {
              parser: false,
              unit: false,
              round: false,
              isoWeekday: false,
              minUnit: 'millisecond',
              displayFormats: {}
          },
          ticks: {
   source: 'auto',
              callback: false,
              major: {
                  enabled: false
              }
          }
      };
   constructor(props){
          super(props);
           this._cache = {
              data: [],
              labels: [],
              all: []
          };
           this._unit = 'day';
           this._majorUnit = undefined;
          this._offsets = {};
          this._normalized = false;
          this._parseOpts = undefined;
      }
      init(scaleOpts, opts = {}) {
          const time = scaleOpts.time || (scaleOpts.time = {});
           const adapter = this._adapter = new adapters._date(scaleOpts.adapters.date);
          adapter.init(opts);
          mergeIf(time.displayFormats, adapter.formats());
          this._parseOpts = {
              parser: time.parser,
              round: time.round,
              isoWeekday: time.isoWeekday
          };
          super.init(scaleOpts);
          this._normalized = opts.normalized;
      }
   parse(raw, index) {
          if (raw === undefined) {
              return null;
          }
          return parse(this, raw);
      }
      beforeLayout() {
          super.beforeLayout();
          this._cache = {
              data: [],
              labels: [],
              all: []
          };
      }
      determineDataLimits() {
          const options = this.options;
          const adapter = this._adapter;
          const unit = options.time.unit || 'day';
          let { min , max , minDefined , maxDefined  } = this.getUserBounds();
   function _applyBounds(bounds) {
              if (!minDefined && !isNaN(bounds.min)) {
                  min = Math.min(min, bounds.min);
              }
              if (!maxDefined && !isNaN(bounds.max)) {
                  max = Math.max(max, bounds.max);
              }
          }
          if (!minDefined || !maxDefined) {
              _applyBounds(this._getLabelBounds());
              if (options.bounds !== 'ticks' || options.ticks.source !== 'labels') {
                  _applyBounds(this.getMinMax(false));
              }
          }
          min = isNumberFinite(min) && !isNaN(min) ? min : +adapter.startOf(Date.now(), unit);
          max = isNumberFinite(max) && !isNaN(max) ? max : +adapter.endOf(Date.now(), unit) + 1;
          this.min = Math.min(min, max - 1);
          this.max = Math.max(min + 1, max);
      }
   _getLabelBounds() {
          const arr = this.getLabelTimestamps();
          let min = Number.POSITIVE_INFINITY;
          let max = Number.NEGATIVE_INFINITY;
          if (arr.length) {
              min = arr[0];
              max = arr[arr.length - 1];
          }
          return {
              min,
              max
          };
      }
   buildTicks() {
          const options = this.options;
          const timeOpts = options.time;
          const tickOpts = options.ticks;
          const timestamps = tickOpts.source === 'labels' ? this.getLabelTimestamps() : this._generate();
          if (options.bounds === 'ticks' && timestamps.length) {
              this.min = this._userMin || timestamps[0];
              this.max = this._userMax || timestamps[timestamps.length - 1];
          }
          const min = this.min;
          const max = this.max;
          const ticks = _filterBetween(timestamps, min, max);
          this._unit = timeOpts.unit || (tickOpts.autoSkip ? determineUnitForAutoTicks(timeOpts.minUnit, this.min, this.max, this._getLabelCapacity(min)) : determineUnitForFormatting(this, ticks.length, timeOpts.minUnit, this.min, this.max));
          this._majorUnit = !tickOpts.major.enabled || this._unit === 'year' ? undefined : determineMajorUnit(this._unit);
          this.initOffsets(timestamps);
          if (options.reverse) {
              ticks.reverse();
          }
          return ticksFromTimestamps(this, ticks, this._majorUnit);
      }
      afterAutoSkip() {
          if (this.options.offsetAfterAutoskip) {
              this.initOffsets(this.ticks.map((tick)=>+tick.value));
          }
      }
   initOffsets(timestamps = []) {
          let start = 0;
          let end = 0;
          let first, last;
          if (this.options.offset && timestamps.length) {
              first = this.getDecimalForValue(timestamps[0]);
              if (timestamps.length === 1) {
                  start = 1 - first;
              } else {
                  start = (this.getDecimalForValue(timestamps[1]) - first) / 2;
              }
              last = this.getDecimalForValue(timestamps[timestamps.length - 1]);
              if (timestamps.length === 1) {
                  end = last;
              } else {
                  end = (last - this.getDecimalForValue(timestamps[timestamps.length - 2])) / 2;
              }
          }
          const limit = timestamps.length < 3 ? 0.5 : 0.25;
          start = _limitValue(start, 0, limit);
          end = _limitValue(end, 0, limit);
          this._offsets = {
              start,
              end,
              factor: 1 / (start + 1 + end)
          };
      }
   _generate() {
          const adapter = this._adapter;
          const min = this.min;
          const max = this.max;
          const options = this.options;
          const timeOpts = options.time;
          const minor = timeOpts.unit || determineUnitForAutoTicks(timeOpts.minUnit, min, max, this._getLabelCapacity(min));
          const stepSize = valueOrDefault(options.ticks.stepSize, 1);
          const weekday = minor === 'week' ? timeOpts.isoWeekday : false;
          const hasWeekday = isNumber(weekday) || weekday === true;
          const ticks = {};
          let first = min;
          let time, count;
          if (hasWeekday) {
              first = +adapter.startOf(first, 'isoWeek', weekday);
          }
          first = +adapter.startOf(first, hasWeekday ? 'day' : minor);
          if (adapter.diff(max, min, minor) > 100000 * stepSize) {
              throw new Error(min + ' and ' + max + ' are too far apart with stepSize of ' + stepSize + ' ' + minor);
          }
          const timestamps = options.ticks.source === 'data' && this.getDataTimestamps();
          for(time = first, count = 0; time < max; time = +adapter.add(time, stepSize, minor), count++){
              addTick(ticks, time, timestamps);
          }
          if (time === max || options.bounds === 'ticks' || count === 1) {
              addTick(ticks, time, timestamps);
          }
          return Object.keys(ticks).sort(sorter).map((x)=>+x);
      }
   getLabelForValue(value) {
          const adapter = this._adapter;
          const timeOpts = this.options.time;
          if (timeOpts.tooltipFormat) {
              return adapter.format(value, timeOpts.tooltipFormat);
          }
          return adapter.format(value, timeOpts.displayFormats.datetime);
      }
   format(value, format) {
          const options = this.options;
          const formats = options.time.displayFormats;
          const unit = this._unit;
          const fmt = format || formats[unit];
          return this._adapter.format(value, fmt);
      }
   _tickFormatFunction(time, index, ticks, format) {
          const options = this.options;
          const formatter = options.ticks.callback;
          if (formatter) {
              return callback(formatter, [
                  time,
                  index,
                  ticks
              ], this);
          }
          const formats = options.time.displayFormats;
          const unit = this._unit;
          const majorUnit = this._majorUnit;
          const minorFormat = unit && formats[unit];
          const majorFormat = majorUnit && formats[majorUnit];
          const tick = ticks[index];
          const major = majorUnit && majorFormat && tick && tick.major;
          return this._adapter.format(time, format || (major ? majorFormat : minorFormat));
      }
   generateTickLabels(ticks) {
          let i, ilen, tick;
          for(i = 0, ilen = ticks.length; i < ilen; ++i){
              tick = ticks[i];
              tick.label = this._tickFormatFunction(tick.value, i, ticks);
          }
      }
   getDecimalForValue(value) {
          return value === null ? NaN : (value - this.min) / (this.max - this.min);
      }
   getPixelForValue(value) {
          const offsets = this._offsets;
          const pos = this.getDecimalForValue(value);
          return this.getPixelForDecimal((offsets.start + pos) * offsets.factor);
      }
   getValueForPixel(pixel) {
          const offsets = this._offsets;
          const pos = this.getDecimalForPixel(pixel) / offsets.factor - offsets.end;
          return this.min + pos * (this.max - this.min);
      }
   _getLabelSize(label) {
          const ticksOpts = this.options.ticks;
          const tickLabelWidth = this.ctx.measureText(label).width;
          const angle = toRadians(this.isHorizontal() ? ticksOpts.maxRotation : ticksOpts.minRotation);
          const cosRotation = Math.cos(angle);
          const sinRotation = Math.sin(angle);
          const tickFontSize = this._resolveTickFontOptions(0).size;
          return {
              w: tickLabelWidth * cosRotation + tickFontSize * sinRotation,
              h: tickLabelWidth * sinRotation + tickFontSize * cosRotation
          };
      }
   _getLabelCapacity(exampleTime) {
          const timeOpts = this.options.time;
          const displayFormats = timeOpts.displayFormats;
          const format = displayFormats[timeOpts.unit] || displayFormats.millisecond;
          const exampleLabel = this._tickFormatFunction(exampleTime, 0, ticksFromTimestamps(this, [
              exampleTime
          ], this._majorUnit), format);
          const size = this._getLabelSize(exampleLabel);
          const capacity = Math.floor(this.isHorizontal() ? this.width / size.w : this.height / size.h) - 1;
          return capacity > 0 ? capacity : 1;
      }
   getDataTimestamps() {
          let timestamps = this._cache.data || [];
          let i, ilen;
          if (timestamps.length) {
              return timestamps;
          }
          const metas = this.getMatchingVisibleMetas();
          if (this._normalized && metas.length) {
              return this._cache.data = metas[0].controller.getAllParsedValues(this);
          }
          for(i = 0, ilen = metas.length; i < ilen; ++i){
              timestamps = timestamps.concat(metas[i].controller.getAllParsedValues(this));
          }
          return this._cache.data = this.normalize(timestamps);
      }
   getLabelTimestamps() {
          const timestamps = this._cache.labels || [];
          let i, ilen;
          if (timestamps.length) {
              return timestamps;
          }
          const labels = this.getLabels();
          for(i = 0, ilen = labels.length; i < ilen; ++i){
              timestamps.push(parse(this, labels[i]));
          }
          return this._cache.labels = this._normalized ? timestamps : this.normalize(timestamps);
      }
   normalize(values) {
          return _arrayUnique(values.sort(sorter));
      }
  }

  function interpolate(table, val, reverse) {
      let lo = 0;
      let hi = table.length - 1;
      let prevSource, nextSource, prevTarget, nextTarget;
      if (reverse) {
          if (val >= table[lo].pos && val <= table[hi].pos) {
              ({ lo , hi  } = _lookupByKey(table, 'pos', val));
          }
          ({ pos: prevSource , time: prevTarget  } = table[lo]);
          ({ pos: nextSource , time: nextTarget  } = table[hi]);
      } else {
          if (val >= table[lo].time && val <= table[hi].time) {
              ({ lo , hi  } = _lookupByKey(table, 'time', val));
          }
          ({ time: prevSource , pos: prevTarget  } = table[lo]);
          ({ time: nextSource , pos: nextTarget  } = table[hi]);
      }
      const span = nextSource - prevSource;
      return span ? prevTarget + (nextTarget - prevTarget) * (val - prevSource) / span : prevTarget;
  }
  class TimeSeriesScale extends TimeScale {
      static id = 'timeseries';
   static defaults = TimeScale.defaults;
   constructor(props){
          super(props);
           this._table = [];
           this._minPos = undefined;
           this._tableRange = undefined;
      }
   initOffsets() {
          const timestamps = this._getTimestampsForTable();
          const table = this._table = this.buildLookupTable(timestamps);
          this._minPos = interpolate(table, this.min);
          this._tableRange = interpolate(table, this.max) - this._minPos;
          super.initOffsets(timestamps);
      }
   buildLookupTable(timestamps) {
          const { min , max  } = this;
          const items = [];
          const table = [];
          let i, ilen, prev, curr, next;
          for(i = 0, ilen = timestamps.length; i < ilen; ++i){
              curr = timestamps[i];
              if (curr >= min && curr <= max) {
                  items.push(curr);
              }
          }
          if (items.length < 2) {
              return [
                  {
                      time: min,
                      pos: 0
                  },
                  {
                      time: max,
                      pos: 1
                  }
              ];
          }
          for(i = 0, ilen = items.length; i < ilen; ++i){
              next = items[i + 1];
              prev = items[i - 1];
              curr = items[i];
              if (Math.round((next + prev) / 2) !== curr) {
                  table.push({
                      time: curr,
                      pos: i / (ilen - 1)
                  });
              }
          }
          return table;
      }
   _generate() {
          const min = this.min;
          const max = this.max;
          let timestamps = super.getDataTimestamps();
          if (!timestamps.includes(min) || !timestamps.length) {
              timestamps.splice(0, 0, min);
          }
          if (!timestamps.includes(max) || timestamps.length === 1) {
              timestamps.push(max);
          }
          return timestamps.sort((a, b)=>a - b);
      }
   _getTimestampsForTable() {
          let timestamps = this._cache.all || [];
          if (timestamps.length) {
              return timestamps;
          }
          const data = this.getDataTimestamps();
          const label = this.getLabelTimestamps();
          if (data.length && label.length) {
              timestamps = this.normalize(data.concat(label));
          } else {
              timestamps = data.length ? data : label;
          }
          timestamps = this._cache.all = timestamps;
          return timestamps;
      }
   getDecimalForValue(value) {
          return (interpolate(this._table, value) - this._minPos) / this._tableRange;
      }
   getValueForPixel(pixel) {
          const offsets = this._offsets;
          const decimal = this.getDecimalForPixel(pixel) / offsets.factor - offsets.end;
          return interpolate(this._table, decimal * this._tableRange + this._minPos, true);
      }
  }

  var scales = /*#__PURE__*/Object.freeze({
  __proto__: null,
  CategoryScale: CategoryScale,
  LinearScale: LinearScale,
  LogarithmicScale: LogarithmicScale,
  RadialLinearScale: RadialLinearScale,
  TimeScale: TimeScale,
  TimeSeriesScale: TimeSeriesScale
  });

  const registerables = [
      controllers,
      elements,
      plugins$1,
      scales
  ];

  Chart.register(...registerables);

  var hammer$1 = {exports: {}};

  /*! Hammer.JS - v2.0.7 - 2016-04-22
   * http://hammerjs.github.io/
   *
   * Copyright (c) 2016 Jorik Tangelder;
   * Licensed under the MIT license */

  (function (module) {
  	(function(window, document, exportName, undefined$1) {

  	var VENDOR_PREFIXES = ['', 'webkit', 'Moz', 'MS', 'ms', 'o'];
  	var TEST_ELEMENT = document.createElement('div');

  	var TYPE_FUNCTION = 'function';

  	var round = Math.round;
  	var abs = Math.abs;
  	var now = Date.now;

  	/**
  	 * set a timeout with a given scope
  	 * @param {Function} fn
  	 * @param {Number} timeout
  	 * @param {Object} context
  	 * @returns {number}
  	 */
  	function setTimeoutContext(fn, timeout, context) {
  	    return setTimeout(bindFn(fn, context), timeout);
  	}

  	/**
  	 * if the argument is an array, we want to execute the fn on each entry
  	 * if it aint an array we don't want to do a thing.
  	 * this is used by all the methods that accept a single and array argument.
  	 * @param {*|Array} arg
  	 * @param {String} fn
  	 * @param {Object} [context]
  	 * @returns {Boolean}
  	 */
  	function invokeArrayArg(arg, fn, context) {
  	    if (Array.isArray(arg)) {
  	        each(arg, context[fn], context);
  	        return true;
  	    }
  	    return false;
  	}

  	/**
  	 * walk objects and arrays
  	 * @param {Object} obj
  	 * @param {Function} iterator
  	 * @param {Object} context
  	 */
  	function each(obj, iterator, context) {
  	    var i;

  	    if (!obj) {
  	        return;
  	    }

  	    if (obj.forEach) {
  	        obj.forEach(iterator, context);
  	    } else if (obj.length !== undefined$1) {
  	        i = 0;
  	        while (i < obj.length) {
  	            iterator.call(context, obj[i], i, obj);
  	            i++;
  	        }
  	    } else {
  	        for (i in obj) {
  	            obj.hasOwnProperty(i) && iterator.call(context, obj[i], i, obj);
  	        }
  	    }
  	}

  	/**
  	 * wrap a method with a deprecation warning and stack trace
  	 * @param {Function} method
  	 * @param {String} name
  	 * @param {String} message
  	 * @returns {Function} A new function wrapping the supplied method.
  	 */
  	function deprecate(method, name, message) {
  	    var deprecationMessage = 'DEPRECATED METHOD: ' + name + '\n' + message + ' AT \n';
  	    return function() {
  	        var e = new Error('get-stack-trace');
  	        var stack = e && e.stack ? e.stack.replace(/^[^\(]+?[\n$]/gm, '')
  	            .replace(/^\s+at\s+/gm, '')
  	            .replace(/^Object.<anonymous>\s*\(/gm, '{anonymous}()@') : 'Unknown Stack Trace';

  	        var log = window.console && (window.console.warn || window.console.log);
  	        if (log) {
  	            log.call(window.console, deprecationMessage, stack);
  	        }
  	        return method.apply(this, arguments);
  	    };
  	}

  	/**
  	 * extend object.
  	 * means that properties in dest will be overwritten by the ones in src.
  	 * @param {Object} target
  	 * @param {...Object} objects_to_assign
  	 * @returns {Object} target
  	 */
  	var assign;
  	if (typeof Object.assign !== 'function') {
  	    assign = function assign(target) {
  	        if (target === undefined$1 || target === null) {
  	            throw new TypeError('Cannot convert undefined or null to object');
  	        }

  	        var output = Object(target);
  	        for (var index = 1; index < arguments.length; index++) {
  	            var source = arguments[index];
  	            if (source !== undefined$1 && source !== null) {
  	                for (var nextKey in source) {
  	                    if (source.hasOwnProperty(nextKey)) {
  	                        output[nextKey] = source[nextKey];
  	                    }
  	                }
  	            }
  	        }
  	        return output;
  	    };
  	} else {
  	    assign = Object.assign;
  	}

  	/**
  	 * extend object.
  	 * means that properties in dest will be overwritten by the ones in src.
  	 * @param {Object} dest
  	 * @param {Object} src
  	 * @param {Boolean} [merge=false]
  	 * @returns {Object} dest
  	 */
  	var extend = deprecate(function extend(dest, src, merge) {
  	    var keys = Object.keys(src);
  	    var i = 0;
  	    while (i < keys.length) {
  	        if (!merge || (merge && dest[keys[i]] === undefined$1)) {
  	            dest[keys[i]] = src[keys[i]];
  	        }
  	        i++;
  	    }
  	    return dest;
  	}, 'extend', 'Use `assign`.');

  	/**
  	 * merge the values from src in the dest.
  	 * means that properties that exist in dest will not be overwritten by src
  	 * @param {Object} dest
  	 * @param {Object} src
  	 * @returns {Object} dest
  	 */
  	var merge = deprecate(function merge(dest, src) {
  	    return extend(dest, src, true);
  	}, 'merge', 'Use `assign`.');

  	/**
  	 * simple class inheritance
  	 * @param {Function} child
  	 * @param {Function} base
  	 * @param {Object} [properties]
  	 */
  	function inherit(child, base, properties) {
  	    var baseP = base.prototype,
  	        childP;

  	    childP = child.prototype = Object.create(baseP);
  	    childP.constructor = child;
  	    childP._super = baseP;

  	    if (properties) {
  	        assign(childP, properties);
  	    }
  	}

  	/**
  	 * simple function bind
  	 * @param {Function} fn
  	 * @param {Object} context
  	 * @returns {Function}
  	 */
  	function bindFn(fn, context) {
  	    return function boundFn() {
  	        return fn.apply(context, arguments);
  	    };
  	}

  	/**
  	 * let a boolean value also be a function that must return a boolean
  	 * this first item in args will be used as the context
  	 * @param {Boolean|Function} val
  	 * @param {Array} [args]
  	 * @returns {Boolean}
  	 */
  	function boolOrFn(val, args) {
  	    if (typeof val == TYPE_FUNCTION) {
  	        return val.apply(args ? args[0] || undefined$1 : undefined$1, args);
  	    }
  	    return val;
  	}

  	/**
  	 * use the val2 when val1 is undefined
  	 * @param {*} val1
  	 * @param {*} val2
  	 * @returns {*}
  	 */
  	function ifUndefined(val1, val2) {
  	    return (val1 === undefined$1) ? val2 : val1;
  	}

  	/**
  	 * addEventListener with multiple events at once
  	 * @param {EventTarget} target
  	 * @param {String} types
  	 * @param {Function} handler
  	 */
  	function addEventListeners(target, types, handler) {
  	    each(splitStr(types), function(type) {
  	        target.addEventListener(type, handler, false);
  	    });
  	}

  	/**
  	 * removeEventListener with multiple events at once
  	 * @param {EventTarget} target
  	 * @param {String} types
  	 * @param {Function} handler
  	 */
  	function removeEventListeners(target, types, handler) {
  	    each(splitStr(types), function(type) {
  	        target.removeEventListener(type, handler, false);
  	    });
  	}

  	/**
  	 * find if a node is in the given parent
  	 * @method hasParent
  	 * @param {HTMLElement} node
  	 * @param {HTMLElement} parent
  	 * @return {Boolean} found
  	 */
  	function hasParent(node, parent) {
  	    while (node) {
  	        if (node == parent) {
  	            return true;
  	        }
  	        node = node.parentNode;
  	    }
  	    return false;
  	}

  	/**
  	 * small indexOf wrapper
  	 * @param {String} str
  	 * @param {String} find
  	 * @returns {Boolean} found
  	 */
  	function inStr(str, find) {
  	    return str.indexOf(find) > -1;
  	}

  	/**
  	 * split string on whitespace
  	 * @param {String} str
  	 * @returns {Array} words
  	 */
  	function splitStr(str) {
  	    return str.trim().split(/\s+/g);
  	}

  	/**
  	 * find if a array contains the object using indexOf or a simple polyFill
  	 * @param {Array} src
  	 * @param {String} find
  	 * @param {String} [findByKey]
  	 * @return {Boolean|Number} false when not found, or the index
  	 */
  	function inArray(src, find, findByKey) {
  	    if (src.indexOf && !findByKey) {
  	        return src.indexOf(find);
  	    } else {
  	        var i = 0;
  	        while (i < src.length) {
  	            if ((findByKey && src[i][findByKey] == find) || (!findByKey && src[i] === find)) {
  	                return i;
  	            }
  	            i++;
  	        }
  	        return -1;
  	    }
  	}

  	/**
  	 * convert array-like objects to real arrays
  	 * @param {Object} obj
  	 * @returns {Array}
  	 */
  	function toArray(obj) {
  	    return Array.prototype.slice.call(obj, 0);
  	}

  	/**
  	 * unique array with objects based on a key (like 'id') or just by the array's value
  	 * @param {Array} src [{id:1},{id:2},{id:1}]
  	 * @param {String} [key]
  	 * @param {Boolean} [sort=False]
  	 * @returns {Array} [{id:1},{id:2}]
  	 */
  	function uniqueArray(src, key, sort) {
  	    var results = [];
  	    var values = [];
  	    var i = 0;

  	    while (i < src.length) {
  	        var val = src[i][key] ;
  	        if (inArray(values, val) < 0) {
  	            results.push(src[i]);
  	        }
  	        values[i] = val;
  	        i++;
  	    }

  	    {
  	        {
  	            results = results.sort(function sortUniqueArray(a, b) {
  	                return a[key] > b[key];
  	            });
  	        }
  	    }

  	    return results;
  	}

  	/**
  	 * get the prefixed property
  	 * @param {Object} obj
  	 * @param {String} property
  	 * @returns {String|Undefined} prefixed
  	 */
  	function prefixed(obj, property) {
  	    var prefix, prop;
  	    var camelProp = property[0].toUpperCase() + property.slice(1);

  	    var i = 0;
  	    while (i < VENDOR_PREFIXES.length) {
  	        prefix = VENDOR_PREFIXES[i];
  	        prop = (prefix) ? prefix + camelProp : property;

  	        if (prop in obj) {
  	            return prop;
  	        }
  	        i++;
  	    }
  	    return undefined$1;
  	}

  	/**
  	 * get a unique id
  	 * @returns {number} uniqueId
  	 */
  	var _uniqueId = 1;
  	function uniqueId() {
  	    return _uniqueId++;
  	}

  	/**
  	 * get the window object of an element
  	 * @param {HTMLElement} element
  	 * @returns {DocumentView|Window}
  	 */
  	function getWindowForElement(element) {
  	    var doc = element.ownerDocument || element;
  	    return (doc.defaultView || doc.parentWindow || window);
  	}

  	var MOBILE_REGEX = /mobile|tablet|ip(ad|hone|od)|android/i;

  	var SUPPORT_TOUCH = ('ontouchstart' in window);
  	var SUPPORT_POINTER_EVENTS = prefixed(window, 'PointerEvent') !== undefined$1;
  	var SUPPORT_ONLY_TOUCH = SUPPORT_TOUCH && MOBILE_REGEX.test(navigator.userAgent);

  	var INPUT_TYPE_TOUCH = 'touch';
  	var INPUT_TYPE_PEN = 'pen';
  	var INPUT_TYPE_MOUSE = 'mouse';
  	var INPUT_TYPE_KINECT = 'kinect';

  	var COMPUTE_INTERVAL = 25;

  	var INPUT_START = 1;
  	var INPUT_MOVE = 2;
  	var INPUT_END = 4;
  	var INPUT_CANCEL = 8;

  	var DIRECTION_NONE = 1;
  	var DIRECTION_LEFT = 2;
  	var DIRECTION_RIGHT = 4;
  	var DIRECTION_UP = 8;
  	var DIRECTION_DOWN = 16;

  	var DIRECTION_HORIZONTAL = DIRECTION_LEFT | DIRECTION_RIGHT;
  	var DIRECTION_VERTICAL = DIRECTION_UP | DIRECTION_DOWN;
  	var DIRECTION_ALL = DIRECTION_HORIZONTAL | DIRECTION_VERTICAL;

  	var PROPS_XY = ['x', 'y'];
  	var PROPS_CLIENT_XY = ['clientX', 'clientY'];

  	/**
  	 * create new input type manager
  	 * @param {Manager} manager
  	 * @param {Function} callback
  	 * @returns {Input}
  	 * @constructor
  	 */
  	function Input(manager, callback) {
  	    var self = this;
  	    this.manager = manager;
  	    this.callback = callback;
  	    this.element = manager.element;
  	    this.target = manager.options.inputTarget;

  	    // smaller wrapper around the handler, for the scope and the enabled state of the manager,
  	    // so when disabled the input events are completely bypassed.
  	    this.domHandler = function(ev) {
  	        if (boolOrFn(manager.options.enable, [manager])) {
  	            self.handler(ev);
  	        }
  	    };

  	    this.init();

  	}

  	Input.prototype = {
  	    /**
  	     * should handle the inputEvent data and trigger the callback
  	     * @virtual
  	     */
  	    handler: function() { },

  	    /**
  	     * bind the events
  	     */
  	    init: function() {
  	        this.evEl && addEventListeners(this.element, this.evEl, this.domHandler);
  	        this.evTarget && addEventListeners(this.target, this.evTarget, this.domHandler);
  	        this.evWin && addEventListeners(getWindowForElement(this.element), this.evWin, this.domHandler);
  	    },

  	    /**
  	     * unbind the events
  	     */
  	    destroy: function() {
  	        this.evEl && removeEventListeners(this.element, this.evEl, this.domHandler);
  	        this.evTarget && removeEventListeners(this.target, this.evTarget, this.domHandler);
  	        this.evWin && removeEventListeners(getWindowForElement(this.element), this.evWin, this.domHandler);
  	    }
  	};

  	/**
  	 * create new input type manager
  	 * called by the Manager constructor
  	 * @param {Hammer} manager
  	 * @returns {Input}
  	 */
  	function createInputInstance(manager) {
  	    var Type;
  	    var inputClass = manager.options.inputClass;

  	    if (inputClass) {
  	        Type = inputClass;
  	    } else if (SUPPORT_POINTER_EVENTS) {
  	        Type = PointerEventInput;
  	    } else if (SUPPORT_ONLY_TOUCH) {
  	        Type = TouchInput;
  	    } else if (!SUPPORT_TOUCH) {
  	        Type = MouseInput;
  	    } else {
  	        Type = TouchMouseInput;
  	    }
  	    return new (Type)(manager, inputHandler);
  	}

  	/**
  	 * handle input events
  	 * @param {Manager} manager
  	 * @param {String} eventType
  	 * @param {Object} input
  	 */
  	function inputHandler(manager, eventType, input) {
  	    var pointersLen = input.pointers.length;
  	    var changedPointersLen = input.changedPointers.length;
  	    var isFirst = (eventType & INPUT_START && (pointersLen - changedPointersLen === 0));
  	    var isFinal = (eventType & (INPUT_END | INPUT_CANCEL) && (pointersLen - changedPointersLen === 0));

  	    input.isFirst = !!isFirst;
  	    input.isFinal = !!isFinal;

  	    if (isFirst) {
  	        manager.session = {};
  	    }

  	    // source event is the normalized value of the domEvents
  	    // like 'touchstart, mouseup, pointerdown'
  	    input.eventType = eventType;

  	    // compute scale, rotation etc
  	    computeInputData(manager, input);

  	    // emit secret event
  	    manager.emit('hammer.input', input);

  	    manager.recognize(input);
  	    manager.session.prevInput = input;
  	}

  	/**
  	 * extend the data with some usable properties like scale, rotate, velocity etc
  	 * @param {Object} manager
  	 * @param {Object} input
  	 */
  	function computeInputData(manager, input) {
  	    var session = manager.session;
  	    var pointers = input.pointers;
  	    var pointersLength = pointers.length;

  	    // store the first input to calculate the distance and direction
  	    if (!session.firstInput) {
  	        session.firstInput = simpleCloneInputData(input);
  	    }

  	    // to compute scale and rotation we need to store the multiple touches
  	    if (pointersLength > 1 && !session.firstMultiple) {
  	        session.firstMultiple = simpleCloneInputData(input);
  	    } else if (pointersLength === 1) {
  	        session.firstMultiple = false;
  	    }

  	    var firstInput = session.firstInput;
  	    var firstMultiple = session.firstMultiple;
  	    var offsetCenter = firstMultiple ? firstMultiple.center : firstInput.center;

  	    var center = input.center = getCenter(pointers);
  	    input.timeStamp = now();
  	    input.deltaTime = input.timeStamp - firstInput.timeStamp;

  	    input.angle = getAngle(offsetCenter, center);
  	    input.distance = getDistance(offsetCenter, center);

  	    computeDeltaXY(session, input);
  	    input.offsetDirection = getDirection(input.deltaX, input.deltaY);

  	    var overallVelocity = getVelocity(input.deltaTime, input.deltaX, input.deltaY);
  	    input.overallVelocityX = overallVelocity.x;
  	    input.overallVelocityY = overallVelocity.y;
  	    input.overallVelocity = (abs(overallVelocity.x) > abs(overallVelocity.y)) ? overallVelocity.x : overallVelocity.y;

  	    input.scale = firstMultiple ? getScale(firstMultiple.pointers, pointers) : 1;
  	    input.rotation = firstMultiple ? getRotation(firstMultiple.pointers, pointers) : 0;

  	    input.maxPointers = !session.prevInput ? input.pointers.length : ((input.pointers.length >
  	        session.prevInput.maxPointers) ? input.pointers.length : session.prevInput.maxPointers);

  	    computeIntervalInputData(session, input);

  	    // find the correct target
  	    var target = manager.element;
  	    if (hasParent(input.srcEvent.target, target)) {
  	        target = input.srcEvent.target;
  	    }
  	    input.target = target;
  	}

  	function computeDeltaXY(session, input) {
  	    var center = input.center;
  	    var offset = session.offsetDelta || {};
  	    var prevDelta = session.prevDelta || {};
  	    var prevInput = session.prevInput || {};

  	    if (input.eventType === INPUT_START || prevInput.eventType === INPUT_END) {
  	        prevDelta = session.prevDelta = {
  	            x: prevInput.deltaX || 0,
  	            y: prevInput.deltaY || 0
  	        };

  	        offset = session.offsetDelta = {
  	            x: center.x,
  	            y: center.y
  	        };
  	    }

  	    input.deltaX = prevDelta.x + (center.x - offset.x);
  	    input.deltaY = prevDelta.y + (center.y - offset.y);
  	}

  	/**
  	 * velocity is calculated every x ms
  	 * @param {Object} session
  	 * @param {Object} input
  	 */
  	function computeIntervalInputData(session, input) {
  	    var last = session.lastInterval || input,
  	        deltaTime = input.timeStamp - last.timeStamp,
  	        velocity, velocityX, velocityY, direction;

  	    if (input.eventType != INPUT_CANCEL && (deltaTime > COMPUTE_INTERVAL || last.velocity === undefined$1)) {
  	        var deltaX = input.deltaX - last.deltaX;
  	        var deltaY = input.deltaY - last.deltaY;

  	        var v = getVelocity(deltaTime, deltaX, deltaY);
  	        velocityX = v.x;
  	        velocityY = v.y;
  	        velocity = (abs(v.x) > abs(v.y)) ? v.x : v.y;
  	        direction = getDirection(deltaX, deltaY);

  	        session.lastInterval = input;
  	    } else {
  	        // use latest velocity info if it doesn't overtake a minimum period
  	        velocity = last.velocity;
  	        velocityX = last.velocityX;
  	        velocityY = last.velocityY;
  	        direction = last.direction;
  	    }

  	    input.velocity = velocity;
  	    input.velocityX = velocityX;
  	    input.velocityY = velocityY;
  	    input.direction = direction;
  	}

  	/**
  	 * create a simple clone from the input used for storage of firstInput and firstMultiple
  	 * @param {Object} input
  	 * @returns {Object} clonedInputData
  	 */
  	function simpleCloneInputData(input) {
  	    // make a simple copy of the pointers because we will get a reference if we don't
  	    // we only need clientXY for the calculations
  	    var pointers = [];
  	    var i = 0;
  	    while (i < input.pointers.length) {
  	        pointers[i] = {
  	            clientX: round(input.pointers[i].clientX),
  	            clientY: round(input.pointers[i].clientY)
  	        };
  	        i++;
  	    }

  	    return {
  	        timeStamp: now(),
  	        pointers: pointers,
  	        center: getCenter(pointers),
  	        deltaX: input.deltaX,
  	        deltaY: input.deltaY
  	    };
  	}

  	/**
  	 * get the center of all the pointers
  	 * @param {Array} pointers
  	 * @return {Object} center contains `x` and `y` properties
  	 */
  	function getCenter(pointers) {
  	    var pointersLength = pointers.length;

  	    // no need to loop when only one touch
  	    if (pointersLength === 1) {
  	        return {
  	            x: round(pointers[0].clientX),
  	            y: round(pointers[0].clientY)
  	        };
  	    }

  	    var x = 0, y = 0, i = 0;
  	    while (i < pointersLength) {
  	        x += pointers[i].clientX;
  	        y += pointers[i].clientY;
  	        i++;
  	    }

  	    return {
  	        x: round(x / pointersLength),
  	        y: round(y / pointersLength)
  	    };
  	}

  	/**
  	 * calculate the velocity between two points. unit is in px per ms.
  	 * @param {Number} deltaTime
  	 * @param {Number} x
  	 * @param {Number} y
  	 * @return {Object} velocity `x` and `y`
  	 */
  	function getVelocity(deltaTime, x, y) {
  	    return {
  	        x: x / deltaTime || 0,
  	        y: y / deltaTime || 0
  	    };
  	}

  	/**
  	 * get the direction between two points
  	 * @param {Number} x
  	 * @param {Number} y
  	 * @return {Number} direction
  	 */
  	function getDirection(x, y) {
  	    if (x === y) {
  	        return DIRECTION_NONE;
  	    }

  	    if (abs(x) >= abs(y)) {
  	        return x < 0 ? DIRECTION_LEFT : DIRECTION_RIGHT;
  	    }
  	    return y < 0 ? DIRECTION_UP : DIRECTION_DOWN;
  	}

  	/**
  	 * calculate the absolute distance between two points
  	 * @param {Object} p1 {x, y}
  	 * @param {Object} p2 {x, y}
  	 * @param {Array} [props] containing x and y keys
  	 * @return {Number} distance
  	 */
  	function getDistance(p1, p2, props) {
  	    if (!props) {
  	        props = PROPS_XY;
  	    }
  	    var x = p2[props[0]] - p1[props[0]],
  	        y = p2[props[1]] - p1[props[1]];

  	    return Math.sqrt((x * x) + (y * y));
  	}

  	/**
  	 * calculate the angle between two coordinates
  	 * @param {Object} p1
  	 * @param {Object} p2
  	 * @param {Array} [props] containing x and y keys
  	 * @return {Number} angle
  	 */
  	function getAngle(p1, p2, props) {
  	    if (!props) {
  	        props = PROPS_XY;
  	    }
  	    var x = p2[props[0]] - p1[props[0]],
  	        y = p2[props[1]] - p1[props[1]];
  	    return Math.atan2(y, x) * 180 / Math.PI;
  	}

  	/**
  	 * calculate the rotation degrees between two pointersets
  	 * @param {Array} start array of pointers
  	 * @param {Array} end array of pointers
  	 * @return {Number} rotation
  	 */
  	function getRotation(start, end) {
  	    return getAngle(end[1], end[0], PROPS_CLIENT_XY) + getAngle(start[1], start[0], PROPS_CLIENT_XY);
  	}

  	/**
  	 * calculate the scale factor between two pointersets
  	 * no scale is 1, and goes down to 0 when pinched together, and bigger when pinched out
  	 * @param {Array} start array of pointers
  	 * @param {Array} end array of pointers
  	 * @return {Number} scale
  	 */
  	function getScale(start, end) {
  	    return getDistance(end[0], end[1], PROPS_CLIENT_XY) / getDistance(start[0], start[1], PROPS_CLIENT_XY);
  	}

  	var MOUSE_INPUT_MAP = {
  	    mousedown: INPUT_START,
  	    mousemove: INPUT_MOVE,
  	    mouseup: INPUT_END
  	};

  	var MOUSE_ELEMENT_EVENTS = 'mousedown';
  	var MOUSE_WINDOW_EVENTS = 'mousemove mouseup';

  	/**
  	 * Mouse events input
  	 * @constructor
  	 * @extends Input
  	 */
  	function MouseInput() {
  	    this.evEl = MOUSE_ELEMENT_EVENTS;
  	    this.evWin = MOUSE_WINDOW_EVENTS;

  	    this.pressed = false; // mousedown state

  	    Input.apply(this, arguments);
  	}

  	inherit(MouseInput, Input, {
  	    /**
  	     * handle mouse events
  	     * @param {Object} ev
  	     */
  	    handler: function MEhandler(ev) {
  	        var eventType = MOUSE_INPUT_MAP[ev.type];

  	        // on start we want to have the left mouse button down
  	        if (eventType & INPUT_START && ev.button === 0) {
  	            this.pressed = true;
  	        }

  	        if (eventType & INPUT_MOVE && ev.which !== 1) {
  	            eventType = INPUT_END;
  	        }

  	        // mouse must be down
  	        if (!this.pressed) {
  	            return;
  	        }

  	        if (eventType & INPUT_END) {
  	            this.pressed = false;
  	        }

  	        this.callback(this.manager, eventType, {
  	            pointers: [ev],
  	            changedPointers: [ev],
  	            pointerType: INPUT_TYPE_MOUSE,
  	            srcEvent: ev
  	        });
  	    }
  	});

  	var POINTER_INPUT_MAP = {
  	    pointerdown: INPUT_START,
  	    pointermove: INPUT_MOVE,
  	    pointerup: INPUT_END,
  	    pointercancel: INPUT_CANCEL,
  	    pointerout: INPUT_CANCEL
  	};

  	// in IE10 the pointer types is defined as an enum
  	var IE10_POINTER_TYPE_ENUM = {
  	    2: INPUT_TYPE_TOUCH,
  	    3: INPUT_TYPE_PEN,
  	    4: INPUT_TYPE_MOUSE,
  	    5: INPUT_TYPE_KINECT // see https://twitter.com/jacobrossi/status/480596438489890816
  	};

  	var POINTER_ELEMENT_EVENTS = 'pointerdown';
  	var POINTER_WINDOW_EVENTS = 'pointermove pointerup pointercancel';

  	// IE10 has prefixed support, and case-sensitive
  	if (window.MSPointerEvent && !window.PointerEvent) {
  	    POINTER_ELEMENT_EVENTS = 'MSPointerDown';
  	    POINTER_WINDOW_EVENTS = 'MSPointerMove MSPointerUp MSPointerCancel';
  	}

  	/**
  	 * Pointer events input
  	 * @constructor
  	 * @extends Input
  	 */
  	function PointerEventInput() {
  	    this.evEl = POINTER_ELEMENT_EVENTS;
  	    this.evWin = POINTER_WINDOW_EVENTS;

  	    Input.apply(this, arguments);

  	    this.store = (this.manager.session.pointerEvents = []);
  	}

  	inherit(PointerEventInput, Input, {
  	    /**
  	     * handle mouse events
  	     * @param {Object} ev
  	     */
  	    handler: function PEhandler(ev) {
  	        var store = this.store;
  	        var removePointer = false;

  	        var eventTypeNormalized = ev.type.toLowerCase().replace('ms', '');
  	        var eventType = POINTER_INPUT_MAP[eventTypeNormalized];
  	        var pointerType = IE10_POINTER_TYPE_ENUM[ev.pointerType] || ev.pointerType;

  	        var isTouch = (pointerType == INPUT_TYPE_TOUCH);

  	        // get index of the event in the store
  	        var storeIndex = inArray(store, ev.pointerId, 'pointerId');

  	        // start and mouse must be down
  	        if (eventType & INPUT_START && (ev.button === 0 || isTouch)) {
  	            if (storeIndex < 0) {
  	                store.push(ev);
  	                storeIndex = store.length - 1;
  	            }
  	        } else if (eventType & (INPUT_END | INPUT_CANCEL)) {
  	            removePointer = true;
  	        }

  	        // it not found, so the pointer hasn't been down (so it's probably a hover)
  	        if (storeIndex < 0) {
  	            return;
  	        }

  	        // update the event in the store
  	        store[storeIndex] = ev;

  	        this.callback(this.manager, eventType, {
  	            pointers: store,
  	            changedPointers: [ev],
  	            pointerType: pointerType,
  	            srcEvent: ev
  	        });

  	        if (removePointer) {
  	            // remove from the store
  	            store.splice(storeIndex, 1);
  	        }
  	    }
  	});

  	var SINGLE_TOUCH_INPUT_MAP = {
  	    touchstart: INPUT_START,
  	    touchmove: INPUT_MOVE,
  	    touchend: INPUT_END,
  	    touchcancel: INPUT_CANCEL
  	};

  	var SINGLE_TOUCH_TARGET_EVENTS = 'touchstart';
  	var SINGLE_TOUCH_WINDOW_EVENTS = 'touchstart touchmove touchend touchcancel';

  	/**
  	 * Touch events input
  	 * @constructor
  	 * @extends Input
  	 */
  	function SingleTouchInput() {
  	    this.evTarget = SINGLE_TOUCH_TARGET_EVENTS;
  	    this.evWin = SINGLE_TOUCH_WINDOW_EVENTS;
  	    this.started = false;

  	    Input.apply(this, arguments);
  	}

  	inherit(SingleTouchInput, Input, {
  	    handler: function TEhandler(ev) {
  	        var type = SINGLE_TOUCH_INPUT_MAP[ev.type];

  	        // should we handle the touch events?
  	        if (type === INPUT_START) {
  	            this.started = true;
  	        }

  	        if (!this.started) {
  	            return;
  	        }

  	        var touches = normalizeSingleTouches.call(this, ev, type);

  	        // when done, reset the started state
  	        if (type & (INPUT_END | INPUT_CANCEL) && touches[0].length - touches[1].length === 0) {
  	            this.started = false;
  	        }

  	        this.callback(this.manager, type, {
  	            pointers: touches[0],
  	            changedPointers: touches[1],
  	            pointerType: INPUT_TYPE_TOUCH,
  	            srcEvent: ev
  	        });
  	    }
  	});

  	/**
  	 * @this {TouchInput}
  	 * @param {Object} ev
  	 * @param {Number} type flag
  	 * @returns {undefined|Array} [all, changed]
  	 */
  	function normalizeSingleTouches(ev, type) {
  	    var all = toArray(ev.touches);
  	    var changed = toArray(ev.changedTouches);

  	    if (type & (INPUT_END | INPUT_CANCEL)) {
  	        all = uniqueArray(all.concat(changed), 'identifier');
  	    }

  	    return [all, changed];
  	}

  	var TOUCH_INPUT_MAP = {
  	    touchstart: INPUT_START,
  	    touchmove: INPUT_MOVE,
  	    touchend: INPUT_END,
  	    touchcancel: INPUT_CANCEL
  	};

  	var TOUCH_TARGET_EVENTS = 'touchstart touchmove touchend touchcancel';

  	/**
  	 * Multi-user touch events input
  	 * @constructor
  	 * @extends Input
  	 */
  	function TouchInput() {
  	    this.evTarget = TOUCH_TARGET_EVENTS;
  	    this.targetIds = {};

  	    Input.apply(this, arguments);
  	}

  	inherit(TouchInput, Input, {
  	    handler: function MTEhandler(ev) {
  	        var type = TOUCH_INPUT_MAP[ev.type];
  	        var touches = getTouches.call(this, ev, type);
  	        if (!touches) {
  	            return;
  	        }

  	        this.callback(this.manager, type, {
  	            pointers: touches[0],
  	            changedPointers: touches[1],
  	            pointerType: INPUT_TYPE_TOUCH,
  	            srcEvent: ev
  	        });
  	    }
  	});

  	/**
  	 * @this {TouchInput}
  	 * @param {Object} ev
  	 * @param {Number} type flag
  	 * @returns {undefined|Array} [all, changed]
  	 */
  	function getTouches(ev, type) {
  	    var allTouches = toArray(ev.touches);
  	    var targetIds = this.targetIds;

  	    // when there is only one touch, the process can be simplified
  	    if (type & (INPUT_START | INPUT_MOVE) && allTouches.length === 1) {
  	        targetIds[allTouches[0].identifier] = true;
  	        return [allTouches, allTouches];
  	    }

  	    var i,
  	        targetTouches,
  	        changedTouches = toArray(ev.changedTouches),
  	        changedTargetTouches = [],
  	        target = this.target;

  	    // get target touches from touches
  	    targetTouches = allTouches.filter(function(touch) {
  	        return hasParent(touch.target, target);
  	    });

  	    // collect touches
  	    if (type === INPUT_START) {
  	        i = 0;
  	        while (i < targetTouches.length) {
  	            targetIds[targetTouches[i].identifier] = true;
  	            i++;
  	        }
  	    }

  	    // filter changed touches to only contain touches that exist in the collected target ids
  	    i = 0;
  	    while (i < changedTouches.length) {
  	        if (targetIds[changedTouches[i].identifier]) {
  	            changedTargetTouches.push(changedTouches[i]);
  	        }

  	        // cleanup removed touches
  	        if (type & (INPUT_END | INPUT_CANCEL)) {
  	            delete targetIds[changedTouches[i].identifier];
  	        }
  	        i++;
  	    }

  	    if (!changedTargetTouches.length) {
  	        return;
  	    }

  	    return [
  	        // merge targetTouches with changedTargetTouches so it contains ALL touches, including 'end' and 'cancel'
  	        uniqueArray(targetTouches.concat(changedTargetTouches), 'identifier'),
  	        changedTargetTouches
  	    ];
  	}

  	/**
  	 * Combined touch and mouse input
  	 *
  	 * Touch has a higher priority then mouse, and while touching no mouse events are allowed.
  	 * This because touch devices also emit mouse events while doing a touch.
  	 *
  	 * @constructor
  	 * @extends Input
  	 */

  	var DEDUP_TIMEOUT = 2500;
  	var DEDUP_DISTANCE = 25;

  	function TouchMouseInput() {
  	    Input.apply(this, arguments);

  	    var handler = bindFn(this.handler, this);
  	    this.touch = new TouchInput(this.manager, handler);
  	    this.mouse = new MouseInput(this.manager, handler);

  	    this.primaryTouch = null;
  	    this.lastTouches = [];
  	}

  	inherit(TouchMouseInput, Input, {
  	    /**
  	     * handle mouse and touch events
  	     * @param {Hammer} manager
  	     * @param {String} inputEvent
  	     * @param {Object} inputData
  	     */
  	    handler: function TMEhandler(manager, inputEvent, inputData) {
  	        var isTouch = (inputData.pointerType == INPUT_TYPE_TOUCH),
  	            isMouse = (inputData.pointerType == INPUT_TYPE_MOUSE);

  	        if (isMouse && inputData.sourceCapabilities && inputData.sourceCapabilities.firesTouchEvents) {
  	            return;
  	        }

  	        // when we're in a touch event, record touches to  de-dupe synthetic mouse event
  	        if (isTouch) {
  	            recordTouches.call(this, inputEvent, inputData);
  	        } else if (isMouse && isSyntheticEvent.call(this, inputData)) {
  	            return;
  	        }

  	        this.callback(manager, inputEvent, inputData);
  	    },

  	    /**
  	     * remove the event listeners
  	     */
  	    destroy: function destroy() {
  	        this.touch.destroy();
  	        this.mouse.destroy();
  	    }
  	});

  	function recordTouches(eventType, eventData) {
  	    if (eventType & INPUT_START) {
  	        this.primaryTouch = eventData.changedPointers[0].identifier;
  	        setLastTouch.call(this, eventData);
  	    } else if (eventType & (INPUT_END | INPUT_CANCEL)) {
  	        setLastTouch.call(this, eventData);
  	    }
  	}

  	function setLastTouch(eventData) {
  	    var touch = eventData.changedPointers[0];

  	    if (touch.identifier === this.primaryTouch) {
  	        var lastTouch = {x: touch.clientX, y: touch.clientY};
  	        this.lastTouches.push(lastTouch);
  	        var lts = this.lastTouches;
  	        var removeLastTouch = function() {
  	            var i = lts.indexOf(lastTouch);
  	            if (i > -1) {
  	                lts.splice(i, 1);
  	            }
  	        };
  	        setTimeout(removeLastTouch, DEDUP_TIMEOUT);
  	    }
  	}

  	function isSyntheticEvent(eventData) {
  	    var x = eventData.srcEvent.clientX, y = eventData.srcEvent.clientY;
  	    for (var i = 0; i < this.lastTouches.length; i++) {
  	        var t = this.lastTouches[i];
  	        var dx = Math.abs(x - t.x), dy = Math.abs(y - t.y);
  	        if (dx <= DEDUP_DISTANCE && dy <= DEDUP_DISTANCE) {
  	            return true;
  	        }
  	    }
  	    return false;
  	}

  	var PREFIXED_TOUCH_ACTION = prefixed(TEST_ELEMENT.style, 'touchAction');
  	var NATIVE_TOUCH_ACTION = PREFIXED_TOUCH_ACTION !== undefined$1;

  	// magical touchAction value
  	var TOUCH_ACTION_COMPUTE = 'compute';
  	var TOUCH_ACTION_AUTO = 'auto';
  	var TOUCH_ACTION_MANIPULATION = 'manipulation'; // not implemented
  	var TOUCH_ACTION_NONE = 'none';
  	var TOUCH_ACTION_PAN_X = 'pan-x';
  	var TOUCH_ACTION_PAN_Y = 'pan-y';
  	var TOUCH_ACTION_MAP = getTouchActionProps();

  	/**
  	 * Touch Action
  	 * sets the touchAction property or uses the js alternative
  	 * @param {Manager} manager
  	 * @param {String} value
  	 * @constructor
  	 */
  	function TouchAction(manager, value) {
  	    this.manager = manager;
  	    this.set(value);
  	}

  	TouchAction.prototype = {
  	    /**
  	     * set the touchAction value on the element or enable the polyfill
  	     * @param {String} value
  	     */
  	    set: function(value) {
  	        // find out the touch-action by the event handlers
  	        if (value == TOUCH_ACTION_COMPUTE) {
  	            value = this.compute();
  	        }

  	        if (NATIVE_TOUCH_ACTION && this.manager.element.style && TOUCH_ACTION_MAP[value]) {
  	            this.manager.element.style[PREFIXED_TOUCH_ACTION] = value;
  	        }
  	        this.actions = value.toLowerCase().trim();
  	    },

  	    /**
  	     * just re-set the touchAction value
  	     */
  	    update: function() {
  	        this.set(this.manager.options.touchAction);
  	    },

  	    /**
  	     * compute the value for the touchAction property based on the recognizer's settings
  	     * @returns {String} value
  	     */
  	    compute: function() {
  	        var actions = [];
  	        each(this.manager.recognizers, function(recognizer) {
  	            if (boolOrFn(recognizer.options.enable, [recognizer])) {
  	                actions = actions.concat(recognizer.getTouchAction());
  	            }
  	        });
  	        return cleanTouchActions(actions.join(' '));
  	    },

  	    /**
  	     * this method is called on each input cycle and provides the preventing of the browser behavior
  	     * @param {Object} input
  	     */
  	    preventDefaults: function(input) {
  	        var srcEvent = input.srcEvent;
  	        var direction = input.offsetDirection;

  	        // if the touch action did prevented once this session
  	        if (this.manager.session.prevented) {
  	            srcEvent.preventDefault();
  	            return;
  	        }

  	        var actions = this.actions;
  	        var hasNone = inStr(actions, TOUCH_ACTION_NONE) && !TOUCH_ACTION_MAP[TOUCH_ACTION_NONE];
  	        var hasPanY = inStr(actions, TOUCH_ACTION_PAN_Y) && !TOUCH_ACTION_MAP[TOUCH_ACTION_PAN_Y];
  	        var hasPanX = inStr(actions, TOUCH_ACTION_PAN_X) && !TOUCH_ACTION_MAP[TOUCH_ACTION_PAN_X];

  	        if (hasNone) {
  	            //do not prevent defaults if this is a tap gesture

  	            var isTapPointer = input.pointers.length === 1;
  	            var isTapMovement = input.distance < 2;
  	            var isTapTouchTime = input.deltaTime < 250;

  	            if (isTapPointer && isTapMovement && isTapTouchTime) {
  	                return;
  	            }
  	        }

  	        if (hasPanX && hasPanY) {
  	            // `pan-x pan-y` means browser handles all scrolling/panning, do not prevent
  	            return;
  	        }

  	        if (hasNone ||
  	            (hasPanY && direction & DIRECTION_HORIZONTAL) ||
  	            (hasPanX && direction & DIRECTION_VERTICAL)) {
  	            return this.preventSrc(srcEvent);
  	        }
  	    },

  	    /**
  	     * call preventDefault to prevent the browser's default behavior (scrolling in most cases)
  	     * @param {Object} srcEvent
  	     */
  	    preventSrc: function(srcEvent) {
  	        this.manager.session.prevented = true;
  	        srcEvent.preventDefault();
  	    }
  	};

  	/**
  	 * when the touchActions are collected they are not a valid value, so we need to clean things up. *
  	 * @param {String} actions
  	 * @returns {*}
  	 */
  	function cleanTouchActions(actions) {
  	    // none
  	    if (inStr(actions, TOUCH_ACTION_NONE)) {
  	        return TOUCH_ACTION_NONE;
  	    }

  	    var hasPanX = inStr(actions, TOUCH_ACTION_PAN_X);
  	    var hasPanY = inStr(actions, TOUCH_ACTION_PAN_Y);

  	    // if both pan-x and pan-y are set (different recognizers
  	    // for different directions, e.g. horizontal pan but vertical swipe?)
  	    // we need none (as otherwise with pan-x pan-y combined none of these
  	    // recognizers will work, since the browser would handle all panning
  	    if (hasPanX && hasPanY) {
  	        return TOUCH_ACTION_NONE;
  	    }

  	    // pan-x OR pan-y
  	    if (hasPanX || hasPanY) {
  	        return hasPanX ? TOUCH_ACTION_PAN_X : TOUCH_ACTION_PAN_Y;
  	    }

  	    // manipulation
  	    if (inStr(actions, TOUCH_ACTION_MANIPULATION)) {
  	        return TOUCH_ACTION_MANIPULATION;
  	    }

  	    return TOUCH_ACTION_AUTO;
  	}

  	function getTouchActionProps() {
  	    if (!NATIVE_TOUCH_ACTION) {
  	        return false;
  	    }
  	    var touchMap = {};
  	    var cssSupports = window.CSS && window.CSS.supports;
  	    ['auto', 'manipulation', 'pan-y', 'pan-x', 'pan-x pan-y', 'none'].forEach(function(val) {

  	        // If css.supports is not supported but there is native touch-action assume it supports
  	        // all values. This is the case for IE 10 and 11.
  	        touchMap[val] = cssSupports ? window.CSS.supports('touch-action', val) : true;
  	    });
  	    return touchMap;
  	}

  	/**
  	 * Recognizer flow explained; *
  	 * All recognizers have the initial state of POSSIBLE when a input session starts.
  	 * The definition of a input session is from the first input until the last input, with all it's movement in it. *
  	 * Example session for mouse-input: mousedown -> mousemove -> mouseup
  	 *
  	 * On each recognizing cycle (see Manager.recognize) the .recognize() method is executed
  	 * which determines with state it should be.
  	 *
  	 * If the recognizer has the state FAILED, CANCELLED or RECOGNIZED (equals ENDED), it is reset to
  	 * POSSIBLE to give it another change on the next cycle.
  	 *
  	 *               Possible
  	 *                  |
  	 *            +-----+---------------+
  	 *            |                     |
  	 *      +-----+-----+               |
  	 *      |           |               |
  	 *   Failed      Cancelled          |
  	 *                          +-------+------+
  	 *                          |              |
  	 *                      Recognized       Began
  	 *                                         |
  	 *                                      Changed
  	 *                                         |
  	 *                                  Ended/Recognized
  	 */
  	var STATE_POSSIBLE = 1;
  	var STATE_BEGAN = 2;
  	var STATE_CHANGED = 4;
  	var STATE_ENDED = 8;
  	var STATE_RECOGNIZED = STATE_ENDED;
  	var STATE_CANCELLED = 16;
  	var STATE_FAILED = 32;

  	/**
  	 * Recognizer
  	 * Every recognizer needs to extend from this class.
  	 * @constructor
  	 * @param {Object} options
  	 */
  	function Recognizer(options) {
  	    this.options = assign({}, this.defaults, options || {});

  	    this.id = uniqueId();

  	    this.manager = null;

  	    // default is enable true
  	    this.options.enable = ifUndefined(this.options.enable, true);

  	    this.state = STATE_POSSIBLE;

  	    this.simultaneous = {};
  	    this.requireFail = [];
  	}

  	Recognizer.prototype = {
  	    /**
  	     * @virtual
  	     * @type {Object}
  	     */
  	    defaults: {},

  	    /**
  	     * set options
  	     * @param {Object} options
  	     * @return {Recognizer}
  	     */
  	    set: function(options) {
  	        assign(this.options, options);

  	        // also update the touchAction, in case something changed about the directions/enabled state
  	        this.manager && this.manager.touchAction.update();
  	        return this;
  	    },

  	    /**
  	     * recognize simultaneous with an other recognizer.
  	     * @param {Recognizer} otherRecognizer
  	     * @returns {Recognizer} this
  	     */
  	    recognizeWith: function(otherRecognizer) {
  	        if (invokeArrayArg(otherRecognizer, 'recognizeWith', this)) {
  	            return this;
  	        }

  	        var simultaneous = this.simultaneous;
  	        otherRecognizer = getRecognizerByNameIfManager(otherRecognizer, this);
  	        if (!simultaneous[otherRecognizer.id]) {
  	            simultaneous[otherRecognizer.id] = otherRecognizer;
  	            otherRecognizer.recognizeWith(this);
  	        }
  	        return this;
  	    },

  	    /**
  	     * drop the simultaneous link. it doesnt remove the link on the other recognizer.
  	     * @param {Recognizer} otherRecognizer
  	     * @returns {Recognizer} this
  	     */
  	    dropRecognizeWith: function(otherRecognizer) {
  	        if (invokeArrayArg(otherRecognizer, 'dropRecognizeWith', this)) {
  	            return this;
  	        }

  	        otherRecognizer = getRecognizerByNameIfManager(otherRecognizer, this);
  	        delete this.simultaneous[otherRecognizer.id];
  	        return this;
  	    },

  	    /**
  	     * recognizer can only run when an other is failing
  	     * @param {Recognizer} otherRecognizer
  	     * @returns {Recognizer} this
  	     */
  	    requireFailure: function(otherRecognizer) {
  	        if (invokeArrayArg(otherRecognizer, 'requireFailure', this)) {
  	            return this;
  	        }

  	        var requireFail = this.requireFail;
  	        otherRecognizer = getRecognizerByNameIfManager(otherRecognizer, this);
  	        if (inArray(requireFail, otherRecognizer) === -1) {
  	            requireFail.push(otherRecognizer);
  	            otherRecognizer.requireFailure(this);
  	        }
  	        return this;
  	    },

  	    /**
  	     * drop the requireFailure link. it does not remove the link on the other recognizer.
  	     * @param {Recognizer} otherRecognizer
  	     * @returns {Recognizer} this
  	     */
  	    dropRequireFailure: function(otherRecognizer) {
  	        if (invokeArrayArg(otherRecognizer, 'dropRequireFailure', this)) {
  	            return this;
  	        }

  	        otherRecognizer = getRecognizerByNameIfManager(otherRecognizer, this);
  	        var index = inArray(this.requireFail, otherRecognizer);
  	        if (index > -1) {
  	            this.requireFail.splice(index, 1);
  	        }
  	        return this;
  	    },

  	    /**
  	     * has require failures boolean
  	     * @returns {boolean}
  	     */
  	    hasRequireFailures: function() {
  	        return this.requireFail.length > 0;
  	    },

  	    /**
  	     * if the recognizer can recognize simultaneous with an other recognizer
  	     * @param {Recognizer} otherRecognizer
  	     * @returns {Boolean}
  	     */
  	    canRecognizeWith: function(otherRecognizer) {
  	        return !!this.simultaneous[otherRecognizer.id];
  	    },

  	    /**
  	     * You should use `tryEmit` instead of `emit` directly to check
  	     * that all the needed recognizers has failed before emitting.
  	     * @param {Object} input
  	     */
  	    emit: function(input) {
  	        var self = this;
  	        var state = this.state;

  	        function emit(event) {
  	            self.manager.emit(event, input);
  	        }

  	        // 'panstart' and 'panmove'
  	        if (state < STATE_ENDED) {
  	            emit(self.options.event + stateStr(state));
  	        }

  	        emit(self.options.event); // simple 'eventName' events

  	        if (input.additionalEvent) { // additional event(panleft, panright, pinchin, pinchout...)
  	            emit(input.additionalEvent);
  	        }

  	        // panend and pancancel
  	        if (state >= STATE_ENDED) {
  	            emit(self.options.event + stateStr(state));
  	        }
  	    },

  	    /**
  	     * Check that all the require failure recognizers has failed,
  	     * if true, it emits a gesture event,
  	     * otherwise, setup the state to FAILED.
  	     * @param {Object} input
  	     */
  	    tryEmit: function(input) {
  	        if (this.canEmit()) {
  	            return this.emit(input);
  	        }
  	        // it's failing anyway
  	        this.state = STATE_FAILED;
  	    },

  	    /**
  	     * can we emit?
  	     * @returns {boolean}
  	     */
  	    canEmit: function() {
  	        var i = 0;
  	        while (i < this.requireFail.length) {
  	            if (!(this.requireFail[i].state & (STATE_FAILED | STATE_POSSIBLE))) {
  	                return false;
  	            }
  	            i++;
  	        }
  	        return true;
  	    },

  	    /**
  	     * update the recognizer
  	     * @param {Object} inputData
  	     */
  	    recognize: function(inputData) {
  	        // make a new copy of the inputData
  	        // so we can change the inputData without messing up the other recognizers
  	        var inputDataClone = assign({}, inputData);

  	        // is is enabled and allow recognizing?
  	        if (!boolOrFn(this.options.enable, [this, inputDataClone])) {
  	            this.reset();
  	            this.state = STATE_FAILED;
  	            return;
  	        }

  	        // reset when we've reached the end
  	        if (this.state & (STATE_RECOGNIZED | STATE_CANCELLED | STATE_FAILED)) {
  	            this.state = STATE_POSSIBLE;
  	        }

  	        this.state = this.process(inputDataClone);

  	        // the recognizer has recognized a gesture
  	        // so trigger an event
  	        if (this.state & (STATE_BEGAN | STATE_CHANGED | STATE_ENDED | STATE_CANCELLED)) {
  	            this.tryEmit(inputDataClone);
  	        }
  	    },

  	    /**
  	     * return the state of the recognizer
  	     * the actual recognizing happens in this method
  	     * @virtual
  	     * @param {Object} inputData
  	     * @returns {Const} STATE
  	     */
  	    process: function(inputData) { }, // jshint ignore:line

  	    /**
  	     * return the preferred touch-action
  	     * @virtual
  	     * @returns {Array}
  	     */
  	    getTouchAction: function() { },

  	    /**
  	     * called when the gesture isn't allowed to recognize
  	     * like when another is being recognized or it is disabled
  	     * @virtual
  	     */
  	    reset: function() { }
  	};

  	/**
  	 * get a usable string, used as event postfix
  	 * @param {Const} state
  	 * @returns {String} state
  	 */
  	function stateStr(state) {
  	    if (state & STATE_CANCELLED) {
  	        return 'cancel';
  	    } else if (state & STATE_ENDED) {
  	        return 'end';
  	    } else if (state & STATE_CHANGED) {
  	        return 'move';
  	    } else if (state & STATE_BEGAN) {
  	        return 'start';
  	    }
  	    return '';
  	}

  	/**
  	 * direction cons to string
  	 * @param {Const} direction
  	 * @returns {String}
  	 */
  	function directionStr(direction) {
  	    if (direction == DIRECTION_DOWN) {
  	        return 'down';
  	    } else if (direction == DIRECTION_UP) {
  	        return 'up';
  	    } else if (direction == DIRECTION_LEFT) {
  	        return 'left';
  	    } else if (direction == DIRECTION_RIGHT) {
  	        return 'right';
  	    }
  	    return '';
  	}

  	/**
  	 * get a recognizer by name if it is bound to a manager
  	 * @param {Recognizer|String} otherRecognizer
  	 * @param {Recognizer} recognizer
  	 * @returns {Recognizer}
  	 */
  	function getRecognizerByNameIfManager(otherRecognizer, recognizer) {
  	    var manager = recognizer.manager;
  	    if (manager) {
  	        return manager.get(otherRecognizer);
  	    }
  	    return otherRecognizer;
  	}

  	/**
  	 * This recognizer is just used as a base for the simple attribute recognizers.
  	 * @constructor
  	 * @extends Recognizer
  	 */
  	function AttrRecognizer() {
  	    Recognizer.apply(this, arguments);
  	}

  	inherit(AttrRecognizer, Recognizer, {
  	    /**
  	     * @namespace
  	     * @memberof AttrRecognizer
  	     */
  	    defaults: {
  	        /**
  	         * @type {Number}
  	         * @default 1
  	         */
  	        pointers: 1
  	    },

  	    /**
  	     * Used to check if it the recognizer receives valid input, like input.distance > 10.
  	     * @memberof AttrRecognizer
  	     * @param {Object} input
  	     * @returns {Boolean} recognized
  	     */
  	    attrTest: function(input) {
  	        var optionPointers = this.options.pointers;
  	        return optionPointers === 0 || input.pointers.length === optionPointers;
  	    },

  	    /**
  	     * Process the input and return the state for the recognizer
  	     * @memberof AttrRecognizer
  	     * @param {Object} input
  	     * @returns {*} State
  	     */
  	    process: function(input) {
  	        var state = this.state;
  	        var eventType = input.eventType;

  	        var isRecognized = state & (STATE_BEGAN | STATE_CHANGED);
  	        var isValid = this.attrTest(input);

  	        // on cancel input and we've recognized before, return STATE_CANCELLED
  	        if (isRecognized && (eventType & INPUT_CANCEL || !isValid)) {
  	            return state | STATE_CANCELLED;
  	        } else if (isRecognized || isValid) {
  	            if (eventType & INPUT_END) {
  	                return state | STATE_ENDED;
  	            } else if (!(state & STATE_BEGAN)) {
  	                return STATE_BEGAN;
  	            }
  	            return state | STATE_CHANGED;
  	        }
  	        return STATE_FAILED;
  	    }
  	});

  	/**
  	 * Pan
  	 * Recognized when the pointer is down and moved in the allowed direction.
  	 * @constructor
  	 * @extends AttrRecognizer
  	 */
  	function PanRecognizer() {
  	    AttrRecognizer.apply(this, arguments);

  	    this.pX = null;
  	    this.pY = null;
  	}

  	inherit(PanRecognizer, AttrRecognizer, {
  	    /**
  	     * @namespace
  	     * @memberof PanRecognizer
  	     */
  	    defaults: {
  	        event: 'pan',
  	        threshold: 10,
  	        pointers: 1,
  	        direction: DIRECTION_ALL
  	    },

  	    getTouchAction: function() {
  	        var direction = this.options.direction;
  	        var actions = [];
  	        if (direction & DIRECTION_HORIZONTAL) {
  	            actions.push(TOUCH_ACTION_PAN_Y);
  	        }
  	        if (direction & DIRECTION_VERTICAL) {
  	            actions.push(TOUCH_ACTION_PAN_X);
  	        }
  	        return actions;
  	    },

  	    directionTest: function(input) {
  	        var options = this.options;
  	        var hasMoved = true;
  	        var distance = input.distance;
  	        var direction = input.direction;
  	        var x = input.deltaX;
  	        var y = input.deltaY;

  	        // lock to axis?
  	        if (!(direction & options.direction)) {
  	            if (options.direction & DIRECTION_HORIZONTAL) {
  	                direction = (x === 0) ? DIRECTION_NONE : (x < 0) ? DIRECTION_LEFT : DIRECTION_RIGHT;
  	                hasMoved = x != this.pX;
  	                distance = Math.abs(input.deltaX);
  	            } else {
  	                direction = (y === 0) ? DIRECTION_NONE : (y < 0) ? DIRECTION_UP : DIRECTION_DOWN;
  	                hasMoved = y != this.pY;
  	                distance = Math.abs(input.deltaY);
  	            }
  	        }
  	        input.direction = direction;
  	        return hasMoved && distance > options.threshold && direction & options.direction;
  	    },

  	    attrTest: function(input) {
  	        return AttrRecognizer.prototype.attrTest.call(this, input) &&
  	            (this.state & STATE_BEGAN || (!(this.state & STATE_BEGAN) && this.directionTest(input)));
  	    },

  	    emit: function(input) {

  	        this.pX = input.deltaX;
  	        this.pY = input.deltaY;

  	        var direction = directionStr(input.direction);

  	        if (direction) {
  	            input.additionalEvent = this.options.event + direction;
  	        }
  	        this._super.emit.call(this, input);
  	    }
  	});

  	/**
  	 * Pinch
  	 * Recognized when two or more pointers are moving toward (zoom-in) or away from each other (zoom-out).
  	 * @constructor
  	 * @extends AttrRecognizer
  	 */
  	function PinchRecognizer() {
  	    AttrRecognizer.apply(this, arguments);
  	}

  	inherit(PinchRecognizer, AttrRecognizer, {
  	    /**
  	     * @namespace
  	     * @memberof PinchRecognizer
  	     */
  	    defaults: {
  	        event: 'pinch',
  	        threshold: 0,
  	        pointers: 2
  	    },

  	    getTouchAction: function() {
  	        return [TOUCH_ACTION_NONE];
  	    },

  	    attrTest: function(input) {
  	        return this._super.attrTest.call(this, input) &&
  	            (Math.abs(input.scale - 1) > this.options.threshold || this.state & STATE_BEGAN);
  	    },

  	    emit: function(input) {
  	        if (input.scale !== 1) {
  	            var inOut = input.scale < 1 ? 'in' : 'out';
  	            input.additionalEvent = this.options.event + inOut;
  	        }
  	        this._super.emit.call(this, input);
  	    }
  	});

  	/**
  	 * Press
  	 * Recognized when the pointer is down for x ms without any movement.
  	 * @constructor
  	 * @extends Recognizer
  	 */
  	function PressRecognizer() {
  	    Recognizer.apply(this, arguments);

  	    this._timer = null;
  	    this._input = null;
  	}

  	inherit(PressRecognizer, Recognizer, {
  	    /**
  	     * @namespace
  	     * @memberof PressRecognizer
  	     */
  	    defaults: {
  	        event: 'press',
  	        pointers: 1,
  	        time: 251, // minimal time of the pointer to be pressed
  	        threshold: 9 // a minimal movement is ok, but keep it low
  	    },

  	    getTouchAction: function() {
  	        return [TOUCH_ACTION_AUTO];
  	    },

  	    process: function(input) {
  	        var options = this.options;
  	        var validPointers = input.pointers.length === options.pointers;
  	        var validMovement = input.distance < options.threshold;
  	        var validTime = input.deltaTime > options.time;

  	        this._input = input;

  	        // we only allow little movement
  	        // and we've reached an end event, so a tap is possible
  	        if (!validMovement || !validPointers || (input.eventType & (INPUT_END | INPUT_CANCEL) && !validTime)) {
  	            this.reset();
  	        } else if (input.eventType & INPUT_START) {
  	            this.reset();
  	            this._timer = setTimeoutContext(function() {
  	                this.state = STATE_RECOGNIZED;
  	                this.tryEmit();
  	            }, options.time, this);
  	        } else if (input.eventType & INPUT_END) {
  	            return STATE_RECOGNIZED;
  	        }
  	        return STATE_FAILED;
  	    },

  	    reset: function() {
  	        clearTimeout(this._timer);
  	    },

  	    emit: function(input) {
  	        if (this.state !== STATE_RECOGNIZED) {
  	            return;
  	        }

  	        if (input && (input.eventType & INPUT_END)) {
  	            this.manager.emit(this.options.event + 'up', input);
  	        } else {
  	            this._input.timeStamp = now();
  	            this.manager.emit(this.options.event, this._input);
  	        }
  	    }
  	});

  	/**
  	 * Rotate
  	 * Recognized when two or more pointer are moving in a circular motion.
  	 * @constructor
  	 * @extends AttrRecognizer
  	 */
  	function RotateRecognizer() {
  	    AttrRecognizer.apply(this, arguments);
  	}

  	inherit(RotateRecognizer, AttrRecognizer, {
  	    /**
  	     * @namespace
  	     * @memberof RotateRecognizer
  	     */
  	    defaults: {
  	        event: 'rotate',
  	        threshold: 0,
  	        pointers: 2
  	    },

  	    getTouchAction: function() {
  	        return [TOUCH_ACTION_NONE];
  	    },

  	    attrTest: function(input) {
  	        return this._super.attrTest.call(this, input) &&
  	            (Math.abs(input.rotation) > this.options.threshold || this.state & STATE_BEGAN);
  	    }
  	});

  	/**
  	 * Swipe
  	 * Recognized when the pointer is moving fast (velocity), with enough distance in the allowed direction.
  	 * @constructor
  	 * @extends AttrRecognizer
  	 */
  	function SwipeRecognizer() {
  	    AttrRecognizer.apply(this, arguments);
  	}

  	inherit(SwipeRecognizer, AttrRecognizer, {
  	    /**
  	     * @namespace
  	     * @memberof SwipeRecognizer
  	     */
  	    defaults: {
  	        event: 'swipe',
  	        threshold: 10,
  	        velocity: 0.3,
  	        direction: DIRECTION_HORIZONTAL | DIRECTION_VERTICAL,
  	        pointers: 1
  	    },

  	    getTouchAction: function() {
  	        return PanRecognizer.prototype.getTouchAction.call(this);
  	    },

  	    attrTest: function(input) {
  	        var direction = this.options.direction;
  	        var velocity;

  	        if (direction & (DIRECTION_HORIZONTAL | DIRECTION_VERTICAL)) {
  	            velocity = input.overallVelocity;
  	        } else if (direction & DIRECTION_HORIZONTAL) {
  	            velocity = input.overallVelocityX;
  	        } else if (direction & DIRECTION_VERTICAL) {
  	            velocity = input.overallVelocityY;
  	        }

  	        return this._super.attrTest.call(this, input) &&
  	            direction & input.offsetDirection &&
  	            input.distance > this.options.threshold &&
  	            input.maxPointers == this.options.pointers &&
  	            abs(velocity) > this.options.velocity && input.eventType & INPUT_END;
  	    },

  	    emit: function(input) {
  	        var direction = directionStr(input.offsetDirection);
  	        if (direction) {
  	            this.manager.emit(this.options.event + direction, input);
  	        }

  	        this.manager.emit(this.options.event, input);
  	    }
  	});

  	/**
  	 * A tap is ecognized when the pointer is doing a small tap/click. Multiple taps are recognized if they occur
  	 * between the given interval and position. The delay option can be used to recognize multi-taps without firing
  	 * a single tap.
  	 *
  	 * The eventData from the emitted event contains the property `tapCount`, which contains the amount of
  	 * multi-taps being recognized.
  	 * @constructor
  	 * @extends Recognizer
  	 */
  	function TapRecognizer() {
  	    Recognizer.apply(this, arguments);

  	    // previous time and center,
  	    // used for tap counting
  	    this.pTime = false;
  	    this.pCenter = false;

  	    this._timer = null;
  	    this._input = null;
  	    this.count = 0;
  	}

  	inherit(TapRecognizer, Recognizer, {
  	    /**
  	     * @namespace
  	     * @memberof PinchRecognizer
  	     */
  	    defaults: {
  	        event: 'tap',
  	        pointers: 1,
  	        taps: 1,
  	        interval: 300, // max time between the multi-tap taps
  	        time: 250, // max time of the pointer to be down (like finger on the screen)
  	        threshold: 9, // a minimal movement is ok, but keep it low
  	        posThreshold: 10 // a multi-tap can be a bit off the initial position
  	    },

  	    getTouchAction: function() {
  	        return [TOUCH_ACTION_MANIPULATION];
  	    },

  	    process: function(input) {
  	        var options = this.options;

  	        var validPointers = input.pointers.length === options.pointers;
  	        var validMovement = input.distance < options.threshold;
  	        var validTouchTime = input.deltaTime < options.time;

  	        this.reset();

  	        if ((input.eventType & INPUT_START) && (this.count === 0)) {
  	            return this.failTimeout();
  	        }

  	        // we only allow little movement
  	        // and we've reached an end event, so a tap is possible
  	        if (validMovement && validTouchTime && validPointers) {
  	            if (input.eventType != INPUT_END) {
  	                return this.failTimeout();
  	            }

  	            var validInterval = this.pTime ? (input.timeStamp - this.pTime < options.interval) : true;
  	            var validMultiTap = !this.pCenter || getDistance(this.pCenter, input.center) < options.posThreshold;

  	            this.pTime = input.timeStamp;
  	            this.pCenter = input.center;

  	            if (!validMultiTap || !validInterval) {
  	                this.count = 1;
  	            } else {
  	                this.count += 1;
  	            }

  	            this._input = input;

  	            // if tap count matches we have recognized it,
  	            // else it has began recognizing...
  	            var tapCount = this.count % options.taps;
  	            if (tapCount === 0) {
  	                // no failing requirements, immediately trigger the tap event
  	                // or wait as long as the multitap interval to trigger
  	                if (!this.hasRequireFailures()) {
  	                    return STATE_RECOGNIZED;
  	                } else {
  	                    this._timer = setTimeoutContext(function() {
  	                        this.state = STATE_RECOGNIZED;
  	                        this.tryEmit();
  	                    }, options.interval, this);
  	                    return STATE_BEGAN;
  	                }
  	            }
  	        }
  	        return STATE_FAILED;
  	    },

  	    failTimeout: function() {
  	        this._timer = setTimeoutContext(function() {
  	            this.state = STATE_FAILED;
  	        }, this.options.interval, this);
  	        return STATE_FAILED;
  	    },

  	    reset: function() {
  	        clearTimeout(this._timer);
  	    },

  	    emit: function() {
  	        if (this.state == STATE_RECOGNIZED) {
  	            this._input.tapCount = this.count;
  	            this.manager.emit(this.options.event, this._input);
  	        }
  	    }
  	});

  	/**
  	 * Simple way to create a manager with a default set of recognizers.
  	 * @param {HTMLElement} element
  	 * @param {Object} [options]
  	 * @constructor
  	 */
  	function Hammer(element, options) {
  	    options = options || {};
  	    options.recognizers = ifUndefined(options.recognizers, Hammer.defaults.preset);
  	    return new Manager(element, options);
  	}

  	/**
  	 * @const {string}
  	 */
  	Hammer.VERSION = '2.0.7';

  	/**
  	 * default settings
  	 * @namespace
  	 */
  	Hammer.defaults = {
  	    /**
  	     * set if DOM events are being triggered.
  	     * But this is slower and unused by simple implementations, so disabled by default.
  	     * @type {Boolean}
  	     * @default false
  	     */
  	    domEvents: false,

  	    /**
  	     * The value for the touchAction property/fallback.
  	     * When set to `compute` it will magically set the correct value based on the added recognizers.
  	     * @type {String}
  	     * @default compute
  	     */
  	    touchAction: TOUCH_ACTION_COMPUTE,

  	    /**
  	     * @type {Boolean}
  	     * @default true
  	     */
  	    enable: true,

  	    /**
  	     * EXPERIMENTAL FEATURE -- can be removed/changed
  	     * Change the parent input target element.
  	     * If Null, then it is being set the to main element.
  	     * @type {Null|EventTarget}
  	     * @default null
  	     */
  	    inputTarget: null,

  	    /**
  	     * force an input class
  	     * @type {Null|Function}
  	     * @default null
  	     */
  	    inputClass: null,

  	    /**
  	     * Default recognizer setup when calling `Hammer()`
  	     * When creating a new Manager these will be skipped.
  	     * @type {Array}
  	     */
  	    preset: [
  	        // RecognizerClass, options, [recognizeWith, ...], [requireFailure, ...]
  	        [RotateRecognizer, {enable: false}],
  	        [PinchRecognizer, {enable: false}, ['rotate']],
  	        [SwipeRecognizer, {direction: DIRECTION_HORIZONTAL}],
  	        [PanRecognizer, {direction: DIRECTION_HORIZONTAL}, ['swipe']],
  	        [TapRecognizer],
  	        [TapRecognizer, {event: 'doubletap', taps: 2}, ['tap']],
  	        [PressRecognizer]
  	    ],

  	    /**
  	     * Some CSS properties can be used to improve the working of Hammer.
  	     * Add them to this method and they will be set when creating a new Manager.
  	     * @namespace
  	     */
  	    cssProps: {
  	        /**
  	         * Disables text selection to improve the dragging gesture. Mainly for desktop browsers.
  	         * @type {String}
  	         * @default 'none'
  	         */
  	        userSelect: 'none',

  	        /**
  	         * Disable the Windows Phone grippers when pressing an element.
  	         * @type {String}
  	         * @default 'none'
  	         */
  	        touchSelect: 'none',

  	        /**
  	         * Disables the default callout shown when you touch and hold a touch target.
  	         * On iOS, when you touch and hold a touch target such as a link, Safari displays
  	         * a callout containing information about the link. This property allows you to disable that callout.
  	         * @type {String}
  	         * @default 'none'
  	         */
  	        touchCallout: 'none',

  	        /**
  	         * Specifies whether zooming is enabled. Used by IE10>
  	         * @type {String}
  	         * @default 'none'
  	         */
  	        contentZooming: 'none',

  	        /**
  	         * Specifies that an entire element should be draggable instead of its contents. Mainly for desktop browsers.
  	         * @type {String}
  	         * @default 'none'
  	         */
  	        userDrag: 'none',

  	        /**
  	         * Overrides the highlight color shown when the user taps a link or a JavaScript
  	         * clickable element in iOS. This property obeys the alpha value, if specified.
  	         * @type {String}
  	         * @default 'rgba(0,0,0,0)'
  	         */
  	        tapHighlightColor: 'rgba(0,0,0,0)'
  	    }
  	};

  	var STOP = 1;
  	var FORCED_STOP = 2;

  	/**
  	 * Manager
  	 * @param {HTMLElement} element
  	 * @param {Object} [options]
  	 * @constructor
  	 */
  	function Manager(element, options) {
  	    this.options = assign({}, Hammer.defaults, options || {});

  	    this.options.inputTarget = this.options.inputTarget || element;

  	    this.handlers = {};
  	    this.session = {};
  	    this.recognizers = [];
  	    this.oldCssProps = {};

  	    this.element = element;
  	    this.input = createInputInstance(this);
  	    this.touchAction = new TouchAction(this, this.options.touchAction);

  	    toggleCssProps(this, true);

  	    each(this.options.recognizers, function(item) {
  	        var recognizer = this.add(new (item[0])(item[1]));
  	        item[2] && recognizer.recognizeWith(item[2]);
  	        item[3] && recognizer.requireFailure(item[3]);
  	    }, this);
  	}

  	Manager.prototype = {
  	    /**
  	     * set options
  	     * @param {Object} options
  	     * @returns {Manager}
  	     */
  	    set: function(options) {
  	        assign(this.options, options);

  	        // Options that need a little more setup
  	        if (options.touchAction) {
  	            this.touchAction.update();
  	        }
  	        if (options.inputTarget) {
  	            // Clean up existing event listeners and reinitialize
  	            this.input.destroy();
  	            this.input.target = options.inputTarget;
  	            this.input.init();
  	        }
  	        return this;
  	    },

  	    /**
  	     * stop recognizing for this session.
  	     * This session will be discarded, when a new [input]start event is fired.
  	     * When forced, the recognizer cycle is stopped immediately.
  	     * @param {Boolean} [force]
  	     */
  	    stop: function(force) {
  	        this.session.stopped = force ? FORCED_STOP : STOP;
  	    },

  	    /**
  	     * run the recognizers!
  	     * called by the inputHandler function on every movement of the pointers (touches)
  	     * it walks through all the recognizers and tries to detect the gesture that is being made
  	     * @param {Object} inputData
  	     */
  	    recognize: function(inputData) {
  	        var session = this.session;
  	        if (session.stopped) {
  	            return;
  	        }

  	        // run the touch-action polyfill
  	        this.touchAction.preventDefaults(inputData);

  	        var recognizer;
  	        var recognizers = this.recognizers;

  	        // this holds the recognizer that is being recognized.
  	        // so the recognizer's state needs to be BEGAN, CHANGED, ENDED or RECOGNIZED
  	        // if no recognizer is detecting a thing, it is set to `null`
  	        var curRecognizer = session.curRecognizer;

  	        // reset when the last recognizer is recognized
  	        // or when we're in a new session
  	        if (!curRecognizer || (curRecognizer && curRecognizer.state & STATE_RECOGNIZED)) {
  	            curRecognizer = session.curRecognizer = null;
  	        }

  	        var i = 0;
  	        while (i < recognizers.length) {
  	            recognizer = recognizers[i];

  	            // find out if we are allowed try to recognize the input for this one.
  	            // 1.   allow if the session is NOT forced stopped (see the .stop() method)
  	            // 2.   allow if we still haven't recognized a gesture in this session, or the this recognizer is the one
  	            //      that is being recognized.
  	            // 3.   allow if the recognizer is allowed to run simultaneous with the current recognized recognizer.
  	            //      this can be setup with the `recognizeWith()` method on the recognizer.
  	            if (session.stopped !== FORCED_STOP && ( // 1
  	                    !curRecognizer || recognizer == curRecognizer || // 2
  	                    recognizer.canRecognizeWith(curRecognizer))) { // 3
  	                recognizer.recognize(inputData);
  	            } else {
  	                recognizer.reset();
  	            }

  	            // if the recognizer has been recognizing the input as a valid gesture, we want to store this one as the
  	            // current active recognizer. but only if we don't already have an active recognizer
  	            if (!curRecognizer && recognizer.state & (STATE_BEGAN | STATE_CHANGED | STATE_ENDED)) {
  	                curRecognizer = session.curRecognizer = recognizer;
  	            }
  	            i++;
  	        }
  	    },

  	    /**
  	     * get a recognizer by its event name.
  	     * @param {Recognizer|String} recognizer
  	     * @returns {Recognizer|Null}
  	     */
  	    get: function(recognizer) {
  	        if (recognizer instanceof Recognizer) {
  	            return recognizer;
  	        }

  	        var recognizers = this.recognizers;
  	        for (var i = 0; i < recognizers.length; i++) {
  	            if (recognizers[i].options.event == recognizer) {
  	                return recognizers[i];
  	            }
  	        }
  	        return null;
  	    },

  	    /**
  	     * add a recognizer to the manager
  	     * existing recognizers with the same event name will be removed
  	     * @param {Recognizer} recognizer
  	     * @returns {Recognizer|Manager}
  	     */
  	    add: function(recognizer) {
  	        if (invokeArrayArg(recognizer, 'add', this)) {
  	            return this;
  	        }

  	        // remove existing
  	        var existing = this.get(recognizer.options.event);
  	        if (existing) {
  	            this.remove(existing);
  	        }

  	        this.recognizers.push(recognizer);
  	        recognizer.manager = this;

  	        this.touchAction.update();
  	        return recognizer;
  	    },

  	    /**
  	     * remove a recognizer by name or instance
  	     * @param {Recognizer|String} recognizer
  	     * @returns {Manager}
  	     */
  	    remove: function(recognizer) {
  	        if (invokeArrayArg(recognizer, 'remove', this)) {
  	            return this;
  	        }

  	        recognizer = this.get(recognizer);

  	        // let's make sure this recognizer exists
  	        if (recognizer) {
  	            var recognizers = this.recognizers;
  	            var index = inArray(recognizers, recognizer);

  	            if (index !== -1) {
  	                recognizers.splice(index, 1);
  	                this.touchAction.update();
  	            }
  	        }

  	        return this;
  	    },

  	    /**
  	     * bind event
  	     * @param {String} events
  	     * @param {Function} handler
  	     * @returns {EventEmitter} this
  	     */
  	    on: function(events, handler) {
  	        if (events === undefined$1) {
  	            return;
  	        }
  	        if (handler === undefined$1) {
  	            return;
  	        }

  	        var handlers = this.handlers;
  	        each(splitStr(events), function(event) {
  	            handlers[event] = handlers[event] || [];
  	            handlers[event].push(handler);
  	        });
  	        return this;
  	    },

  	    /**
  	     * unbind event, leave emit blank to remove all handlers
  	     * @param {String} events
  	     * @param {Function} [handler]
  	     * @returns {EventEmitter} this
  	     */
  	    off: function(events, handler) {
  	        if (events === undefined$1) {
  	            return;
  	        }

  	        var handlers = this.handlers;
  	        each(splitStr(events), function(event) {
  	            if (!handler) {
  	                delete handlers[event];
  	            } else {
  	                handlers[event] && handlers[event].splice(inArray(handlers[event], handler), 1);
  	            }
  	        });
  	        return this;
  	    },

  	    /**
  	     * emit event to the listeners
  	     * @param {String} event
  	     * @param {Object} data
  	     */
  	    emit: function(event, data) {
  	        // we also want to trigger dom events
  	        if (this.options.domEvents) {
  	            triggerDomEvent(event, data);
  	        }

  	        // no handlers, so skip it all
  	        var handlers = this.handlers[event] && this.handlers[event].slice();
  	        if (!handlers || !handlers.length) {
  	            return;
  	        }

  	        data.type = event;
  	        data.preventDefault = function() {
  	            data.srcEvent.preventDefault();
  	        };

  	        var i = 0;
  	        while (i < handlers.length) {
  	            handlers[i](data);
  	            i++;
  	        }
  	    },

  	    /**
  	     * destroy the manager and unbinds all events
  	     * it doesn't unbind dom events, that is the user own responsibility
  	     */
  	    destroy: function() {
  	        this.element && toggleCssProps(this, false);

  	        this.handlers = {};
  	        this.session = {};
  	        this.input.destroy();
  	        this.element = null;
  	    }
  	};

  	/**
  	 * add/remove the css properties as defined in manager.options.cssProps
  	 * @param {Manager} manager
  	 * @param {Boolean} add
  	 */
  	function toggleCssProps(manager, add) {
  	    var element = manager.element;
  	    if (!element.style) {
  	        return;
  	    }
  	    var prop;
  	    each(manager.options.cssProps, function(value, name) {
  	        prop = prefixed(element.style, name);
  	        if (add) {
  	            manager.oldCssProps[prop] = element.style[prop];
  	            element.style[prop] = value;
  	        } else {
  	            element.style[prop] = manager.oldCssProps[prop] || '';
  	        }
  	    });
  	    if (!add) {
  	        manager.oldCssProps = {};
  	    }
  	}

  	/**
  	 * trigger dom event
  	 * @param {String} event
  	 * @param {Object} data
  	 */
  	function triggerDomEvent(event, data) {
  	    var gestureEvent = document.createEvent('Event');
  	    gestureEvent.initEvent(event, true, true);
  	    gestureEvent.gesture = data;
  	    data.target.dispatchEvent(gestureEvent);
  	}

  	assign(Hammer, {
  	    INPUT_START: INPUT_START,
  	    INPUT_MOVE: INPUT_MOVE,
  	    INPUT_END: INPUT_END,
  	    INPUT_CANCEL: INPUT_CANCEL,

  	    STATE_POSSIBLE: STATE_POSSIBLE,
  	    STATE_BEGAN: STATE_BEGAN,
  	    STATE_CHANGED: STATE_CHANGED,
  	    STATE_ENDED: STATE_ENDED,
  	    STATE_RECOGNIZED: STATE_RECOGNIZED,
  	    STATE_CANCELLED: STATE_CANCELLED,
  	    STATE_FAILED: STATE_FAILED,

  	    DIRECTION_NONE: DIRECTION_NONE,
  	    DIRECTION_LEFT: DIRECTION_LEFT,
  	    DIRECTION_RIGHT: DIRECTION_RIGHT,
  	    DIRECTION_UP: DIRECTION_UP,
  	    DIRECTION_DOWN: DIRECTION_DOWN,
  	    DIRECTION_HORIZONTAL: DIRECTION_HORIZONTAL,
  	    DIRECTION_VERTICAL: DIRECTION_VERTICAL,
  	    DIRECTION_ALL: DIRECTION_ALL,

  	    Manager: Manager,
  	    Input: Input,
  	    TouchAction: TouchAction,

  	    TouchInput: TouchInput,
  	    MouseInput: MouseInput,
  	    PointerEventInput: PointerEventInput,
  	    TouchMouseInput: TouchMouseInput,
  	    SingleTouchInput: SingleTouchInput,

  	    Recognizer: Recognizer,
  	    AttrRecognizer: AttrRecognizer,
  	    Tap: TapRecognizer,
  	    Pan: PanRecognizer,
  	    Swipe: SwipeRecognizer,
  	    Pinch: PinchRecognizer,
  	    Rotate: RotateRecognizer,
  	    Press: PressRecognizer,

  	    on: addEventListeners,
  	    off: removeEventListeners,
  	    each: each,
  	    merge: merge,
  	    extend: extend,
  	    assign: assign,
  	    inherit: inherit,
  	    bindFn: bindFn,
  	    prefixed: prefixed
  	});

  	// this prevents errors when Hammer is loaded in the presence of an AMD
  	//  style loader but by script tag, not by the loader.
  	var freeGlobal = (typeof window !== 'undefined' ? window : (typeof self !== 'undefined' ? self : {})); // jshint ignore:line
  	freeGlobal.Hammer = Hammer;

  	if (module.exports) {
  	    module.exports = Hammer;
  	} else {
  	    window[exportName] = Hammer;
  	}

  	})(window, document, 'Hammer'); 
  } (hammer$1));

  var hammerExports = hammer$1.exports;
  var hammer = /*@__PURE__*/getDefaultExportFromCjs(hammerExports);

  /**!
   * Sortable 1.15.3
   * @author	RubaXa   <trash@rubaxa.org>
   * @author	owenm    <owen23355@gmail.com>
   * @license MIT
   */
  function ownKeys(object, enumerableOnly) {
    var keys = Object.keys(object);
    if (Object.getOwnPropertySymbols) {
      var symbols = Object.getOwnPropertySymbols(object);
      if (enumerableOnly) {
        symbols = symbols.filter(function (sym) {
          return Object.getOwnPropertyDescriptor(object, sym).enumerable;
        });
      }
      keys.push.apply(keys, symbols);
    }
    return keys;
  }
  function _objectSpread2(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i] != null ? arguments[i] : {};
      if (i % 2) {
        ownKeys(Object(source), true).forEach(function (key) {
          _defineProperty(target, key, source[key]);
        });
      } else if (Object.getOwnPropertyDescriptors) {
        Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
      } else {
        ownKeys(Object(source)).forEach(function (key) {
          Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
        });
      }
    }
    return target;
  }
  function _typeof(obj) {
    "@babel/helpers - typeof";

    if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
      _typeof = function (obj) {
        return typeof obj;
      };
    } else {
      _typeof = function (obj) {
        return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
      };
    }
    return _typeof(obj);
  }
  function _defineProperty(obj, key, value) {
    if (key in obj) {
      Object.defineProperty(obj, key, {
        value: value,
        enumerable: true,
        configurable: true,
        writable: true
      });
    } else {
      obj[key] = value;
    }
    return obj;
  }
  function _extends() {
    _extends = Object.assign || function (target) {
      for (var i = 1; i < arguments.length; i++) {
        var source = arguments[i];
        for (var key in source) {
          if (Object.prototype.hasOwnProperty.call(source, key)) {
            target[key] = source[key];
          }
        }
      }
      return target;
    };
    return _extends.apply(this, arguments);
  }
  function _objectWithoutPropertiesLoose(source, excluded) {
    if (source == null) return {};
    var target = {};
    var sourceKeys = Object.keys(source);
    var key, i;
    for (i = 0; i < sourceKeys.length; i++) {
      key = sourceKeys[i];
      if (excluded.indexOf(key) >= 0) continue;
      target[key] = source[key];
    }
    return target;
  }
  function _objectWithoutProperties(source, excluded) {
    if (source == null) return {};
    var target = _objectWithoutPropertiesLoose(source, excluded);
    var key, i;
    if (Object.getOwnPropertySymbols) {
      var sourceSymbolKeys = Object.getOwnPropertySymbols(source);
      for (i = 0; i < sourceSymbolKeys.length; i++) {
        key = sourceSymbolKeys[i];
        if (excluded.indexOf(key) >= 0) continue;
        if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;
        target[key] = source[key];
      }
    }
    return target;
  }
  function _toConsumableArray(arr) {
    return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread();
  }
  function _arrayWithoutHoles(arr) {
    if (Array.isArray(arr)) return _arrayLikeToArray(arr);
  }
  function _iterableToArray(iter) {
    if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter);
  }
  function _unsupportedIterableToArray(o, minLen) {
    if (!o) return;
    if (typeof o === "string") return _arrayLikeToArray(o, minLen);
    var n = Object.prototype.toString.call(o).slice(8, -1);
    if (n === "Object" && o.constructor) n = o.constructor.name;
    if (n === "Map" || n === "Set") return Array.from(o);
    if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);
  }
  function _arrayLikeToArray(arr, len) {
    if (len == null || len > arr.length) len = arr.length;
    for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i];
    return arr2;
  }
  function _nonIterableSpread() {
    throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
  }

  var version = "1.15.3";

  function userAgent(pattern) {
    if (typeof window !== 'undefined' && window.navigator) {
      return !! /*@__PURE__*/navigator.userAgent.match(pattern);
    }
  }
  var IE11OrLess = userAgent(/(?:Trident.*rv[ :]?11\.|msie|iemobile|Windows Phone)/i);
  var Edge = userAgent(/Edge/i);
  var FireFox = userAgent(/firefox/i);
  var Safari = userAgent(/safari/i) && !userAgent(/chrome/i) && !userAgent(/android/i);
  var IOS = userAgent(/iP(ad|od|hone)/i);
  var ChromeForAndroid = userAgent(/chrome/i) && userAgent(/android/i);

  var captureMode = {
    capture: false,
    passive: false
  };
  function on(el, event, fn) {
    el.addEventListener(event, fn, !IE11OrLess && captureMode);
  }
  function off(el, event, fn) {
    el.removeEventListener(event, fn, !IE11OrLess && captureMode);
  }
  function matches( /**HTMLElement*/el, /**String*/selector) {
    if (!selector) return;
    selector[0] === '>' && (selector = selector.substring(1));
    if (el) {
      try {
        if (el.matches) {
          return el.matches(selector);
        } else if (el.msMatchesSelector) {
          return el.msMatchesSelector(selector);
        } else if (el.webkitMatchesSelector) {
          return el.webkitMatchesSelector(selector);
        }
      } catch (_) {
        return false;
      }
    }
    return false;
  }
  function getParentOrHost(el) {
    return el.host && el !== document && el.host.nodeType ? el.host : el.parentNode;
  }
  function closest( /**HTMLElement*/el, /**String*/selector, /**HTMLElement*/ctx, includeCTX) {
    if (el) {
      ctx = ctx || document;
      do {
        if (selector != null && (selector[0] === '>' ? el.parentNode === ctx && matches(el, selector) : matches(el, selector)) || includeCTX && el === ctx) {
          return el;
        }
        if (el === ctx) break;
        /* jshint boss:true */
      } while (el = getParentOrHost(el));
    }
    return null;
  }
  var R_SPACE = /\s+/g;
  function toggleClass(el, name, state) {
    if (el && name) {
      if (el.classList) {
        el.classList[state ? 'add' : 'remove'](name);
      } else {
        var className = (' ' + el.className + ' ').replace(R_SPACE, ' ').replace(' ' + name + ' ', ' ');
        el.className = (className + (state ? ' ' + name : '')).replace(R_SPACE, ' ');
      }
    }
  }
  function css(el, prop, val) {
    var style = el && el.style;
    if (style) {
      if (val === void 0) {
        if (document.defaultView && document.defaultView.getComputedStyle) {
          val = document.defaultView.getComputedStyle(el, '');
        } else if (el.currentStyle) {
          val = el.currentStyle;
        }
        return prop === void 0 ? val : val[prop];
      } else {
        if (!(prop in style) && prop.indexOf('webkit') === -1) {
          prop = '-webkit-' + prop;
        }
        style[prop] = val + (typeof val === 'string' ? '' : 'px');
      }
    }
  }
  function matrix(el, selfOnly) {
    var appliedTransforms = '';
    if (typeof el === 'string') {
      appliedTransforms = el;
    } else {
      do {
        var transform = css(el, 'transform');
        if (transform && transform !== 'none') {
          appliedTransforms = transform + ' ' + appliedTransforms;
        }
        /* jshint boss:true */
      } while (!selfOnly && (el = el.parentNode));
    }
    var matrixFn = window.DOMMatrix || window.WebKitCSSMatrix || window.CSSMatrix || window.MSCSSMatrix;
    /*jshint -W056 */
    return matrixFn && new matrixFn(appliedTransforms);
  }
  function find(ctx, tagName, iterator) {
    if (ctx) {
      var list = ctx.getElementsByTagName(tagName),
        i = 0,
        n = list.length;
      if (iterator) {
        for (; i < n; i++) {
          iterator(list[i], i);
        }
      }
      return list;
    }
    return [];
  }
  function getWindowScrollingElement() {
    var scrollingElement = document.scrollingElement;
    if (scrollingElement) {
      return scrollingElement;
    } else {
      return document.documentElement;
    }
  }

  /**
   * Returns the "bounding client rect" of given element
   * @param  {HTMLElement} el                       The element whose boundingClientRect is wanted
   * @param  {[Boolean]} relativeToContainingBlock  Whether the rect should be relative to the containing block of (including) the container
   * @param  {[Boolean]} relativeToNonStaticParent  Whether the rect should be relative to the relative parent of (including) the contaienr
   * @param  {[Boolean]} undoScale                  Whether the container's scale() should be undone
   * @param  {[HTMLElement]} container              The parent the element will be placed in
   * @return {Object}                               The boundingClientRect of el, with specified adjustments
   */
  function getRect(el, relativeToContainingBlock, relativeToNonStaticParent, undoScale, container) {
    if (!el.getBoundingClientRect && el !== window) return;
    var elRect, top, left, bottom, right, height, width;
    if (el !== window && el.parentNode && el !== getWindowScrollingElement()) {
      elRect = el.getBoundingClientRect();
      top = elRect.top;
      left = elRect.left;
      bottom = elRect.bottom;
      right = elRect.right;
      height = elRect.height;
      width = elRect.width;
    } else {
      top = 0;
      left = 0;
      bottom = window.innerHeight;
      right = window.innerWidth;
      height = window.innerHeight;
      width = window.innerWidth;
    }
    if ((relativeToContainingBlock || relativeToNonStaticParent) && el !== window) {
      // Adjust for translate()
      container = container || el.parentNode;

      // solves #1123 (see: https://stackoverflow.com/a/37953806/6088312)
      // Not needed on <= IE11
      if (!IE11OrLess) {
        do {
          if (container && container.getBoundingClientRect && (css(container, 'transform') !== 'none' || relativeToNonStaticParent && css(container, 'position') !== 'static')) {
            var containerRect = container.getBoundingClientRect();

            // Set relative to edges of padding box of container
            top -= containerRect.top + parseInt(css(container, 'border-top-width'));
            left -= containerRect.left + parseInt(css(container, 'border-left-width'));
            bottom = top + elRect.height;
            right = left + elRect.width;
            break;
          }
          /* jshint boss:true */
        } while (container = container.parentNode);
      }
    }
    if (undoScale && el !== window) {
      // Adjust for scale()
      var elMatrix = matrix(container || el),
        scaleX = elMatrix && elMatrix.a,
        scaleY = elMatrix && elMatrix.d;
      if (elMatrix) {
        top /= scaleY;
        left /= scaleX;
        width /= scaleX;
        height /= scaleY;
        bottom = top + height;
        right = left + width;
      }
    }
    return {
      top: top,
      left: left,
      bottom: bottom,
      right: right,
      width: width,
      height: height
    };
  }

  /**
   * Checks if a side of an element is scrolled past a side of its parents
   * @param  {HTMLElement}  el           The element who's side being scrolled out of view is in question
   * @param  {String}       elSide       Side of the element in question ('top', 'left', 'right', 'bottom')
   * @param  {String}       parentSide   Side of the parent in question ('top', 'left', 'right', 'bottom')
   * @return {HTMLElement}               The parent scroll element that the el's side is scrolled past, or null if there is no such element
   */
  function isScrolledPast(el, elSide, parentSide) {
    var parent = getParentAutoScrollElement(el, true),
      elSideVal = getRect(el)[elSide];

    /* jshint boss:true */
    while (parent) {
      var parentSideVal = getRect(parent)[parentSide],
        visible = void 0;
      {
        visible = elSideVal >= parentSideVal;
      }
      if (!visible) return parent;
      if (parent === getWindowScrollingElement()) break;
      parent = getParentAutoScrollElement(parent, false);
    }
    return false;
  }

  /**
   * Gets nth child of el, ignoring hidden children, sortable's elements (does not ignore clone if it's visible)
   * and non-draggable elements
   * @param  {HTMLElement} el       The parent element
   * @param  {Number} childNum      The index of the child
   * @param  {Object} options       Parent Sortable's options
   * @return {HTMLElement}          The child at index childNum, or null if not found
   */
  function getChild(el, childNum, options, includeDragEl) {
    var currentChild = 0,
      i = 0,
      children = el.children;
    while (i < children.length) {
      if (children[i].style.display !== 'none' && children[i] !== Sortable.ghost && (includeDragEl || children[i] !== Sortable.dragged) && closest(children[i], options.draggable, el, false)) {
        if (currentChild === childNum) {
          return children[i];
        }
        currentChild++;
      }
      i++;
    }
    return null;
  }

  /**
   * Gets the last child in the el, ignoring ghostEl or invisible elements (clones)
   * @param  {HTMLElement} el       Parent element
   * @param  {selector} selector    Any other elements that should be ignored
   * @return {HTMLElement}          The last child, ignoring ghostEl
   */
  function lastChild(el, selector) {
    var last = el.lastElementChild;
    while (last && (last === Sortable.ghost || css(last, 'display') === 'none' || selector && !matches(last, selector))) {
      last = last.previousElementSibling;
    }
    return last || null;
  }

  /**
   * Returns the index of an element within its parent for a selected set of
   * elements
   * @param  {HTMLElement} el
   * @param  {selector} selector
   * @return {number}
   */
  function index(el, selector) {
    var index = 0;
    if (!el || !el.parentNode) {
      return -1;
    }

    /* jshint boss:true */
    while (el = el.previousElementSibling) {
      if (el.nodeName.toUpperCase() !== 'TEMPLATE' && el !== Sortable.clone && (!selector || matches(el, selector))) {
        index++;
      }
    }
    return index;
  }

  /**
   * Returns the scroll offset of the given element, added with all the scroll offsets of parent elements.
   * The value is returned in real pixels.
   * @param  {HTMLElement} el
   * @return {Array}             Offsets in the format of [left, top]
   */
  function getRelativeScrollOffset(el) {
    var offsetLeft = 0,
      offsetTop = 0,
      winScroller = getWindowScrollingElement();
    if (el) {
      do {
        var elMatrix = matrix(el),
          scaleX = elMatrix.a,
          scaleY = elMatrix.d;
        offsetLeft += el.scrollLeft * scaleX;
        offsetTop += el.scrollTop * scaleY;
      } while (el !== winScroller && (el = el.parentNode));
    }
    return [offsetLeft, offsetTop];
  }

  /**
   * Returns the index of the object within the given array
   * @param  {Array} arr   Array that may or may not hold the object
   * @param  {Object} obj  An object that has a key-value pair unique to and identical to a key-value pair in the object you want to find
   * @return {Number}      The index of the object in the array, or -1
   */
  function indexOfObject(arr, obj) {
    for (var i in arr) {
      if (!arr.hasOwnProperty(i)) continue;
      for (var key in obj) {
        if (obj.hasOwnProperty(key) && obj[key] === arr[i][key]) return Number(i);
      }
    }
    return -1;
  }
  function getParentAutoScrollElement(el, includeSelf) {
    // skip to window
    if (!el || !el.getBoundingClientRect) return getWindowScrollingElement();
    var elem = el;
    var gotSelf = false;
    do {
      // we don't need to get elem css if it isn't even overflowing in the first place (performance)
      if (elem.clientWidth < elem.scrollWidth || elem.clientHeight < elem.scrollHeight) {
        var elemCSS = css(elem);
        if (elem.clientWidth < elem.scrollWidth && (elemCSS.overflowX == 'auto' || elemCSS.overflowX == 'scroll') || elem.clientHeight < elem.scrollHeight && (elemCSS.overflowY == 'auto' || elemCSS.overflowY == 'scroll')) {
          if (!elem.getBoundingClientRect || elem === document.body) return getWindowScrollingElement();
          if (gotSelf || includeSelf) return elem;
          gotSelf = true;
        }
      }
      /* jshint boss:true */
    } while (elem = elem.parentNode);
    return getWindowScrollingElement();
  }
  function extend(dst, src) {
    if (dst && src) {
      for (var key in src) {
        if (src.hasOwnProperty(key)) {
          dst[key] = src[key];
        }
      }
    }
    return dst;
  }
  function isRectEqual(rect1, rect2) {
    return Math.round(rect1.top) === Math.round(rect2.top) && Math.round(rect1.left) === Math.round(rect2.left) && Math.round(rect1.height) === Math.round(rect2.height) && Math.round(rect1.width) === Math.round(rect2.width);
  }
  var _throttleTimeout;
  function throttle(callback, ms) {
    return function () {
      if (!_throttleTimeout) {
        var args = arguments,
          _this = this;
        if (args.length === 1) {
          callback.call(_this, args[0]);
        } else {
          callback.apply(_this, args);
        }
        _throttleTimeout = setTimeout(function () {
          _throttleTimeout = void 0;
        }, ms);
      }
    };
  }
  function cancelThrottle() {
    clearTimeout(_throttleTimeout);
    _throttleTimeout = void 0;
  }
  function scrollBy(el, x, y) {
    el.scrollLeft += x;
    el.scrollTop += y;
  }
  function clone(el) {
    var Polymer = window.Polymer;
    var $ = window.jQuery || window.Zepto;
    if (Polymer && Polymer.dom) {
      return Polymer.dom(el).cloneNode(true);
    } else if ($) {
      return $(el).clone(true)[0];
    } else {
      return el.cloneNode(true);
    }
  }
  function setRect(el, rect) {
    css(el, 'position', 'absolute');
    css(el, 'top', rect.top);
    css(el, 'left', rect.left);
    css(el, 'width', rect.width);
    css(el, 'height', rect.height);
  }
  function unsetRect(el) {
    css(el, 'position', '');
    css(el, 'top', '');
    css(el, 'left', '');
    css(el, 'width', '');
    css(el, 'height', '');
  }
  function getChildContainingRectFromElement(container, options, ghostEl) {
    var rect = {};
    Array.from(container.children).forEach(function (child) {
      var _rect$left, _rect$top, _rect$right, _rect$bottom;
      if (!closest(child, options.draggable, container, false) || child.animated || child === ghostEl) return;
      var childRect = getRect(child);
      rect.left = Math.min((_rect$left = rect.left) !== null && _rect$left !== void 0 ? _rect$left : Infinity, childRect.left);
      rect.top = Math.min((_rect$top = rect.top) !== null && _rect$top !== void 0 ? _rect$top : Infinity, childRect.top);
      rect.right = Math.max((_rect$right = rect.right) !== null && _rect$right !== void 0 ? _rect$right : -Infinity, childRect.right);
      rect.bottom = Math.max((_rect$bottom = rect.bottom) !== null && _rect$bottom !== void 0 ? _rect$bottom : -Infinity, childRect.bottom);
    });
    rect.width = rect.right - rect.left;
    rect.height = rect.bottom - rect.top;
    rect.x = rect.left;
    rect.y = rect.top;
    return rect;
  }
  var expando = 'Sortable' + new Date().getTime();

  function AnimationStateManager() {
    var animationStates = [],
      animationCallbackId;
    return {
      captureAnimationState: function captureAnimationState() {
        animationStates = [];
        if (!this.options.animation) return;
        var children = [].slice.call(this.el.children);
        children.forEach(function (child) {
          if (css(child, 'display') === 'none' || child === Sortable.ghost) return;
          animationStates.push({
            target: child,
            rect: getRect(child)
          });
          var fromRect = _objectSpread2({}, animationStates[animationStates.length - 1].rect);

          // If animating: compensate for current animation
          if (child.thisAnimationDuration) {
            var childMatrix = matrix(child, true);
            if (childMatrix) {
              fromRect.top -= childMatrix.f;
              fromRect.left -= childMatrix.e;
            }
          }
          child.fromRect = fromRect;
        });
      },
      addAnimationState: function addAnimationState(state) {
        animationStates.push(state);
      },
      removeAnimationState: function removeAnimationState(target) {
        animationStates.splice(indexOfObject(animationStates, {
          target: target
        }), 1);
      },
      animateAll: function animateAll(callback) {
        var _this = this;
        if (!this.options.animation) {
          clearTimeout(animationCallbackId);
          if (typeof callback === 'function') callback();
          return;
        }
        var animating = false,
          animationTime = 0;
        animationStates.forEach(function (state) {
          var time = 0,
            target = state.target,
            fromRect = target.fromRect,
            toRect = getRect(target),
            prevFromRect = target.prevFromRect,
            prevToRect = target.prevToRect,
            animatingRect = state.rect,
            targetMatrix = matrix(target, true);
          if (targetMatrix) {
            // Compensate for current animation
            toRect.top -= targetMatrix.f;
            toRect.left -= targetMatrix.e;
          }
          target.toRect = toRect;
          if (target.thisAnimationDuration) {
            // Could also check if animatingRect is between fromRect and toRect
            if (isRectEqual(prevFromRect, toRect) && !isRectEqual(fromRect, toRect) &&
            // Make sure animatingRect is on line between toRect & fromRect
            (animatingRect.top - toRect.top) / (animatingRect.left - toRect.left) === (fromRect.top - toRect.top) / (fromRect.left - toRect.left)) {
              // If returning to same place as started from animation and on same axis
              time = calculateRealTime(animatingRect, prevFromRect, prevToRect, _this.options);
            }
          }

          // if fromRect != toRect: animate
          if (!isRectEqual(toRect, fromRect)) {
            target.prevFromRect = fromRect;
            target.prevToRect = toRect;
            if (!time) {
              time = _this.options.animation;
            }
            _this.animate(target, animatingRect, toRect, time);
          }
          if (time) {
            animating = true;
            animationTime = Math.max(animationTime, time);
            clearTimeout(target.animationResetTimer);
            target.animationResetTimer = setTimeout(function () {
              target.animationTime = 0;
              target.prevFromRect = null;
              target.fromRect = null;
              target.prevToRect = null;
              target.thisAnimationDuration = null;
            }, time);
            target.thisAnimationDuration = time;
          }
        });
        clearTimeout(animationCallbackId);
        if (!animating) {
          if (typeof callback === 'function') callback();
        } else {
          animationCallbackId = setTimeout(function () {
            if (typeof callback === 'function') callback();
          }, animationTime);
        }
        animationStates = [];
      },
      animate: function animate(target, currentRect, toRect, duration) {
        if (duration) {
          css(target, 'transition', '');
          css(target, 'transform', '');
          var elMatrix = matrix(this.el),
            scaleX = elMatrix && elMatrix.a,
            scaleY = elMatrix && elMatrix.d,
            translateX = (currentRect.left - toRect.left) / (scaleX || 1),
            translateY = (currentRect.top - toRect.top) / (scaleY || 1);
          target.animatingX = !!translateX;
          target.animatingY = !!translateY;
          css(target, 'transform', 'translate3d(' + translateX + 'px,' + translateY + 'px,0)');
          this.forRepaintDummy = repaint(target); // repaint

          css(target, 'transition', 'transform ' + duration + 'ms' + (this.options.easing ? ' ' + this.options.easing : ''));
          css(target, 'transform', 'translate3d(0,0,0)');
          typeof target.animated === 'number' && clearTimeout(target.animated);
          target.animated = setTimeout(function () {
            css(target, 'transition', '');
            css(target, 'transform', '');
            target.animated = false;
            target.animatingX = false;
            target.animatingY = false;
          }, duration);
        }
      }
    };
  }
  function repaint(target) {
    return target.offsetWidth;
  }
  function calculateRealTime(animatingRect, fromRect, toRect, options) {
    return Math.sqrt(Math.pow(fromRect.top - animatingRect.top, 2) + Math.pow(fromRect.left - animatingRect.left, 2)) / Math.sqrt(Math.pow(fromRect.top - toRect.top, 2) + Math.pow(fromRect.left - toRect.left, 2)) * options.animation;
  }

  var plugins = [];
  var defaults = {
    initializeByDefault: true
  };
  var PluginManager = {
    mount: function mount(plugin) {
      // Set default static properties
      for (var option in defaults) {
        if (defaults.hasOwnProperty(option) && !(option in plugin)) {
          plugin[option] = defaults[option];
        }
      }
      plugins.forEach(function (p) {
        if (p.pluginName === plugin.pluginName) {
          throw "Sortable: Cannot mount plugin ".concat(plugin.pluginName, " more than once");
        }
      });
      plugins.push(plugin);
    },
    pluginEvent: function pluginEvent(eventName, sortable, evt) {
      var _this = this;
      this.eventCanceled = false;
      evt.cancel = function () {
        _this.eventCanceled = true;
      };
      var eventNameGlobal = eventName + 'Global';
      plugins.forEach(function (plugin) {
        if (!sortable[plugin.pluginName]) return;
        // Fire global events if it exists in this sortable
        if (sortable[plugin.pluginName][eventNameGlobal]) {
          sortable[plugin.pluginName][eventNameGlobal](_objectSpread2({
            sortable: sortable
          }, evt));
        }

        // Only fire plugin event if plugin is enabled in this sortable,
        // and plugin has event defined
        if (sortable.options[plugin.pluginName] && sortable[plugin.pluginName][eventName]) {
          sortable[plugin.pluginName][eventName](_objectSpread2({
            sortable: sortable
          }, evt));
        }
      });
    },
    initializePlugins: function initializePlugins(sortable, el, defaults, options) {
      plugins.forEach(function (plugin) {
        var pluginName = plugin.pluginName;
        if (!sortable.options[pluginName] && !plugin.initializeByDefault) return;
        var initialized = new plugin(sortable, el, sortable.options);
        initialized.sortable = sortable;
        initialized.options = sortable.options;
        sortable[pluginName] = initialized;

        // Add default options from plugin
        _extends(defaults, initialized.defaults);
      });
      for (var option in sortable.options) {
        if (!sortable.options.hasOwnProperty(option)) continue;
        var modified = this.modifyOption(sortable, option, sortable.options[option]);
        if (typeof modified !== 'undefined') {
          sortable.options[option] = modified;
        }
      }
    },
    getEventProperties: function getEventProperties(name, sortable) {
      var eventProperties = {};
      plugins.forEach(function (plugin) {
        if (typeof plugin.eventProperties !== 'function') return;
        _extends(eventProperties, plugin.eventProperties.call(sortable[plugin.pluginName], name));
      });
      return eventProperties;
    },
    modifyOption: function modifyOption(sortable, name, value) {
      var modifiedValue;
      plugins.forEach(function (plugin) {
        // Plugin must exist on the Sortable
        if (!sortable[plugin.pluginName]) return;

        // If static option listener exists for this option, call in the context of the Sortable's instance of this plugin
        if (plugin.optionListeners && typeof plugin.optionListeners[name] === 'function') {
          modifiedValue = plugin.optionListeners[name].call(sortable[plugin.pluginName], value);
        }
      });
      return modifiedValue;
    }
  };

  function dispatchEvent(_ref) {
    var sortable = _ref.sortable,
      rootEl = _ref.rootEl,
      name = _ref.name,
      targetEl = _ref.targetEl,
      cloneEl = _ref.cloneEl,
      toEl = _ref.toEl,
      fromEl = _ref.fromEl,
      oldIndex = _ref.oldIndex,
      newIndex = _ref.newIndex,
      oldDraggableIndex = _ref.oldDraggableIndex,
      newDraggableIndex = _ref.newDraggableIndex,
      originalEvent = _ref.originalEvent,
      putSortable = _ref.putSortable,
      extraEventProperties = _ref.extraEventProperties;
    sortable = sortable || rootEl && rootEl[expando];
    if (!sortable) return;
    var evt,
      options = sortable.options,
      onName = 'on' + name.charAt(0).toUpperCase() + name.substr(1);
    // Support for new CustomEvent feature
    if (window.CustomEvent && !IE11OrLess && !Edge) {
      evt = new CustomEvent(name, {
        bubbles: true,
        cancelable: true
      });
    } else {
      evt = document.createEvent('Event');
      evt.initEvent(name, true, true);
    }
    evt.to = toEl || rootEl;
    evt.from = fromEl || rootEl;
    evt.item = targetEl || rootEl;
    evt.clone = cloneEl;
    evt.oldIndex = oldIndex;
    evt.newIndex = newIndex;
    evt.oldDraggableIndex = oldDraggableIndex;
    evt.newDraggableIndex = newDraggableIndex;
    evt.originalEvent = originalEvent;
    evt.pullMode = putSortable ? putSortable.lastPutMode : undefined;
    var allEventProperties = _objectSpread2(_objectSpread2({}, extraEventProperties), PluginManager.getEventProperties(name, sortable));
    for (var option in allEventProperties) {
      evt[option] = allEventProperties[option];
    }
    if (rootEl) {
      rootEl.dispatchEvent(evt);
    }
    if (options[onName]) {
      options[onName].call(sortable, evt);
    }
  }

  var _excluded = ["evt"];
  var pluginEvent = function pluginEvent(eventName, sortable) {
    var _ref = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {},
      originalEvent = _ref.evt,
      data = _objectWithoutProperties(_ref, _excluded);
    PluginManager.pluginEvent.bind(Sortable)(eventName, sortable, _objectSpread2({
      dragEl: dragEl,
      parentEl: parentEl,
      ghostEl: ghostEl,
      rootEl: rootEl,
      nextEl: nextEl,
      lastDownEl: lastDownEl,
      cloneEl: cloneEl,
      cloneHidden: cloneHidden,
      dragStarted: moved,
      putSortable: putSortable,
      activeSortable: Sortable.active,
      originalEvent: originalEvent,
      oldIndex: oldIndex,
      oldDraggableIndex: oldDraggableIndex,
      newIndex: newIndex,
      newDraggableIndex: newDraggableIndex,
      hideGhostForTarget: _hideGhostForTarget,
      unhideGhostForTarget: _unhideGhostForTarget,
      cloneNowHidden: function cloneNowHidden() {
        cloneHidden = true;
      },
      cloneNowShown: function cloneNowShown() {
        cloneHidden = false;
      },
      dispatchSortableEvent: function dispatchSortableEvent(name) {
        _dispatchEvent({
          sortable: sortable,
          name: name,
          originalEvent: originalEvent
        });
      }
    }, data));
  };
  function _dispatchEvent(info) {
    dispatchEvent(_objectSpread2({
      putSortable: putSortable,
      cloneEl: cloneEl,
      targetEl: dragEl,
      rootEl: rootEl,
      oldIndex: oldIndex,
      oldDraggableIndex: oldDraggableIndex,
      newIndex: newIndex,
      newDraggableIndex: newDraggableIndex
    }, info));
  }
  var dragEl,
    parentEl,
    ghostEl,
    rootEl,
    nextEl,
    lastDownEl,
    cloneEl,
    cloneHidden,
    oldIndex,
    newIndex,
    oldDraggableIndex,
    newDraggableIndex,
    activeGroup,
    putSortable,
    awaitingDragStarted = false,
    ignoreNextClick = false,
    sortables = [],
    tapEvt,
    touchEvt,
    lastDx,
    lastDy,
    tapDistanceLeft,
    tapDistanceTop,
    moved,
    lastTarget,
    lastDirection,
    pastFirstInvertThresh = false,
    isCircumstantialInvert = false,
    targetMoveDistance,
    // For positioning ghost absolutely
    ghostRelativeParent,
    ghostRelativeParentInitialScroll = [],
    // (left, top)

    _silent = false,
    savedInputChecked = [];

  /** @const */
  var documentExists = typeof document !== 'undefined',
    PositionGhostAbsolutely = IOS,
    CSSFloatProperty = Edge || IE11OrLess ? 'cssFloat' : 'float',
    // This will not pass for IE9, because IE9 DnD only works on anchors
    supportDraggable = documentExists && !ChromeForAndroid && !IOS && 'draggable' in document.createElement('div'),
    supportCssPointerEvents = function () {
      if (!documentExists) return;
      // false when <= IE11
      if (IE11OrLess) {
        return false;
      }
      var el = document.createElement('x');
      el.style.cssText = 'pointer-events:auto';
      return el.style.pointerEvents === 'auto';
    }(),
    _detectDirection = function _detectDirection(el, options) {
      var elCSS = css(el),
        elWidth = parseInt(elCSS.width) - parseInt(elCSS.paddingLeft) - parseInt(elCSS.paddingRight) - parseInt(elCSS.borderLeftWidth) - parseInt(elCSS.borderRightWidth),
        child1 = getChild(el, 0, options),
        child2 = getChild(el, 1, options),
        firstChildCSS = child1 && css(child1),
        secondChildCSS = child2 && css(child2),
        firstChildWidth = firstChildCSS && parseInt(firstChildCSS.marginLeft) + parseInt(firstChildCSS.marginRight) + getRect(child1).width,
        secondChildWidth = secondChildCSS && parseInt(secondChildCSS.marginLeft) + parseInt(secondChildCSS.marginRight) + getRect(child2).width;
      if (elCSS.display === 'flex') {
        return elCSS.flexDirection === 'column' || elCSS.flexDirection === 'column-reverse' ? 'vertical' : 'horizontal';
      }
      if (elCSS.display === 'grid') {
        return elCSS.gridTemplateColumns.split(' ').length <= 1 ? 'vertical' : 'horizontal';
      }
      if (child1 && firstChildCSS["float"] && firstChildCSS["float"] !== 'none') {
        var touchingSideChild2 = firstChildCSS["float"] === 'left' ? 'left' : 'right';
        return child2 && (secondChildCSS.clear === 'both' || secondChildCSS.clear === touchingSideChild2) ? 'vertical' : 'horizontal';
      }
      return child1 && (firstChildCSS.display === 'block' || firstChildCSS.display === 'flex' || firstChildCSS.display === 'table' || firstChildCSS.display === 'grid' || firstChildWidth >= elWidth && elCSS[CSSFloatProperty] === 'none' || child2 && elCSS[CSSFloatProperty] === 'none' && firstChildWidth + secondChildWidth > elWidth) ? 'vertical' : 'horizontal';
    },
    _dragElInRowColumn = function _dragElInRowColumn(dragRect, targetRect, vertical) {
      var dragElS1Opp = vertical ? dragRect.left : dragRect.top,
        dragElS2Opp = vertical ? dragRect.right : dragRect.bottom,
        dragElOppLength = vertical ? dragRect.width : dragRect.height,
        targetS1Opp = vertical ? targetRect.left : targetRect.top,
        targetS2Opp = vertical ? targetRect.right : targetRect.bottom,
        targetOppLength = vertical ? targetRect.width : targetRect.height;
      return dragElS1Opp === targetS1Opp || dragElS2Opp === targetS2Opp || dragElS1Opp + dragElOppLength / 2 === targetS1Opp + targetOppLength / 2;
    },
    /**
     * Detects first nearest empty sortable to X and Y position using emptyInsertThreshold.
     * @param  {Number} x      X position
     * @param  {Number} y      Y position
     * @return {HTMLElement}   Element of the first found nearest Sortable
     */
    _detectNearestEmptySortable = function _detectNearestEmptySortable(x, y) {
      var ret;
      sortables.some(function (sortable) {
        var threshold = sortable[expando].options.emptyInsertThreshold;
        if (!threshold || lastChild(sortable)) return;
        var rect = getRect(sortable),
          insideHorizontally = x >= rect.left - threshold && x <= rect.right + threshold,
          insideVertically = y >= rect.top - threshold && y <= rect.bottom + threshold;
        if (insideHorizontally && insideVertically) {
          return ret = sortable;
        }
      });
      return ret;
    },
    _prepareGroup = function _prepareGroup(options) {
      function toFn(value, pull) {
        return function (to, from, dragEl, evt) {
          var sameGroup = to.options.group.name && from.options.group.name && to.options.group.name === from.options.group.name;
          if (value == null && (pull || sameGroup)) {
            // Default pull value
            // Default pull and put value if same group
            return true;
          } else if (value == null || value === false) {
            return false;
          } else if (pull && value === 'clone') {
            return value;
          } else if (typeof value === 'function') {
            return toFn(value(to, from, dragEl, evt), pull)(to, from, dragEl, evt);
          } else {
            var otherGroup = (pull ? to : from).options.group.name;
            return value === true || typeof value === 'string' && value === otherGroup || value.join && value.indexOf(otherGroup) > -1;
          }
        };
      }
      var group = {};
      var originalGroup = options.group;
      if (!originalGroup || _typeof(originalGroup) != 'object') {
        originalGroup = {
          name: originalGroup
        };
      }
      group.name = originalGroup.name;
      group.checkPull = toFn(originalGroup.pull, true);
      group.checkPut = toFn(originalGroup.put);
      group.revertClone = originalGroup.revertClone;
      options.group = group;
    },
    _hideGhostForTarget = function _hideGhostForTarget() {
      if (!supportCssPointerEvents && ghostEl) {
        css(ghostEl, 'display', 'none');
      }
    },
    _unhideGhostForTarget = function _unhideGhostForTarget() {
      if (!supportCssPointerEvents && ghostEl) {
        css(ghostEl, 'display', '');
      }
    };

  // #1184 fix - Prevent click event on fallback if dragged but item not changed position
  if (documentExists && !ChromeForAndroid) {
    document.addEventListener('click', function (evt) {
      if (ignoreNextClick) {
        evt.preventDefault();
        evt.stopPropagation && evt.stopPropagation();
        evt.stopImmediatePropagation && evt.stopImmediatePropagation();
        ignoreNextClick = false;
        return false;
      }
    }, true);
  }
  var nearestEmptyInsertDetectEvent = function nearestEmptyInsertDetectEvent(evt) {
    if (dragEl) {
      evt = evt.touches ? evt.touches[0] : evt;
      var nearest = _detectNearestEmptySortable(evt.clientX, evt.clientY);
      if (nearest) {
        // Create imitation event
        var event = {};
        for (var i in evt) {
          if (evt.hasOwnProperty(i)) {
            event[i] = evt[i];
          }
        }
        event.target = event.rootEl = nearest;
        event.preventDefault = void 0;
        event.stopPropagation = void 0;
        nearest[expando]._onDragOver(event);
      }
    }
  };
  var _checkOutsideTargetEl = function _checkOutsideTargetEl(evt) {
    if (dragEl) {
      dragEl.parentNode[expando]._isOutsideThisEl(evt.target);
    }
  };

  /**
   * @class  Sortable
   * @param  {HTMLElement}  el
   * @param  {Object}       [options]
   */
  function Sortable(el, options) {
    if (!(el && el.nodeType && el.nodeType === 1)) {
      throw "Sortable: `el` must be an HTMLElement, not ".concat({}.toString.call(el));
    }
    this.el = el; // root element
    this.options = options = _extends({}, options);

    // Export instance
    el[expando] = this;
    var defaults = {
      group: null,
      sort: true,
      disabled: false,
      store: null,
      handle: null,
      draggable: /^[uo]l$/i.test(el.nodeName) ? '>li' : '>*',
      swapThreshold: 1,
      // percentage; 0 <= x <= 1
      invertSwap: false,
      // invert always
      invertedSwapThreshold: null,
      // will be set to same as swapThreshold if default
      removeCloneOnHide: true,
      direction: function direction() {
        return _detectDirection(el, this.options);
      },
      ghostClass: 'sortable-ghost',
      chosenClass: 'sortable-chosen',
      dragClass: 'sortable-drag',
      ignore: 'a, img',
      filter: null,
      preventOnFilter: true,
      animation: 0,
      easing: null,
      setData: function setData(dataTransfer, dragEl) {
        dataTransfer.setData('Text', dragEl.textContent);
      },
      dropBubble: false,
      dragoverBubble: false,
      dataIdAttr: 'data-id',
      delay: 0,
      delayOnTouchOnly: false,
      touchStartThreshold: (Number.parseInt ? Number : window).parseInt(window.devicePixelRatio, 10) || 1,
      forceFallback: false,
      fallbackClass: 'sortable-fallback',
      fallbackOnBody: false,
      fallbackTolerance: 0,
      fallbackOffset: {
        x: 0,
        y: 0
      },
      supportPointer: Sortable.supportPointer !== false && 'PointerEvent' in window && !Safari,
      emptyInsertThreshold: 5
    };
    PluginManager.initializePlugins(this, el, defaults);

    // Set default options
    for (var name in defaults) {
      !(name in options) && (options[name] = defaults[name]);
    }
    _prepareGroup(options);

    // Bind all private methods
    for (var fn in this) {
      if (fn.charAt(0) === '_' && typeof this[fn] === 'function') {
        this[fn] = this[fn].bind(this);
      }
    }

    // Setup drag mode
    this.nativeDraggable = options.forceFallback ? false : supportDraggable;
    if (this.nativeDraggable) {
      // Touch start threshold cannot be greater than the native dragstart threshold
      this.options.touchStartThreshold = 1;
    }

    // Bind events
    if (options.supportPointer) {
      on(el, 'pointerdown', this._onTapStart);
    } else {
      on(el, 'mousedown', this._onTapStart);
      on(el, 'touchstart', this._onTapStart);
    }
    if (this.nativeDraggable) {
      on(el, 'dragover', this);
      on(el, 'dragenter', this);
    }
    sortables.push(this.el);

    // Restore sorting
    options.store && options.store.get && this.sort(options.store.get(this) || []);

    // Add animation state manager
    _extends(this, AnimationStateManager());
  }
  Sortable.prototype = /** @lends Sortable.prototype */{
    constructor: Sortable,
    _isOutsideThisEl: function _isOutsideThisEl(target) {
      if (!this.el.contains(target) && target !== this.el) {
        lastTarget = null;
      }
    },
    _getDirection: function _getDirection(evt, target) {
      return typeof this.options.direction === 'function' ? this.options.direction.call(this, evt, target, dragEl) : this.options.direction;
    },
    _onTapStart: function _onTapStart( /** Event|TouchEvent */evt) {
      if (!evt.cancelable) return;
      var _this = this,
        el = this.el,
        options = this.options,
        preventOnFilter = options.preventOnFilter,
        type = evt.type,
        touch = evt.touches && evt.touches[0] || evt.pointerType && evt.pointerType === 'touch' && evt,
        target = (touch || evt).target,
        originalTarget = evt.target.shadowRoot && (evt.path && evt.path[0] || evt.composedPath && evt.composedPath()[0]) || target,
        filter = options.filter;
      _saveInputCheckedState(el);

      // Don't trigger start event when an element is been dragged, otherwise the evt.oldindex always wrong when set option.group.
      if (dragEl) {
        return;
      }
      if (/mousedown|pointerdown/.test(type) && evt.button !== 0 || options.disabled) {
        return; // only left button and enabled
      }

      // cancel dnd if original target is content editable
      if (originalTarget.isContentEditable) {
        return;
      }

      // Safari ignores further event handling after mousedown
      if (!this.nativeDraggable && Safari && target && target.tagName.toUpperCase() === 'SELECT') {
        return;
      }
      target = closest(target, options.draggable, el, false);
      if (target && target.animated) {
        return;
      }
      if (lastDownEl === target) {
        // Ignoring duplicate `down`
        return;
      }

      // Get the index of the dragged element within its parent
      oldIndex = index(target);
      oldDraggableIndex = index(target, options.draggable);

      // Check filter
      if (typeof filter === 'function') {
        if (filter.call(this, evt, target, this)) {
          _dispatchEvent({
            sortable: _this,
            rootEl: originalTarget,
            name: 'filter',
            targetEl: target,
            toEl: el,
            fromEl: el
          });
          pluginEvent('filter', _this, {
            evt: evt
          });
          preventOnFilter && evt.cancelable && evt.preventDefault();
          return; // cancel dnd
        }
      } else if (filter) {
        filter = filter.split(',').some(function (criteria) {
          criteria = closest(originalTarget, criteria.trim(), el, false);
          if (criteria) {
            _dispatchEvent({
              sortable: _this,
              rootEl: criteria,
              name: 'filter',
              targetEl: target,
              fromEl: el,
              toEl: el
            });
            pluginEvent('filter', _this, {
              evt: evt
            });
            return true;
          }
        });
        if (filter) {
          preventOnFilter && evt.cancelable && evt.preventDefault();
          return; // cancel dnd
        }
      }
      if (options.handle && !closest(originalTarget, options.handle, el, false)) {
        return;
      }

      // Prepare `dragstart`
      this._prepareDragStart(evt, touch, target);
    },
    _prepareDragStart: function _prepareDragStart( /** Event */evt, /** Touch */touch, /** HTMLElement */target) {
      var _this = this,
        el = _this.el,
        options = _this.options,
        ownerDocument = el.ownerDocument,
        dragStartFn;
      if (target && !dragEl && target.parentNode === el) {
        var dragRect = getRect(target);
        rootEl = el;
        dragEl = target;
        parentEl = dragEl.parentNode;
        nextEl = dragEl.nextSibling;
        lastDownEl = target;
        activeGroup = options.group;
        Sortable.dragged = dragEl;
        tapEvt = {
          target: dragEl,
          clientX: (touch || evt).clientX,
          clientY: (touch || evt).clientY
        };
        tapDistanceLeft = tapEvt.clientX - dragRect.left;
        tapDistanceTop = tapEvt.clientY - dragRect.top;
        this._lastX = (touch || evt).clientX;
        this._lastY = (touch || evt).clientY;
        dragEl.style['will-change'] = 'all';
        dragStartFn = function dragStartFn() {
          pluginEvent('delayEnded', _this, {
            evt: evt
          });
          if (Sortable.eventCanceled) {
            _this._onDrop();
            return;
          }
          // Delayed drag has been triggered
          // we can re-enable the events: touchmove/mousemove
          _this._disableDelayedDragEvents();
          if (!FireFox && _this.nativeDraggable) {
            dragEl.draggable = true;
          }

          // Bind the events: dragstart/dragend
          _this._triggerDragStart(evt, touch);

          // Drag start event
          _dispatchEvent({
            sortable: _this,
            name: 'choose',
            originalEvent: evt
          });

          // Chosen item
          toggleClass(dragEl, options.chosenClass, true);
        };

        // Disable "draggable"
        options.ignore.split(',').forEach(function (criteria) {
          find(dragEl, criteria.trim(), _disableDraggable);
        });
        on(ownerDocument, 'dragover', nearestEmptyInsertDetectEvent);
        on(ownerDocument, 'mousemove', nearestEmptyInsertDetectEvent);
        on(ownerDocument, 'touchmove', nearestEmptyInsertDetectEvent);
        on(ownerDocument, 'mouseup', _this._onDrop);
        on(ownerDocument, 'touchend', _this._onDrop);
        on(ownerDocument, 'touchcancel', _this._onDrop);

        // Make dragEl draggable (must be before delay for FireFox)
        if (FireFox && this.nativeDraggable) {
          this.options.touchStartThreshold = 4;
          dragEl.draggable = true;
        }
        pluginEvent('delayStart', this, {
          evt: evt
        });

        // Delay is impossible for native DnD in Edge or IE
        if (options.delay && (!options.delayOnTouchOnly || touch) && (!this.nativeDraggable || !(Edge || IE11OrLess))) {
          if (Sortable.eventCanceled) {
            this._onDrop();
            return;
          }
          // If the user moves the pointer or let go the click or touch
          // before the delay has been reached:
          // disable the delayed drag
          on(ownerDocument, 'mouseup', _this._disableDelayedDrag);
          on(ownerDocument, 'touchend', _this._disableDelayedDrag);
          on(ownerDocument, 'touchcancel', _this._disableDelayedDrag);
          on(ownerDocument, 'mousemove', _this._delayedDragTouchMoveHandler);
          on(ownerDocument, 'touchmove', _this._delayedDragTouchMoveHandler);
          options.supportPointer && on(ownerDocument, 'pointermove', _this._delayedDragTouchMoveHandler);
          _this._dragStartTimer = setTimeout(dragStartFn, options.delay);
        } else {
          dragStartFn();
        }
      }
    },
    _delayedDragTouchMoveHandler: function _delayedDragTouchMoveHandler( /** TouchEvent|PointerEvent **/e) {
      var touch = e.touches ? e.touches[0] : e;
      if (Math.max(Math.abs(touch.clientX - this._lastX), Math.abs(touch.clientY - this._lastY)) >= Math.floor(this.options.touchStartThreshold / (this.nativeDraggable && window.devicePixelRatio || 1))) {
        this._disableDelayedDrag();
      }
    },
    _disableDelayedDrag: function _disableDelayedDrag() {
      dragEl && _disableDraggable(dragEl);
      clearTimeout(this._dragStartTimer);
      this._disableDelayedDragEvents();
    },
    _disableDelayedDragEvents: function _disableDelayedDragEvents() {
      var ownerDocument = this.el.ownerDocument;
      off(ownerDocument, 'mouseup', this._disableDelayedDrag);
      off(ownerDocument, 'touchend', this._disableDelayedDrag);
      off(ownerDocument, 'touchcancel', this._disableDelayedDrag);
      off(ownerDocument, 'mousemove', this._delayedDragTouchMoveHandler);
      off(ownerDocument, 'touchmove', this._delayedDragTouchMoveHandler);
      off(ownerDocument, 'pointermove', this._delayedDragTouchMoveHandler);
    },
    _triggerDragStart: function _triggerDragStart( /** Event */evt, /** Touch */touch) {
      touch = touch || evt.pointerType == 'touch' && evt;
      if (!this.nativeDraggable || touch) {
        if (this.options.supportPointer) {
          on(document, 'pointermove', this._onTouchMove);
        } else if (touch) {
          on(document, 'touchmove', this._onTouchMove);
        } else {
          on(document, 'mousemove', this._onTouchMove);
        }
      } else {
        on(dragEl, 'dragend', this);
        on(rootEl, 'dragstart', this._onDragStart);
      }
      try {
        if (document.selection) {
          // Timeout neccessary for IE9
          _nextTick(function () {
            document.selection.empty();
          });
        } else {
          window.getSelection().removeAllRanges();
        }
      } catch (err) {}
    },
    _dragStarted: function _dragStarted(fallback, evt) {
      awaitingDragStarted = false;
      if (rootEl && dragEl) {
        pluginEvent('dragStarted', this, {
          evt: evt
        });
        if (this.nativeDraggable) {
          on(document, 'dragover', _checkOutsideTargetEl);
        }
        var options = this.options;

        // Apply effect
        !fallback && toggleClass(dragEl, options.dragClass, false);
        toggleClass(dragEl, options.ghostClass, true);
        Sortable.active = this;
        fallback && this._appendGhost();

        // Drag start event
        _dispatchEvent({
          sortable: this,
          name: 'start',
          originalEvent: evt
        });
      } else {
        this._nulling();
      }
    },
    _emulateDragOver: function _emulateDragOver() {
      if (touchEvt) {
        this._lastX = touchEvt.clientX;
        this._lastY = touchEvt.clientY;
        _hideGhostForTarget();
        var target = document.elementFromPoint(touchEvt.clientX, touchEvt.clientY);
        var parent = target;
        while (target && target.shadowRoot) {
          target = target.shadowRoot.elementFromPoint(touchEvt.clientX, touchEvt.clientY);
          if (target === parent) break;
          parent = target;
        }
        dragEl.parentNode[expando]._isOutsideThisEl(target);
        if (parent) {
          do {
            if (parent[expando]) {
              var inserted = void 0;
              inserted = parent[expando]._onDragOver({
                clientX: touchEvt.clientX,
                clientY: touchEvt.clientY,
                target: target,
                rootEl: parent
              });
              if (inserted && !this.options.dragoverBubble) {
                break;
              }
            }
            target = parent; // store last element
          }
          /* jshint boss:true */ while (parent = getParentOrHost(parent));
        }
        _unhideGhostForTarget();
      }
    },
    _onTouchMove: function _onTouchMove( /**TouchEvent*/evt) {
      if (tapEvt) {
        var options = this.options,
          fallbackTolerance = options.fallbackTolerance,
          fallbackOffset = options.fallbackOffset,
          touch = evt.touches ? evt.touches[0] : evt,
          ghostMatrix = ghostEl && matrix(ghostEl, true),
          scaleX = ghostEl && ghostMatrix && ghostMatrix.a,
          scaleY = ghostEl && ghostMatrix && ghostMatrix.d,
          relativeScrollOffset = PositionGhostAbsolutely && ghostRelativeParent && getRelativeScrollOffset(ghostRelativeParent),
          dx = (touch.clientX - tapEvt.clientX + fallbackOffset.x) / (scaleX || 1) + (relativeScrollOffset ? relativeScrollOffset[0] - ghostRelativeParentInitialScroll[0] : 0) / (scaleX || 1),
          dy = (touch.clientY - tapEvt.clientY + fallbackOffset.y) / (scaleY || 1) + (relativeScrollOffset ? relativeScrollOffset[1] - ghostRelativeParentInitialScroll[1] : 0) / (scaleY || 1);

        // only set the status to dragging, when we are actually dragging
        if (!Sortable.active && !awaitingDragStarted) {
          if (fallbackTolerance && Math.max(Math.abs(touch.clientX - this._lastX), Math.abs(touch.clientY - this._lastY)) < fallbackTolerance) {
            return;
          }
          this._onDragStart(evt, true);
        }
        if (ghostEl) {
          if (ghostMatrix) {
            ghostMatrix.e += dx - (lastDx || 0);
            ghostMatrix.f += dy - (lastDy || 0);
          } else {
            ghostMatrix = {
              a: 1,
              b: 0,
              c: 0,
              d: 1,
              e: dx,
              f: dy
            };
          }
          var cssMatrix = "matrix(".concat(ghostMatrix.a, ",").concat(ghostMatrix.b, ",").concat(ghostMatrix.c, ",").concat(ghostMatrix.d, ",").concat(ghostMatrix.e, ",").concat(ghostMatrix.f, ")");
          css(ghostEl, 'webkitTransform', cssMatrix);
          css(ghostEl, 'mozTransform', cssMatrix);
          css(ghostEl, 'msTransform', cssMatrix);
          css(ghostEl, 'transform', cssMatrix);
          lastDx = dx;
          lastDy = dy;
          touchEvt = touch;
        }
        evt.cancelable && evt.preventDefault();
      }
    },
    _appendGhost: function _appendGhost() {
      // Bug if using scale(): https://stackoverflow.com/questions/2637058
      // Not being adjusted for
      if (!ghostEl) {
        var container = this.options.fallbackOnBody ? document.body : rootEl,
          rect = getRect(dragEl, true, PositionGhostAbsolutely, true, container),
          options = this.options;

        // Position absolutely
        if (PositionGhostAbsolutely) {
          // Get relatively positioned parent
          ghostRelativeParent = container;
          while (css(ghostRelativeParent, 'position') === 'static' && css(ghostRelativeParent, 'transform') === 'none' && ghostRelativeParent !== document) {
            ghostRelativeParent = ghostRelativeParent.parentNode;
          }
          if (ghostRelativeParent !== document.body && ghostRelativeParent !== document.documentElement) {
            if (ghostRelativeParent === document) ghostRelativeParent = getWindowScrollingElement();
            rect.top += ghostRelativeParent.scrollTop;
            rect.left += ghostRelativeParent.scrollLeft;
          } else {
            ghostRelativeParent = getWindowScrollingElement();
          }
          ghostRelativeParentInitialScroll = getRelativeScrollOffset(ghostRelativeParent);
        }
        ghostEl = dragEl.cloneNode(true);
        toggleClass(ghostEl, options.ghostClass, false);
        toggleClass(ghostEl, options.fallbackClass, true);
        toggleClass(ghostEl, options.dragClass, true);
        css(ghostEl, 'transition', '');
        css(ghostEl, 'transform', '');
        css(ghostEl, 'box-sizing', 'border-box');
        css(ghostEl, 'margin', 0);
        css(ghostEl, 'top', rect.top);
        css(ghostEl, 'left', rect.left);
        css(ghostEl, 'width', rect.width);
        css(ghostEl, 'height', rect.height);
        css(ghostEl, 'opacity', '0.8');
        css(ghostEl, 'position', PositionGhostAbsolutely ? 'absolute' : 'fixed');
        css(ghostEl, 'zIndex', '100000');
        css(ghostEl, 'pointerEvents', 'none');
        Sortable.ghost = ghostEl;
        container.appendChild(ghostEl);

        // Set transform-origin
        css(ghostEl, 'transform-origin', tapDistanceLeft / parseInt(ghostEl.style.width) * 100 + '% ' + tapDistanceTop / parseInt(ghostEl.style.height) * 100 + '%');
      }
    },
    _onDragStart: function _onDragStart( /**Event*/evt, /**boolean*/fallback) {
      var _this = this;
      var dataTransfer = evt.dataTransfer;
      var options = _this.options;
      pluginEvent('dragStart', this, {
        evt: evt
      });
      if (Sortable.eventCanceled) {
        this._onDrop();
        return;
      }
      pluginEvent('setupClone', this);
      if (!Sortable.eventCanceled) {
        cloneEl = clone(dragEl);
        cloneEl.removeAttribute("id");
        cloneEl.draggable = false;
        cloneEl.style['will-change'] = '';
        this._hideClone();
        toggleClass(cloneEl, this.options.chosenClass, false);
        Sortable.clone = cloneEl;
      }

      // #1143: IFrame support workaround
      _this.cloneId = _nextTick(function () {
        pluginEvent('clone', _this);
        if (Sortable.eventCanceled) return;
        if (!_this.options.removeCloneOnHide) {
          rootEl.insertBefore(cloneEl, dragEl);
        }
        _this._hideClone();
        _dispatchEvent({
          sortable: _this,
          name: 'clone'
        });
      });
      !fallback && toggleClass(dragEl, options.dragClass, true);

      // Set proper drop events
      if (fallback) {
        ignoreNextClick = true;
        _this._loopId = setInterval(_this._emulateDragOver, 50);
      } else {
        // Undo what was set in _prepareDragStart before drag started
        off(document, 'mouseup', _this._onDrop);
        off(document, 'touchend', _this._onDrop);
        off(document, 'touchcancel', _this._onDrop);
        if (dataTransfer) {
          dataTransfer.effectAllowed = 'move';
          options.setData && options.setData.call(_this, dataTransfer, dragEl);
        }
        on(document, 'drop', _this);

        // #1276 fix:
        css(dragEl, 'transform', 'translateZ(0)');
      }
      awaitingDragStarted = true;
      _this._dragStartId = _nextTick(_this._dragStarted.bind(_this, fallback, evt));
      on(document, 'selectstart', _this);
      moved = true;
      if (Safari) {
        css(document.body, 'user-select', 'none');
      }
    },
    // Returns true - if no further action is needed (either inserted or another condition)
    _onDragOver: function _onDragOver( /**Event*/evt) {
      var el = this.el,
        target = evt.target,
        dragRect,
        targetRect,
        revert,
        options = this.options,
        group = options.group,
        activeSortable = Sortable.active,
        isOwner = activeGroup === group,
        canSort = options.sort,
        fromSortable = putSortable || activeSortable,
        vertical,
        _this = this,
        completedFired = false;
      if (_silent) return;
      function dragOverEvent(name, extra) {
        pluginEvent(name, _this, _objectSpread2({
          evt: evt,
          isOwner: isOwner,
          axis: vertical ? 'vertical' : 'horizontal',
          revert: revert,
          dragRect: dragRect,
          targetRect: targetRect,
          canSort: canSort,
          fromSortable: fromSortable,
          target: target,
          completed: completed,
          onMove: function onMove(target, after) {
            return _onMove(rootEl, el, dragEl, dragRect, target, getRect(target), evt, after);
          },
          changed: changed
        }, extra));
      }

      // Capture animation state
      function capture() {
        dragOverEvent('dragOverAnimationCapture');
        _this.captureAnimationState();
        if (_this !== fromSortable) {
          fromSortable.captureAnimationState();
        }
      }

      // Return invocation when dragEl is inserted (or completed)
      function completed(insertion) {
        dragOverEvent('dragOverCompleted', {
          insertion: insertion
        });
        if (insertion) {
          // Clones must be hidden before folding animation to capture dragRectAbsolute properly
          if (isOwner) {
            activeSortable._hideClone();
          } else {
            activeSortable._showClone(_this);
          }
          if (_this !== fromSortable) {
            // Set ghost class to new sortable's ghost class
            toggleClass(dragEl, putSortable ? putSortable.options.ghostClass : activeSortable.options.ghostClass, false);
            toggleClass(dragEl, options.ghostClass, true);
          }
          if (putSortable !== _this && _this !== Sortable.active) {
            putSortable = _this;
          } else if (_this === Sortable.active && putSortable) {
            putSortable = null;
          }

          // Animation
          if (fromSortable === _this) {
            _this._ignoreWhileAnimating = target;
          }
          _this.animateAll(function () {
            dragOverEvent('dragOverAnimationComplete');
            _this._ignoreWhileAnimating = null;
          });
          if (_this !== fromSortable) {
            fromSortable.animateAll();
            fromSortable._ignoreWhileAnimating = null;
          }
        }

        // Null lastTarget if it is not inside a previously swapped element
        if (target === dragEl && !dragEl.animated || target === el && !target.animated) {
          lastTarget = null;
        }

        // no bubbling and not fallback
        if (!options.dragoverBubble && !evt.rootEl && target !== document) {
          dragEl.parentNode[expando]._isOutsideThisEl(evt.target);

          // Do not detect for empty insert if already inserted
          !insertion && nearestEmptyInsertDetectEvent(evt);
        }
        !options.dragoverBubble && evt.stopPropagation && evt.stopPropagation();
        return completedFired = true;
      }

      // Call when dragEl has been inserted
      function changed() {
        newIndex = index(dragEl);
        newDraggableIndex = index(dragEl, options.draggable);
        _dispatchEvent({
          sortable: _this,
          name: 'change',
          toEl: el,
          newIndex: newIndex,
          newDraggableIndex: newDraggableIndex,
          originalEvent: evt
        });
      }
      if (evt.preventDefault !== void 0) {
        evt.cancelable && evt.preventDefault();
      }
      target = closest(target, options.draggable, el, true);
      dragOverEvent('dragOver');
      if (Sortable.eventCanceled) return completedFired;
      if (dragEl.contains(evt.target) || target.animated && target.animatingX && target.animatingY || _this._ignoreWhileAnimating === target) {
        return completed(false);
      }
      ignoreNextClick = false;
      if (activeSortable && !options.disabled && (isOwner ? canSort || (revert = parentEl !== rootEl) // Reverting item into the original list
      : putSortable === this || (this.lastPutMode = activeGroup.checkPull(this, activeSortable, dragEl, evt)) && group.checkPut(this, activeSortable, dragEl, evt))) {
        vertical = this._getDirection(evt, target) === 'vertical';
        dragRect = getRect(dragEl);
        dragOverEvent('dragOverValid');
        if (Sortable.eventCanceled) return completedFired;
        if (revert) {
          parentEl = rootEl; // actualization
          capture();
          this._hideClone();
          dragOverEvent('revert');
          if (!Sortable.eventCanceled) {
            if (nextEl) {
              rootEl.insertBefore(dragEl, nextEl);
            } else {
              rootEl.appendChild(dragEl);
            }
          }
          return completed(true);
        }
        var elLastChild = lastChild(el, options.draggable);
        if (!elLastChild || _ghostIsLast(evt, vertical, this) && !elLastChild.animated) {
          // Insert to end of list

          // If already at end of list: Do not insert
          if (elLastChild === dragEl) {
            return completed(false);
          }

          // if there is a last element, it is the target
          if (elLastChild && el === evt.target) {
            target = elLastChild;
          }
          if (target) {
            targetRect = getRect(target);
          }
          if (_onMove(rootEl, el, dragEl, dragRect, target, targetRect, evt, !!target) !== false) {
            capture();
            if (elLastChild && elLastChild.nextSibling) {
              // the last draggable element is not the last node
              el.insertBefore(dragEl, elLastChild.nextSibling);
            } else {
              el.appendChild(dragEl);
            }
            parentEl = el; // actualization

            changed();
            return completed(true);
          }
        } else if (elLastChild && _ghostIsFirst(evt, vertical, this)) {
          // Insert to start of list
          var firstChild = getChild(el, 0, options, true);
          if (firstChild === dragEl) {
            return completed(false);
          }
          target = firstChild;
          targetRect = getRect(target);
          if (_onMove(rootEl, el, dragEl, dragRect, target, targetRect, evt, false) !== false) {
            capture();
            el.insertBefore(dragEl, firstChild);
            parentEl = el; // actualization

            changed();
            return completed(true);
          }
        } else if (target.parentNode === el) {
          targetRect = getRect(target);
          var direction = 0,
            targetBeforeFirstSwap,
            differentLevel = dragEl.parentNode !== el,
            differentRowCol = !_dragElInRowColumn(dragEl.animated && dragEl.toRect || dragRect, target.animated && target.toRect || targetRect, vertical),
            side1 = vertical ? 'top' : 'left',
            scrolledPastTop = isScrolledPast(target, 'top', 'top') || isScrolledPast(dragEl, 'top', 'top'),
            scrollBefore = scrolledPastTop ? scrolledPastTop.scrollTop : void 0;
          if (lastTarget !== target) {
            targetBeforeFirstSwap = targetRect[side1];
            pastFirstInvertThresh = false;
            isCircumstantialInvert = !differentRowCol && options.invertSwap || differentLevel;
          }
          direction = _getSwapDirection(evt, target, targetRect, vertical, differentRowCol ? 1 : options.swapThreshold, options.invertedSwapThreshold == null ? options.swapThreshold : options.invertedSwapThreshold, isCircumstantialInvert, lastTarget === target);
          var sibling;
          if (direction !== 0) {
            // Check if target is beside dragEl in respective direction (ignoring hidden elements)
            var dragIndex = index(dragEl);
            do {
              dragIndex -= direction;
              sibling = parentEl.children[dragIndex];
            } while (sibling && (css(sibling, 'display') === 'none' || sibling === ghostEl));
          }
          // If dragEl is already beside target: Do not insert
          if (direction === 0 || sibling === target) {
            return completed(false);
          }
          lastTarget = target;
          lastDirection = direction;
          var nextSibling = target.nextElementSibling,
            after = false;
          after = direction === 1;
          var moveVector = _onMove(rootEl, el, dragEl, dragRect, target, targetRect, evt, after);
          if (moveVector !== false) {
            if (moveVector === 1 || moveVector === -1) {
              after = moveVector === 1;
            }
            _silent = true;
            setTimeout(_unsilent, 30);
            capture();
            if (after && !nextSibling) {
              el.appendChild(dragEl);
            } else {
              target.parentNode.insertBefore(dragEl, after ? nextSibling : target);
            }

            // Undo chrome's scroll adjustment (has no effect on other browsers)
            if (scrolledPastTop) {
              scrollBy(scrolledPastTop, 0, scrollBefore - scrolledPastTop.scrollTop);
            }
            parentEl = dragEl.parentNode; // actualization

            // must be done before animation
            if (targetBeforeFirstSwap !== undefined && !isCircumstantialInvert) {
              targetMoveDistance = Math.abs(targetBeforeFirstSwap - getRect(target)[side1]);
            }
            changed();
            return completed(true);
          }
        }
        if (el.contains(dragEl)) {
          return completed(false);
        }
      }
      return false;
    },
    _ignoreWhileAnimating: null,
    _offMoveEvents: function _offMoveEvents() {
      off(document, 'mousemove', this._onTouchMove);
      off(document, 'touchmove', this._onTouchMove);
      off(document, 'pointermove', this._onTouchMove);
      off(document, 'dragover', nearestEmptyInsertDetectEvent);
      off(document, 'mousemove', nearestEmptyInsertDetectEvent);
      off(document, 'touchmove', nearestEmptyInsertDetectEvent);
    },
    _offUpEvents: function _offUpEvents() {
      var ownerDocument = this.el.ownerDocument;
      off(ownerDocument, 'mouseup', this._onDrop);
      off(ownerDocument, 'touchend', this._onDrop);
      off(ownerDocument, 'pointerup', this._onDrop);
      off(ownerDocument, 'touchcancel', this._onDrop);
      off(document, 'selectstart', this);
    },
    _onDrop: function _onDrop( /**Event*/evt) {
      var el = this.el,
        options = this.options;

      // Get the index of the dragged element within its parent
      newIndex = index(dragEl);
      newDraggableIndex = index(dragEl, options.draggable);
      pluginEvent('drop', this, {
        evt: evt
      });
      parentEl = dragEl && dragEl.parentNode;

      // Get again after plugin event
      newIndex = index(dragEl);
      newDraggableIndex = index(dragEl, options.draggable);
      if (Sortable.eventCanceled) {
        this._nulling();
        return;
      }
      awaitingDragStarted = false;
      isCircumstantialInvert = false;
      pastFirstInvertThresh = false;
      clearInterval(this._loopId);
      clearTimeout(this._dragStartTimer);
      _cancelNextTick(this.cloneId);
      _cancelNextTick(this._dragStartId);

      // Unbind events
      if (this.nativeDraggable) {
        off(document, 'drop', this);
        off(el, 'dragstart', this._onDragStart);
      }
      this._offMoveEvents();
      this._offUpEvents();
      if (Safari) {
        css(document.body, 'user-select', '');
      }
      css(dragEl, 'transform', '');
      if (evt) {
        if (moved) {
          evt.cancelable && evt.preventDefault();
          !options.dropBubble && evt.stopPropagation();
        }
        ghostEl && ghostEl.parentNode && ghostEl.parentNode.removeChild(ghostEl);
        if (rootEl === parentEl || putSortable && putSortable.lastPutMode !== 'clone') {
          // Remove clone(s)
          cloneEl && cloneEl.parentNode && cloneEl.parentNode.removeChild(cloneEl);
        }
        if (dragEl) {
          if (this.nativeDraggable) {
            off(dragEl, 'dragend', this);
          }
          _disableDraggable(dragEl);
          dragEl.style['will-change'] = '';

          // Remove classes
          // ghostClass is added in dragStarted
          if (moved && !awaitingDragStarted) {
            toggleClass(dragEl, putSortable ? putSortable.options.ghostClass : this.options.ghostClass, false);
          }
          toggleClass(dragEl, this.options.chosenClass, false);

          // Drag stop event
          _dispatchEvent({
            sortable: this,
            name: 'unchoose',
            toEl: parentEl,
            newIndex: null,
            newDraggableIndex: null,
            originalEvent: evt
          });
          if (rootEl !== parentEl) {
            if (newIndex >= 0) {
              // Add event
              _dispatchEvent({
                rootEl: parentEl,
                name: 'add',
                toEl: parentEl,
                fromEl: rootEl,
                originalEvent: evt
              });

              // Remove event
              _dispatchEvent({
                sortable: this,
                name: 'remove',
                toEl: parentEl,
                originalEvent: evt
              });

              // drag from one list and drop into another
              _dispatchEvent({
                rootEl: parentEl,
                name: 'sort',
                toEl: parentEl,
                fromEl: rootEl,
                originalEvent: evt
              });
              _dispatchEvent({
                sortable: this,
                name: 'sort',
                toEl: parentEl,
                originalEvent: evt
              });
            }
            putSortable && putSortable.save();
          } else {
            if (newIndex !== oldIndex) {
              if (newIndex >= 0) {
                // drag & drop within the same list
                _dispatchEvent({
                  sortable: this,
                  name: 'update',
                  toEl: parentEl,
                  originalEvent: evt
                });
                _dispatchEvent({
                  sortable: this,
                  name: 'sort',
                  toEl: parentEl,
                  originalEvent: evt
                });
              }
            }
          }
          if (Sortable.active) {
            /* jshint eqnull:true */
            if (newIndex == null || newIndex === -1) {
              newIndex = oldIndex;
              newDraggableIndex = oldDraggableIndex;
            }
            _dispatchEvent({
              sortable: this,
              name: 'end',
              toEl: parentEl,
              originalEvent: evt
            });

            // Save sorting
            this.save();
          }
        }
      }
      this._nulling();
    },
    _nulling: function _nulling() {
      pluginEvent('nulling', this);
      rootEl = dragEl = parentEl = ghostEl = nextEl = cloneEl = lastDownEl = cloneHidden = tapEvt = touchEvt = moved = newIndex = newDraggableIndex = oldIndex = oldDraggableIndex = lastTarget = lastDirection = putSortable = activeGroup = Sortable.dragged = Sortable.ghost = Sortable.clone = Sortable.active = null;
      savedInputChecked.forEach(function (el) {
        el.checked = true;
      });
      savedInputChecked.length = lastDx = lastDy = 0;
    },
    handleEvent: function handleEvent( /**Event*/evt) {
      switch (evt.type) {
        case 'drop':
        case 'dragend':
          this._onDrop(evt);
          break;
        case 'dragenter':
        case 'dragover':
          if (dragEl) {
            this._onDragOver(evt);
            _globalDragOver(evt);
          }
          break;
        case 'selectstart':
          evt.preventDefault();
          break;
      }
    },
    /**
     * Serializes the item into an array of string.
     * @returns {String[]}
     */
    toArray: function toArray() {
      var order = [],
        el,
        children = this.el.children,
        i = 0,
        n = children.length,
        options = this.options;
      for (; i < n; i++) {
        el = children[i];
        if (closest(el, options.draggable, this.el, false)) {
          order.push(el.getAttribute(options.dataIdAttr) || _generateId(el));
        }
      }
      return order;
    },
    /**
     * Sorts the elements according to the array.
     * @param  {String[]}  order  order of the items
     */
    sort: function sort(order, useAnimation) {
      var items = {},
        rootEl = this.el;
      this.toArray().forEach(function (id, i) {
        var el = rootEl.children[i];
        if (closest(el, this.options.draggable, rootEl, false)) {
          items[id] = el;
        }
      }, this);
      useAnimation && this.captureAnimationState();
      order.forEach(function (id) {
        if (items[id]) {
          rootEl.removeChild(items[id]);
          rootEl.appendChild(items[id]);
        }
      });
      useAnimation && this.animateAll();
    },
    /**
     * Save the current sorting
     */
    save: function save() {
      var store = this.options.store;
      store && store.set && store.set(this);
    },
    /**
     * For each element in the set, get the first element that matches the selector by testing the element itself and traversing up through its ancestors in the DOM tree.
     * @param   {HTMLElement}  el
     * @param   {String}       [selector]  default: `options.draggable`
     * @returns {HTMLElement|null}
     */
    closest: function closest$1(el, selector) {
      return closest(el, selector || this.options.draggable, this.el, false);
    },
    /**
     * Set/get option
     * @param   {string} name
     * @param   {*}      [value]
     * @returns {*}
     */
    option: function option(name, value) {
      var options = this.options;
      if (value === void 0) {
        return options[name];
      } else {
        var modifiedValue = PluginManager.modifyOption(this, name, value);
        if (typeof modifiedValue !== 'undefined') {
          options[name] = modifiedValue;
        } else {
          options[name] = value;
        }
        if (name === 'group') {
          _prepareGroup(options);
        }
      }
    },
    /**
     * Destroy
     */
    destroy: function destroy() {
      pluginEvent('destroy', this);
      var el = this.el;
      el[expando] = null;
      off(el, 'mousedown', this._onTapStart);
      off(el, 'touchstart', this._onTapStart);
      off(el, 'pointerdown', this._onTapStart);
      if (this.nativeDraggable) {
        off(el, 'dragover', this);
        off(el, 'dragenter', this);
      }
      // Remove draggable attributes
      Array.prototype.forEach.call(el.querySelectorAll('[draggable]'), function (el) {
        el.removeAttribute('draggable');
      });
      this._onDrop();
      this._disableDelayedDragEvents();
      sortables.splice(sortables.indexOf(this.el), 1);
      this.el = el = null;
    },
    _hideClone: function _hideClone() {
      if (!cloneHidden) {
        pluginEvent('hideClone', this);
        if (Sortable.eventCanceled) return;
        css(cloneEl, 'display', 'none');
        if (this.options.removeCloneOnHide && cloneEl.parentNode) {
          cloneEl.parentNode.removeChild(cloneEl);
        }
        cloneHidden = true;
      }
    },
    _showClone: function _showClone(putSortable) {
      if (putSortable.lastPutMode !== 'clone') {
        this._hideClone();
        return;
      }
      if (cloneHidden) {
        pluginEvent('showClone', this);
        if (Sortable.eventCanceled) return;

        // show clone at dragEl or original position
        if (dragEl.parentNode == rootEl && !this.options.group.revertClone) {
          rootEl.insertBefore(cloneEl, dragEl);
        } else if (nextEl) {
          rootEl.insertBefore(cloneEl, nextEl);
        } else {
          rootEl.appendChild(cloneEl);
        }
        if (this.options.group.revertClone) {
          this.animate(dragEl, cloneEl);
        }
        css(cloneEl, 'display', '');
        cloneHidden = false;
      }
    }
  };
  function _globalDragOver( /**Event*/evt) {
    if (evt.dataTransfer) {
      evt.dataTransfer.dropEffect = 'move';
    }
    evt.cancelable && evt.preventDefault();
  }
  function _onMove(fromEl, toEl, dragEl, dragRect, targetEl, targetRect, originalEvent, willInsertAfter) {
    var evt,
      sortable = fromEl[expando],
      onMoveFn = sortable.options.onMove,
      retVal;
    // Support for new CustomEvent feature
    if (window.CustomEvent && !IE11OrLess && !Edge) {
      evt = new CustomEvent('move', {
        bubbles: true,
        cancelable: true
      });
    } else {
      evt = document.createEvent('Event');
      evt.initEvent('move', true, true);
    }
    evt.to = toEl;
    evt.from = fromEl;
    evt.dragged = dragEl;
    evt.draggedRect = dragRect;
    evt.related = targetEl || toEl;
    evt.relatedRect = targetRect || getRect(toEl);
    evt.willInsertAfter = willInsertAfter;
    evt.originalEvent = originalEvent;
    fromEl.dispatchEvent(evt);
    if (onMoveFn) {
      retVal = onMoveFn.call(sortable, evt, originalEvent);
    }
    return retVal;
  }
  function _disableDraggable(el) {
    el.draggable = false;
  }
  function _unsilent() {
    _silent = false;
  }
  function _ghostIsFirst(evt, vertical, sortable) {
    var firstElRect = getRect(getChild(sortable.el, 0, sortable.options, true));
    var childContainingRect = getChildContainingRectFromElement(sortable.el, sortable.options, ghostEl);
    var spacer = 10;
    return vertical ? evt.clientX < childContainingRect.left - spacer || evt.clientY < firstElRect.top && evt.clientX < firstElRect.right : evt.clientY < childContainingRect.top - spacer || evt.clientY < firstElRect.bottom && evt.clientX < firstElRect.left;
  }
  function _ghostIsLast(evt, vertical, sortable) {
    var lastElRect = getRect(lastChild(sortable.el, sortable.options.draggable));
    var childContainingRect = getChildContainingRectFromElement(sortable.el, sortable.options, ghostEl);
    var spacer = 10;
    return vertical ? evt.clientX > childContainingRect.right + spacer || evt.clientY > lastElRect.bottom && evt.clientX > lastElRect.left : evt.clientY > childContainingRect.bottom + spacer || evt.clientX > lastElRect.right && evt.clientY > lastElRect.top;
  }
  function _getSwapDirection(evt, target, targetRect, vertical, swapThreshold, invertedSwapThreshold, invertSwap, isLastTarget) {
    var mouseOnAxis = vertical ? evt.clientY : evt.clientX,
      targetLength = vertical ? targetRect.height : targetRect.width,
      targetS1 = vertical ? targetRect.top : targetRect.left,
      targetS2 = vertical ? targetRect.bottom : targetRect.right,
      invert = false;
    if (!invertSwap) {
      // Never invert or create dragEl shadow when target movemenet causes mouse to move past the end of regular swapThreshold
      if (isLastTarget && targetMoveDistance < targetLength * swapThreshold) {
        // multiplied only by swapThreshold because mouse will already be inside target by (1 - threshold) * targetLength / 2
        // check if past first invert threshold on side opposite of lastDirection
        if (!pastFirstInvertThresh && (lastDirection === 1 ? mouseOnAxis > targetS1 + targetLength * invertedSwapThreshold / 2 : mouseOnAxis < targetS2 - targetLength * invertedSwapThreshold / 2)) {
          // past first invert threshold, do not restrict inverted threshold to dragEl shadow
          pastFirstInvertThresh = true;
        }
        if (!pastFirstInvertThresh) {
          // dragEl shadow (target move distance shadow)
          if (lastDirection === 1 ? mouseOnAxis < targetS1 + targetMoveDistance // over dragEl shadow
          : mouseOnAxis > targetS2 - targetMoveDistance) {
            return -lastDirection;
          }
        } else {
          invert = true;
        }
      } else {
        // Regular
        if (mouseOnAxis > targetS1 + targetLength * (1 - swapThreshold) / 2 && mouseOnAxis < targetS2 - targetLength * (1 - swapThreshold) / 2) {
          return _getInsertDirection(target);
        }
      }
    }
    invert = invert || invertSwap;
    if (invert) {
      // Invert of regular
      if (mouseOnAxis < targetS1 + targetLength * invertedSwapThreshold / 2 || mouseOnAxis > targetS2 - targetLength * invertedSwapThreshold / 2) {
        return mouseOnAxis > targetS1 + targetLength / 2 ? 1 : -1;
      }
    }
    return 0;
  }

  /**
   * Gets the direction dragEl must be swapped relative to target in order to make it
   * seem that dragEl has been "inserted" into that element's position
   * @param  {HTMLElement} target       The target whose position dragEl is being inserted at
   * @return {Number}                   Direction dragEl must be swapped
   */
  function _getInsertDirection(target) {
    if (index(dragEl) < index(target)) {
      return 1;
    } else {
      return -1;
    }
  }

  /**
   * Generate id
   * @param   {HTMLElement} el
   * @returns {String}
   * @private
   */
  function _generateId(el) {
    var str = el.tagName + el.className + el.src + el.href + el.textContent,
      i = str.length,
      sum = 0;
    while (i--) {
      sum += str.charCodeAt(i);
    }
    return sum.toString(36);
  }
  function _saveInputCheckedState(root) {
    savedInputChecked.length = 0;
    var inputs = root.getElementsByTagName('input');
    var idx = inputs.length;
    while (idx--) {
      var el = inputs[idx];
      el.checked && savedInputChecked.push(el);
    }
  }
  function _nextTick(fn) {
    return setTimeout(fn, 0);
  }
  function _cancelNextTick(id) {
    return clearTimeout(id);
  }

  // Fixed #973:
  if (documentExists) {
    on(document, 'touchmove', function (evt) {
      if ((Sortable.active || awaitingDragStarted) && evt.cancelable) {
        evt.preventDefault();
      }
    });
  }

  // Export utils
  Sortable.utils = {
    on: on,
    off: off,
    css: css,
    find: find,
    is: function is(el, selector) {
      return !!closest(el, selector, el, false);
    },
    extend: extend,
    throttle: throttle,
    closest: closest,
    toggleClass: toggleClass,
    clone: clone,
    index: index,
    nextTick: _nextTick,
    cancelNextTick: _cancelNextTick,
    detectDirection: _detectDirection,
    getChild: getChild,
    expando: expando
  };

  /**
   * Get the Sortable instance of an element
   * @param  {HTMLElement} element The element
   * @return {Sortable|undefined}         The instance of Sortable
   */
  Sortable.get = function (element) {
    return element[expando];
  };

  /**
   * Mount a plugin to Sortable
   * @param  {...SortablePlugin|SortablePlugin[]} plugins       Plugins being mounted
   */
  Sortable.mount = function () {
    for (var _len = arguments.length, plugins = new Array(_len), _key = 0; _key < _len; _key++) {
      plugins[_key] = arguments[_key];
    }
    if (plugins[0].constructor === Array) plugins = plugins[0];
    plugins.forEach(function (plugin) {
      if (!plugin.prototype || !plugin.prototype.constructor) {
        throw "Sortable: Mounted plugin must be a constructor function, not ".concat({}.toString.call(plugin));
      }
      if (plugin.utils) Sortable.utils = _objectSpread2(_objectSpread2({}, Sortable.utils), plugin.utils);
      PluginManager.mount(plugin);
    });
  };

  /**
   * Create sortable instance
   * @param {HTMLElement}  el
   * @param {Object}      [options]
   */
  Sortable.create = function (el, options) {
    return new Sortable(el, options);
  };

  // Export
  Sortable.version = version;

  var autoScrolls = [],
    scrollEl,
    scrollRootEl,
    scrolling = false,
    lastAutoScrollX,
    lastAutoScrollY,
    touchEvt$1,
    pointerElemChangedInterval;
  function AutoScrollPlugin() {
    function AutoScroll() {
      this.defaults = {
        scroll: true,
        forceAutoScrollFallback: false,
        scrollSensitivity: 30,
        scrollSpeed: 10,
        bubbleScroll: true
      };

      // Bind all private methods
      for (var fn in this) {
        if (fn.charAt(0) === '_' && typeof this[fn] === 'function') {
          this[fn] = this[fn].bind(this);
        }
      }
    }
    AutoScroll.prototype = {
      dragStarted: function dragStarted(_ref) {
        var originalEvent = _ref.originalEvent;
        if (this.sortable.nativeDraggable) {
          on(document, 'dragover', this._handleAutoScroll);
        } else {
          if (this.options.supportPointer) {
            on(document, 'pointermove', this._handleFallbackAutoScroll);
          } else if (originalEvent.touches) {
            on(document, 'touchmove', this._handleFallbackAutoScroll);
          } else {
            on(document, 'mousemove', this._handleFallbackAutoScroll);
          }
        }
      },
      dragOverCompleted: function dragOverCompleted(_ref2) {
        var originalEvent = _ref2.originalEvent;
        // For when bubbling is canceled and using fallback (fallback 'touchmove' always reached)
        if (!this.options.dragOverBubble && !originalEvent.rootEl) {
          this._handleAutoScroll(originalEvent);
        }
      },
      drop: function drop() {
        if (this.sortable.nativeDraggable) {
          off(document, 'dragover', this._handleAutoScroll);
        } else {
          off(document, 'pointermove', this._handleFallbackAutoScroll);
          off(document, 'touchmove', this._handleFallbackAutoScroll);
          off(document, 'mousemove', this._handleFallbackAutoScroll);
        }
        clearPointerElemChangedInterval();
        clearAutoScrolls();
        cancelThrottle();
      },
      nulling: function nulling() {
        touchEvt$1 = scrollRootEl = scrollEl = scrolling = pointerElemChangedInterval = lastAutoScrollX = lastAutoScrollY = null;
        autoScrolls.length = 0;
      },
      _handleFallbackAutoScroll: function _handleFallbackAutoScroll(evt) {
        this._handleAutoScroll(evt, true);
      },
      _handleAutoScroll: function _handleAutoScroll(evt, fallback) {
        var _this = this;
        var x = (evt.touches ? evt.touches[0] : evt).clientX,
          y = (evt.touches ? evt.touches[0] : evt).clientY,
          elem = document.elementFromPoint(x, y);
        touchEvt$1 = evt;

        // IE does not seem to have native autoscroll,
        // Edge's autoscroll seems too conditional,
        // MACOS Safari does not have autoscroll,
        // Firefox and Chrome are good
        if (fallback || this.options.forceAutoScrollFallback || Edge || IE11OrLess || Safari) {
          autoScroll(evt, this.options, elem, fallback);

          // Listener for pointer element change
          var ogElemScroller = getParentAutoScrollElement(elem, true);
          if (scrolling && (!pointerElemChangedInterval || x !== lastAutoScrollX || y !== lastAutoScrollY)) {
            pointerElemChangedInterval && clearPointerElemChangedInterval();
            // Detect for pointer elem change, emulating native DnD behaviour
            pointerElemChangedInterval = setInterval(function () {
              var newElem = getParentAutoScrollElement(document.elementFromPoint(x, y), true);
              if (newElem !== ogElemScroller) {
                ogElemScroller = newElem;
                clearAutoScrolls();
              }
              autoScroll(evt, _this.options, newElem, fallback);
            }, 10);
            lastAutoScrollX = x;
            lastAutoScrollY = y;
          }
        } else {
          // if DnD is enabled (and browser has good autoscrolling), first autoscroll will already scroll, so get parent autoscroll of first autoscroll
          if (!this.options.bubbleScroll || getParentAutoScrollElement(elem, true) === getWindowScrollingElement()) {
            clearAutoScrolls();
            return;
          }
          autoScroll(evt, this.options, getParentAutoScrollElement(elem, false), false);
        }
      }
    };
    return _extends(AutoScroll, {
      pluginName: 'scroll',
      initializeByDefault: true
    });
  }
  function clearAutoScrolls() {
    autoScrolls.forEach(function (autoScroll) {
      clearInterval(autoScroll.pid);
    });
    autoScrolls = [];
  }
  function clearPointerElemChangedInterval() {
    clearInterval(pointerElemChangedInterval);
  }
  var autoScroll = throttle(function (evt, options, rootEl, isFallback) {
    // Bug: https://bugzilla.mozilla.org/show_bug.cgi?id=505521
    if (!options.scroll) return;
    var x = (evt.touches ? evt.touches[0] : evt).clientX,
      y = (evt.touches ? evt.touches[0] : evt).clientY,
      sens = options.scrollSensitivity,
      speed = options.scrollSpeed,
      winScroller = getWindowScrollingElement();
    var scrollThisInstance = false,
      scrollCustomFn;

    // New scroll root, set scrollEl
    if (scrollRootEl !== rootEl) {
      scrollRootEl = rootEl;
      clearAutoScrolls();
      scrollEl = options.scroll;
      scrollCustomFn = options.scrollFn;
      if (scrollEl === true) {
        scrollEl = getParentAutoScrollElement(rootEl, true);
      }
    }
    var layersOut = 0;
    var currentParent = scrollEl;
    do {
      var el = currentParent,
        rect = getRect(el),
        top = rect.top,
        bottom = rect.bottom,
        left = rect.left,
        right = rect.right,
        width = rect.width,
        height = rect.height,
        canScrollX = void 0,
        canScrollY = void 0,
        scrollWidth = el.scrollWidth,
        scrollHeight = el.scrollHeight,
        elCSS = css(el),
        scrollPosX = el.scrollLeft,
        scrollPosY = el.scrollTop;
      if (el === winScroller) {
        canScrollX = width < scrollWidth && (elCSS.overflowX === 'auto' || elCSS.overflowX === 'scroll' || elCSS.overflowX === 'visible');
        canScrollY = height < scrollHeight && (elCSS.overflowY === 'auto' || elCSS.overflowY === 'scroll' || elCSS.overflowY === 'visible');
      } else {
        canScrollX = width < scrollWidth && (elCSS.overflowX === 'auto' || elCSS.overflowX === 'scroll');
        canScrollY = height < scrollHeight && (elCSS.overflowY === 'auto' || elCSS.overflowY === 'scroll');
      }
      var vx = canScrollX && (Math.abs(right - x) <= sens && scrollPosX + width < scrollWidth) - (Math.abs(left - x) <= sens && !!scrollPosX);
      var vy = canScrollY && (Math.abs(bottom - y) <= sens && scrollPosY + height < scrollHeight) - (Math.abs(top - y) <= sens && !!scrollPosY);
      if (!autoScrolls[layersOut]) {
        for (var i = 0; i <= layersOut; i++) {
          if (!autoScrolls[i]) {
            autoScrolls[i] = {};
          }
        }
      }
      if (autoScrolls[layersOut].vx != vx || autoScrolls[layersOut].vy != vy || autoScrolls[layersOut].el !== el) {
        autoScrolls[layersOut].el = el;
        autoScrolls[layersOut].vx = vx;
        autoScrolls[layersOut].vy = vy;
        clearInterval(autoScrolls[layersOut].pid);
        if (vx != 0 || vy != 0) {
          scrollThisInstance = true;
          /* jshint loopfunc:true */
          autoScrolls[layersOut].pid = setInterval(function () {
            // emulate drag over during autoscroll (fallback), emulating native DnD behaviour
            if (isFallback && this.layer === 0) {
              Sortable.active._onTouchMove(touchEvt$1); // To move ghost if it is positioned absolutely
            }
            var scrollOffsetY = autoScrolls[this.layer].vy ? autoScrolls[this.layer].vy * speed : 0;
            var scrollOffsetX = autoScrolls[this.layer].vx ? autoScrolls[this.layer].vx * speed : 0;
            if (typeof scrollCustomFn === 'function') {
              if (scrollCustomFn.call(Sortable.dragged.parentNode[expando], scrollOffsetX, scrollOffsetY, evt, touchEvt$1, autoScrolls[this.layer].el) !== 'continue') {
                return;
              }
            }
            scrollBy(autoScrolls[this.layer].el, scrollOffsetX, scrollOffsetY);
          }.bind({
            layer: layersOut
          }), 24);
        }
      }
      layersOut++;
    } while (options.bubbleScroll && currentParent !== winScroller && (currentParent = getParentAutoScrollElement(currentParent, false)));
    scrolling = scrollThisInstance; // in case another function catches scrolling as false in between when it is not
  }, 30);

  var drop = function drop(_ref) {
    var originalEvent = _ref.originalEvent,
      putSortable = _ref.putSortable,
      dragEl = _ref.dragEl,
      activeSortable = _ref.activeSortable,
      dispatchSortableEvent = _ref.dispatchSortableEvent,
      hideGhostForTarget = _ref.hideGhostForTarget,
      unhideGhostForTarget = _ref.unhideGhostForTarget;
    if (!originalEvent) return;
    var toSortable = putSortable || activeSortable;
    hideGhostForTarget();
    var touch = originalEvent.changedTouches && originalEvent.changedTouches.length ? originalEvent.changedTouches[0] : originalEvent;
    var target = document.elementFromPoint(touch.clientX, touch.clientY);
    unhideGhostForTarget();
    if (toSortable && !toSortable.el.contains(target)) {
      dispatchSortableEvent('spill');
      this.onSpill({
        dragEl: dragEl,
        putSortable: putSortable
      });
    }
  };
  function Revert() {}
  Revert.prototype = {
    startIndex: null,
    dragStart: function dragStart(_ref2) {
      var oldDraggableIndex = _ref2.oldDraggableIndex;
      this.startIndex = oldDraggableIndex;
    },
    onSpill: function onSpill(_ref3) {
      var dragEl = _ref3.dragEl,
        putSortable = _ref3.putSortable;
      this.sortable.captureAnimationState();
      if (putSortable) {
        putSortable.captureAnimationState();
      }
      var nextSibling = getChild(this.sortable.el, this.startIndex, this.options);
      if (nextSibling) {
        this.sortable.el.insertBefore(dragEl, nextSibling);
      } else {
        this.sortable.el.appendChild(dragEl);
      }
      this.sortable.animateAll();
      if (putSortable) {
        putSortable.animateAll();
      }
    },
    drop: drop
  };
  _extends(Revert, {
    pluginName: 'revertOnSpill'
  });
  function Remove() {}
  Remove.prototype = {
    onSpill: function onSpill(_ref4) {
      var dragEl = _ref4.dragEl,
        putSortable = _ref4.putSortable;
      var parentSortable = putSortable || this.sortable;
      parentSortable.captureAnimationState();
      dragEl.parentNode && dragEl.parentNode.removeChild(dragEl);
      parentSortable.animateAll();
    },
    drop: drop
  };
  _extends(Remove, {
    pluginName: 'removeOnSpill'
  });

  var multiDragElements = [],
    multiDragClones = [],
    lastMultiDragSelect,
    // for selection with modifier key down (SHIFT)
    multiDragSortable,
    initialFolding = false,
    // Initial multi-drag fold when drag started
    folding = false,
    // Folding any other time
    dragStarted = false,
    dragEl$1,
    clonesFromRect,
    clonesHidden;
  function MultiDragPlugin() {
    function MultiDrag(sortable) {
      // Bind all private methods
      for (var fn in this) {
        if (fn.charAt(0) === '_' && typeof this[fn] === 'function') {
          this[fn] = this[fn].bind(this);
        }
      }
      if (!sortable.options.avoidImplicitDeselect) {
        if (sortable.options.supportPointer) {
          on(document, 'pointerup', this._deselectMultiDrag);
        } else {
          on(document, 'mouseup', this._deselectMultiDrag);
          on(document, 'touchend', this._deselectMultiDrag);
        }
      }
      on(document, 'keydown', this._checkKeyDown);
      on(document, 'keyup', this._checkKeyUp);
      this.defaults = {
        selectedClass: 'sortable-selected',
        multiDragKey: null,
        avoidImplicitDeselect: false,
        setData: function setData(dataTransfer, dragEl) {
          var data = '';
          if (multiDragElements.length && multiDragSortable === sortable) {
            multiDragElements.forEach(function (multiDragElement, i) {
              data += (!i ? '' : ', ') + multiDragElement.textContent;
            });
          } else {
            data = dragEl.textContent;
          }
          dataTransfer.setData('Text', data);
        }
      };
    }
    MultiDrag.prototype = {
      multiDragKeyDown: false,
      isMultiDrag: false,
      delayStartGlobal: function delayStartGlobal(_ref) {
        var dragged = _ref.dragEl;
        dragEl$1 = dragged;
      },
      delayEnded: function delayEnded() {
        this.isMultiDrag = ~multiDragElements.indexOf(dragEl$1);
      },
      setupClone: function setupClone(_ref2) {
        var sortable = _ref2.sortable,
          cancel = _ref2.cancel;
        if (!this.isMultiDrag) return;
        for (var i = 0; i < multiDragElements.length; i++) {
          multiDragClones.push(clone(multiDragElements[i]));
          multiDragClones[i].sortableIndex = multiDragElements[i].sortableIndex;
          multiDragClones[i].draggable = false;
          multiDragClones[i].style['will-change'] = '';
          toggleClass(multiDragClones[i], this.options.selectedClass, false);
          multiDragElements[i] === dragEl$1 && toggleClass(multiDragClones[i], this.options.chosenClass, false);
        }
        sortable._hideClone();
        cancel();
      },
      clone: function clone(_ref3) {
        var sortable = _ref3.sortable,
          rootEl = _ref3.rootEl,
          dispatchSortableEvent = _ref3.dispatchSortableEvent,
          cancel = _ref3.cancel;
        if (!this.isMultiDrag) return;
        if (!this.options.removeCloneOnHide) {
          if (multiDragElements.length && multiDragSortable === sortable) {
            insertMultiDragClones(true, rootEl);
            dispatchSortableEvent('clone');
            cancel();
          }
        }
      },
      showClone: function showClone(_ref4) {
        var cloneNowShown = _ref4.cloneNowShown,
          rootEl = _ref4.rootEl,
          cancel = _ref4.cancel;
        if (!this.isMultiDrag) return;
        insertMultiDragClones(false, rootEl);
        multiDragClones.forEach(function (clone) {
          css(clone, 'display', '');
        });
        cloneNowShown();
        clonesHidden = false;
        cancel();
      },
      hideClone: function hideClone(_ref5) {
        var _this = this;
        _ref5.sortable;
          var cloneNowHidden = _ref5.cloneNowHidden,
          cancel = _ref5.cancel;
        if (!this.isMultiDrag) return;
        multiDragClones.forEach(function (clone) {
          css(clone, 'display', 'none');
          if (_this.options.removeCloneOnHide && clone.parentNode) {
            clone.parentNode.removeChild(clone);
          }
        });
        cloneNowHidden();
        clonesHidden = true;
        cancel();
      },
      dragStartGlobal: function dragStartGlobal(_ref6) {
        _ref6.sortable;
        if (!this.isMultiDrag && multiDragSortable) {
          multiDragSortable.multiDrag._deselectMultiDrag();
        }
        multiDragElements.forEach(function (multiDragElement) {
          multiDragElement.sortableIndex = index(multiDragElement);
        });

        // Sort multi-drag elements
        multiDragElements = multiDragElements.sort(function (a, b) {
          return a.sortableIndex - b.sortableIndex;
        });
        dragStarted = true;
      },
      dragStarted: function dragStarted(_ref7) {
        var _this2 = this;
        var sortable = _ref7.sortable;
        if (!this.isMultiDrag) return;
        if (this.options.sort) {
          // Capture rects,
          // hide multi drag elements (by positioning them absolute),
          // set multi drag elements rects to dragRect,
          // show multi drag elements,
          // animate to rects,
          // unset rects & remove from DOM

          sortable.captureAnimationState();
          if (this.options.animation) {
            multiDragElements.forEach(function (multiDragElement) {
              if (multiDragElement === dragEl$1) return;
              css(multiDragElement, 'position', 'absolute');
            });
            var dragRect = getRect(dragEl$1, false, true, true);
            multiDragElements.forEach(function (multiDragElement) {
              if (multiDragElement === dragEl$1) return;
              setRect(multiDragElement, dragRect);
            });
            folding = true;
            initialFolding = true;
          }
        }
        sortable.animateAll(function () {
          folding = false;
          initialFolding = false;
          if (_this2.options.animation) {
            multiDragElements.forEach(function (multiDragElement) {
              unsetRect(multiDragElement);
            });
          }

          // Remove all auxiliary multidrag items from el, if sorting enabled
          if (_this2.options.sort) {
            removeMultiDragElements();
          }
        });
      },
      dragOver: function dragOver(_ref8) {
        var target = _ref8.target,
          completed = _ref8.completed,
          cancel = _ref8.cancel;
        if (folding && ~multiDragElements.indexOf(target)) {
          completed(false);
          cancel();
        }
      },
      revert: function revert(_ref9) {
        var fromSortable = _ref9.fromSortable,
          rootEl = _ref9.rootEl,
          sortable = _ref9.sortable,
          dragRect = _ref9.dragRect;
        if (multiDragElements.length > 1) {
          // Setup unfold animation
          multiDragElements.forEach(function (multiDragElement) {
            sortable.addAnimationState({
              target: multiDragElement,
              rect: folding ? getRect(multiDragElement) : dragRect
            });
            unsetRect(multiDragElement);
            multiDragElement.fromRect = dragRect;
            fromSortable.removeAnimationState(multiDragElement);
          });
          folding = false;
          insertMultiDragElements(!this.options.removeCloneOnHide, rootEl);
        }
      },
      dragOverCompleted: function dragOverCompleted(_ref10) {
        var sortable = _ref10.sortable,
          isOwner = _ref10.isOwner,
          insertion = _ref10.insertion,
          activeSortable = _ref10.activeSortable,
          parentEl = _ref10.parentEl,
          putSortable = _ref10.putSortable;
        var options = this.options;
        if (insertion) {
          // Clones must be hidden before folding animation to capture dragRectAbsolute properly
          if (isOwner) {
            activeSortable._hideClone();
          }
          initialFolding = false;
          // If leaving sort:false root, or already folding - Fold to new location
          if (options.animation && multiDragElements.length > 1 && (folding || !isOwner && !activeSortable.options.sort && !putSortable)) {
            // Fold: Set all multi drag elements's rects to dragEl's rect when multi-drag elements are invisible
            var dragRectAbsolute = getRect(dragEl$1, false, true, true);
            multiDragElements.forEach(function (multiDragElement) {
              if (multiDragElement === dragEl$1) return;
              setRect(multiDragElement, dragRectAbsolute);

              // Move element(s) to end of parentEl so that it does not interfere with multi-drag clones insertion if they are inserted
              // while folding, and so that we can capture them again because old sortable will no longer be fromSortable
              parentEl.appendChild(multiDragElement);
            });
            folding = true;
          }

          // Clones must be shown (and check to remove multi drags) after folding when interfering multiDragElements are moved out
          if (!isOwner) {
            // Only remove if not folding (folding will remove them anyways)
            if (!folding) {
              removeMultiDragElements();
            }
            if (multiDragElements.length > 1) {
              var clonesHiddenBefore = clonesHidden;
              activeSortable._showClone(sortable);

              // Unfold animation for clones if showing from hidden
              if (activeSortable.options.animation && !clonesHidden && clonesHiddenBefore) {
                multiDragClones.forEach(function (clone) {
                  activeSortable.addAnimationState({
                    target: clone,
                    rect: clonesFromRect
                  });
                  clone.fromRect = clonesFromRect;
                  clone.thisAnimationDuration = null;
                });
              }
            } else {
              activeSortable._showClone(sortable);
            }
          }
        }
      },
      dragOverAnimationCapture: function dragOverAnimationCapture(_ref11) {
        var dragRect = _ref11.dragRect,
          isOwner = _ref11.isOwner,
          activeSortable = _ref11.activeSortable;
        multiDragElements.forEach(function (multiDragElement) {
          multiDragElement.thisAnimationDuration = null;
        });
        if (activeSortable.options.animation && !isOwner && activeSortable.multiDrag.isMultiDrag) {
          clonesFromRect = _extends({}, dragRect);
          var dragMatrix = matrix(dragEl$1, true);
          clonesFromRect.top -= dragMatrix.f;
          clonesFromRect.left -= dragMatrix.e;
        }
      },
      dragOverAnimationComplete: function dragOverAnimationComplete() {
        if (folding) {
          folding = false;
          removeMultiDragElements();
        }
      },
      drop: function drop(_ref12) {
        var evt = _ref12.originalEvent,
          rootEl = _ref12.rootEl,
          parentEl = _ref12.parentEl,
          sortable = _ref12.sortable,
          dispatchSortableEvent = _ref12.dispatchSortableEvent,
          oldIndex = _ref12.oldIndex,
          putSortable = _ref12.putSortable;
        var toSortable = putSortable || this.sortable;
        if (!evt) return;
        var options = this.options,
          children = parentEl.children;

        // Multi-drag selection
        if (!dragStarted) {
          if (options.multiDragKey && !this.multiDragKeyDown) {
            this._deselectMultiDrag();
          }
          toggleClass(dragEl$1, options.selectedClass, !~multiDragElements.indexOf(dragEl$1));
          if (!~multiDragElements.indexOf(dragEl$1)) {
            multiDragElements.push(dragEl$1);
            dispatchEvent({
              sortable: sortable,
              rootEl: rootEl,
              name: 'select',
              targetEl: dragEl$1,
              originalEvent: evt
            });

            // Modifier activated, select from last to dragEl
            if (evt.shiftKey && lastMultiDragSelect && sortable.el.contains(lastMultiDragSelect)) {
              var lastIndex = index(lastMultiDragSelect),
                currentIndex = index(dragEl$1);
              if (~lastIndex && ~currentIndex && lastIndex !== currentIndex) {
                // Must include lastMultiDragSelect (select it), in case modified selection from no selection
                // (but previous selection existed)
                var n, i;
                if (currentIndex > lastIndex) {
                  i = lastIndex;
                  n = currentIndex;
                } else {
                  i = currentIndex;
                  n = lastIndex + 1;
                }
                for (; i < n; i++) {
                  if (~multiDragElements.indexOf(children[i])) continue;
                  toggleClass(children[i], options.selectedClass, true);
                  multiDragElements.push(children[i]);
                  dispatchEvent({
                    sortable: sortable,
                    rootEl: rootEl,
                    name: 'select',
                    targetEl: children[i],
                    originalEvent: evt
                  });
                }
              }
            } else {
              lastMultiDragSelect = dragEl$1;
            }
            multiDragSortable = toSortable;
          } else {
            multiDragElements.splice(multiDragElements.indexOf(dragEl$1), 1);
            lastMultiDragSelect = null;
            dispatchEvent({
              sortable: sortable,
              rootEl: rootEl,
              name: 'deselect',
              targetEl: dragEl$1,
              originalEvent: evt
            });
          }
        }

        // Multi-drag drop
        if (dragStarted && this.isMultiDrag) {
          folding = false;
          // Do not "unfold" after around dragEl if reverted
          if ((parentEl[expando].options.sort || parentEl !== rootEl) && multiDragElements.length > 1) {
            var dragRect = getRect(dragEl$1),
              multiDragIndex = index(dragEl$1, ':not(.' + this.options.selectedClass + ')');
            if (!initialFolding && options.animation) dragEl$1.thisAnimationDuration = null;
            toSortable.captureAnimationState();
            if (!initialFolding) {
              if (options.animation) {
                dragEl$1.fromRect = dragRect;
                multiDragElements.forEach(function (multiDragElement) {
                  multiDragElement.thisAnimationDuration = null;
                  if (multiDragElement !== dragEl$1) {
                    var rect = folding ? getRect(multiDragElement) : dragRect;
                    multiDragElement.fromRect = rect;

                    // Prepare unfold animation
                    toSortable.addAnimationState({
                      target: multiDragElement,
                      rect: rect
                    });
                  }
                });
              }

              // Multi drag elements are not necessarily removed from the DOM on drop, so to reinsert
              // properly they must all be removed
              removeMultiDragElements();
              multiDragElements.forEach(function (multiDragElement) {
                if (children[multiDragIndex]) {
                  parentEl.insertBefore(multiDragElement, children[multiDragIndex]);
                } else {
                  parentEl.appendChild(multiDragElement);
                }
                multiDragIndex++;
              });

              // If initial folding is done, the elements may have changed position because they are now
              // unfolding around dragEl, even though dragEl may not have his index changed, so update event
              // must be fired here as Sortable will not.
              if (oldIndex === index(dragEl$1)) {
                var update = false;
                multiDragElements.forEach(function (multiDragElement) {
                  if (multiDragElement.sortableIndex !== index(multiDragElement)) {
                    update = true;
                    return;
                  }
                });
                if (update) {
                  dispatchSortableEvent('update');
                  dispatchSortableEvent('sort');
                }
              }
            }

            // Must be done after capturing individual rects (scroll bar)
            multiDragElements.forEach(function (multiDragElement) {
              unsetRect(multiDragElement);
            });
            toSortable.animateAll();
          }
          multiDragSortable = toSortable;
        }

        // Remove clones if necessary
        if (rootEl === parentEl || putSortable && putSortable.lastPutMode !== 'clone') {
          multiDragClones.forEach(function (clone) {
            clone.parentNode && clone.parentNode.removeChild(clone);
          });
        }
      },
      nullingGlobal: function nullingGlobal() {
        this.isMultiDrag = dragStarted = false;
        multiDragClones.length = 0;
      },
      destroyGlobal: function destroyGlobal() {
        this._deselectMultiDrag();
        off(document, 'pointerup', this._deselectMultiDrag);
        off(document, 'mouseup', this._deselectMultiDrag);
        off(document, 'touchend', this._deselectMultiDrag);
        off(document, 'keydown', this._checkKeyDown);
        off(document, 'keyup', this._checkKeyUp);
      },
      _deselectMultiDrag: function _deselectMultiDrag(evt) {
        if (typeof dragStarted !== "undefined" && dragStarted) return;

        // Only deselect if selection is in this sortable
        if (multiDragSortable !== this.sortable) return;

        // Only deselect if target is not item in this sortable
        if (evt && closest(evt.target, this.options.draggable, this.sortable.el, false)) return;

        // Only deselect if left click
        if (evt && evt.button !== 0) return;
        while (multiDragElements.length) {
          var el = multiDragElements[0];
          toggleClass(el, this.options.selectedClass, false);
          multiDragElements.shift();
          dispatchEvent({
            sortable: this.sortable,
            rootEl: this.sortable.el,
            name: 'deselect',
            targetEl: el,
            originalEvent: evt
          });
        }
      },
      _checkKeyDown: function _checkKeyDown(evt) {
        if (evt.key === this.options.multiDragKey) {
          this.multiDragKeyDown = true;
        }
      },
      _checkKeyUp: function _checkKeyUp(evt) {
        if (evt.key === this.options.multiDragKey) {
          this.multiDragKeyDown = false;
        }
      }
    };
    return _extends(MultiDrag, {
      // Static methods & properties
      pluginName: 'multiDrag',
      utils: {
        /**
         * Selects the provided multi-drag item
         * @param  {HTMLElement} el    The element to be selected
         */
        select: function select(el) {
          var sortable = el.parentNode[expando];
          if (!sortable || !sortable.options.multiDrag || ~multiDragElements.indexOf(el)) return;
          if (multiDragSortable && multiDragSortable !== sortable) {
            multiDragSortable.multiDrag._deselectMultiDrag();
            multiDragSortable = sortable;
          }
          toggleClass(el, sortable.options.selectedClass, true);
          multiDragElements.push(el);
        },
        /**
         * Deselects the provided multi-drag item
         * @param  {HTMLElement} el    The element to be deselected
         */
        deselect: function deselect(el) {
          var sortable = el.parentNode[expando],
            index = multiDragElements.indexOf(el);
          if (!sortable || !sortable.options.multiDrag || !~index) return;
          toggleClass(el, sortable.options.selectedClass, false);
          multiDragElements.splice(index, 1);
        }
      },
      eventProperties: function eventProperties() {
        var _this3 = this;
        var oldIndicies = [],
          newIndicies = [];
        multiDragElements.forEach(function (multiDragElement) {
          oldIndicies.push({
            multiDragElement: multiDragElement,
            index: multiDragElement.sortableIndex
          });

          // multiDragElements will already be sorted if folding
          var newIndex;
          if (folding && multiDragElement !== dragEl$1) {
            newIndex = -1;
          } else if (folding) {
            newIndex = index(multiDragElement, ':not(.' + _this3.options.selectedClass + ')');
          } else {
            newIndex = index(multiDragElement);
          }
          newIndicies.push({
            multiDragElement: multiDragElement,
            index: newIndex
          });
        });
        return {
          items: _toConsumableArray(multiDragElements),
          clones: [].concat(multiDragClones),
          oldIndicies: oldIndicies,
          newIndicies: newIndicies
        };
      },
      optionListeners: {
        multiDragKey: function multiDragKey(key) {
          key = key.toLowerCase();
          if (key === 'ctrl') {
            key = 'Control';
          } else if (key.length > 1) {
            key = key.charAt(0).toUpperCase() + key.substr(1);
          }
          return key;
        }
      }
    });
  }
  function insertMultiDragElements(clonesInserted, rootEl) {
    multiDragElements.forEach(function (multiDragElement, i) {
      var target = rootEl.children[multiDragElement.sortableIndex + (clonesInserted ? Number(i) : 0)];
      if (target) {
        rootEl.insertBefore(multiDragElement, target);
      } else {
        rootEl.appendChild(multiDragElement);
      }
    });
  }

  /**
   * Insert multi-drag clones
   * @param  {[Boolean]} elementsInserted  Whether the multi-drag elements are inserted
   * @param  {HTMLElement} rootEl
   */
  function insertMultiDragClones(elementsInserted, rootEl) {
    multiDragClones.forEach(function (clone, i) {
      var target = rootEl.children[clone.sortableIndex + (elementsInserted ? Number(i) : 0)];
      if (target) {
        rootEl.insertBefore(clone, target);
      } else {
        rootEl.appendChild(clone);
      }
    });
  }
  function removeMultiDragElements() {
    multiDragElements.forEach(function (multiDragElement) {
      if (multiDragElement === dragEl$1) return;
      multiDragElement.parentNode && multiDragElement.parentNode.removeChild(multiDragElement);
    });
  }

  Sortable.mount(new AutoScrollPlugin());
  Sortable.mount(Remove, Revert);

  exports.$ = jquery;
  exports.Chart = Chart;
  exports.Fancybox = R;
  exports.Hammer = hammer;
  exports.MultiDrag = MultiDragPlugin;
  exports.Sortable = Sortable;
  exports.dom_utils = dom;
  exports.flvjs = flv;
  exports.jQuery = jquery;
  exports.noUiSlider = nouislider;
  exports.utils = utils;

  return exports;

})({});
//# sourceMappingURL=core.js.map
